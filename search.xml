<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>川西自驾路线</title>
    <url>/articles/2023819b.html</url>
    <content><![CDATA[<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>D1:成都–&gt;巴郎山–&gt;长坪沟–&gt;小金县</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-20 08:20 成都出发</p>
</div></div><div class='timeline-item-content'><p>车程2小时40分钟</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-20 13:00 巴郎山观景台</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250211626.JPG?x-oss-process=style/this0-blog" alt="DSC_3357"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-20 13:30 到达四姑娘山</p>
</div></div><div class='timeline-item-content'><ol>
<li><p>吃饭，休息1小时</p>
</li>
<li><p>打卡长坪沟<br><img src="https://blog-resources.this0.com/image/202403250211809.JPG?x-oss-process=style/this0-blog" alt="DSC_3403"></p>
</li>
</ol>
<p>  <img src="https://blog-resources.this0.com/image/202403250211452.JPG?x-oss-process=style/this0-blog" alt="DSC_3428"></p>
<p>  <img src="https://blog-resources.this0.com/image/202403250211959.JPG?x-oss-process=style/this0-blog" alt="DSC_3479"></p>
<p>  <img src="https://blog-resources.this0.com/image/202403250211081.JPG?x-oss-process=style/this0-blog" alt="DSC_3491"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-20 傍晚 前往小金县</p>
</div></div><div class='timeline-item-content'><p>Day1,End</p>
</div></div></div>

<hr>
<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>D2:小金县–&gt;小桥玩水–&gt;路旁休息–&gt;雪山山脚–&gt;墨石公园</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-20 9:00 小金县途径小桥</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250211072.JPG?x-oss-process=style/this0-blog" alt="DSC_3596"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-21 小桥</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250211089.JPG?x-oss-process=style/this0-blog" alt="DSC_3887"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-21 路旁风景</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250212106.JPG?x-oss-process=style/this0-blog" alt="DSC_4247"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-21 雪山脚下</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250212368.JPG?x-oss-process=style/this0-blog" alt="DSC_4353"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-20 墨石公园</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250212073.JPG?x-oss-process=style/this0-blog" alt="DSC_4460"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212271.JPG?x-oss-process=style/this0-blog" alt="DSC_4536"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-21 塔公草原旁住宿</p>
</div></div><div class='timeline-item-content'><p>Day2,End</p>
</div></div></div>

<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>D3:塔公草原–&gt;新都桥–&gt;鱼子西–&gt;康定</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-22 9:30 塔公草原</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250212128.JPG?x-oss-process=style/this0-blog" alt="DSC_4638"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212618.JPG?x-oss-process=style/this0-blog" alt="DSC_4679"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212880.JPG?x-oss-process=style/this0-blog" alt="DSC_4996"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212056.JPG?x-oss-process=style/this0-blog" alt="DSC_5593"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-22 12:30 新都桥</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250212352.JPG?x-oss-process=style/this0-blog" alt="DSC_5644"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-22 鱼子西</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250212211.JPG?x-oss-process=style/this0-blog" alt="DSC_5789"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212825.JPG?x-oss-process=style/this0-blog" alt="DSC_5906"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212750.JPG?x-oss-process=style/this0-blog" alt="DSC_6094"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212611.JPG?x-oss-process=style/this0-blog" alt="DSC_6171"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212978.JPG?x-oss-process=style/this0-blog" alt="DSC_6291"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212294.JPG?x-oss-process=style/this0-blog" alt="DSC_6300"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-22 流水</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250212457.JPG?x-oss-process=style/this0-blog" alt="DSC_6439"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212982.JPG?x-oss-process=style/this0-blog" alt="DSC_6488"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-22 逗土拨鼠，吹蒲公英</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250212376.JPG?x-oss-process=style/this0-blog" alt="DSC_6503"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212121.JPG?x-oss-process=style/this0-blog" alt="DSC_6505"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212277.JPG?x-oss-process=style/this0-blog" alt="DSC_6507"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212149.JPG?x-oss-process=style/this0-blog" alt="DSC_6508"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212686.JPG?x-oss-process=style/this0-blog" alt="DSC_6509"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212818.JPG?x-oss-process=style/this0-blog" alt="DSC_6516"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-22 康定·七夕夜</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250212965.JPG?x-oss-process=style/this0-blog" alt="DSC_6557"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212025.JPG?x-oss-process=style/this0-blog" alt="DSC_6643"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-23 Day3休息</p>
</div></div><div class='timeline-item-content'><p>Day3,End</p>
</div></div></div>

<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>D4:木格错–&gt;泸定桥–&gt;南桥</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-23 10:00 木格错</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250212774.JPG?x-oss-process=style/this0-blog" alt="DSC_6761"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212961.JPG?x-oss-process=style/this0-blog" alt="DSC_6809"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-23 12:00 泸定桥对面寺庙</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250212945.JPG?x-oss-process=style/this0-blog" alt="DSC_6851"></p>
<p><img src="https://blog-resources.this0.com/image/202403250212841.JPG?x-oss-process=style/this0-blog" alt="DSC_6886"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-23 远观泸定桥</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250212029.JPG?x-oss-process=style/this0-blog" alt="DSC_6870"></p>
<p><img src="https://blog-resources.this0.com/image/202403250213076.JPG?x-oss-process=style/this0-blog" alt="DSC_6967"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-23 都江堰南桥</p>
</div></div><div class='timeline-item-content'><p><img src="https://blog-resources.this0.com/image/202403250213473.JPG?x-oss-process=style/this0-blog" alt="DSC_7240"></p>
<p><img src="https://blog-resources.this0.com/image/202403250213072.JPG?x-oss-process=style/this0-blog" alt="DSC_7193"></p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-08-23 back 成都</p>
</div></div><div class='timeline-item-content'><p>Day4,End</p>
</div></div></div>

]]></content>
      <categories>
        <category>旅游</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h3 id="1-docker的安装与卸载"><a href="#1-docker的安装与卸载" class="headerlink" title="1 docker的安装与卸载"></a>1 docker的安装与卸载</h3><ul>
<li>docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），CE版本是免费的，EE版本是收费的。本次我们使用社区版。</li>
</ul>
<p>docker的安装和卸载可以参考官方文档：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p>
<h4 id="（1）卸载docker："><a href="#（1）卸载docker：" class="headerlink" title="（1）卸载docker："></a>（1）卸载docker：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<h4 id="（2）安装docker："><a href="#（2）安装docker：" class="headerlink" title="（2）安装docker："></a>（2）安装docker：</h4><p>&#x2F;&#x2F;TODO，见站内文章</p>
<h3 id="2-docker镜像操作"><a href="#2-docker镜像操作" class="headerlink" title="2 docker镜像操作"></a>2 docker镜像操作</h3><h4 id="2-1-搜索远程镜像"><a href="#2-1-搜索远程镜像" class="headerlink" title="2.1 搜索远程镜像"></a>2.1 搜索远程镜像</h4><p>相关命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令：</span></span><br><span class="line">docker search</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式：</span></span><br><span class="line">docker search 镜像关键字</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例：搜索镜像名称中包含redis关键字的镜像</span></span><br><span class="line">docker search redis								 </span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739087.png?x-oss-process=style/this0-blog" alt="image-20230717095934771"></p>
<p>列介绍：</p>
<p>1、name：            镜像仓库源名称</p>
<p>2、description：  镜像的描述</p>
<p>3、official:		  是否 docker 官方发布</p>
<p>4、stars: 		    镜像的收藏数，收藏数越多表示此镜像的受欢迎程度越高</p>
<p>5、automated:     是否自动构建</p>
<h4 id="2-2-拉取镜像"><a href="#2-2-拉取镜像" class="headerlink" title="2.2 拉取镜像"></a>2.2 拉取镜像</h4><p>相关命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令:</span> </span><br><span class="line">docker pull</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式: tag表示的镜像的标签，也可以理解为就是镜像的版本</span></span><br><span class="line">docker pull 镜像名称[:tag]		</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例1: 默认拉取的是最新的redis镜像</span></span><br><span class="line">docker pull redis		</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例2: 拉取redis7.0.10镜像，一个镜像到底存在哪些标签，需要上docker hub中进行查看</span></span><br><span class="line">docker pull redis:7.0.10	   </span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739088.png?x-oss-process=style/this0-blog" alt="image-20230717100251996">  </p>
<h4 id="2-3-查看本地镜像"><a href="#2-3-查看本地镜像" class="headerlink" title="2.3 查看本地镜像"></a>2.3 查看本地镜像</h4><p>相关命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令:</span> </span><br><span class="line">docker images			</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例:</span> </span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739089.png?x-oss-process=style/this0-blog" alt="image-20230717100416721">  </p>
<p>列介绍：</p>
<p>1、repository：镜像来源仓库名称</p>
<p>2、tag：		  镜像标签</p>
<p>3、image id：  镜像id</p>
<p>4、created：  创建时间</p>
<p>5、size：		镜像的大小</p>
<h4 id="2-4-删除本地镜像"><a href="#2-4-删除本地镜像" class="headerlink" title="2.4 删除本地镜像"></a>2.4 删除本地镜像</h4><p>相关命令如下所示：</p>
<p>&#x2F;&#x2F;todo docker rmi</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令：</span></span><br><span class="line">docker rmi 		</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除单个镜像(-f 强制删除)：</span></span><br><span class="line">docker rmi  -f 镜像ID</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除多个镜像：</span></span><br><span class="line">docker rmi -f   镜像名1:TAG    镜像名2:TAG</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据镜像的<span class="built_in">id</span>或者镜像的名称进行删除，如果不添加镜像的标签删除的就是最新的镜像</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例:</span> </span><br><span class="line">docker rmi redis:7.0.10				# 删除redis:7.0.10镜像</span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<ul>
<li>根据镜像名称删除</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202405061739090.png?x-oss-process=style/this0-blog" alt="image-20230717100924585">  </p>
<ul>
<li>根据镜像id删除</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202405061739091.png?x-oss-process=style/this0-blog" alt="image-20230717101102741"></p>
<ul>
<li>注意：如果一个镜像存在对应的容器，此时这个镜像是无法进行删除的。</li>
<li>删除所有镜像：</li>
</ul>
<p>&#x2F;&#x2F;TODO docker 全部删除命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -q)			# 慎用</span><br></pre></td></tr></table></figure>



<h4 id="2-5-帮助文档使用"><a href="#2-5-帮助文档使用" class="headerlink" title="2.5 帮助文档使用"></a>2.5 帮助文档使用</h4><p>docker中提供了很多命令，每一个命令也可以加很多的参数选项。把一个命令以及对应的参数选项都记住很显然是不太现实的。可以通过查看docker</p>
<p>帮助文档来学习docker的常用命令以及参数选项的使用。</p>
<p>帮助文档的使用如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询docker可以使用到的命令</span></span><br><span class="line">docker --help</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询images命令的使用文档</span></span><br><span class="line">docker images --help</span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739092.png?x-oss-process=style/this0-blog" alt="image-20230717101244851">  </p>
<h3 id="3-docker容器操作"><a href="#3-docker容器操作" class="headerlink" title="3 docker容器操作"></a>3 docker容器操作</h3><h4 id="3-1-查询容器"><a href="#3-1-查询容器" class="headerlink" title="3.1 查询容器"></a>3.1 查询容器</h4><p>相关命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令：docker ps </span><br><span class="line">格式：docker ps [options]	# 可以添加一些参数选项，如果不添加表示查询本地所有正在运行的容器</span><br><span class="line">示例: docker ps 			# 查看本地正在运行的容器</span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739093.png?x-oss-process=style/this0-blog" alt="image-20230717101615569">  </p>
<p>列介绍：</p>
<p>1、container id：   容器名称</p>
<p>2、image:			  镜像名称</p>
<p>3、command：      容器启动时所执行的命令</p>
<p>4、created：        创建时间</p>
<p>5、status：		  容器状态</p>
<p>6、ports：            端口映射情况</p>
<p>7、names：          容器的名称</p>
<p>常见参数选项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a,--all												# 查询所有的容器，包含未运行的容器</span><br><span class="line">-q,--quiet												# 查询容器的id</span><br><span class="line"></span><br><span class="line">示例1：docker ps -a									  # 查询所有的容器包含未运行的容器</span><br><span class="line">示例2：docker ps -q									  # 查询容器的id	</span><br></pre></td></tr></table></figure>



<h4 id="3-2-创建容器"><a href="#3-2-创建容器" class="headerlink" title="3.2 创建容器"></a>3.2 创建容器</h4><p>&#x2F;&#x2F;TODO docker -it 和docker -d命令</p>
<ul>
<li>容器分类：</li>
</ul>
<p>1、交互型容器：具有和用户交互的输入和输出终端，容器创建后自动进入容器中，退出容器后，容器自动关闭。</p>
<p>2、守护型容器：没有和用户交互终端，需要使用docker exec进入容器，退出后，容器不会关闭。</p>
<ul>
<li>命令介绍：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令:  docker run</span><br><span class="line">格式： docker run [OPTIONS] 镜像的名称:镜像标签/镜像id [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line">类型参数选项：</span><br><span class="line">-i：表示运行容器</span><br><span class="line">-t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</span><br><span class="line">--name :为创建的容器命名。</span><br><span class="line">-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</span><br><span class="line">-d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</span><br><span class="line">-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</span><br></pre></td></tr></table></figure>

<ul>
<li>交互式方式创建容器</li>
</ul>
<p>以交互式方式创建并启动容器，启动完成后，直接进入当前容器。使用exit命令退出容器。需要注意的是以此种方式启动容器，如果退出容器，则容器会进入停止状态，可以理解成交互式容器 是前台容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name=容器名称 镜像名称:标签 /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如：docker run -it --name=mycentos centos:7 /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker run:表示创建容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-it：表示运行容器并进入它的命令行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name=mycentos：给当前的容器命名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos:7：使用该镜像创建</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">准备测试镜像</span></span><br><span class="line">docker pull centos:7</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">交互方式创建</span></span><br><span class="line">docker run -it --name=mycentos centos:7 /bin/bash</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739094.png?x-oss-process=style/this0-blog" alt="image-20230717102654074">  </p>
<p>交互型容器创建好了以后，直接进入到容器的内部了。</p>
<p>退出当前容器：<strong>exit</strong>，退出之后，容器也退出了，没有删除</p>
<p><img src="https://blog-resources.this0.com/image/202405061739095.png?x-oss-process=style/this0-blog" alt="image-20230717102733374"></p>
<ul>
<li>守护式方式创建容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">守护式容器和交互式容器的创建方式区别：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-it 换成 -di</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">去掉后面的 /bin/bash</span></span><br><span class="line">docker run -di --name=容器名称 镜像名称:标签</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如：docker run -di --name=mycentos10 centos:7</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739096.png?x-oss-process=style/this0-blog" alt="image-20230717103015316"></p>
<h4 id="3-3-容器服务管理"><a href="#3-3-容器服务管理" class="headerlink" title="3.3 容器服务管理"></a>3.3 容器服务管理</h4><p>容器管理的相关命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop 容器名称/容器id											# 关闭容器</span><br><span class="line">docker start  容器名称/容器id											# 启动容器</span><br><span class="line">docker restart 容器名称/容器id										# 重启容器</span><br></pre></td></tr></table></figure>



<h4 id="3-4-删除容器"><a href="#3-4-删除容器" class="headerlink" title="3.4 删除容器"></a>3.4 删除容器</h4><p>删除容器的常见命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令: docker rm</span><br><span class="line">格式：docker rm 容器名称/容器的id							#  删除容器</span><br><span class="line">示例：docker rm mycentos10							 #  删除mycentos10容器</span><br></pre></td></tr></table></figure>

<p>注意：上述的命令只能删除已经关闭的容器，如果想删除正在运行的容器，可以通过添加 <strong>-f 参数</strong>进行实现。</p>
<p>删除所有的容器</p>
<p>&#x2F;&#x2F;TODO</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure>



<h4 id="3-5-进入容器"><a href="#3-5-进入容器" class="headerlink" title="3.5 进入容器"></a>3.5 进入容器</h4><p>进入容器命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令：docker exec</span><br><span class="line">格式：docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line">常见的参数选项：												  </span><br><span class="line">-t, --tty														# 分配一个虚拟终端，通常和-i参数一起使用</span><br><span class="line">-i,--interactive												# 把交互界面一直保留，通常和-t参数一起使用</span><br><span class="line"></span><br><span class="line">示例1：docker exec -it mycentos10 /bin/bash				# 进入到容器中同时打开一个shell窗口</span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739097.png?x-oss-process=style/this0-blog" alt="image-20230717103345480">  </p>
<h4 id="3-6-其他命令"><a href="#3-6-其他命令" class="headerlink" title="3.6 其他命令"></a>3.6 其他命令</h4><p>&#x2F;&#x2F;TODO,其他命令，比较多，有docker cp，docker logs，docker inspect</p>
<p>如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f 容器名称/容器的id						# 查询容器内进程日志，-f参数表示实时监控日志信息</span><br><span class="line">docker inspect 容器名称/容器的id						# 查看容器的详情信息</span><br><span class="line">docker cp 											 # 完成容器和宿主机之间的文件copy</span><br><span class="line"></span><br><span class="line">示例1: docker logs -f redis01				   # 实时查看redis01这个容器中的日志信息</span><br><span class="line">示例2: docker inspect redis01				   # 查看容器的详情信息，主要就是：目录映射情况、端口映射情况、ip地址</span><br><span class="line">示例3: docker cp a.txt redis01:/root		   # 把宿主机中a.txt文件拷贝到redis01的root目录中</span><br><span class="line">示例4: docker cp redis01:/root/a.txt .       # 把容器中的root目录下的a.txt文件拷贝到宿主机中当前目录中</span><br></pre></td></tr></table></figure>



<h4 id="3-7-备份与迁移"><a href="#3-7-备份与迁移" class="headerlink" title="3.7 备份与迁移"></a>3.7 备份与迁移</h4><p>&#x2F;&#x2F;TODO docker -i &#x2F;docker -o</p>
<p>对某一个容器修改完毕以后，我们可以把最新的容器部署到其他的环境中。具体的流程操作如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739099.png?x-oss-process=style/this0-blog" alt="image-20230420152250969">  </p>
<p>涉及的docker命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit 容器名称/容器的id 镜像名称			  # 把docker容器保存成一个镜像</span><br><span class="line">docker save -o 镜像tar文件名称 镜像名称/镜像id		 # 把镜像保存为tar文件</span><br><span class="line">docker load -i 镜像tar文件名称							  # 把tar文件恢复成为一个镜像</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit mycentos10 mycentos				     # 将mycentos10容器保存为一个镜像</span><br><span class="line">docker save -o mycentos.tar mycentos 				 # 将mycentos镜像保存为一个tar文件</span><br><span class="line">docker rmi mycentos								     # 删除之前的mycentos镜像</span><br><span class="line">docker load -i mycentos.tar 						 # 将mycentos.tar恢复成一个镜像</span><br></pre></td></tr></table></figure>

<h3 id="4-docker数据卷操作"><a href="#4-docker数据卷操作" class="headerlink" title="4 docker数据卷操作"></a>4 docker数据卷操作</h3><h4 id="4-1-数据卷概述"><a href="#4-1-数据卷概述" class="headerlink" title="4.1 数据卷概述"></a>4.1 数据卷概述</h4><p>思考问题：在Redis容器中存储的数据，如果Redis容器被删除了，数据是否还存在?</p>
<p>解决方案：将数据存储到Linux宿主机的磁盘目录中</p>
<p>数据卷概述：数据卷是docker所提供的一个虚拟目录，这个虚拟目录会对应宿主机的一个真实目录。在创建容器的时候就可以将这个数据卷挂载到容器中的某一个目录下，那么此时在该目录下所产生的数据就会存储到宿主机的目录下，实现了容器和宿主机之间的文件共享。</p>
<p>如下图所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739100.png?x-oss-process=style/this0-blog" alt="image-20230420170343281">  </p>
<h4 id="4-2-常见命令"><a href="#4-2-常见命令" class="headerlink" title="4.2 常见命令"></a>4.2 常见命令</h4><p>&#x2F;&#x2F;TODO，数据卷相关命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">docker volume create 数据卷名称</span><br><span class="line"></span><br><span class="line">docker volume inspect 数据卷名称</span><br><span class="line"></span><br><span class="line">docker volume prune</span><br></pre></td></tr></table></figure>

<h5 id="4-2-1-查看数据卷"><a href="#4-2-1-查看数据卷" class="headerlink" title="4.2.1 查看数据卷"></a>4.2.1 查看数据卷</h5><p>命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739101.png?x-oss-process=style/this0-blog" alt="image-20230420170726620">  </p>
<h5 id="4-2-2-创建数据卷"><a href="#4-2-2-创建数据卷" class="headerlink" title="4.2.2 创建数据卷"></a>4.2.2 创建数据卷</h5><p>命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume create 数据卷名称</span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739102.png?x-oss-process=style/this0-blog" alt="image-20230717105911099"> </p>
<h5 id="4-2-3-查询数据卷详情"><a href="#4-2-3-查询数据卷详情" class="headerlink" title="4.2.3 查询数据卷详情"></a>4.2.3 查询数据卷详情</h5><p>命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume inspect 数据卷名称</span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739103.png?x-oss-process=style/this0-blog" alt="image-20230717105936542"> </p>
<h5 id="4-2-4-删除数据卷"><a href="#4-2-4-删除数据卷" class="headerlink" title="4.2.4 删除数据卷"></a>4.2.4 删除数据卷</h5><p>命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume rm 数据卷名称  # 删除指定的数据卷</span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739104.png?x-oss-process=style/this0-blog" alt="image-20230420171535021"> </p>
<h4 id="4-3-数据卷挂载"><a href="#4-3-数据卷挂载" class="headerlink" title="4.3 数据卷挂载"></a>4.3 数据卷挂载</h4><p>数据卷创建好了以后，在创建容器的时候就可以通过-v参数，将创建好的数据卷挂载到容器中的某一个目录下。</p>
<p>命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">格式: -v 数据卷名称:容器目录</span><br><span class="line">示例：docker run -d --name=redis02 -p 6380:6379 -v redis-data:/data redis:7.0.10</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<p>1、如果数据卷没有提前创建好，那么在创建容器的时候会自动创建对应的数据卷</p>
<p>2、<code>数据卷挂载</code>的时候数据卷名称前面<strong>没有&#x2F;</strong></p>
<p>3、容器目录不存在会自动创建</p>
<p>&#x2F;&#x2F;TODO，数据卷覆盖,和下文的不一样</p>
<p>4、数据卷目录如果不为空，此时会使用数据卷目录内容覆盖容器目录内容</p>
<p>5、数据卷目录如果为空，容器目录不为空，此时就会使用容器目录内容覆盖数据卷目录</p>
<h4 id="4-4-目录挂载"><a href="#4-4-目录挂载" class="headerlink" title="4.4 目录挂载"></a>4.4 目录挂载</h4><p>通过-v参数也可以将宿主机上的某一个目录挂载到容器中的某一个目录下。</p>
<p>命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">格式: -v 宿主机目录:容器目录</span><br><span class="line">示例：docker run -d --name redis03 -p 6381:6379 -v /redis-data:/data redis:7.0.10</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<p>1、如果宿主机目录没有提前创建好，那么在创建容器的时候会自动创建对应的宿主机目录</p>
<p>2、宿主机<code>目录挂载</code>的时候宿主机目录名称前面<strong>有&#x2F;</strong></p>
<p>3、容器目录不存在会自动创建</p>
<p>4、宿主机目录如果不为空，此时会使用宿主机目录内容覆盖容器目录内容</p>
<p>5、宿主机目录如果为空，容器目录不为空，此时就会清空掉容器目录内容</p>
<h3 id="5-Portainer工具"><a href="#5-Portainer工具" class="headerlink" title="5 Portainer工具"></a>5 Portainer工具</h3><p>&#x2F;&#x2F;TODO，移动过去到总集</p>
<h4 id="5-1-安装与启动"><a href="#5-1-安装与启动" class="headerlink" title="5.1 安装与启动"></a>5.1 安装与启动</h4><p>上述对容器和镜像的管理都是基于docker客户端的命令来完成，不太方便。为了方便的对docker中的一些对象(镜像、容器、数据卷…)来进行管理，可以使用Portainer来完成。Portainer是一个<strong>可视化</strong>的容器镜像的图形管理<strong>工具</strong>，利用Portainer可以轻松构建，管理和维护docker环境。</p>
<p>Portainer安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索portainer</span></span><br><span class="line">docker search portainer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull portainer/portainer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建并启动容器,注意需要做一个docker.sock文件的映射，Docker中的Linux域套接字文件，后期portainer会通过这个文件和docker的守护进程进行通讯，管理docker的相关对象</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--restart=always: 表示随着docker服务的启动而启动</span> </span><br><span class="line">docker run -d -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer</span><br></pre></td></tr></table></figure>



<p>访问：ip:9000   第一次登陆需要设置登陆密码，密码不得少于8位</p>
<p><img src="https://blog-resources.this0.com/image/202405061739105.png?x-oss-process=style/this0-blog" alt="image-20230420174124176"> </p>
<p>选择portainer需要管理的环境（本地还是远程）</p>
<p><img src="https://blog-resources.this0.com/image/202405061739106.png?x-oss-process=style/this0-blog" alt="image-20230420174219226"> </p>
<p>Portainer的首页</p>
<p><img src="https://blog-resources.this0.com/image/202405061739107.png?x-oss-process=style/this0-blog" alt="image-20230420174325520"> </p>
<h4 id="5-2-镜像管理"><a href="#5-2-镜像管理" class="headerlink" title="5.2 镜像管理"></a>5.2 镜像管理</h4><p>选择docker服务，进入到如下页面</p>
<p><img src="https://blog-resources.this0.com/image/202405061739108.png?x-oss-process=style/this0-blog" alt="image-20210304194927327"> </p>
<p>点击镜像页签，对镜像进行相关管理</p>
<p><img src="https://blog-resources.this0.com/image/202405061739109.png?x-oss-process=style/this0-blog" alt="image-20210304195150136"> </p>
<h4 id="5-3-容器管理"><a href="#5-3-容器管理" class="headerlink" title="5.3 容器管理"></a>5.3 容器管理</h4><p>在首页选择docker服务，进入到如下页面</p>
<p><img src="https://blog-resources.this0.com/image/202405061739110.png?x-oss-process=style/this0-blog" alt="image-20210304195512501"> </p>
<p> 点击容器页签，对容器进行相关管理</p>
<p><img src="https://blog-resources.this0.com/image/202405061739111.png?x-oss-process=style/this0-blog" alt="image-20230420174914650"> </p>
<p>创建容器</p>
<p><img src="https://blog-resources.this0.com/image/202405061739112.png?x-oss-process=style/this0-blog" alt="image-20230420175300245"> </p>
<p>数据卷挂载：需要先创建数据卷，然后在下方选择volumes完成数据卷的挂载。</p>
<h3 id="6-Spring-Boot项目部署"><a href="#6-Spring-Boot项目部署" class="headerlink" title="6 Spring Boot项目部署"></a>6 Spring Boot项目部署</h3><p>&#x2F;&#x2F;TODO，考虑转移或整合这段</p>
<p>本章节主要讲解的就是如何把一个Spring Boot项目使用docker进行部署，以减少整个项目的维护成本。</p>
<h4 id="6-1-dockerfile"><a href="#6-1-dockerfile" class="headerlink" title="6.1 dockerfile"></a>6.1 dockerfile</h4><h5 id="6-1-1-dockerfile简介"><a href="#6-1-1-dockerfile简介" class="headerlink" title="6.1.1 dockerfile简介"></a>6.1.1 dockerfile简介</h5><p>前面我们所使用的镜像都是别人构建好的，但是别人构建好的镜像不一定能满足我们的需求。为了满足我们自己的某一些需求，此时我们就需要构建自己的镜像，怎么构建？使用dockerfile。</p>
<p>dockerfile就是一个<strong>文本文件</strong>，在这个文本文件中可以使用docker所提供的一些指令来指定我们构建镜像的细节，后期就可以使用这个dockerfile文件来构建自己的镜像。</p>
<p>&#x2F;&#x2F;TODO,dockerfile文件内容，4部分</p>
<p>dockerfile文件内容一般分为4部分：</p>
<p>1、基础镜像信息(必选)</p>
<p>2、维护者信息(可选)</p>
<p>3、镜像操作指令(可选)</p>
<p>4、容器启动时执行的指令(可选)</p>
<p>常用命令</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="left">用法</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">FROM</td>
<td align="left">FROM  image_name:tag</td>
<td align="left">指定一个构建镜像的基础源镜像，如果本地没有就会从公共库中拉取，没有指定镜像的标签会使用默认的latest标签，可以出现多次，如果需要在一个dockerfile中构建多个镜像。</td>
</tr>
<tr>
<td align="center">MAINTAINER</td>
<td align="left">MAINTAINER user_name</td>
<td align="left">描述镜像的创建者，名称和邮箱</td>
</tr>
<tr>
<td align="center">RUN</td>
<td align="left">RUN “command” “param1” “param2”</td>
<td align="left">用来执行一些命令，可以写多条</td>
</tr>
<tr>
<td align="center">ENV</td>
<td align="left">ENV key value</td>
<td align="left">设置容器的环境变量，可以写多条。</td>
</tr>
<tr>
<td align="center">ADD</td>
<td align="left">ADD source_dir&#x2F;file</td>
<td align="left">将宿主机的文件复制到容器内，如果是压缩文件，则复制后自动解压</td>
</tr>
<tr>
<td align="center">ENTRYPOINT</td>
<td align="left">ENTRYPOINT “command” “param1” “param2”</td>
<td align="left">用来指定容器启动时所执行的命令</td>
</tr>
</tbody></table>
<h5 id="6-1-2-入门案例"><a href="#6-1-2-入门案例" class="headerlink" title="6.1.2 入门案例"></a>6.1.2 入门案例</h5><p>需求：使用dockerfile来构建一个包含Jdk17的centos7镜像</p>
<p>分析：</p>
<p>1、基础的镜像的应该选择centos:7</p>
<p>2、在自己所构建的镜像中需要包含Jdk17，就需要把Jdk17添加到centos:7的基础镜像中</p>
<p>3、为了方便的去使用自己构建的镜像中的Jdk17，就需要去配置环境变量</p>
<p>4、因为Jdk17仅仅是一个开发工具，并不是一个服务进程，因此在启动容器的时候可以不指定任何的执行命令</p>
<p>实现步骤：</p>
<p>1、将Jdk17的安装包上传到linux服务器的指定目录下</p>
<p>2、在Jdk17所在的目录下创建一个dockerfile文件</p>
<p>3、使用docker build命令构建镜像</p>
<p>4、使用docker images查看镜像构建情况</p>
<p>5、使用自己所构建的镜像创建容器，测试Jdk17的安装情况</p>
<p>代码实现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、创建目录</span></span><br><span class="line">mkdir –p /usr/local/dockerfilejdk17</span><br><span class="line">cd /usr/local/dockerfilejdk17</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、下载jdk-17_linux-x64_bin.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerfilejdk17目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、在/usr/local/dockerfilejdk17目录下创建dockerfile文件，文件内容如下：</span></span><br><span class="line">vim dockerfile</span><br><span class="line"></span><br><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER atguigu</span><br><span class="line">RUN mkdir -p /usr/local/java</span><br><span class="line">ADD jdk-17_linux-x64_bin.tar.gz /usr/local/java/</span><br><span class="line">ENV JAVA_HOME=/usr/local/java/jdk-17.0.8</span><br><span class="line">ENV PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、执行命令构建镜像；不要忘了后面的那个 .</span></span><br><span class="line">docker build -t centos7-jdk17 .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、查看镜像是否建立完成</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、创建容器</span></span><br><span class="line">docker run -it --name atguigu-centos centos7-jdk17 /bin/bash</span><br></pre></td></tr></table></figure>



<h4 id="6-2-案例介绍与需求分析"><a href="#6-2-案例介绍与需求分析" class="headerlink" title="6.2 案例介绍与需求分析"></a>6.2 案例介绍与需求分析</h4><p>需求：将提供的Spring Boot项目使用容器化进行部署</p>
<p>分析：</p>
<p>1、Spring Boot项目中使用到了Mysql环境，因此需要先使用docker部署mysql环境</p>
<p>2、要将Spring Boot项目使用docker容器进行部署，就需要将Spring Boot项目构建成一个docker镜像</p>
<p>实现步骤：</p>
<p>1、使用docker部署mysql</p>
<p>2、使用dockerfile构建Spring Boot镜像</p>
<ul>
<li>将Spring Boot打包成一个Jar包</li>
<li>把Jar包上传到Linux服务器上</li>
<li>编写dockerfile文件</li>
<li>构建Spring Boot镜像</li>
</ul>
<p>3、创建容器进行测试</p>
<h4 id="6-3-docker部署Mysql"><a href="#6-3-docker部署Mysql" class="headerlink" title="6.3 docker部署Mysql"></a>6.3 docker部署Mysql</h4><p>使用docker部署Mysql步骤如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器。 -e: 设置环境变量	--privileged=<span class="literal">true</span> 开启root用户权限</span></span><br><span class="line">docker run -di --name=mysql -p --restart=always 3306:3306 -v mysql_data:/var/lib/mysql -v mysql_conf:/etc/mysql --privileged=true -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0.30</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">docker exec -it mysql /bin/bash</span><br><span class="line">mysql -uroot -p								# 登录mysql</span><br></pre></td></tr></table></figure>



<p>问题：如果sqlyog出现2058的异常，更换密码的本地校验规则</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>创建对应的数据库和表</p>
<p>创建数据库：docker</p>
<p>创建测试表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_school` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<p>添加测试数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_school` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;学校&#x27;</span>, <span class="string">&#x27;学校地址&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="6-4-dockerfile构建镜像"><a href="#6-4-dockerfile构建镜像" class="headerlink" title="6.4 dockerfile构建镜像"></a>6.4 dockerfile构建镜像</h4><h5 id="6-4-1-项目打包"><a href="#6-4-1-项目打包" class="headerlink" title="6.4.1 项目打包"></a>6.4.1 项目打包</h5><p>具体步骤：</p>
<p>1、在idea中部署资料\基础项目\ebuy-docker项目，并启动项目访问：<a href="http://localhost:8081/">http://localhost:8081/</a></p>
<p>2、执行mvn package命令进行项目打包</p>
<p>3、上传jar包到linux服务器上</p>
<h5 id="6-4-2-dockerfile文件"><a href="#6-4-2-dockerfile文件" class="headerlink" title="6.4.2 dockerfile文件"></a>6.4.2 dockerfile文件</h5><p>dockerfile文件的内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos7-jdk17</span><br><span class="line">MAINTAINER atguigu</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">声明容器内主进程所对应的端口</span></span><br><span class="line">EXPOSE 8081</span><br><span class="line">ADD ebuy-docker-1.0-SNAPSHOT.jar /ebuy-docker-1.0-SNAPSHOT.jar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">相当于windows中的<span class="built_in">cd</span>命令</span></span><br><span class="line">WORKDIR /      </span><br><span class="line">ENTRYPOINT [&quot;java&quot; , &quot;-jar&quot; , &quot;ebuy-docker-1.0-SNAPSHOT.jar&quot;]</span><br></pre></td></tr></table></figure>

<p>目录结构如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739113.png?x-oss-process=style/this0-blog" alt="image-20230424104219638"> </p>
<h5 id="6-4-3-构建镜像"><a href="#6-4-3-构建镜像" class="headerlink" title="6.4.3 构建镜像"></a>6.4.3 构建镜像</h5><p>命令如下所示： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t ebuy-docker:v1.0 .</span><br></pre></td></tr></table></figure>

<p>执行效果如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739114.png?x-oss-process=style/this0-blog" alt="image-20230717113801147"> </p>
<h4 id="6-5-创建容器"><a href="#6-5-创建容器" class="headerlink" title="6.5 创建容器"></a>6.5 创建容器</h4><p>命令如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name ebuy-docker -p 8081:8081 ebuy-docker:v1.0</span><br></pre></td></tr></table></figure>

<p>访问测试: <a href="http://192.168.6.131:8081/">http://192.168.6.131:8081</a></p>
<h3 id="7-Maven的docker插件"><a href="#7-Maven的docker插件" class="headerlink" title="7 Maven的docker插件"></a>7 Maven的docker插件</h3><p>刚才的构建过程是手动镜像构建的过程。使用Maven的docker插件可以实现镜像的自动化部署。</p>
<p>步骤：</p>
<p>1、在pom.xml文件中添加Maven的docker插件</p>
<p>2、开启docker服务端的远程访问</p>
<p>3、在工程的根目录下创建dockerfile文件</p>
<p>4、使用maven的打包命令进行打包</p>
<p>5、创建容器并访问</p>
<p>实操：</p>
<p>1、在pom.xml文件中添加Maven的docker插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将插件绑定在某个phase执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>build-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--将插件绑定在package这个phase(阶段)上。也就是说，用户只需执行mvn package，就会自动执行mvn docker:build--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定生成的镜像名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定标签,也就是版本号,可以自定义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>v2.0<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--指定远程 docker api地址 也就是服务器ip+docker的端口号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://192.168.6.131:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定 dockerfile 路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 是否跳过docker构建 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">skipDockerBuild</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skipDockerBuild</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、docker服务端开启远程访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改该文件</span></span><br><span class="line">vim /lib/systemd/system/docker.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">找到ExecStart行，修改成如下内容</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload				#重启守护进程</span><br><span class="line">systemctl restart docker			#重启docker</span><br></pre></td></tr></table></figure>

<p>说明：<code>2375端口是Docker的API端口</code>，它允许开发者通过RESTful API进行容器和镜像的管理</p>
<p>3、编写dockerfile文件</p>
<p>注意：</p>
<p>1、该文件的位置必须是和pom.xml处于同一个目录</p>
<p>2、关闭防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos7-jdk17</span><br><span class="line">MAINTAINER this0</span><br><span class="line">EXPOSE 8081</span><br><span class="line">ADD target/ebuy-docker-1.0-SNAPSHOT.jar /ebuy-docker-1.0-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">WORKDIR /</span><br><span class="line">ENTRYPOINT [&quot;java&quot; , &quot;-jar&quot; , &quot;ebuy-docker-1.0-SNAPSHOT.jar&quot;]</span><br></pre></td></tr></table></figure>

<p>4、执行maven的打包命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean package -DskipTests								# 打包跳过测试</span><br><span class="line">mvn clean package -DskipTests -DskipdockerBuild				# 打包跳过测试的同时提高构建</span><br></pre></td></tr></table></figure>

<p>5、创建容器并进行访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name ebuy-docker -p 8082:8081 ebuy-docker:latest</span><br></pre></td></tr></table></figure>



<p>&#x2F;&#x2F;TODO,后面再看下面的内容</p>
<h1 id="8-docker-compose"><a href="#8-docker-compose" class="headerlink" title="8 docker compose"></a>8 docker compose</h1><h2 id="8-1-docker-compose简介"><a href="#8-1-docker-compose简介" class="headerlink" title="8.1 docker compose简介"></a>8.1 docker compose简介</h2><p>1、Docker Compose是一个工具，用于定义和运行多容器应用程序的工具；</p>
<p>2、Docker Compose通过yml文件定义多容器的docker应用；</p>
<p>3、Docker Compose通过一条命令根据yml文件的定义去创建或管理多容器；</p>
<p>如下图所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739116.png?x-oss-process=style/this0-blog" alt="image-20230424160221537"> </p>
<p>Docker Compose 是用来做Docker 的多容器控制，有了 Docker Compose 你可以把所有繁复的 Docker 操作全都一条命令，自动化的完成。</p>
<p>官网地址：<a href="https://docs.docker.com/compose/install/linux/">https://docs.docker.com/compose/install/linux/</a></p>
<h2 id="8-2-下载与安装"><a href="#8-2-下载与安装" class="headerlink" title="8.2 下载与安装"></a>8.2 下载与安装</h2><p>下载与安装：</p>
<ul>
<li>在安装docker时候已经完成了安装，直接查看版本号，查看是否安装成功</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建指定目录存储docker compose</span></span><br><span class="line">mkdir -p /usr/local/lib/docker/cli-plugins</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载并移动（该指令如果执行不好使，多执行几次，或者多开几种终端再执行几次）</span></span><br><span class="line">curl -SL https://github.com/docker/compose/releases/download/v2.14.2/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给docker-compose文件赋予可执行权限</span></span><br><span class="line">sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker compose的版本</span></span><br><span class="line">docker compose version</span><br></pre></td></tr></table></figure>



<h2 id="8-3-入门案例"><a href="#8-3-入门案例" class="headerlink" title="8.3 入门案例"></a>8.3 入门案例</h2><p>需求：使用docker compose部署redis</p>
<p>docker-compose.yml文件的内容如下所示：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:7.0.10</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">redis-data:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>docker compose相关命令：  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动容器(如果不存在容器就创建、存在则修改)</span></span><br><span class="line">docker compose -f docker-compose.yml up -d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有容器</span></span><br><span class="line">docker compose -f docker-compose.yml down</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止所有容器</span></span><br><span class="line">docker compose -f docker-compose.yml stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动所有容器</span></span><br><span class="line">docker compose -f docker-compose.yml start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启所有容器</span></span><br><span class="line">docker compose -f docker-compose.yml restart</span><br></pre></td></tr></table></figure>

<p>docker compose文件中其他的常见指令参考官方文档：<a href="https://docs.docker.com/compose/compose-file/05-services/">https://docs.docker.com/compose/compose-file/05-services/</a></p>
<h2 id="8-4-编排Spring-Boot项目"><a href="#8-4-编排Spring-Boot项目" class="headerlink" title="8.4 编排Spring Boot项目"></a>8.4 编排Spring Boot项目</h2><p>需求：使用docker compose部署第六章的spring boot项目</p>
<p>docker-compose.yml文件的内容如下所示：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0.30</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_conf:/etc/mysql</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;MYSQL_ROOT_PASSWORD=1234&quot;</span></span><br><span class="line">  <span class="attr">ebuy:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ebuy</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ebuy-docker</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8081:8081&quot;</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">mysql_conf:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>



<h1 id="9-docker镜像仓库"><a href="#9-docker镜像仓库" class="headerlink" title="9 docker镜像仓库"></a>9 docker镜像仓库</h1><h2 id="9-1-镜像仓库简介"><a href="#9-1-镜像仓库简介" class="headerlink" title="9.1 镜像仓库简介"></a>9.1 镜像仓库简介</h2><p>镜像仓库作用：存储镜像，可以通过镜像仓库实现镜像的共享</p>
<p>镜像仓库的使用流程：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739117.png?x-oss-process=style/this0-blog" alt="image-20230424164001006"> </p>
<p>镜像仓库分类：</p>
<p>1、公有镜像仓库：可以理解成云仓库、公有仓库，是由某个组织、公司维护的仓库，对互联网开放，所有人共享。如官方的仓库docker hub。</p>
<p>2、私有镜像仓库：不对外开放。一般情况下只在公司内网中使用，用于加快镜像拉取速度、维护公司资产。</p>
<p>私有镜像仓库种类：</p>
<p>1、Registry是Docker自带的镜像仓库，部署运行非常简洁，非常适合在测试时使用。</p>
<p>2、Harbor</p>
<h2 id="9-2-Harbor简介"><a href="#9-2-Harbor简介" class="headerlink" title="9.2 Harbor简介"></a>9.2 Harbor简介</h2><p>Harbor是VMware公司开源的企业级DockerRegistry项目，其目标是帮助用户迅速搭建一个企业级的Dockerregistry服务。它以Docker公司开源的registry为基础，提供了管理UI，基于角色的访问控制(Role Based Access Control)，AD&#x2F;LDAP集成、以及审计日志(Auditlogging) 等企业用户需求的功能，同时还原生支持中文。</p>
<h2 id="9-3-下载与安装"><a href="#9-3-下载与安装" class="headerlink" title="9.3 下载与安装"></a>9.3 下载与安装</h2><p>Harbor被部署为多个Docker容器，因此可以部署在任何支持Docker的Linux服务器上，且需要Docker和Docker Compose才能安装。</p>
<h3 id="9-3-1-下载"><a href="#9-3-1-下载" class="headerlink" title="9.3.1 下载"></a>9.3.1 下载</h3><p>下载地址：<a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p>
<p><img src="https://blog-resources.this0.com/image/202405061739118.png?x-oss-process=style/this0-blog" alt="image-20230424165240085"> </p>
<p>这里我们下载在线安装包：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> https://github.com/goharbor/harbor/releases/download/v2.<span class="number">8</span>.<span class="number">0</span>/harbor-online-installer-v2.<span class="number">8</span>.<span class="number">0</span>.tgz</span><br></pre></td></tr></table></figure>

<h3 id="9-3-2-安装"><a href="#9-3-2-安装" class="headerlink" title="9.3.2 安装"></a>9.3.2 安装</h3><p>具体步骤如下所示：</p>
<p><strong>1、解压并修改配置文件</strong></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">tar -zxvf harbor-online-installer-v2<span class="number">.8</span><span class="number">.0</span>.tgz     <span class="meta"># 解压tgz包</span></span><br><span class="line"><span class="keyword">cp</span> harbor.yml.tmpl harbor.yml                    <span class="meta"># 创建一个配置文件</span></span><br><span class="line">vim harbor.yml                                   <span class="meta"># 修改配置文件</span></span><br></pre></td></tr></table></figure>

<p>配置的文件的修改如下所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739119.png?x-oss-process=style/this0-blog" alt="image-20230725123018878"></p>
<p><strong>2、启动Harbor</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、 进入到Harbor的解压目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、执行安装脚本</span></span><br><span class="line">sh install.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意：该执行依赖docker-compose,必须先安装docker-compose</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202405061739120.png?x-oss-process=style/this0-blog" alt="image-20230725114808111"></p>
<p><img src="https://blog-resources.this0.com/image/202405061739121.png?x-oss-process=style/this0-blog" alt="image-20230725122551186"></p>
<p>注意：如果安装的时候报错了，可以给docker配置多个镜像地址：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编辑文件</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件内容</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span><span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span><span class="string">&quot;http://f1361db2.m.daocloud.io&quot;</span><span class="punctuation">,</span><span class="string">&quot;https://mirror.ccs.tencentyun.com&quot;</span><span class="punctuation">,</span><span class="string">&quot;https://ujry6exw.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>3、启动关闭命令</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker compose <span class="operator">-f</span> docker<span class="literal">-compose</span>.yml up <span class="literal">-d</span>            启动 Harbor</span><br><span class="line">docker compose <span class="operator">-f</span> docker<span class="literal">-compose</span>.yml stop             关闭 Harbor</span><br></pre></td></tr></table></figure>

<p><strong>4、访问Harbor</strong></p>
<ul>
<li>访问地址：<a href="http://192.168.136.131/">http://192.168.136.131/</a></li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202405061739122.png?x-oss-process=style/this0-blog" alt="image-20230725114929808"></p>
<ul>
<li>用户名&#x2F;密码：admin&#x2F;Harbor12345</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202405061739123.png?x-oss-process=style/this0-blog" alt="image-20230725115003967"></p>
<h2 id="9-4-Harbor使用"><a href="#9-4-Harbor使用" class="headerlink" title="9.4 Harbor使用"></a>9.4 Harbor使用</h2><h3 id="9-4-1-上传镜像"><a href="#9-4-1-上传镜像" class="headerlink" title="9.4.1 上传镜像"></a>9.4.1 上传镜像</h3><p>需求：将本地的ebuy-docker镜像上传到Harbor中</p>
<p>实现步骤：</p>
<p>1、在Harbor上创建一个项目</p>
<p><img src="https://blog-resources.this0.com/image/202405061739124.png?x-oss-process=style/this0-blog" alt="image-20230424171918223"> </p>
<p>2、docker添加安全访问权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑/etc/docker/daemon.json文件</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加安全访问权限</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot;:[&quot;http://192.168.6.131&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启Docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>3、推送docker镜像到该项目中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login -u admin -p Harbor12345 192.168.6.131         			 # 登录到Harbor</span><br><span class="line">docker tag ebuy-docker 192.168.6.131/ebuy-docker/ebuy-docker:latest    # 给镜像重新打一个标签</span><br><span class="line">docker push 192.168.6.131/ebuy-docker/ebuy-docker:latest               # 推送镜像到Harbor中</span><br></pre></td></tr></table></figure>

<p>推送完毕以后，在ebuy-docker项目中会自动创建一个ebuy-docker的镜像仓库：</p>
<p><img src="https://blog-resources.this0.com/image/202405061739125.png?x-oss-process=style/this0-blog" alt="image-20230424172715032"> </p>
<h3 id="9-4-2-拉取镜像"><a href="#9-4-2-拉取镜像" class="headerlink" title="9.4.2 拉取镜像"></a>9.4.2 拉取镜像</h3><p>命令操作如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login -u admin -p Harbor12345 192.168.6.131         # 登录到Harbor</span><br><span class="line">docker pull 192.168.136.142/ebuy-docker/ebuy-docker:latest   # 拉取镜像</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The initial password of Harbor admin</span></span><br><span class="line"><span class="comment"># It only works in first time to install harbor</span></span><br><span class="line"><span class="comment"># Remember Change the admin password from UI after launching Harbor.</span></span><br><span class="line"><span class="attribute">harbor_admin_password</span>: Harbor12345</span><br><span class="line">译文：</span><br><span class="line"><span class="comment">#海港管理员的初始密码</span></span><br><span class="line"><span class="comment">#它只适用于第一次安装港口</span></span><br><span class="line"><span class="comment">#记住在启动Harbor后从UI更改admin密码。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>docker安装nacos</title>
    <url>/articles/b2cc0cbb.html</url>
    <content><![CDATA[<h3 id="1-新建nacos文件目录"><a href="#1-新建nacos文件目录" class="headerlink" title="1 新建nacos文件目录"></a>1 新建nacos文件目录</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/usr/</span>local<span class="regexp">/SDK_YPT/</span>nacos<span class="regexp">/logs/</span>                      <span class="comment">#新建logs目录</span></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="regexp">/usr/</span>local<span class="regexp">/SDK_YPT/</span>nacos<span class="regexp">/init.d/</span>         </span><br></pre></td></tr></table></figure>

<h3 id="2-修改nacos配置文件"><a href="#2-修改nacos配置文件" class="headerlink" title="2 修改nacos配置文件"></a>2 修改nacos配置文件</h3><p>vim &#x2F;usr&#x2F;local&#x2F;SDK_YPT&#x2F;nacos&#x2F;init.d&#x2F;custom.properties  </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="attr">server.servlet.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">10242  #nacos端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://数据库ip:端口/数据库名?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true #这里需要修改端口</span></span><br><span class="line"><span class="attr">db.user</span>=<span class="string">root #数据库用户名</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">密码 #数据库密码</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nacos.cmdb.dumpTaskInterval</span>=<span class="string">3600</span></span><br><span class="line"><span class="attr">nacos.cmdb.eventTaskInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">nacos.cmdb.labelTaskInterval</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">nacos.cmdb.loadDataAtStart</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">management.metrics.export.elastic.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">management.metrics.export.influx.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.pattern</span>=<span class="string">%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i</span></span><br><span class="line"><span class="attr">nacos.security.ignore.urls</span>=<span class="string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/login,/v1/console/health/**,/v1/cs/**,/v1/ns/**,/v1/cmdb/**,/actuator/**,/v1/console/server/**</span></span><br><span class="line"><span class="attr">nacos.naming.distro.taskDispatchThreadCount</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">nacos.naming.distro.taskDispatchPeriod</span>=<span class="string">200</span></span><br><span class="line"><span class="attr">nacos.naming.distro.batchSyncKeyCount</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">nacos.naming.distro.initDataRatio</span>=<span class="string">0.9</span></span><br><span class="line"><span class="attr">nacos.naming.distro.syncRetryDelay</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">nacos.naming.data.warmup</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">nacos.naming.expireInstance</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h3 id="3-导入nacos数据库"><a href="#3-导入nacos数据库" class="headerlink" title="3 导入nacos数据库"></a>3 导入nacos数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">`md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">`gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">`src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">`app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">`c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`c_schema` text,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">`datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">`content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">`gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">`app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">`content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">`beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">`md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">`gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">`src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">`tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">`app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">`content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">`md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">`gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">`src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">`src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">`tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">`data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">`nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">`group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">`quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">`usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">`max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">`gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">`content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">`gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">`src_user` text,</span><br><span class="line">`src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">`quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">`usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">`max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">`max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">`max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">`gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">`tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">`tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">`tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">`create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">`gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">enabled <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> roles (</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">role <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">constraint</span> uk_username_role <span class="keyword">UNIQUE</span> (username,role)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> permissions (</span><br><span class="line">role <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">resource <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">action <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">constraint</span> uk_role_permission <span class="keyword">UNIQUE</span> (role,resource,action)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="4-启动nacos容器"><a href="#4-启动nacos容器" class="headerlink" title="4 启动nacos容器"></a>4 启动nacos容器</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">docker</span>  <span class="string">run \</span></span><br><span class="line"><span class="string">--name nacos -d \</span></span><br><span class="line"><span class="string">-p 服务器nacos端口:8848 \</span></span><br><span class="line"><span class="string">--privileged=true \</span></span><br><span class="line"><span class="string">--restart=always \</span></span><br><span class="line"><span class="string">-e JVM_XMS=256m \</span></span><br><span class="line"><span class="string">-e JVM_XMX=256m \</span></span><br><span class="line"><span class="string">-e MODE=standalone \</span></span><br><span class="line"><span class="string">-e PREFER_HOST_MODE=hostname \</span></span><br><span class="line"><span class="string">-v /usr/local/SDK_YPT/nacos/logs:/home/nacos/logs \</span></span><br><span class="line"><span class="string">-v /usr/local/SDK_YPT/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties \</span></span><br><span class="line"><span class="string">nacos/nacos-server</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>nacos</tag>
        <tag>服务器运维</tag>
      </tags>
  </entry>
  <entry>
    <title>gateway网关</title>
    <url>/articles/1a1a324a.html</url>
    <content><![CDATA[<p><img src="http://cdn.this0.com/blog/img/image-20240222223035276.png?OSSAccessKeyId=LTAI5tAje5MhbPSKCC6QdGZb&Expires=9000000001&Signature=q7ekxWc5IZkeLPkAgAfein3XBEU=&x-oss-process=style/cdn.this0" alt="image-20240222223035276"></p>
<p>缺点</p>
<p><img src="http://cdn.this0.com/blog/img/image-20240222223408937.png" alt="image-20240222223408937"></p>
<h3 id="1-三大核心概念"><a href="#1-三大核心概念" class="headerlink" title="1 三大核心概念"></a>1 三大核心概念</h3><p>路由</p>
<p>断言</p>
<p>过滤</p>
<h3 id="2-工作流程"><a href="#2-工作流程" class="headerlink" title="2 工作流程"></a>2 工作流程</h3><h3 id="3-通过yaml配置静态路由"><a href="#3-通过yaml配置静态路由" class="headerlink" title="3 通过yaml配置静态路由"></a>3 通过yaml配置静态路由</h3><h4 id="1-网关部分yml配置"><a href="#1-网关部分yml配置" class="headerlink" title="1 网关部分yml配置"></a>1 网关部分yml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:9001</span>          <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/nacos1/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:9002</span>          <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/nacos2/**</span>        <span class="comment"># 断言，路径相匹配的进行路由</span></span><br></pre></td></tr></table></figure>

<h4 id="2-路由使用说明"><a href="#2-路由使用说明" class="headerlink" title="2 路由使用说明"></a>2 路由使用说明</h4><p>predicates是断言，请求路径匹配，比如，请求<a href="http://localhost:9527/payment/nacos1/1%EF%BC%8C%E5%8C%B9%E9%85%8D%E6%96%AD%E8%A8%80%EF%BC%8C%E8%B7%B3%E8%BD%AC%E5%88%B0">http://localhost:9527/payment/nacos1/1，匹配断言，跳转到</a> <a href="http://localhost:9001/payment/nacos1/1">http://localhost:9001/payment/nacos1/1</a></p>
<h3 id="4-配置类配置静态路由"><a href="#4-配置类配置静态路由" class="headerlink" title="4 配置类配置静态路由"></a>4 配置类配置静态路由</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GateWayConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span>&#123;</span><br><span class="line">        RouteLocatorBuilder.<span class="type">Builder</span> <span class="variable">routes</span> <span class="operator">=</span> routeLocatorBuilder.routes();</span><br><span class="line">        routes.route(<span class="string">&quot;path_route_this0&quot;</span>,</span><br><span class="line">                r-&gt;r.path(<span class="string">&quot;&quot;</span>)    <span class="comment">//function函数</span></span><br><span class="line">                        .uri(<span class="string">&quot;http://news.baidu.com&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-动态路由"><a href="#5-动态路由" class="headerlink" title="5 动态路由"></a>5 动态路由</h3><h4 id="1-网关配置"><a href="#1-网关配置" class="headerlink" title="1 网关配置"></a>1 网关配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line"><span class="comment">#          uri: http://localhost:9001          #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span></span><br><span class="line">            <span class="string">lb://nacos-payment-provider</span> <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/nacos/**</span>         <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span> <span class="comment">#payment_route    #路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line"><span class="comment">#          uri: http://localhost:9002          #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://nacos-payment-provider</span> <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/nacos/**</span>        <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">42.194</span><span class="number">.239</span><span class="number">.199</span><span class="string">:10242</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>微服务1，9001端口，生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(  &quot;/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nacos成功注册,服务端口: &quot;</span> + serverPort + <span class="string">&quot;\t id：&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>微服务2，9002端口，生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nacos成功注册,服务端口: &quot;</span> + serverPort + <span class="string">&quot;\t id：&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>微服务3，83端口，消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nacos registry, serverPort: &quot;</span> + serverPort + <span class="string">&quot;\t id&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-常见断言和过滤器-TODO"><a href="#6-常见断言和过滤器-TODO" class="headerlink" title="6 常见断言和过滤器&#x2F;&#x2F;TODO"></a>6 常见断言和过滤器&#x2F;&#x2F;TODO</h3>]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>gateway</tag>
        <tag>网关</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>微服务项目架构搭建</title>
    <url>/articles/40c5a151.html</url>
    <content><![CDATA[<h3 id="1-架构-TODO，未完成"><a href="#1-架构-TODO，未完成" class="headerlink" title="1 架构&#x2F;&#x2F;TODO，未完成"></a>1 架构&#x2F;&#x2F;TODO，未完成</h3><p><img src="https://blog-resources.this0.com/image/202405082146973.png?x-oss-process=style/this0-blog" alt="image-20240221023258528"></p>
<h3 id="2-软件环境"><a href="#2-软件环境" class="headerlink" title="2 软件环境"></a>2 软件环境</h3><h4 id="1-nacos"><a href="#1-nacos" class="headerlink" title="1 nacos"></a>1 nacos</h4><h4 id="2-mysql"><a href="#2-mysql" class="headerlink" title="2 mysql"></a>2 mysql</h4><h3 id="3-父模块"><a href="#3-父模块" class="headerlink" title="3 父模块"></a>3 父模块</h3><p>进行统一版本管理</p>
<h4 id="1-包含依赖"><a href="#1-包含依赖" class="headerlink" title="1 包含依赖"></a>1 包含依赖</h4><p>管理了12个常用依赖，包含以下依赖</p>
<p>springcloud-alibaba</p>
<p>springcloud</p>
<p>bootstrap</p>
<p>nacos-discovery</p>
<p>nacos-config</p>
<p>sentinel</p>
<p>zipkin</p>
<p>mybatis-plus</p>
<p>mysql-connector-j</p>
<p>lombok</p>
<p>knife4j</p>
<p>fastjson2</p>
<p>jjwt</p>
<p>redisson</p>
<p>httpclient5</p>
<h4 id="2-依赖说明："><a href="#2-依赖说明：" class="headerlink" title="2 依赖说明："></a>2 依赖说明：</h4><p>springcloud-alibaba，nacos-discovery，nacos-config，sentinel 这4个组件使用相同版本号</p>
<h3 id="4-子模块"><a href="#4-子模块" class="headerlink" title="4 子模块"></a>4 子模块</h3><p>子模块包含common模块，model模块，service模块</p>
<h4 id="1-common模块"><a href="#1-common模块" class="headerlink" title="1 common模块"></a>1 common模块</h4><p>common模块包含common-util和service-util</p>
<p>common-util提供异常结果处理，统一返回结果集，和工具类</p>
<p>service-util提供组件配置类</p>
<h5 id="1-common父模块"><a href="#1-common父模块" class="headerlink" title="1 common父模块"></a>1 common父模块</h5><h6 id="1-作用"><a href="#1-作用" class="headerlink" title="1 作用"></a>1 作用</h6><p>负责管理common的子模块</p>
<h6 id="2-依赖"><a href="#2-依赖" class="headerlink" title="2 依赖"></a>2 依赖</h6><p>springboot-web</p>
<p>lombok</p>
<p>knife4j</p>
<p>fastjson2</p>
<p>openfeign</p>
<h5 id="2-common-util"><a href="#2-common-util" class="headerlink" title="2 common-util"></a>2 common-util</h5><h6 id="1-作用-1"><a href="#1-作用-1" class="headerlink" title="1 作用"></a>1 作用</h6><p>提供全局工具类</p>
<p>包含：异常处理，全局统一返回结果，公共工具类</p>
<h6 id="2-依赖："><a href="#2-依赖：" class="headerlink" title="2 依赖："></a>2 依赖：</h6><p>client5</p>
<h5 id="3-service-util"><a href="#3-service-util" class="headerlink" title="3 service-util"></a>3 service-util</h5><h6 id="1-作用-2"><a href="#1-作用-2" class="headerlink" title="1 作用"></a>1 作用</h6><p>提供服务需要的工具类</p>
<p>包含：缓存，配置类，全局常量，handler，</p>
<h6 id="2-依赖：-1"><a href="#2-依赖：-1" class="headerlink" title="2 依赖："></a>2 依赖：</h6><p>common-util</p>
<p>redis</p>
<p>redisson</p>
<p>mybatis-plus</p>
<p>bootstrap</p>
<h4 id="2-model模块"><a href="#2-model模块" class="headerlink" title="2 model模块"></a>2 model模块</h4><h5 id="1-作用-3"><a href="#1-作用-3" class="headerlink" title="1 作用"></a>1 作用</h5><p>负责管理实体类</p>
<h5 id="2-依赖-1"><a href="#2-依赖-1" class="headerlink" title="2 依赖"></a>2 依赖</h5><p>lombok</p>
<p>mp</p>
<p>knife4j</p>
<p>es</p>
<p>mongodb</p>
<h3 id="3-service模块"><a href="#3-service模块" class="headerlink" title="3 service模块"></a>3 service模块</h3><h4 id="1-作用-4"><a href="#1-作用-4" class="headerlink" title="1 作用"></a>1 作用</h4><p>service模块管理所有业务，在service模块下建立新模块再进行业务开发</p>
<h4 id="2-依赖-2"><a href="#2-依赖-2" class="headerlink" title="2 依赖"></a>2 依赖</h4><p>service-util</p>
<p>model</p>
<p>springboot-web</p>
<p>mp</p>
<p>mysql-connector-j</p>
<p>服务注册和服务配置</p>
<p>openfeign</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<p>GuiguException</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.spzx.service.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.spzx.model.vo.common.ResultCodeEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： YuPengtao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>： 2024/5/11 下午11:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Describe</span>：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuiguException</span> <span class="title">extends</span> <span class="title">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;          <span class="comment">// 错误状态码</span></span><br><span class="line">    <span class="keyword">private</span> String message;        <span class="comment">// 错误消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResultCodeEnum resultCodeEnum;     <span class="comment">// 封装错误状态码和错误消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> GuiguException(ResultCodeEnum resultCodeEnum) &#123;</span><br><span class="line">        <span class="keyword">this</span>.resultCodeEnum = resultCodeEnum;</span><br><span class="line">        <span class="keyword">this</span>.code = resultCodeEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message = resultCodeEnum.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> GuiguException(Integer code, String message) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2 GlobalExceptionHandler</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.spzx.service.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.spzx.model.vo.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.this0.spzx.service.exception.GuiguException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result error(Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.build(<span class="literal">null</span>, <span class="number">201</span>, e.getMessage());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(GuiguException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result error(GuiguException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> Result.build(<span class="literal">null</span>, e.getResultCodeEnum());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3 统一结果处理集</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.spzx.model.vo.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Schema(description = <span class="string">&quot;响应结果实体类&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回码</span></span><br><span class="line">    <span class="meta">@Schema(description = <span class="string">&quot;业务状态码&quot;</span>)</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回消息</span></span><br><span class="line">    <span class="meta">@Schema(description = <span class="string">&quot;响应消息&quot;</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回数据</span></span><br><span class="line">    <span class="meta">@Schema(description = <span class="string">&quot;业务数据&quot;</span>)</span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有化构造</span></span><br><span class="line">    <span class="keyword">private</span> Result() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回数据</span></span><br><span class="line">    <span class="keyword">public</span> static &lt;T&gt; Result&lt;T&gt; build(T body, Integer code, String message) &#123;</span><br><span class="line">        Result&lt;T&gt; result = new Result&lt;&gt;();</span><br><span class="line">        result.setData(body);</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过枚举构造Result对象</span></span><br><span class="line">    <span class="keyword">public</span> static &lt;T&gt; Result build(T body , ResultCodeEnum resultCodeEnum) &#123;</span><br><span class="line">        <span class="keyword">return</span> build(body , resultCodeEnum.getCode() , resultCodeEnum.getMessage()) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SpringBoot项目Demo-微头条</title>
    <url>/articles/5c589848.html</url>
    <content><![CDATA[<h1 id="SpringBoot项目Demo-微头条"><a href="#SpringBoot项目Demo-微头条" class="headerlink" title="SpringBoot项目Demo-微头条"></a>SpringBoot项目Demo-微头条</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E4%B8%80%E5%BE%AE%E5%A4%B4%E6%9D%A1%E6%A1%88%E4%BE%8B%E4%BB%8B%E7%BB%8D">一、微头条案例介绍</a><ul>
<li><a href="#%E5%BE%AE%E5%A4%B4%E6%9D%A1%E4%B8%9A%E5%8A%A1%E7%AE%80%E4%BB%8B">微头条业务简介</a></li>
<li><a href="#%E6%8A%80%E6%9C%AF%E6%A0%88%E4%BB%8B%E7%BB%8D">技术栈介绍</a></li>
<li><a href="#%E5%8A%9F%E8%83%BD%E5%B1%95%E7%A4%BA">功能展示</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C%E5%BE%AE%E5%A4%B4%E6%9D%A1%E5%89%8D%E7%AB%AF%E6%90%AD%E5%BB%BA">二、微头条前端搭建</a></li>
<li><a href="#%E4%B8%89%E5%9F%BA%E4%BA%8ESpringBoot%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84">三、基于SpringBoot搭建项目基础架构</a><ul>
<li><a href="#1-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C">1. 数据库脚本执行</a></li>
<li><a href="#2-%E6%90%AD%E5%BB%BASprintBoot%E5%B7%A5%E7%A8%8B">2. 搭建SprintBoot工程</a></li>
<li><a href="#3-MybatisX%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B">3. MybatisX逆向工程</a></li>
</ul>
</li>
<li><a href="#%E5%9B%9B%E5%90%8E%E5%8F%B0%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91">四、后台功能开发</a><ul>
<li><a href="#41-%E7%94%A8%E6%88%B7%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91">4.1 用户模块开发</a></li>
<li><a href="#42-%E9%A6%96%E9%A1%B5%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91">4.2 首页模块开发</a></li>
<li><a href="#43-%E5%A4%B4%E6%9D%A1%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91">4.3 头条模块开发</a></li>
</ul>
</li>
<li><a href="#%E4%BA%94%E5%89%8D%E5%90%8E%E7%AB%AF%E8%81%94%E8%B0%83">五、前后端联调</a></li>
</ul>
<h2 id="一、微头条案例介绍"><a href="#一、微头条案例介绍" class="headerlink" title="一、微头条案例介绍"></a>一、微头条案例介绍</h2><p>&#x2F;&#x2F;TODO，图片没替换</p>
<h3 id="微头条业务简介"><a href="#微头条业务简介" class="headerlink" title="微头条业务简介"></a>微头条业务简介</h3><ul>
<li>用户功能<ul>
<li>注册功能</li>
<li>登录功能</li>
<li>jwt实现</li>
</ul>
</li>
<li>头条新闻<ul>
<li>新闻的分页浏览</li>
<li>通过标题关键字搜索新闻</li>
<li>查看新闻详情</li>
<li>新闻的修改和删除</li>
</ul>
</li>
</ul>
<h3 id="技术栈介绍"><a href="#技术栈介绍" class="headerlink" title="技术栈介绍"></a>技术栈介绍</h3><blockquote>
<p>前端技术栈</p>
</blockquote>
<ul>
<li>ES6作为基础JS语法</li>
<li>nodejs用于运行环境</li>
<li>npm用于项目依赖管理工具</li>
<li>vite用于项目的构建架工具</li>
<li>Vue3用于项目数据的渲染框架</li>
<li>Axios用于前后端数据的交互</li>
<li>Router用于页面的跳转</li>
<li>Pinia用于存储用户的数据</li>
<li>LocalStorage作为用户校验token的存储手段</li>
<li>Element-Plus提供组件</li>
</ul>
<blockquote>
<p>后端技术栈</p>
</blockquote>
<ul>
<li>JAVA作为开发语言,版本为JDK17</li>
<li>Tomcat作为服务容器,版本为10.1.7</li>
<li>Mysql8用于项目存储数据</li>
<li>SpringMVC用于控制层实现前后端数据交互</li>
<li>MyBatis-Plus用于实现数据的CURD</li>
<li>Druid用于提供数据源的连接池</li>
<li>SpringBoot作为项目基础架构</li>
<li>MD5用于用户密码的加密</li>
<li>Jwt用于token的生成和校验</li>
<li>Jackson用于转换JSON</li>
</ul>
<h3 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h3><blockquote>
<p>头条首页信息搜索</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202405101325282.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>登录功能</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202405101325211.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>注册功能</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202405101325258.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>展示功能</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202405101325265.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>发布头条功能</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202405101325243.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>修改头条功能</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202405101325277.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>删除头条功能</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202405101325725.png?x-oss-process=style/this0-blog"></p>
<h2 id="二、微头条前端搭建"><a href="#二、微头条前端搭建" class="headerlink" title="二、微头条前端搭建"></a>二、微头条前端搭建</h2><blockquote>
<p>确保本地node，npm，vscode安装完毕！ 如果没有安装可以回看ssm整合实战！</p>
</blockquote>
<ul>
<li><p>解压前端项目代码并存放到磁盘的合适位置</p>
<p>atguigu-headline.rar</p>
<p><img src="https://blog-resources.this0.com/image/202405101325726.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>使用vscode打开工程</p>
<p><img src="https://blog-resources.this0.com/image/202405101325777.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>进入项目后打开集成终端或者在src上右击选择在集成终端中打开</p>
<p><img src="https://blog-resources.this0.com/image/202405101325817.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>通过 npm run dev启动前端项目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install </span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="三、基于SpringBoot搭建项目基础架构"><a href="#三、基于SpringBoot搭建项目基础架构" class="headerlink" title="三、基于SpringBoot搭建项目基础架构"></a>三、基于SpringBoot搭建项目基础架构</h2><h3 id="1-数据库脚本执行"><a href="#1-数据库脚本执行" class="headerlink" title="1. 数据库脚本执行"></a>1. 数据库脚本执行</h3><p>执行数据库脚本:</p>
<p><a href="file/top_news_tOm1rnSjEc.sql" title="top_news.sql">top_news.sql</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE sm_db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for news_headline</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `news_headline`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `news_headline`  (</span><br><span class="line">    `hid` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;头条id&#x27;</span>,</span><br><span class="line">    `title` <span class="type">VARCHAR</span>(<span class="number">50</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;头条标题&#x27;</span>,</span><br><span class="line">    `article` <span class="type">VARCHAR</span>(<span class="number">5000</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;头条新闻内容&#x27;</span>,</span><br><span class="line">    `type` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;头条类型id&#x27;</span>,</span><br><span class="line">    `publisher` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;头条发布用户id&#x27;</span>,</span><br><span class="line">    `page_views` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;头条浏览量&#x27;</span>,</span><br><span class="line">    `create_time` DATETIME(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;头条发布时间&#x27;</span>,</span><br><span class="line">    `update_time` DATETIME(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;头条最后的修改时间&#x27;</span>,</span><br><span class="line">    `version` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;乐观锁&#x27;</span>,</span><br><span class="line">    `is_deleted` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;头条是否被删除 1 删除  0 未删除&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`hid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of news_headline</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;特色产业激发乡村振兴新活力&#x27;</span>, <span class="string">&#x27;推进中国式现代化，必须全面推进乡村振兴。习近平总书记指出，产业振兴是乡村振兴的重中之重，也是实际工作的切入点。近日，记者走进乡村一线，看到各地以特色产业为抓手，拓展产业链发展产业集群，一二三产业融合发展，培育乡村振兴新动能。\n\n　　这个端午，广东茂名高州市根子镇柏桥村的荔枝迎来了丰收。今年4月，习近平总书记来到柏桥村考察调研。总书记走进荔枝种植园，了解当地发展特色种植产业和文旅产业等情况，并同现场技术人员亲切交流。&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:26:20&#x27;</span>, <span class="string">&#x27;2023-06-25 09:26:20&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;北京连续三天最高温超40℃，6月“炎值”因何爆表？&#x27;</span>, <span class="string">&#x27;　中新社北京6月24日电 (记者 陈杭 徐婧)京城连续三日“热晴不减”，且高温红色预警持续生效。截至24日13时51分，作为北京地区气象观测代表站的南郊观象台气温突破40℃，这是该站观测史上首次连续三天气温超40℃。22日以来，北京高温“烤验”突出。22日，北京南郊观象台最高气温达41.1℃，这是有观测纪录以来历史第二高(并列)。北京市气象局表示，观象台1951年建站以来极端最高气温为41.9℃，出现在1999年7月24日。\n\n　　23日，北京南郊观象台最高气温为40.3℃，这是该观象台建站以来首次出现连续两天最高气温超40℃。当天，北京时隔9年再次发布最高级别的高温红色预警信号。&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:28:06&#x27;</span>, <span class="string">&#x27;2023-06-25 09:28:06&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;今年夏天，极端高温是否会成为常态？&#x27;</span>, <span class="string">&#x27;针对京津冀地区持续高温天气，23日下午，中国气象局召开高温天气新闻通气会。\n\n　　刚过6月就出现极端高温天，今年夏天还会有多少高温天呢？对此，国家气候中心首席预报员高辉表示，根据国家气候中心预计，今年夏天全国大部分地区气温都比常年同期要偏高，这也对应着高温日数也要高于常年同期。但不同的地区，高温集中时段不一样，比如南方地区是在盛夏时间段进入高温季，而北方地区往往是在初夏时间段，所以从今年夏季来说，要区分不同的地区来考虑高温的影响。\n\n　　我国各地高温集中时段有明显的地域差异。对华北地区来说，通常雨季前的6月至7月初更容易出现高温天气，连续数天的高温在6月也比较常见。高辉说，这段时间主要是干热型高温为主，表现为气温高湿度小。进入7月后期，随着副高北跳和夏季风往北推进，水汽输送和大气湿度增加，云量也会增多，会出现闷热天气，也就是湿热型高温。就最高气温而言，前一时段气温最高值通常高于后一时段。但也需要说明的是，人体体感温度不仅和气温有关，还受到湿度影响，往往这种湿热型高温会加重人体体感温度。&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:31:00&#x27;</span>, <span class="string">&#x27;2023-06-25 09:31:00&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;中央气象台发布今年首个高温橙色预警&#x27;</span>, <span class="string">&#x27;新华社北京6月22日电（记者黄垚）22日18时，中央气象台升级发布今年首个高温橙色预警。预计23日白天，华北、黄淮等地将继续出现35℃以上的高温天气，北京、天津、河北中南部、山东中北部等地部分地区最高气温可达40℃左右。\n\n　　气象监测显示，22日8时至16时，北京、天津、河北中部、山东北部等地气温上升迅猛，最高气温升至40℃以上。上述4省份共有17个国家气象观测站最高气温突破历史极值。&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:31:36&#x27;</span>, <span class="string">&#x27;2023-06-25 09:31:36&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;江南水乡 龙舟竞渡&#x27;</span>, <span class="string">&#x27;江南水乡 龙舟竞渡---6月18日，浙江省湖州市“我们的节日·端午”暨第七届江南·民当端午民俗文化旅游节在南浔区和孚镇民当村开幕，来自南浔区各个乡镇的农民选手在河道中赛龙舟、划菱桶，体验传统端午民俗。&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:32:13&#x27;</span>, <span class="string">&#x27;2023-06-25 09:32:13&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;螃蟹粽、印花蛋、艾草凉粉……你知道端午有哪些创意美食吗？&#x27;</span>, <span class="string">&#x27;端午有旅行路上的见闻，有诗画里的艺术，也少不了舌尖上的风韵。听风入夏粽香佐茶，您还知道端午有哪些创意美食吗？端午至味，总少不了粽子这一味。甜的、咸的，肉馅的、蛋黄的、红枣的、豆沙的……一起来寻味端午！\n\n　　古人其实早就喜欢把各种果干放进粽子里，美食家苏轼还发明了杨梅粽。《玉台新咏》中说，“酒中喜桃子，粽里觅杨梅。”后来苏轼曾借用过这个典故，在元祐三年所写的端午帖子中说，“不独盘中见卢橘，时于粽里得杨梅”。&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:32:40&#x27;</span>, <span class="string">&#x27;2023-06-25 09:32:40&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;尼克斯拒绝执行罗斯球队选项 罗斯成自由球员&#x27;</span>, <span class="string">&#x27;北京时间6月25日，据多方消息源报道，尼克斯拒绝执行德里克-罗斯下赛季的球队选项，罗斯成为完全自由球员。\n\n　　34岁的罗斯在刚刚结束的赛季队内角色严重下滑，他仅出战27场比赛，场均登场12.5分钟，得到5.6分1.5篮板1.7助攻。\n\n　　2021年，罗斯与尼克斯签下3年4300万美元的续约合同，其中最后一年为1560万美元球队选项。&#x27;</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:34:26&#x27;</span>, <span class="string">&#x27;2023-06-25 09:34:26&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;班凯罗承诺代表美国男篮打世界杯 名单仅差1人&#x27;</span>, <span class="string">&#x27;北京时间6月25日，据著名NBA记者沙姆斯-查拉尼亚报道，魔术前锋保罗-班凯罗承诺将代表美国男篮参加2023年男篮世界杯。\n\n　　班凯罗在刚刚结束的赛季场均能够砍下20.0分6.9篮板3.7助攻，获得了NBA2022-23赛季年度最佳新秀。&#x27;</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:34:59&#x27;</span>, <span class="string">&#x27;2023-06-25 09:34:59&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;F1加拿大大奖赛正赛：维斯塔潘冠军 阿隆索亚军&#x27;</span>, <span class="string">&#x27;2023年F1加拿大大奖赛正式比赛结束。红牛车队维斯塔潘杆位发车一路轻松领跑，再次完成了Pole-to-Win！这是红牛车队历史上的第100座分站冠军！同时也是维斯塔潘F1生涯的第41座分站冠军，追平了“车神”埃尔顿·塞纳的冠军数！阿斯顿马丁车队阿隆索亚军，梅赛德斯车队汉密尔顿季军。&#x27;</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:35:43&#x27;</span>, <span class="string">&#x27;2023-06-25 09:35:43&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;CTCC绍兴柯桥站圆满落幕 张志强曹宏炜各取一冠&#x27;</span>, <span class="string">&#x27;6月24日，2023赛季CTCC中国汽车场地职业联赛绍兴柯桥站在雨中的浙江国际赛车场上演了两回合决赛的巅峰角逐。在线上线下观众的共同见证下，超级杯-TCR中国系列赛、运动杯-长三角赛车节联袂献上高水平对决，以精彩的比赛献礼这个端午节假期！TCR 中国系列赛第三回合于今天上午率先开战。来自壳牌捷凯领克车队的张志强穿云破雾夺得冠军；夺得该回合亚军的是驾驶新赛车出战的东风本田车手高度，季军则由Z.SPEED N车队的张臻东斩获。这也是超级杯四冠王本赛季首次登台。&#x27;</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:36:18&#x27;</span>, <span class="string">&#x27;2023-06-25 09:36:18&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;国象联赛常规赛收兵：杭州银行第一 山东成功上岸&#x27;</span>, <span class="string">&#x27;6月17日，“武陵山大裂谷杯”中国国际象棋甲级联赛常规赛在武陵云海国际酒店进行了最后一轮的争夺，杭州银行弈和山东队，抢到常规赛的冠军；山东队也是凭借这场平局，成功脱离保级区。本轮最大的悬念是第八名的争夺——在年底进行的甲级联赛总决赛中，前八名为上半区争冠组，保级无忧；而第九至十二名为保级区，不仅夺冠无望，还要为保级而苦战。&#x27;</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:36:51&#x27;</span>, <span class="string">&#x27;2023-06-25 09:36:51&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;围棋名宿解读高考作文:人生如棋 要先学会下“本手”&#x27;</span>, <span class="string">&#x27;今年高考开考了，在语文考试后，体育借势冲上了社交媒体的热搜榜。奥运相关话题进入高考，是意料之中。不过当记者看到关于围棋术语“本手、妙手和俗手”的作文命题时，着实觉得有些难。在被迅速刷屏的朋友圈里，记者感受到了很多从业者的激动、兴奋乃至油然而生的自豪感。但也有人则为那些没学过棋的孩子感到担心，这么难的题目，究竟该如何解题？\n\n　　“围棋正在深入人心。题目有些难，‘俗手’如何定义？但确实应该先下好‘本手’。”翻到中国围棋协会副主席、国家围棋队领队华学明的这条朋友圈动态时，记者瞬间觉得这道公认的难题有了解题的思路。正如高考作文材料中所说，本手是基础。只有持之以恒地打好基础，补强短板，守住不发生系统性风险的底线，才有可能在本手的基础上，下出妙手，避免俗手。而如果脱离了基础，所谓的妙手很可能就是花拳绣腿，经不起推敲，更经不起对手的冲击。世界冠军柯洁表示：“很多人在对局中经常会拘泥于局部，下出假妙手。想下出真正的妙手，必须在平日里有一定的经验积累和训练，才可能完成真正卓越的妙手。”人生如棋，棋如人生。“其实人生中大部分时间都是在下本手”，围棋名宿曹大元九段说。&#x27;</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:37:43&#x27;</span>, <span class="string">&#x27;2023-06-25 09:37:43&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">&#x27;不甘人后：被生成式AI弥漫的亚马逊&#x27;</span>, <span class="string">&#x27;今年早些时候，随着ChatGPT席卷全球，亚马逊的经理们要求员工开动脑筋，想想如何使用人工智能（AI）聊天机器人技术来改进自家产品和工作流程。\n\n　　其中一些想法被分享在一份名为《生成式AI——ChatGPT的影响和机会分析》的内部文件中。这份文件共列了ChatGPT和类似应用程序在亚马逊多个团队中的67个潜在应用案例。\n\n　　早在20世纪90年代，亚马逊就靠在网上卖书创造了互联网界首个真正的商业奇迹。\n\n　　随后，Kindle阅读器带来革命性体验，Alexa和Echo智能音箱又带来了语音计算，而AWS则创造了云计算行业，ChatGPT就运行在这个行业之上。\n\n　　但这次热潮中拿到先发优势的是同为科技大厂的微软。微软现在是OpenAI背后的金主，且还在忙着把ChatGPT的底层技术融进微软产品和服务中。&#x27;</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:40:20&#x27;</span>, <span class="string">&#x27;2023-06-25 09:40:20&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;微创新超实用：米家旅行箱居然想到了这一点&#x27;</span>, <span class="string">&#x27;旅行说走就走，除非老板没安排。名义上是旅游，实则执行任务，对内讲“为公司负重前行”，对外称“带薪游山玩水”，一介打工人，两副扑克脸，个中苦乐谁人知！\n\n“差旅人”精明如我，随身携带更偏向实用。\n\n必备日用之外，能路上买的尽量不带，华而不实的东西，往包里多塞一个都算我输。行李箱尺寸自然也要浓缩到小巧但够装的20英寸，拉着轻松又顺手，常用小物件转移到背包，“轻装上战场”。&#x27;</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:41:04&#x27;</span>, <span class="string">&#x27;2023-06-25 09:41:04&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">&#x27;小鹏G6动态试驾：辅助驾驶很惊喜&#x27;</span>, <span class="string">&#x27;这次我们开着小鹏G6上了赛道，又体验了最新版本的高速NGP和城市NGP，小鹏，还顺便测了下充电速度，那么小鹏G6驾驶感受如何？辅助驾驶表现怎么样？&#x27;</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:42:07&#x27;</span>, <span class="string">&#x27;2023-06-25 09:42:07&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">16</span>, <span class="string">&#x27;养车市场陷入低价内卷，“虎猫狗”还没等到春天&#x27;</span>, <span class="string">&#x27;今年“618”期间，汽车后市场的玩家们都打出了“低价牌”。比如途虎养车宣布推出“6.18全民养车季”活动，在此期间北京车主可享受“轮胎买一送一”以及多品牌轮胎降价促销的活动。\n\n　　与此同时，京东养车和天猫养车两大大厂玩家，在本次618期间也喊出了各自的营销口号。\n\n　　前者不仅喊出了“养车爱车立省不止30%”的口号，还推出了轮胎、保养买贵赔两倍、“轮胎免费装、三年无忧质保”、5公里无服务门店赔双倍安装费等举措；天猫养车的618活动，则覆盖了更大的零部件范围，比如推出了空调清洗、机油和轮胎更换等低价服务。\n\n　　这样看，在本次618期间，途虎养车、京东养车和天猫养车均贯彻着“以价换量”的战略，以至于让行业价格战一触即发。这些玩家会这样做，主要是为了与传统4S店、以及与彼此竞争，以便保证自身获得更多的市场份额。&#x27;</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:42:51&#x27;</span>, <span class="string">&#x27;2023-06-25 09:42:51&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">17</span>, <span class="string">&#x27;微软股价历史新高 聊天机器人技术潜力显现&#x27;</span>, <span class="string">&#x27;周四，微软股价创下历史新高，成为今年继英伟达和苹果之后，又一家市值达到新高点的大型科技公司。这家软件巨头正致力于在其产品和服务中添加生成式人工智能功能，旨在全面改造其Office产品阵容，其中包括Excel、PowerPoint、Outlook和Word等。股价上涨3.2%，收于每股348.1美元，为2021年11月19日以来的最高收盘价。自今年初起，微软股价累计上涨了45%，市值增加约8006亿美元。微软持有OpenAI的大部分股份，这家初创公司凭借聊天机器人ChatGPT引发生成式人工智能的热潮。近几个月来，该工具广受欢迎，展示了聊天机器人技术所具有的巨大潜力。微软于今年1月宣布将再向OpenAI投资100亿美元。然而有报道称，微软与OpenAI之间既有合作，亦存竞争，这种特殊的双重关系导致了双方关系的紧张和潜在冲突。科技股如英伟达等同样受益于生成式人工智能技术的应用，各公司将此技术融入各自产品，进而推动相关芯片需求。英伟达股价今年已飙升192%，被视为最大赢家。&#x27;</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:43:48&#x27;</span>, <span class="string">&#x27;2023-06-25 09:43:48&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_headline` (hid,title,article,TYPE,publisher,page_views,create_time,update_time,is_deleted) <span class="keyword">VALUES</span> (<span class="number">18</span>, <span class="string">&#x27;再获11亿美元投资：蔚来“长期主义”的底气&#x27;</span>, <span class="string">&#x27;如果说全系降价3万是李斌的“阳谋”，那么蔚来ET5T的发布，则是李斌的又一次诚意之作。\n\n　　ET5T是蔚来首款售价下探到30万元以下的新车，作为ET5的姐妹车型，ET5T和ET5的双车合璧，得以在30万以下快速开疆辟土。\n\n　　这样的做法有迹可循：特斯拉曾经在Model Y上实践过，并大获成功。\n\n　　Model Y和Model 3共用平台，零部件复用率高达75%，研发成本骤降。尽管Model Y最初被用户吐槽是Model 3的放大版，但不置可否的是Model Y确实解决了用户对Model 3空间不足的槽点。\n\n　　不过，最为关键的还是Model Y的价格足够低，直接降低了特斯拉的购买门槛，给那些对价格敏感，本犹豫要不要多花四五万的消费者一个充足的理由。\n\n　　蔚来ET5T正在用一种经受了市场验证过的方式，直面与特斯拉的竞争。但同时，蔚来ET5T在智能化、空间表现、设计以及产品力上，都正在接近、超越特斯拉Model Y。\n\n　　蔚来ET5T，平替特斯拉Model Y？\n\n　　小家庭，预算30万左右，消费者到底会选哪款纯电动车？\n\n　　全球市场的反馈是，特斯拉Model Y ——一款紧凑型SUV。2022年，Model Y的全球销量为74.7万辆，其在中国的销量为31.5万台，约占其全球份额的42.2%。\n\n　　按照车型大小，SUV可以分为大型、中型、小型、紧凑型四大类。按照价位，SUV又可以分为实用型、经济型、中高档型、豪华型、超豪华型等。\n\n　　Model Y 在中高端SUV的细分市场中一骑绝尘，可以说是没有对手。因为无论是奔驰EQC、宝马iX3，还是国产的比亚迪唐EV等，和Model Y相比，都不能对其构成威胁。奔驰EQC、宝马iX3这两款车型都是“油改电”，算不上真正的电动车。而比亚迪的智能化能力，远及不特斯拉，座舱、智驾上的核心模块还来自于供应商方案，并非自研。\n\n　　雷峰网认为，此前，国内的自主品牌中只有蔚来的ES6能和Model Y一较高下。不过ES6的均价比Model Y高出一大截，二者入门版之间的价差大约在10万左右。但在蔚来推出ET5T后，局势必然会发生逆转。&#x27;</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="string">&#x27;2023-06-25 09:44:20&#x27;</span>, <span class="string">&#x27;2023-06-25 09:44:20&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for news_type</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `news_type`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `news_type`  (</span><br><span class="line">    `tid` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;新闻类型id&#x27;</span>,</span><br><span class="line">    `tname` <span class="type">VARCHAR</span>(<span class="number">10</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;新闻类型描述&#x27;</span>,</span><br><span class="line">    `version` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;乐观锁&#x27;</span>,</span><br><span class="line">    `is_deleted` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;头条是否被删除 1 删除  0 未删除&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`tid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of news_type</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_type` (tid,tname) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;新闻&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_type` (tid,tname) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;体育&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_type` (tid,tname) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;娱乐&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_type` (tid,tname) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;科技&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_type` (tid,tname) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;其他&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for news_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `news_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `news_user`  (</span><br><span class="line">    `uid` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    `username` <span class="type">VARCHAR</span>(<span class="number">20</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户登录名&#x27;</span>,</span><br><span class="line">    `user_pwd` <span class="type">VARCHAR</span>(<span class="number">50</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户登录密码密文&#x27;</span>,</span><br><span class="line">    `nick_name` <span class="type">VARCHAR</span>(<span class="number">20</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">    `version` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;乐观锁&#x27;</span>,</span><br><span class="line">    `is_deleted` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;头条是否被删除 1 删除  0 未删除&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`uid`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `username_unique`(`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">)  ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of news_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_user` (uid,username,user_pwd,nick_name) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_user` (uid,username,user_pwd,nick_name) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_user` (uid,username,user_pwd,nick_name) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;zhangxiaoming&#x27;</span>, <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="string">&#x27;张小明&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `news_user` (uid,username,user_pwd,nick_name)<span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;xiaohei&#x27;</span>, <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="string">&#x27;李小黑&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-搭建SprintBoot工程"><a href="#2-搭建SprintBoot工程" class="headerlink" title="2. 搭建SprintBoot工程"></a>2. 搭建SprintBoot工程</h3><ol>
<li><p>创建boot工程</p>
</li>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-headline<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis-plus  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库相关配置启动器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- druid启动器的依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 驱动类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>


 <!--    SpringBoot应用打包插件-->
 <build>
     <plugins>
         <plugin>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-maven-plugin</artifactId>
         </plugin>
     </plugins>
 </build>
</li>
<li><p>编写配置</p>
<p>application.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接池配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///sm_db1</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis-plus的配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.pojo</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">isDeleted</span>  <span class="comment">#全局逻辑删除</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment">#主键策略自增长</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">news_</span> <span class="comment"># 设置表的前缀</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>druid兼容springboot3文件(过时，这个版本已经兼容了)</p>
<p><img src="https://blog-resources.this0.com/image/202405101325828.png?x-oss-process=style/this0-blog"></p>
<p>文件名和内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">文件名:org.springframework.boot.autoconfigure.AutoConfiguration.imports</span></span><br><span class="line"><span class="string">内容:com.alibaba.druid.spring.boot3.autoconfigure.DruidDataSourceAutoConfigure</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动类和mybatis-plus配置</p>
<p>包: com.atguigu</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Main.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置mybatis-plus插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL)); <span class="comment">//分页</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());  <span class="comment">//乐观锁</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">BlockAttackInnerInterceptor</span>());  <span class="comment">//防全局修改和删除</span></span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>工具类准备</p>
<p>结果封装类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局统一返回结果类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 返回码</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">// 返回消息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">// 返回数据</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 返回数据</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">build</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;T&gt;();</span><br><span class="line">        <span class="keyword">if</span> (data != <span class="literal">null</span>)</span><br><span class="line">            result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">build</span><span class="params">(T body, Integer code, String message)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = build(body);</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">build</span><span class="params">(T body, ResultCodeEnum resultCodeEnum)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = build(body);</span><br><span class="line">        result.setCode(resultCodeEnum.getCode());</span><br><span class="line">        result.setMessage(resultCodeEnum.getMessage());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  baseCategory1List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Result&lt;T&gt; <span class="title function_">ok</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        Result&lt;T&gt; result = build(data);</span><br><span class="line">        <span class="keyword">return</span> build(data, ResultCodeEnum.SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Result&lt;T&gt; <span class="title function_">message</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setMessage(msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Result&lt;T&gt; <span class="title function_">code</span><span class="params">(Integer code)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(code);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决枚举类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一返回结果状态信息类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">200</span>,<span class="string">&quot;success&quot;</span>),</span><br><span class="line">    USERNAME_ERROR(<span class="number">501</span>,<span class="string">&quot;usernameError&quot;</span>),</span><br><span class="line">    PASSWORD_ERROR(<span class="number">503</span>,<span class="string">&quot;passwordError&quot;</span>),</span><br><span class="line">    NOTLOGIN(<span class="number">504</span>,<span class="string">&quot;notLogin&quot;</span>),</span><br><span class="line">    USERNAME_USED(<span class="number">505</span>,<span class="string">&quot;userNameUsed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ResultCodeEnum</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>MD5加密工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MD5Util</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String strSrc)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">char</span> hexChars[] = &#123; <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span> &#125;;</span><br><span class="line">            <span class="type">byte</span>[] bytes = strSrc.getBytes();</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            md.update(bytes);</span><br><span class="line">            bytes = md.digest();</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> bytes.length;</span><br><span class="line">            <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[j * <span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">                <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> bytes[i];</span><br><span class="line">                chars[k++] = hexChars[b &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">                chars[k++] = hexChars[b &amp; <span class="number">0xf</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;MD5加密出错！！+&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-MybatisX逆向工程"><a href="#3-MybatisX逆向工程" class="headerlink" title="3. MybatisX逆向工程"></a>3. MybatisX逆向工程</h3><ol>
<li><p>逆向工程</p>
<p><img src="https://blog-resources.this0.com/image/202405101325672.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202405101325887.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202405101325015.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>完善实体类注解</p>
<p>删除tableName注解,全局统一设置</p>
<p>添加主键,乐观锁,逻辑删除注解!!!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userPwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="四、后台功能开发"><a href="#四、后台功能开发" class="headerlink" title="四、后台功能开发"></a>四、后台功能开发</h2><h3 id="4-1-用户模块开发"><a href="#4-1-用户模块开发" class="headerlink" title="4.1 用户模块开发"></a>4.1 用户模块开发</h3><ul>
<li><p><strong>1.1  jwt和token介绍</strong></p>
<ol>
<li><p>token介绍</p>
<p>令牌（Token）：在计算机领域，令牌是一种代表某种访问权限或身份认证信息的令牌。它可以是一串随机生成的字符或数字，用于验证用户的身份或授权用户对特定资源的访问。普通的令牌可能以各种形式出现，如访问令牌、身份令牌、刷新令牌等。</p>
<p><img src="https://blog-resources.this0.com/image/202405101325017.png?x-oss-process=style/this0-blog"></p>
<p>简单理解 : 每个用户生成的唯一字符串标识,可以进行用户识别和校验</p>
<p>类似技术:  天王盖地虎 ,小鸡炖蘑菇</p>
<p>优势: token验证标识无法直接识别用户的信息,盗取token后也无法`登录`程序! 相对安全!</p>
</li>
<li><p>jwt介绍</p>
<p>Token是一项规范和标准(接口)</p>
<p>JWT(JSON Web Token)是具体可以生成,校验,解析等动作Token的技术(实现类)</p>
<p><img src="https://blog-resources.this0.com/image/202405101325070.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>jwt工作流程</p>
<ul>
<li>用户提供其凭据（通常是用户名和密码）进行身份验证。</li>
<li>服务器对这些凭据进行验证，并在验证成功后创建一个JWT。</li>
<li>服务器将JWT发送给客户端，并客户端在后续的请求中将JWT附加在请求头或参数中。</li>
<li>服务器接收到请求后，验证JWT的签名和有效性，并根据JWT中的声明进行身份验证和授权操作</li>
</ul>
</li>
<li><p>jwt数据组成和包含信息</p>
<p>JWT由三部分组成: header(头部).payload(载荷).signature(签名)</p>
<p><img src="https://blog-resources.this0.com/image/202405101325059.png?x-oss-process=style/this0-blog"></p>
<p>我们需要理解的是, jwt可以携带很多信息! 一般情况,需要加入:有效时间,签名秘钥,其他用户标识信息!</p>
<p>有效时间为了保证token的时效性,过期可以重新登录获取!</p>
<p>签名秘钥为了防止其他人随意解析和校验token数据!</p>
<p>用户信息为了我们自己解析的时候,知道Token对应的具体用户!</p>
</li>
<li><p>jwt使用和测试</p>
<ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写配置</p>
<p>application.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#jwt配置</span></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">token:</span></span><br><span class="line">    <span class="attr">tokenExpiration:</span> <span class="number">120</span> <span class="comment">#有效时间,单位分钟</span></span><br><span class="line">    <span class="attr">tokenSignKey:</span> <span class="string">headline123456</span>  <span class="comment">#当前程序签名秘钥 自定义</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>导入工具类</p>
<p>封装jwt技术工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.*;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;jwt.token&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">long</span> tokenExpiration; <span class="comment">//有效时间,单位毫秒 1000毫秒 == 1秒</span></span><br><span class="line">    <span class="keyword">private</span>  String tokenSignKey;  <span class="comment">//当前程序签名秘钥</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成token字符串</span></span><br><span class="line">    <span class="keyword">public</span>  String <span class="title function_">createToken</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;tokenExpiration = &quot;</span> + tokenExpiration);</span><br><span class="line">        System.out.println(<span class="string">&quot;tokenSignKey = &quot;</span> + tokenSignKey);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line"></span><br><span class="line">            .setSubject(<span class="string">&quot;YYGH-USER&quot;</span>)</span><br><span class="line">            .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + tokenExpiration*<span class="number">1000</span>*<span class="number">60</span>)) <span class="comment">//单位分钟</span></span><br><span class="line">            .claim(<span class="string">&quot;userId&quot;</span>, userId)</span><br><span class="line">            .signWith(SignatureAlgorithm.HS512, tokenSignKey)</span><br><span class="line">            .compressWith(CompressionCodecs.GZIP)</span><br><span class="line">            .compact();</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从token字符串获取userid</span></span><br><span class="line">    <span class="keyword">public</span>  Long <span class="title function_">getUserId</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(token)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(tokenSignKey).parseClaimsJws(token);</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> claimsJws.getBody();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">userId</span> <span class="operator">=</span> (Integer)claims.get(<span class="string">&quot;userId&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userId.longValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断token是否有效</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">isExpiration</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isExpire</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(tokenSignKey)</span><br><span class="line">                .parseClaimsJws(token)</span><br><span class="line">                .getBody()</span><br><span class="line">                .getExpiration().before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            <span class="comment">//没有过期，有效，返回false</span></span><br><span class="line">            <span class="keyword">return</span> isExpire;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            <span class="comment">//过期出现异常，返回true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用和测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.boot.test.context.SpringBootTest</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootTest</span> &#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> JwtHelper jwtHelper;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="comment">//生成 传入用户标识</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtHelper.createToken(<span class="number">1L</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;token = &quot;</span> + token);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析用户标识</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> jwtHelper.getUserId(token).intValue();</span><br><span class="line">            System.out.println(<span class="string">&quot;userId = &quot;</span> + userId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//校验是否到期! false 未到期 true到期</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">expiration</span> <span class="operator">=</span> jwtHelper.isExpiration(token);</span><br><span class="line">            System.out.println(<span class="string">&quot;expiration = &quot;</span> + expiration);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p><strong>1.2  登录功能实现</strong></p>
<ol>
<li><p>需求描述</p>
<p><img src="https://blog-resources.this0.com/image/202405101325126.png?x-oss-process=style/this0-blog"></p>
<p>用户在客户端输入用户名密码并向后端提交,后端根据用户名和密码判断登录是否成功,用户有误或者密码有误响应不同的提示信息！</p>
</li>
<li><p>接口描述</p>
<p>url地址： user&#x2F;login</p>
<p>请求方式：POST</p>
<p>请求参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>, <span class="comment">//用户名</span></span><br><span class="line">    <span class="string">&quot;userPwd&quot;</span>:<span class="string">&quot;123456&quot;</span>     <span class="comment">//明文密码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>响应数据：</p>
<p>成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;code&quot;</span>:<span class="string">&quot;200&quot;</span>,         <span class="comment">// 成功状态码 </span></span><br><span class="line">   <span class="string">&quot;message&quot;</span>:<span class="string">&quot;success&quot;</span>   <span class="comment">// 成功状态描述</span></span><br><span class="line">   <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;token&quot;</span>:<span class="string">&quot;... ...&quot;</span> <span class="comment">// 用户id的token</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;code&quot;</span>:<span class="string">&quot;501&quot;</span>,</span><br><span class="line">   <span class="string">&quot;message&quot;</span>:<span class="string">&quot;用户名有误&quot;</span></span><br><span class="line">   <span class="string">&quot;data&quot;</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;code&quot;</span>:<span class="string">&quot;503&quot;</span>,</span><br><span class="line">   <span class="string">&quot;message&quot;</span>:<span class="string">&quot;密码有误&quot;</span></span><br><span class="line">   <span class="string">&quot;data&quot;</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现代码</p>
<ol>
<li>controller</li>
</ol>
</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 登录需求</span></span><br><span class="line"><span class="comment">* 地址: /user/login</span></span><br><span class="line"><span class="comment">* 方式: post</span></span><br><span class="line"><span class="comment">* 参数:</span></span><br><span class="line"><span class="comment">*    &#123;</span></span><br><span class="line"><span class="comment">*     &quot;username&quot;:&quot;zhangsan&quot;, //用户名</span></span><br><span class="line"><span class="comment">*     &quot;userPwd&quot;:&quot;123456&quot;     //明文密码</span></span><br><span class="line"><span class="comment">*    &#125;</span></span><br><span class="line"><span class="comment">* 返回:</span></span><br><span class="line"><span class="comment">*   &#123;</span></span><br><span class="line"><span class="comment">*    &quot;code&quot;:&quot;200&quot;,         // 成功状态码</span></span><br><span class="line"><span class="comment">*    &quot;message&quot;:&quot;success&quot;   // 成功状态描述</span></span><br><span class="line"><span class="comment">*    &quot;data&quot;:&#123;</span></span><br><span class="line"><span class="comment">*         &quot;token&quot;:&quot;... ...&quot; // 用户id的token</span></span><br><span class="line"><span class="comment">*     &#125;</span></span><br><span class="line"><span class="comment">*  &#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 大概流程:</span></span><br><span class="line"><span class="comment">*    1. 账号进行数据库查询 返回用户对象</span></span><br><span class="line"><span class="comment">*    2. 对比用户密码(md5加密)</span></span><br><span class="line"><span class="comment">*    3. 成功,根据userId生成token -&gt; map key=token value=token值 - result封装</span></span><br><span class="line"><span class="comment">*    4. 失败,判断账号还是密码错误,封装对应的枚举错误即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.login(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//service</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtHelper jwtHelper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span>  UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 登录业务实现</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> result封装</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据账号查询</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUsername,user.getUsername());</span><br><span class="line">        <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userMapper.selectOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//账号判断</span></span><br><span class="line">        <span class="keyword">if</span> (loginUser == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//账号错误</span></span><br><span class="line">            <span class="keyword">return</span> Result.build(<span class="literal">null</span>, ResultCodeEnum.USERNAME_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断密码</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(user.getUserPwd())</span><br><span class="line">            &amp;&amp; loginUser.getUserPwd().equals(MD5Util.encrypt(user.getUserPwd())))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//账号密码正确</span></span><br><span class="line">            <span class="comment">//根据用户唯一标识生成token</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtHelper.createToken(Long.valueOf(loginUser.getUid()));</span><br><span class="line"></span><br><span class="line">            <span class="type">Map</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            data.put(<span class="string">&quot;token&quot;</span>,token);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Result.ok(data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码错误</span></span><br><span class="line">        <span class="keyword">return</span> Result.build(<span class="literal">null</span>,ResultCodeEnum.PASSWORD_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>1.3  根据token获取用户数据</strong></p>
<ol>
<li><p>需求描述</p>
<p>客户端发送请求,提交token请求头,后端根据token请求头获取登录用户的详细信息并响应给客户端进行存储</p>
</li>
<li><p>接口描述</p>
<p>url地址：user&#x2F;getUserInfo</p>
<p>请求方式：GET</p>
<p>请求头：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">token: token内容</span><br></pre></td></tr></table></figure>

<p>响应数据：</p>
<p>成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;loginUser&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;uid&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">            <span class="string">&quot;userPwd&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;nickName&quot;</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="number">504</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;notLogin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现</p>
<ol>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址: user/getUserInfo</span></span><br><span class="line"><span class="comment"> * 方式: get</span></span><br><span class="line"><span class="comment"> * 请求头: token = token内容</span></span><br><span class="line"><span class="comment"> * 返回:</span></span><br><span class="line"><span class="comment"> *    &#123;</span></span><br><span class="line"><span class="comment"> *     &quot;code&quot;: 200,</span></span><br><span class="line"><span class="comment"> *     &quot;message&quot;: &quot;success&quot;,</span></span><br><span class="line"><span class="comment"> *     &quot;data&quot;: &#123;</span></span><br><span class="line"><span class="comment"> *         &quot;loginUser&quot;: &#123;</span></span><br><span class="line"><span class="comment"> *             &quot;uid&quot;: 1,</span></span><br><span class="line"><span class="comment"> *             &quot;username&quot;: &quot;zhangsan&quot;,</span></span><br><span class="line"><span class="comment"> *             &quot;userPwd&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="comment"> *             &quot;nickName&quot;: &quot;张三&quot;</span></span><br><span class="line"><span class="comment"> *         &#125;</span></span><br><span class="line"><span class="comment"> *      &#125;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 大概流程:</span></span><br><span class="line"><span class="comment"> *    1.获取token,解析token对应的userId</span></span><br><span class="line"><span class="comment"> *    2.根据userId,查询用户数据</span></span><br><span class="line"><span class="comment"> *    3.将用户数据的密码置空,并且把用户数据封装到结果中key = loginUser</span></span><br><span class="line"><span class="comment"> *    4.失败返回504 (本次先写到当前业务,后期提取到拦截器和全局异常处理器)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;getUserInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">userInfo</span><span class="params">(<span class="meta">@RequestHeader</span> String token)</span>&#123;</span><br><span class="line">    <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.getUserInfo(token);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询用户数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> result封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getUserInfo</span><span class="params">(String token)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.判定是否有效期</span></span><br><span class="line">    <span class="keyword">if</span> (jwtHelper.isExpiration(token)) &#123;</span><br><span class="line">        <span class="comment">//true过期,直接返回未登录</span></span><br><span class="line">        <span class="keyword">return</span> Result.build(<span class="literal">null</span>,ResultCodeEnum.NOTLOGIN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.获取token对应的用户</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> jwtHelper.getUserId(token).intValue();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.查询数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(userId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">        user.setUserPwd(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        data.put(<span class="string">&quot;loginUser&quot;</span>,user);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.build(<span class="literal">null</span>,ResultCodeEnum.NOTLOGIN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p><strong>1.4  注册用户名检查</strong></p>
<ol>
<li><p>需求描述</p>
<p><img src="https://blog-resources.this0.com/image/202405101325232.gif?x-oss-process=style/this0-blog"></p>
<p>用户在注册时输入用户名时,立刻将用户名发送给后端,后端根据用户名查询用户名是否可用并做出响应</p>
</li>
<li><p>接口描述</p>
<p>url地址：user&#x2F;checkUserName</p>
<p>请求方式：POST</p>
<p>请求参数：param形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">username=zhangsan</span><br></pre></td></tr></table></figure>

<p>响应数据：</p>
<p>成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;code&quot;</span>:<span class="string">&quot;200&quot;</span>,</span><br><span class="line">   <span class="string">&quot;message&quot;</span>:<span class="string">&quot;success&quot;</span></span><br><span class="line">   <span class="string">&quot;data&quot;</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>:<span class="string">&quot;505&quot;</span>,</span><br><span class="line">   <span class="string">&quot;message&quot;</span>:<span class="string">&quot;用户名占用&quot;</span></span><br><span class="line">   <span class="string">&quot;data&quot;</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现</p>
<ol>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * url地址：user/checkUserName</span></span><br><span class="line"><span class="comment"> * 请求方式：POST</span></span><br><span class="line"><span class="comment"> * 请求参数：param形式</span></span><br><span class="line"><span class="comment"> * username=zhangsan</span></span><br><span class="line"><span class="comment"> * 响应数据:</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *    &quot;code&quot;:&quot;200&quot;,</span></span><br><span class="line"><span class="comment"> *    &quot;message&quot;:&quot;success&quot;</span></span><br><span class="line"><span class="comment"> *    &quot;data&quot;:&#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现步骤:</span></span><br><span class="line"><span class="comment"> *   1. 获取账号数据</span></span><br><span class="line"><span class="comment"> *   2. 根据账号进行数据库查询</span></span><br><span class="line"><span class="comment"> *   3. 结果封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;checkUserName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">checkUserName</span><span class="params">(String username)</span>&#123;</span><br><span class="line">    <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.checkUserName(username);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>service&#x20;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查账号是否可以注册</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username 账号信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">checkUserName</span><span class="params">(String username)</span> &#123;</span><br><span class="line"></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(User::getUsername,username);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.build(<span class="literal">null</span>,ResultCodeEnum.USERNAME_USED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p><strong>1.5  用户注册功能</strong></p>
<ol>
<li><p>需求描述</p>
<p><img src="https://blog-resources.this0.com/image/202405101325290.gif?x-oss-process=style/this0-blog"></p>
<p>客户端将新用户信息发送给服务端,服务端将新用户存入数据库,存入之前做用户名是否被占用校验,校验通过响应成功提示,否则响应失败提示</p>
</li>
<li><p>接口描述</p>
<p>url地址：user&#x2F;regist</p>
<p>请求方式：POST</p>
<p>请求参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userPwd&quot;</span>:<span class="string">&quot;123456&quot;</span>, </span><br><span class="line">    <span class="string">&quot;nickName&quot;</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>响应数据：</p>
<p>成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;code&quot;</span>:<span class="string">&quot;200&quot;</span>,</span><br><span class="line">   <span class="string">&quot;message&quot;</span>:<span class="string">&quot;success&quot;</span></span><br><span class="line">   <span class="string">&quot;data&quot;</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;code&quot;</span>:<span class="string">&quot;505&quot;</span>,</span><br><span class="line">   <span class="string">&quot;message&quot;</span>:<span class="string">&quot;用户名占用&quot;</span></span><br><span class="line">   <span class="string">&quot;data&quot;</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现</p>
<ol>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* url地址：user/regist</span></span><br><span class="line"><span class="comment">* 请求方式：POST</span></span><br><span class="line"><span class="comment">* 请求参数：</span></span><br><span class="line"><span class="comment">* &#123;</span></span><br><span class="line"><span class="comment">*     &quot;username&quot;:&quot;zhangsan&quot;,</span></span><br><span class="line"><span class="comment">*     &quot;userPwd&quot;:&quot;123456&quot;,</span></span><br><span class="line"><span class="comment">*     &quot;nickName&quot;:&quot;张三&quot;</span></span><br><span class="line"><span class="comment">* &#125;</span></span><br><span class="line"><span class="comment">* 响应数据：</span></span><br><span class="line"><span class="comment">* &#123;</span></span><br><span class="line"><span class="comment">*    &quot;code&quot;:&quot;200&quot;,</span></span><br><span class="line"><span class="comment">*    &quot;message&quot;:&quot;success&quot;</span></span><br><span class="line"><span class="comment">*    &quot;data&quot;:&#123;&#125;</span></span><br><span class="line"><span class="comment">* &#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 实现步骤:</span></span><br><span class="line"><span class="comment">*   1. 将密码加密</span></span><br><span class="line"><span class="comment">*   2. 将数据插入</span></span><br><span class="line"><span class="comment">*   3. 判断结果,成 返回200 失败 505</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;regist&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">regist</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">  <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.regist(user);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>service&#x20;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">regist</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(User::getUsername,user.getUsername());</span><br><span class="line">    <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.selectCount(queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.build(<span class="literal">null</span>,ResultCodeEnum.USERNAME_USED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    user.setUserPwd(MD5Util.encrypt(user.getUserPwd()));</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;rows = &quot;</span> + rows);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ul>
<h3 id="4-2-首页模块开发"><a href="#4-2-首页模块开发" class="headerlink" title="4.2 首页模块开发"></a>4.2 首页模块开发</h3><ul>
<li><p><strong>2.1 查询首页分类</strong></p>
<ol>
<li><p>需求描述</p>
<p><img src="https://blog-resources.this0.com/image/202405101325346.png?x-oss-process=style/this0-blog"></p>
<p>进入新闻首页,查询所有分类并动态展示新闻类别栏位</p>
</li>
<li><p>接口描述</p>
<p>url地址：portal&#x2F;findAllTypes</p>
<p>请求方式：get</p>
<p>请求参数：无</p>
<p>响应数据：</p>
<p>成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;code&quot;</span>:<span class="string">&quot;200&quot;</span>,</span><br><span class="line">   <span class="string">&quot;message&quot;</span>:<span class="string">&quot;OK&quot;</span></span><br><span class="line">   <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">            [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;tid&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;tname&quot;</span>:<span class="string">&quot;新闻&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;tid&quot;</span>:<span class="string">&quot;2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;tname&quot;</span>:<span class="string">&quot;体育&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;tid&quot;</span>:<span class="string">&quot;3&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;tname&quot;</span>:<span class="string">&quot;娱乐&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;tid&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;tname&quot;</span>:<span class="string">&quot;科技&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;tid&quot;</span>:<span class="string">&quot;5&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;tname&quot;</span>:<span class="string">&quot;其他&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现</p>
<ol>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;portal&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PortalController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TypeService typeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部类别信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;findAllTypes&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">findAllTypes</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//直接调用业务层,查询全部数据</span></span><br><span class="line">        List&lt;Type&gt; list = typeService.list();</span><br><span class="line">        <span class="keyword">return</span>  Result.ok(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p><strong>2.2 <code>分页查询</code>首页头条信息</strong></p>
<ol>
<li><p>需求描述</p>
<p><img src="https://blog-resources.this0.com/image/202405101325381.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>客户端向服务端发送查询关键字,新闻类别,页码数,页大小</li>
<li>服务端根据条件搜索分页信息,返回含<code>页码数,页大小,总页数,总记录数,当前页数据等信息,</code>并根据时间降序,浏览量降序排序</li>
</ul>
</li>
<li><p>接口描述</p>
<p>url地址：portal&#x2F;findNewsPage</p>
<p>请求方式：post</p>
<p>请求参数:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;keyWords&quot;</span><span class="punctuation">:</span><span class="string">&quot;马斯克&quot;</span><span class="punctuation">,</span> <span class="comment">// 搜索标题关键字</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span>           <span class="comment">// 新闻类型</span></span><br><span class="line">    <span class="attr">&quot;pageNum&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span>        <span class="comment">// 页码数</span></span><br><span class="line">    <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span><span class="number">10</span>     <span class="comment">// 页大小</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>响应数据：</p>
<p>成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;code&quot;</span>:<span class="string">&quot;200&quot;</span>,</span><br><span class="line">   <span class="string">&quot;message&quot;</span>:<span class="string">&quot;success&quot;</span></span><br><span class="line">   <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;pageInfo&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;pageData&quot;</span>:[</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;hid&quot;</span>:<span class="string">&quot;1&quot;</span>,   <span class="number">1</span>                  <span class="comment">// 新闻id </span></span><br><span class="line">            <span class="string">&quot;title&quot;</span>:<span class="string">&quot;尚硅谷宣布 ... ...&quot;</span>, <span class="number">1</span>  <span class="comment">// 新闻标题</span></span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;1&quot;</span>,           <span class="number">1</span>         <span class="comment">// 新闻所属类别编号</span></span><br><span class="line">            <span class="string">&quot;pageViews&quot;</span>:<span class="string">&quot;40&quot;</span>,      <span class="number">1</span>        <span class="comment">// 新闻浏览量</span></span><br><span class="line">            <span class="string">&quot;pastHours&quot;</span>:<span class="string">&quot;3&quot;</span> ,      计算        <span class="comment">// 发布时间已过小时数</span></span><br><span class="line">            <span class="string">&quot;publisher&quot;</span>:<span class="string">&quot;1&quot;</span>       <span class="number">1</span>         <span class="comment">// 发布用户ID</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;hid&quot;</span>:<span class="string">&quot;1&quot;</span>,                     <span class="comment">// 新闻id </span></span><br><span class="line">            <span class="string">&quot;title&quot;</span>:<span class="string">&quot;尚硅谷宣布 ... ...&quot;</span>,   <span class="comment">// 新闻标题</span></span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;1&quot;</span>,                    <span class="comment">// 新闻所属类别编号</span></span><br><span class="line">            <span class="string">&quot;pageViews&quot;</span>:<span class="string">&quot;40&quot;</span>,              <span class="comment">// 新闻浏览量</span></span><br><span class="line">            <span class="string">&quot;pastHours&quot;</span>:<span class="string">&quot;3&quot;</span>,              <span class="comment">// 发布时间已过小时数</span></span><br><span class="line">            <span class="string">&quot;publisher&quot;</span>:<span class="string">&quot;1&quot;</span>                <span class="comment">// 发布用户ID</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;hid&quot;</span>:<span class="string">&quot;1&quot;</span>,                     <span class="comment">// 新闻id </span></span><br><span class="line">            <span class="string">&quot;title&quot;</span>:<span class="string">&quot;尚硅谷宣布 ... ...&quot;</span>,   <span class="comment">// 新闻标题</span></span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;1&quot;</span>,                    <span class="comment">// 新闻所属类别编号</span></span><br><span class="line">            <span class="string">&quot;pageViews&quot;</span>:<span class="string">&quot;40&quot;</span>,              <span class="comment">// 新闻浏览量</span></span><br><span class="line">            <span class="string">&quot;pastHours&quot;</span>:<span class="string">&quot;3&quot;</span>,               <span class="comment">// 发布时间已过小时数</span></span><br><span class="line">            <span class="string">&quot;publisher&quot;</span>:<span class="string">&quot;1&quot;</span>                <span class="comment">// 发布用户ID</span></span><br><span class="line">        &#125;</span><br><span class="line">        ],</span><br><span class="line">      <span class="string">&quot;pageNum&quot;</span>:<span class="number">1</span>,    <span class="comment">//页码数</span></span><br><span class="line">      <span class="string">&quot;pageSize&quot;</span>:<span class="number">10</span>,  <span class="comment">// 页大小</span></span><br><span class="line">      <span class="string">&quot;totalPage&quot;</span>:<span class="number">20</span>, <span class="comment">// 总页数</span></span><br><span class="line">      <span class="string">&quot;totalSize&quot;</span>:<span class="number">200</span> <span class="comment">// 总记录数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现</p>
<ol>
<li><p>准备条件实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PortalVo</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String keyWords;</span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageNum</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">pageSize</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首页分页查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;findNewPage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">findNewPage</span><span class="params">(<span class="meta">@RequestBody</span> PortalVo portalVo)</span>&#123;</span><br><span class="line">    <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> headlineService.findNewPage(portalVo);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>service</p>
<p>&#x2F;&#x2F;TODO,queryWrapper.like(!StringUtils.isEmpty(portalVo.getKeyWords()),Headline::getTitle,portalVo.getKeyWords())这一句代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeadlineServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;HeadlineMapper, Headline&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">HeadlineService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HeadlineMapper headlineMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页数据查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> portalVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">findNewPage</span><span class="params">(PortalVo portalVo)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.条件拼接 需要非空判断</span></span><br><span class="line">        LambdaQueryWrapper&lt;Headline&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.like(!StringUtils.isEmpty(portalVo.getKeyWords()),Headline::getTitle,portalVo.getKeyWords())</span><br><span class="line">                .eq(portalVo.getType()!= <span class="literal">null</span>,Headline::getType,portalVo.getType());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.分页参数</span></span><br><span class="line">        IPage&lt;Headline&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(portalVo.getPageNum(),portalVo.getPageSize());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.分页查询</span></span><br><span class="line">        <span class="comment">//查询的结果 &quot;pastHours&quot;:&quot;3&quot;   // 发布时间已过小时数 我们查询返回一个map</span></span><br><span class="line">        <span class="comment">//自定义方法</span></span><br><span class="line">        headlineMapper.selectPageMap(page, portalVo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.结果封装</span></span><br><span class="line">        <span class="comment">//分页数据封装</span></span><br><span class="line">        Map&lt;String,Object&gt; pageInfo =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        pageInfo.put(<span class="string">&quot;pageData&quot;</span>,page.getRecords());</span><br><span class="line">        pageInfo.put(<span class="string">&quot;pageNum&quot;</span>,page.getCurrent());</span><br><span class="line">        pageInfo.put(<span class="string">&quot;pageSize&quot;</span>,page.getSize());</span><br><span class="line">        pageInfo.put(<span class="string">&quot;totalPage&quot;</span>,page.getPages());</span><br><span class="line">        pageInfo.put(<span class="string">&quot;totalSize&quot;</span>,page.getTotal());</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; pageInfoMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        pageInfoMap.put(<span class="string">&quot;pageInfo&quot;</span>,pageInfo);</span><br><span class="line">        <span class="comment">// 响应JSON</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(pageInfoMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapper</p>
<p>接口:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HeadlineMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Headline&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义分页查询方法</span></span><br><span class="line">    IPage&lt;Map&gt; <span class="title function_">selectPageMap</span><span class="params">(IPage&lt;Headline&gt; page, </span></span><br><span class="line"><span class="params">                <span class="meta">@Param(&quot;portalVo&quot;)</span> PortalVo portalVo)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mapperxml:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectPageMap&quot;</span> resultType=<span class="string">&quot;map&quot;</span>&gt;</span><br><span class="line">    select hid,title,type,page_views pageViews,TIMESTAMPDIFF(HOUR,create_time,NOW()) pastHours,</span><br><span class="line">            publisher from news_headline where is_deleted=<span class="number">0</span></span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;portalVo.keyWords !=null and portalVo.keyWords.length()&gt;0 &quot;</span>&gt;</span><br><span class="line">                and title like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;portalVo.keyWords&#125;,<span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;portalVo.type != null and portalVo.type != 0&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">type</span> <span class="operator">=</span> #&#123;portalVo.type&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p><strong>2.3 查询头条详情</strong></p>
<ol>
<li><p>需求描述</p>
<p><img src="https://blog-resources.this0.com/image/202405101325443.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>用户点击”查看全文”时,向服务端发送新闻id</li>
<li>后端根据新闻id查询完整新闻文章信息并返回</li>
<li>后端要同时让新闻的浏览量+1</li>
</ul>
</li>
<li><p>接口描述</p>
<p>url地址：portal&#x2F;showHeadlineDetail</p>
<p>请求方式：post</p>
<p>请求参数:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">hid=<span class="number">1</span> param形成参数</span><br></pre></td></tr></table></figure>

<p>响应数据：</p>
<p>成功</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;200&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;headline&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;hid&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span>                     <span class="comment">// 新闻id </span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;马斯克宣布 ... ...&quot;</span><span class="punctuation">,</span>   <span class="comment">// 新闻标题</span></span><br><span class="line">            <span class="attr">&quot;article&quot;</span><span class="punctuation">:</span><span class="string">&quot;... ...&quot;</span>            <span class="comment">// 新闻正文</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span>                    <span class="comment">// 新闻所属类别编号  </span></span><br><span class="line">            <span class="attr">&quot;typeName&quot;</span><span class="punctuation">:</span><span class="string">&quot;科技&quot;</span><span class="punctuation">,</span>       x      <span class="comment">// 新闻所属类别</span></span><br><span class="line">            <span class="attr">&quot;pageViews&quot;</span><span class="punctuation">:</span><span class="string">&quot;40&quot;</span><span class="punctuation">,</span>              <span class="comment">// 新闻浏览量</span></span><br><span class="line">            <span class="attr">&quot;pastHours&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span> <span class="punctuation">,</span>            <span class="comment">// 发布时间已过小时数</span></span><br><span class="line">            <span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span> <span class="punctuation">,</span>              <span class="comment">// 发布用户ID</span></span><br><span class="line">            <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span>       x          <span class="comment">// 新闻作者</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现</p>
<ol>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首页详情接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;showHeadlineDetail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">showHeadlineDetail</span><span class="params">(Integer hid)</span>&#123;</span><br><span class="line">    <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> headlineService.showHeadlineDetail(hid);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>service</p>
<p>&#x2F;&#x2F;TODO，我的代码里</p>
<p>System.out.println(“detail.get(&quot;page_views&quot;).getClass() &#x3D; “ + detail.get(“page_views”).getClass());<br>&#x2F;&#x2F;上一句输出：detail.get(“page_views”).getClass() &#x3D; class java.lang.Integer，<br>int i &#x3D; (Integer)detail.get(“page_views”) + 1;   &#x2F;&#x2F;TODO,detail.get(“page_views”)它本身就是Integer类型，为什么还要把她强转成Integer？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 详情数据查询</span></span><br><span class="line"><span class="comment"> * &quot;headline&quot;:&#123;</span></span><br><span class="line"><span class="comment"> * &quot;hid&quot;:&quot;1&quot;,                     // 新闻id</span></span><br><span class="line"><span class="comment"> * &quot;title&quot;:&quot;马斯克宣布 ... ...&quot;,   // 新闻标题</span></span><br><span class="line"><span class="comment"> * &quot;article&quot;:&quot;... ...&quot;            // 新闻正文</span></span><br><span class="line"><span class="comment"> * &quot;type&quot;:&quot;1&quot;,                    // 新闻所属类别编号</span></span><br><span class="line"><span class="comment"> * &quot;typeName&quot;:&quot;科技&quot;,             // 新闻所属类别</span></span><br><span class="line"><span class="comment"> * &quot;pageViews&quot;:&quot;40&quot;,              // 新闻浏览量</span></span><br><span class="line"><span class="comment"> * &quot;pastHours&quot;:&quot;3&quot; ,              // 发布时间已过小时数</span></span><br><span class="line"><span class="comment"> * &quot;publisher&quot;:&quot;1&quot; ,              // 发布用户ID</span></span><br><span class="line"><span class="comment"> * &quot;author&quot;:&quot;张三&quot;                 // 新闻作者</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * 注意: 是多表查询 , 需要更新浏览量+1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">showHeadlineDetail</span><span class="params">(Integer hid)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.实现根据id的查询(多表</span></span><br><span class="line">    <span class="type">Map</span> <span class="variable">headLineDetail</span> <span class="operator">=</span> headlineMapper.selectDetailMap(hid);</span><br><span class="line">    <span class="comment">//2.拼接头条对象(阅读量和version)进行数据更新</span></span><br><span class="line">    <span class="type">Headline</span> <span class="variable">headline</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Headline</span>();</span><br><span class="line">    headline.setHid(hid);</span><br><span class="line">    headline.setPageViews((Integer) headLineDetail.get(<span class="string">&quot;pageViews&quot;</span>)+<span class="number">1</span>); <span class="comment">//阅读量+1</span></span><br><span class="line">    headline.setVersion((Integer) headLineDetail.get(<span class="string">&quot;version&quot;</span>)); <span class="comment">//设置版本</span></span><br><span class="line">    headlineMapper.updateById(headline);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; pageInfoMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    pageInfoMap.put(<span class="string">&quot;headline&quot;</span>,headLineDetail);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(pageInfoMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapper</p>
<p>接口:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询头条详情</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Map <span class="title function_">selectDetailMap</span><span class="params">(Integer hid)</span>;</span><br></pre></td></tr></table></figure>

<p>mapperxml:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    Map <span class="title function_">selectDetailMap</span><span class="params">(Integer hid)</span>;--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;selectDetailMap&quot;</span> resultType=<span class="string">&quot;map&quot;</span>&gt;</span><br><span class="line">    select hid,title,article,type, h.version ,tname typeName ,page_views pageViews</span><br><span class="line">            ,TIMESTAMPDIFF(HOUR,create_time,NOW()) pastHours,publisher</span><br><span class="line">                    ,nick_name author from news_headline h</span><br><span class="line">                        left join news_type t on h.type = t.tid</span><br><span class="line">                                left join news_user u  on h.publisher = u.uid</span><br><span class="line">                                            <span class="type">where</span> <span class="variable">hid</span> <span class="operator">=</span> #&#123;hid&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ul>
<h3 id="4-3-头条模块开发-TODO这里没做"><a href="#4-3-头条模块开发-TODO这里没做" class="headerlink" title="4.3 头条模块开发	&#x2F;&#x2F;TODO这里没做"></a>4.3 头条模块开发	&#x2F;&#x2F;TODO这里没做</h3><ul>
<li><p>**3.1 登陆验证和保护 **</p>
<ol>
<li><p>需求描述</p>
<p><img src="https://blog-resources.this0.com/image/202405101325500.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>客户端在进入发布页前、发布新闻前、进入修改页前、修改前、删除新闻前先向服务端发送请求携带token请求头</li>
<li>后端接收token请求头后,校验用户登录是否过期并做响应</li>
<li>前端根据响应信息提示用户进入登录页还是进入正常业务页面</li>
</ul>
</li>
<li><p>接口描述</p>
<p>url地址：user&#x2F;checkLogin</p>
<p>请求方式：get</p>
<p>请求参数:  无</p>
<p>请求头： token: 用户token</p>
<p>响应数据：</p>
<p>未过期：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;200&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>过期：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;504&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;loginExpired&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现</p>
<ol>
<li><p>controller 【登录检查】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;checkLogin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">checkLogin</span><span class="params">(<span class="meta">@RequestHeader</span> String token)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(token) || jwtHelper.isExpiration(token))&#123;</span><br><span class="line">        <span class="comment">//没有传或者过期 未登录</span></span><br><span class="line">        <span class="keyword">return</span> Result.build(<span class="literal">null</span>, ResultCodeEnum.NOTLOGIN);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>拦截器 【所有&#x2F;headline开头都需要检查登陆】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginProtectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtHelper jwtHelper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(token) || jwtHelper.isExpiration(token))&#123;</span><br><span class="line">            <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.build(<span class="literal">null</span>, ResultCodeEnum.NOTLOGIN);</span><br><span class="line">            <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> objectMapper.writeValueAsString(result);</span><br><span class="line">            response.getWriter().print(json);</span><br><span class="line">            <span class="comment">//拦截</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>拦截器配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginProtectInterceptor loginProtectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(loginProtectInterceptor).addPathPatterns(<span class="string">&quot;/headline/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p><strong>3.2 头条发布实现</strong></p>
<ol>
<li><p>需求描述</p>
<p><img src="https://blog-resources.this0.com/image/202405101326605.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>用户在客户端输入发布的新闻信息完毕后</li>
<li>发布前先请求后端的登录校验接口验证登录</li>
<li>登录通过则提交新闻信息</li>
<li>后端将新闻信息存入数据库</li>
</ul>
</li>
<li><p>接口描述</p>
<p>url地址：headline&#x2F;publish</p>
<p>请求方式：post</p>
<p>请求头:&#x20;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">token: ... ...</span><br></pre></td></tr></table></figure>

<p>请求参数:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;尚硅谷宣布 ... ...&quot;</span><span class="punctuation">,</span>   <span class="comment">// 文章标题</span></span><br><span class="line">    <span class="attr">&quot;article&quot;</span><span class="punctuation">:</span><span class="string">&quot;... ...&quot;</span><span class="punctuation">,</span>          <span class="comment">// 文章内容</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span>                    <span class="comment">// 文章类别</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>响应数据：</p>
<p>未登录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>:<span class="string">&quot;504&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>:<span class="string">&quot;loginExpired&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;200&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现</p>
<ol>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现步骤:</span></span><br><span class="line"><span class="comment"> *   1. token获取userId [无需校验,拦截器会校验]</span></span><br><span class="line"><span class="comment"> *   2. 封装headline数据</span></span><br><span class="line"><span class="comment"> *   3. 插入数据即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;publish&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">publish</span><span class="params">(<span class="meta">@RequestBody</span> Headline headline,<span class="meta">@RequestHeader</span> String token)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> jwtHelper.getUserId(token).intValue();</span><br><span class="line">    headline.setPublisher(userId);</span><br><span class="line">    <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> headlineService.publish(headline);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headline</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">publish</span><span class="params">(Headline headline)</span> &#123;</span><br><span class="line">    <span class="comment">//TODO日期时间类看一下</span></span><br><span class="line">    headline.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    headline.setUpdateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    headline.setPageViews(<span class="number">0</span>);</span><br><span class="line">    headlineMapper.insert(headline);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p><strong>3.3 修改头条回显</strong></p>
<ol>
<li><p>需求描述</p>
<p><img src="https://blog-resources.this0.com/image/202405101326684.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>前端先调用登录校验接口,校验登录是否过期</li>
<li>登录校验通过后 ,则根据新闻id查询新闻的完整信息并响应给前端</li>
</ul>
</li>
<li><p>接口描述</p>
<p>url地址：headline&#x2F;findHeadlineByHid</p>
<p>请求方式：post</p>
<p>请求参数:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">hid=<span class="number">1</span> param形成参数</span><br></pre></td></tr></table></figure>

<p>响应数据：</p>
<p>成功</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;200&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;headline&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;hid&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;马斯克宣布&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;article&quot;</span><span class="punctuation">:</span><span class="string">&quot;... ... &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现</p>
<ol>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;findHeadlineByHid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">findHeadlineByHid</span><span class="params">(Integer hid)</span>&#123;</span><br><span class="line">    <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> headlineService.findHeadlineByHid(hid);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询详情</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">findHeadlineByHid</span><span class="params">(Integer hid)</span> &#123;</span><br><span class="line">    <span class="type">Headline</span> <span class="variable">headline</span> <span class="operator">=</span> headlineMapper.selectById(hid);</span><br><span class="line">    Map&lt;String,Object&gt; pageInfoMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    pageInfoMap.put(<span class="string">&quot;headline&quot;</span>,headline);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(pageInfoMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p><strong>3.4 头条修改实现</strong></p>
<ol>
<li><p>需求描述</p>
<ul>
<li>客户端将新闻信息修改后,提交前先请求登录校验接口校验登录状态</li>
<li>登录校验通过则提交修改后的新闻信息,后端接收并更新进入数据库</li>
</ul>
</li>
<li><p>接口描述</p>
<p>url地址：headline&#x2F;update</p>
<p>请求方式：post</p>
<p>请求参数:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hid&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;尚硅谷宣布 ... ...&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;article&quot;</span><span class="punctuation">:</span><span class="string">&quot;... ...&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>响应数据：</p>
<p>成功</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;200&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现</p>
<ol>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Headline headline)</span>&#123;</span><br><span class="line">    <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> headlineService.updateHeadLine(headline);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改业务</span></span><br><span class="line"><span class="comment"> * 1.查询version版本</span></span><br><span class="line"><span class="comment"> * 2.补全属性,修改时间 , 版本!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headline</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateHeadLine</span><span class="params">(Headline headline)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取版本</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">version</span> <span class="operator">=</span> headlineMapper.selectById(headline.getHid()).getVersion();</span><br><span class="line"></span><br><span class="line">    headline.setVersion(version);</span><br><span class="line">    headline.setUpdateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">    headlineMapper.updateById(headline);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p><strong>3.5 删除头条功能</strong></p>
<ol>
<li><p>需求描述</p>
<p><img src="https://blog-resources.this0.com/image/202405101326760.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>将要删除的新闻id发送给服务端</li>
<li>服务端校验登录是否过期,未过期则直接删除,过期则响应登录过期信息</li>
</ul>
</li>
<li><p>接口描述</p>
<p>url地址：headline&#x2F;removeByHid</p>
<p>请求方式：post</p>
<p>请求参数:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">hid=<span class="number">1</span> param形成参数</span><br></pre></td></tr></table></figure>

<p>响应数据：</p>
<p>成功</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;200&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>代码实现</p>
<ol>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;removeByHid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">removeById</span><span class="params">(Integer hid)</span>&#123;</span><br><span class="line">    headlineService.removeById(hid);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ul>
<h2 id="五、前后端联调"><a href="#五、前后端联调" class="headerlink" title="五、前后端联调"></a>五、前后端联调</h2>]]></content>
      <categories>
        <category>Java项目</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Java项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/articles/7273cdc.html</url>
    <content><![CDATA[<h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><h3 id="第一章-为什么使用Maven"><a href="#第一章-为什么使用Maven" class="headerlink" title="第一章 为什么使用Maven"></a>第一章 为什么使用Maven</h3><ul>
<li><p>获取jar包</p>
<ul>
<li>使用Maven之前，自行在网络中下载jar包，效率较低。如【谷歌、百度、CSDN….】</li>
<li>使用Maven之后，统一在一个地址下载资源jar包【阿里云镜像服务器等…】</li>
</ul>
</li>
<li><p>添加jar包</p>
<ul>
<li>使用Maven之前，将jar复制到项目工程中，jar包添加到项目中，相对浪费存储空间</li>
<li>使用Maven之后，jar包统一存储Maven本地仓库，使用坐标方式将jar包从仓库引入到项目中</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403301656766.png?x-oss-process=style/this0-blog" alt="image-20220320091431579"></p>
</li>
<li><p>使用Maven便于解决jar包<strong>冲突及依赖</strong>问题</p>
</li>
</ul>
<h3 id="第二章-什么是Maven"><a href="#第二章-什么是Maven" class="headerlink" title="第二章 什么是Maven"></a>第二章 什么是Maven</h3><ul>
<li>Maven字面意：专家、内行</li>
<li>Maven是一款自动化构建工具，专注服务于Java平台的<strong>项目构建</strong>和<strong>依赖管理</strong>。</li>
<li>依赖管理：jar之间的依赖关系，jar包管理问题统称为依赖管理</li>
<li><strong>项目构建</strong>：项目构建不等同于项目创建<ul>
<li>项目构建是一个过程【7步骤组成】，项目创建是瞬间完成的<ol>
<li>清理：mvn clean</li>
<li>编译：mvn compile</li>
<li>测试：mvn test</li>
<li>报告：</li>
<li>打包：mvn package</li>
<li>安装：mvn install</li>
<li>部署：</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="第三章-Maven基本使用"><a href="#第三章-Maven基本使用" class="headerlink" title="第三章 Maven基本使用"></a>第三章 Maven基本使用</h3><h4 id="3-1-Maven准备"><a href="#3-1-Maven准备" class="headerlink" title="3.1 Maven准备"></a>3.1 Maven准备</h4><blockquote>
<p>注意：IDEA2019.1.x 最高支持Maven的3.6.0</p>
</blockquote>
<ul>
<li>下载地址：<a href="http://maven.apache.org/">http://maven.apache.org/</a></li>
<li>Maven底层使用Java语言编写的，所有需要配置JAVA_HOME环境变量及Path</li>
<li>将Maven解压<strong>非中文无空格</strong>目录下</li>
<li>配置<strong>MAVEN_HOME</strong>环境变量及Path</li>
<li>输入【cmd】,进入命令行窗口，输入<strong>【mvn   -v】</strong> ，检查Maven环境是否搭建成功</li>
</ul>
<h4 id="3-2-Maven基本配置"><a href="#3-2-Maven基本配置" class="headerlink" title="3.2 Maven基本配置"></a>3.2 Maven基本配置</h4><ul>
<li><p>Maven配置文件位置：maven根目录&#x2F;conf&#x2F;settings.xml</p>
</li>
<li><p>设置本地仓库【默认：C:&#x2F;用户家目录&#x2F;.m2&#x2F;repository】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\SDE_YPT\Data_YPT\maven-repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置阿里云镜像服务器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-default-http-blocker<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>external:http:*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://0.0.0.0/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">blocked</span>&gt;</span>true<span class="tag">&lt;/<span class="name">blocked</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置使用JDK版本【1.8|JDK8】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-3-Maven之Helloworld"><a href="#3-3-Maven之Helloworld" class="headerlink" title="3.3 Maven之Helloworld"></a>3.3 Maven之Helloworld</h4><blockquote>
<p>约束&gt;配置&gt;代码</p>
</blockquote>
<ul>
<li><p>Maven工程目录结构约束</p>
<ul>
<li>项目名<ul>
<li>src【书写源代码】<ul>
<li>main【书写主程序代码】<ul>
<li>java【书写java源代码】</li>
<li>resources【书写配置文件代码】</li>
</ul>
</li>
<li>test【书写测试代码】<ul>
<li>java【书写测试代码】</li>
</ul>
</li>
</ul>
</li>
<li>pom.xml【书写Maven配置】</li>
</ul>
</li>
</ul>
</li>
<li><p>测试步骤</p>
<ul>
<li><strong>进入项目名根目录【在根目标输入cmd即可】</strong></li>
<li>mvn clean</li>
<li>mvn compile</li>
<li>mvn test-compile</li>
<li>mvn test</li>
<li>mvn package</li>
<li>mvn install</li>
</ul>
</li>
</ul>
<h3 id="第四章-Maven及Idea的相关应用"><a href="#第四章-Maven及Idea的相关应用" class="headerlink" title="第四章 Maven及Idea的相关应用"></a>第四章 Maven及Idea的相关应用</h3><h4 id="4-1-将Maven整合到IDEA中"><a href="#4-1-将Maven整合到IDEA中" class="headerlink" title="4.1 将Maven整合到IDEA中"></a>4.1 将Maven整合到IDEA中</h4><p><img src="https://blog-resources.this0.com/image/202403301656808.png?x-oss-process=style/this0-blog" alt="image-20220320104957163"></p>
<p><img src="https://blog-resources.this0.com/image/202403301656820.png?x-oss-process=style/this0-blog" alt="image-20220320105010404"></p>
<h4 id="4-2-在IDEA中新建Maven工程"><a href="#4-2-在IDEA中新建Maven工程" class="headerlink" title="4.2 在IDEA中新建Maven工程"></a>4.2 在IDEA中新建Maven工程</h4><p><img src="https://blog-resources.this0.com/image/202403301656766.png?x-oss-process=style/this0-blog" alt="image-20220320113913242"></p>
<p><img src="https://blog-resources.this0.com/image/202403301656824.png?x-oss-process=style/this0-blog" alt="image-20220320113928189"></p>
<h3 id="第五章-Maven核心概念"><a href="#第五章-Maven核心概念" class="headerlink" title="第五章 Maven核心概念"></a>第五章 Maven核心概念</h3><h4 id="5-1-Maven的POM"><a href="#5-1-Maven的POM" class="headerlink" title="5.1 Maven的POM"></a>5.1 Maven的POM</h4><ul>
<li><p>POM全称：Project Object Model【项目对象模型】，将项目封装为对象模型，便于使用Maven管理【构建】项目</p>
</li>
<li><p>pom.xml常用标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    设置父工程坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-2-Maven约定的目录结构"><a href="#5-2-Maven约定的目录结构" class="headerlink" title="5.2 Maven约定的目录结构"></a>5.2 Maven约定的目录结构</h4><ul>
<li>项目名<ul>
<li>src【书写java源代码】<ul>
<li>main【书写java主程序代码】<ul>
<li>java【书写java代码】</li>
<li>resources【书写配置文件代码】</li>
</ul>
</li>
<li>test【书写测试代码】<ul>
<li>java【书写测试java代码】</li>
</ul>
</li>
</ul>
</li>
<li>pom.xml【书写配置文件代码】</li>
<li>target【编译后目录结构】</li>
</ul>
</li>
</ul>
<h4 id="5-3-Maven生命周期"><a href="#5-3-Maven生命周期" class="headerlink" title="5.3 Maven生命周期"></a>5.3 Maven生命周期</h4><ul>
<li>Maven生命周期：按照顺序执行各个命令，Maven生命周期包含以下三个部分组成<ul>
<li>Clean LifeCycle：在进行真正的构建之前进行一些清理工作。</li>
<li><strong>Default LifeCycle：构建的核心部分，编译，测试，打包，安装，部署等等。</strong></li>
<li>Site LifeCycle：生成项目报告，站点，发布站点。</li>
</ul>
</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403301656772.png?x-oss-process=style/this0-blog" alt="image-20220320143031010"></p>
<ul>
<li>生命周期关系</li>
</ul>
<p>每个生命周期独立，执行每个周期中的命令，会自动调用当前生命周期之前的命令</p>
<h4 id="5-4-Maven插件和目标"><a href="#5-4-Maven插件和目标" class="headerlink" title="5.4 Maven插件和目标"></a>5.4 Maven插件和目标</h4><ul>
<li>插件：插件本质是由jar包和配置文件组成，如tomcat插件</li>
<li>目标：每个插件都能实现多个功能，每个功能就是一个插件目标。</li>
<li>配置的插件会替换默认插件</li>
<li><code>可以配置打包目录，排除目录等</code></li>
</ul>
<h4 id="5-5-Maven的仓库【重要】"><a href="#5-5-Maven的仓库【重要】" class="headerlink" title="5.5 Maven的仓库【重要】"></a>5.5 Maven的仓库【重要】</h4><ul>
<li>仓库分类<ul>
<li>本地仓库：为当前计算机提供maven服务</li>
<li>远程仓库：为其他计算机也可以提供maven服务<ul>
<li><code>私服：架设在当前局域网环境下，为当前局域网范围内的所有Maven工程服务。</code></li>
<li><code>中央仓库：架设在Internet上，为全世界所有Maven工程服务。</code></li>
<li><code>中央仓库的镜像：架设在各个大洲，为中央仓库分担流量。减轻中央仓库的压力，同时更快的响应用户请求。</code></li>
</ul>
</li>
</ul>
</li>
<li>仓库中的文件类型【jar包】<ul>
<li>Maven的插件</li>
<li>第三方框架或工具的jar包</li>
<li>自己研发的项目或模块</li>
</ul>
</li>
</ul>
<h4 id="5-6-Maven的坐标【重要】"><a href="#5-6-Maven的坐标【重要】" class="headerlink" title="5.6 Maven的坐标【重要】"></a>5.6 Maven的坐标【重要】</h4><ul>
<li><p><strong>作用：使用坐标引入jar包</strong></p>
</li>
<li><p>坐标由g-a-v组成</p>
<p><code>[1]groupId：公司或组织的域名倒序+当前项目名称</code></p>
<p><code>[2]artifactId：当前项目的模块名称</code></p>
<p><code>[3]version：当前模块的版本</code></p>
</li>
<li><p>注意</p>
<ul>
<li>g-a-v：本地仓库jar包位置</li>
<li>a-v：jar包全名</li>
</ul>
</li>
<li><p>坐标应用</p>
<ul>
<li><p><strong>坐标参考网址：<a href="http://mvnrepository.com/">http://mvnrepository.com</a></strong></p>
</li>
<li><p>语法，示例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="第六章-Maven的依赖管理"><a href="#第六章-Maven的依赖管理" class="headerlink" title="第六章 Maven的依赖管理"></a>第六章 Maven的依赖管理</h3><h4 id="6-1-依赖范围"><a href="#6-1-依赖范围" class="headerlink" title="6.1 依赖范围"></a>6.1 <code>依赖范围</code></h4><ul>
<li><code>依赖语法：\&lt;scope&gt;</code><ul>
<li><code>compile【默认值】：在main、test、Tomcat【服务器】下均有效。</code></li>
<li><code>test：只能在test目录下有效</code><ul>
<li><code>junit</code></li>
</ul>
</li>
<li><code>provided：在main、test下均有效，Tomcat【服务器】无效。</code><ul>
<li><code>servlet-api</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="6-2-依赖传递性"><a href="#6-2-依赖传递性" class="headerlink" title="6.2 依赖传递性"></a>6.2 <code>依赖传递性</code></h4><p>Maven 的依赖传递性指的是当一个 Maven 项目依赖于其他的 Maven 项目时，它会自动获取和使用这些依赖项目所声明的依赖项。</p>
<ul>
<li><code>路径最短者有先【就近原则】</code><ul>
<li>路径最短者优先（Shortest Path Wins）：当多个依赖项声明了相同的库但版本不同时，Maven 会选择最短路径上的依赖项。路径是指从项目根目录到依赖项的传递路径，通过这个路径来衡量依赖的距离。Maven 会尝试解析并使用最短路径上的依赖项版本，以避免潜在的冲突。比如，如果项目 A 依赖于项目 B 和项目 C。项目 B 依赖于项目 D，而项目 C 依赖于项目 E。假设项目 A 使用了项目 D 的某个功能，而项目 D 在项目 B 和项目 C 中分别使用了不同的版本，比如项目 B 使用了版本 2.0.0，而项目 C 使用了版本 1.5.0。根据”路径最短者有先”原则，Maven会选择项目 B 的版本，因为通过项目 B 的路径到达项目 D 的路径更短。因此，项目 A 最终将使用项目 D 的版本 2.0.0。</li>
</ul>
</li>
<li><code>先声明者优先</code><ul>
<li>先声明者优先（First Declaration Wins）：当多个依赖项声明了相同的库和版本时，Maven 会选择首次声明的依赖项。也就是说，如果在项目的依赖声明中首先出现了某个库的特定版本，后续声明该库的其他版本会被忽略。这样可以确保使用首次声明的版本，避免潜在的冲突。</li>
</ul>
</li>
<li>注意：Maven可以自动解决jar包之间的依赖问题</li>
<li>通常情况下，<code>路径最短者优先是更常用的解决策略</code>（默认），因为它可以避免依赖冲突，并且通常更容易理解和控制。但在某些特殊情况下，如果有明确的依赖顺序要求或者特定版本的依赖项必须被使用，先声明者优先也可以是一种可行的选择。</li>
</ul>
<h3 id="第七章-Maven中统一管理版本号"><a href="#第七章-Maven中统一管理版本号" class="headerlink" title="第七章 Maven中统一管理版本号"></a>第七章 <code>Maven中统一管理版本号</code></h3><ul>
<li><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-version</span>&gt;</span>5.3.17<span class="tag">&lt;/<span class="name">spring-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第七章-Maven的继承"><a href="#第七章-Maven的继承" class="headerlink" title="第七章 Maven的继承"></a>第七章 <code>Maven的继承</code></h3><h4 id="7-1-为什么需要继承"><a href="#7-1-为什么需要继承" class="headerlink" title="7.1 为什么需要继承"></a>7.1 为什么需要继承</h4><ul>
<li>如子工程大部分都共同使用jar包，可以提取父工程中，使用【继承原理】在子工程中使用</li>
<li>父工程打包方式，必须是pom方式</li>
</ul>
<h4 id="7-2-Maven继承方式一"><a href="#7-2-Maven继承方式一" class="headerlink" title="7.2 Maven继承方式一"></a>7.2 Maven继承方式一</h4><ul>
<li><p>在父工程中的pom.xml中导入jar包，在子工程中统一使用。【所有子工程强制引入父工程jar包】</p>
</li>
<li><p>示例代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7-3-Maven继承方式二"><a href="#7-3-Maven继承方式二" class="headerlink" title="7.3 Maven继承方式二"></a>7.3 Maven继承方式二</h4><ul>
<li><p>在父工程中导入jar包【pom.xml】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在子工程引入父工程的相关jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>注意：在子工程中，不能指定版本号，虽然在子模块中指定版本号是有效的，但为了更好地管理和维护依赖关系，推荐使用父项目的 &lt;dependencyManagement&gt; 元素进行版本管理，而在子模块中只声明依赖而不指定版本号。这有助于确保整个项目中的依赖版本一致性。</code></p>
</li>
</ul>
<h3 id="第八章-Maven的聚合"><a href="#第八章-Maven的聚合" class="headerlink" title="第八章 Maven的聚合"></a>第八章 <code>Maven的聚合</code></h3><ul>
<li><p>为什么使用Maven的聚合</p>
<ul>
<li>优势：<code>只要将子工程聚合到父工程中，就可以实现效果：安装或清除父工程时，子工程会进行同步操作。</code></li>
<li>注意：Maven会按照依赖顺序自动安装子工程</li>
</ul>
</li>
<li><p>语法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>maven_helloworld<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>HelloFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>MakeFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务项目架构搭建</title>
    <url>/articles/40c5a151.html</url>
    <content><![CDATA[<h1 id="第一章-NoSQL数据库"><a href="#第一章-NoSQL数据库" class="headerlink" title="第一章 NoSQL数据库"></a>第一章 NoSQL数据库</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 了解什么是NoSQL 数据库及常见的NoSQL数据库</p>
<p>2 了解其他类型数据库</p>
<h2 id="第一节-NoSQL数据库概述"><a href="#第一节-NoSQL数据库概述" class="headerlink" title="第一节 NoSQL数据库概述"></a>第一节 NoSQL数据库概述</h2><h3 id="1-1-什么是NoSQL数据库"><a href="#1-1-什么是NoSQL数据库" class="headerlink" title="1.1 什么是NoSQL数据库"></a>1.1 什么是NoSQL数据库</h3><blockquote>
<p>NoSQL(NoSQL &#x3D; Not Only SQL )，意即“不仅仅是SQL”，泛指非关系型的数据库。</p>
</blockquote>
<ul>
<li>不遵循SQL标准。</li>
<li>不支持ACID。</li>
<li>远超于SQL的性能。</li>
</ul>
<h3 id="1-2-NoSQL适用的场景"><a href="#1-2-NoSQL适用的场景" class="headerlink" title="1.2 NoSQL适用的场景"></a>1.2 NoSQL适用的场景</h3><ul>
<li>对数据高并发的读写</li>
<li>海量数据的读写</li>
<li>对数据高可扩展性的</li>
</ul>
<h3 id="1-3-NoSQL不适用的场景"><a href="#1-3-NoSQL不适用的场景" class="headerlink" title="1.3 NoSQL不适用的场景"></a>1.3 NoSQL不适用的场景</h3><ul>
<li><p>需要事务支持</p>
</li>
<li><p>基于sql的结构化查询存储，处理复杂的关系查询</p>
<p>&#x2F;&#x2F;TODO,不支持事务，不支持ACID,不适用处理复杂关系的查询，但是redis每个都是原子操作</p>
</li>
</ul>
<h3 id="1-4-常见NoSQL数据库"><a href="#1-4-常见NoSQL数据库" class="headerlink" title="1.4 常见NoSQL数据库"></a>1.4 常见NoSQL数据库</h3><h4 id="1-4-1-Memcached"><a href="#1-4-1-Memcached" class="headerlink" title="1.4.1 Memcached"></a>1.4.1 Memcached</h4><p>1 很早出现的NoSql数据库</p>
<p>2 <strong>数据都在内存中，一般不持久化</strong></p>
<p>3 支持简单的key-value模式，<strong>支持类型单一</strong></p>
<p>4 一般是作为<strong>缓存数据库</strong>辅助持久化的数据库</p>
<p>&#x2F;&#x2F;TODO,Memcached不支持持久化，仅支持key-value</p>
<h4 id="1-4-2-Redis"><a href="#1-4-2-Redis" class="headerlink" title="1.4.2 Redis"></a>1.4.2 Redis</h4><p><img src="https://blog-resources.this0.com/image/202403281329197.png?x-oss-process=style/this0-blog"></p>
<p>1 几乎覆盖了Memcached的绝大部分功能</p>
<p>2 数据都在内存中，<strong>支持持久化，主要用作备份恢复</strong></p>
<p>3 除了支持简单的key-value模式，还支持多种数据结构的存储，比如 list、set、hash、zset等。</p>
<p>4 一般是作为<strong>缓存数据库</strong>辅助持久化的数据库</p>
<p>&#x2F;&#x2F;TODO,支持持久化，更多数据结构</p>
<h4 id="1-4-3-MongoDB"><a href="#1-4-3-MongoDB" class="headerlink" title="1.4.3 MongoDB"></a>1.4.3 MongoDB</h4><p><img src="https://blog-resources.this0.com/image/202403281329198.png?x-oss-process=style/this0-blog"></p>
<p>1 高性能、开源、模式自由(schema free)的<strong>文档型数据库</strong></p>
<p>2 数据都在内存中， 如果内存不足，把不常用的数据保存到硬盘</p>
<p>3 虽然是key-value模式，但是对value（尤其是<strong>json</strong>）提供了丰富的查询功能</p>
<p>4 支持二进制数据及大型对象</p>
<p>5 可以根据数据的特点<strong>替代RDBMS</strong> ，成为独立的数据库。或者配合RDBMS，存储特定的数据。</p>
<p>&#x2F;&#x2F;TODO,文档型数据库</p>
<h2 id="第二节-DB-Engines数据库排名"><a href="#第二节-DB-Engines数据库排名" class="headerlink" title="第二节 DB-Engines数据库排名"></a>第二节 DB-Engines数据库排名</h2><p>查看连接<a href="http://db-engines.com/en/ranking" title="http://db-engines.com/en/ranking"><strong>http://db-engines.com/en/ranking</strong></a></p>
<p><img src="https://blog-resources.this0.com/image/202403281329199.png?x-oss-process=style/this0-blog" alt="image-20230627115200495"></p>
<h1 id="第二章-Redis简介和安装"><a href="#第二章-Redis简介和安装" class="headerlink" title="第二章 Redis简介和安装"></a>第二章 Redis简介和安装</h1><h2 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 能够独立完成redis数据库的安装和启动方式调试</p>
<p>2 能够简单操作redis数据库</p>
<h2 id="第一节-Redis简介和适用场景"><a href="#第一节-Redis简介和适用场景" class="headerlink" title="第一节 Redis简介和适用场景"></a>第一节 Redis简介和适用场景</h2><ul>
<li><p>Redis是key-value存储系统（区别于MySQL的二维表格的形式存储。）</p>
</li>
<li><p>Redis数据都是缓存在计算机内存中，但是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，实现数据的持久化。</p>
</li>
<li><p>Redis读写速度快，Redis读取的速度是110000次&#x2F;s，写的速度是81000次&#x2F;s；</p>
</li>
<li><p>Redis的所有操作都是原子性的。</p>
</li>
<li><p>Redis支持多种数据结构：string（字符串），list（列表），hash（哈希），set（集合），zset(有序集合)</p>
</li>
<li><p>Redis支持集群部署</p>
</li>
<li><p>支持过期时间，支持事务，消息订阅</p>
</li>
</ul>
<h3 id="1-1-配合关系型数据库做高速缓存"><a href="#1-1-配合关系型数据库做高速缓存" class="headerlink" title="1.1 配合关系型数据库做高速缓存"></a>1.1 配合关系型数据库做高速缓存</h3><p>1 高频次，热门访问的数据，降低数据库IO</p>
<p><img src="https://blog-resources.this0.com/image/202403281329200.png?x-oss-process=style/this0-blog"></p>
<h3 id="1-2-多样的数据结构存储持久化数据"><a href="#1-2-多样的数据结构存储持久化数据" class="headerlink" title="1.2 多样的数据结构存储持久化数据"></a>1.2 多样的数据结构存储持久化数据</h3><p><img src="https://blog-resources.this0.com/image/202403281329201.png?x-oss-process=style/this0-blog"></p>
<h2 id="第二节-Redis的安装和基本操作"><a href="#第二节-Redis的安装和基本操作" class="headerlink" title="第二节 Redis的安装和基本操作"></a>第二节 Redis的安装和基本操作</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>&#x2F;&#x2F;TODO，archlinux安装redis见站内文章：</p>
<h3 id="2-2-Redis的启动和停止"><a href="#2-2-Redis的启动和停止" class="headerlink" title="2.2 Redis的启动和停止"></a>2.2 Redis的启动和停止</h3><h4 id="2-2-1-查看安装目录"><a href="#2-2-1-查看安装目录" class="headerlink" title="2.2.1 查看安装目录"></a>2.2.1 查看安装目录</h4><p>进入自己的安装路径，然后执行</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> |<span class="keyword">grep</span> redis</span><br></pre></td></tr></table></figure>

<ul>
<li><p>redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何</p>
<p>&#x2F;&#x2F;TODO,后面演示</p>
</li>
<li><p>redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲</p>
</li>
<li><p>redis-check-dump：修复有问题的dump.rdb文件</p>
</li>
<li><p>redis-sentinel：Redis集群使用</p>
</li>
<li><p>redis-server：Redis服务器启动命令</p>
</li>
<li><p>redis-cli：客户端，操作入口</p>
</li>
</ul>
<h4 id="2-2-2-默认配置文件拷贝到自定义路径"><a href="#2-2-2-默认配置文件拷贝到自定义路径" class="headerlink" title="2.2.2 默认配置文件拷贝到自定义路径"></a>2.2.2 默认配置文件拷贝到自定义路径</h4><p>养成好习惯，拷贝到自定义路径能留个备份</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>redis<span class="regexp">/redis.conf /</span>home<span class="regexp">/ypt/</span>SDE<span class="regexp">/myredis/</span>redis7.conf</span><br></pre></td></tr></table></figure>

<p>配置文件修改4处：</p>
<p>1 后端启动</p>
<p>daemonize yes</p>
<p>2 保护模式</p>
<p>protected-mode no</p>
<p>3 远程连接</p>
<p>注释掉</p>
<p>bind 127.0.0.1 -::1</p>
<p>4 redis访问密码</p>
<p>requirepass redis</p>
<h4 id="2-2-3-前台启动方式"><a href="#2-2-3-前台启动方式" class="headerlink" title="2.2.3 前台启动方式"></a>2.2.3 前台启动方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure>

<p>不推荐原因: 窗口不能关闭,关闭则服务停止</p>
<h4 id="2-2-4-后台启动方式"><a href="#2-2-4-后台启动方式" class="headerlink" title="2.2.4 后台启动方式"></a>2.2.4 后台启动方式</h4><p>启动redis时,使用我们自己修改之后的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server /home/ypt/SDE/myredis/redis7.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>查看服务启动状态</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure>

<h4 id="2-2-5-通过客户端连接redis"><a href="#2-2-5-通过客户端连接redis" class="headerlink" title="2.2.5 通过客户端连接redis"></a>2.2.5 通过客户端连接redis</h4><ul>
<li>通过客户端指令连接redis</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>

<ul>
<li>如果想退出客户端可以 按 Ctrl+c  ,退出客户端不会关闭redis服务</li>
<li>通过客户端连接指定端口下的redis (默认6379)</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">redis-cli -p 6379</span><br></pre></td></tr></table></figure>

<ul>
<li>连接后,测试与redis的连通性</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ping</span><br></pre></td></tr></table></figure>

<p>带密码连接</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">redis-<span class="keyword">cli</span> -a 密码</span><br></pre></td></tr></table></figure>

<h4 id="2-3-6-停止redis服务"><a href="#2-3-6-停止redis服务" class="headerlink" title="2.3.6 停止redis服务"></a>2.3.6 停止redis服务</h4><ul>
<li>单实例<code>非客户端连接模式</code>下关闭服务</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>客户端连接模式</code>下,直接使用shutdown关闭当前连接的redis服务</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">shutdown</span><br></pre></td></tr></table></figure>

<ul>
<li><code>多实例</code>关闭指定端口的redis服务</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">redis-cli -p 6379 shutdown</span><br></pre></td></tr></table></figure>

<h4 id="2-3-7-Redis端口号-6379-由来"><a href="#2-3-7-Redis端口号-6379-由来" class="headerlink" title="2.3.7 Redis端口号 6379 由来"></a>2.3.7 Redis端口号 6379 由来</h4><p>Alessia <strong>Merz</strong></p>
<hr>
<p>&#x2F;&#x2F;TODO，跳过了，回头看</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="&#x2F;&#x2F;TODO"></a>&#x2F;&#x2F;TODO</h1><h5 id="（2）数据库操作"><a href="#（2）数据库操作" class="headerlink" title="（2）数据库操作"></a>（2）数据库操作</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认16个数据库，类似数组下标从0开始，初始默认使用0号库</span><br><span class="line">使用命令 select &lt;dbid&gt;来切换数据库。如: select 8</span><br><span class="line">统一密码管理，所有库同样密码。</span><br><span class="line">dbsize查看当前数据库的key的数量</span><br><span class="line">flushdb清空当前库</span><br><span class="line">flushall通杀全部库</span><br></pre></td></tr></table></figure>

<h5 id="（3）Redis单线程-多路复用"><a href="#（3）Redis单线程-多路复用" class="headerlink" title="（3）Redis单线程+多路复用"></a>（3）Redis单线程+多路复用</h5><p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</p>
<ul>
<li>多路：指的是多个网络连接客户端</li>
<li>复用：指的是复用同一个线程</li>
<li>I&#x2F;O 多路复用：其实是使用一个线程来检查多个 Socket 的就绪状态，在单个线程中通过记录跟踪每一个 socket（I&#x2F;O流）的状态来管理处理多个 I&#x2F;O 流。</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329212.png?x-oss-process=style/this0-blog" alt="image-20230706100628816"></p>
<p>1、一个 socket 客户端与服务端连接时，会生成对应一个套接字描述符(套接字描述符是文件描述符的一种)，每一个 socket 网络连接其实都对应一个文件描述符。</p>
<ul>
<li>文件描述符(file descriptor)： Linux 系统中，把一切都看做是文件，当进程打开现有文件或创建新文件时，内核向进程返回一个文件描述符。可以理解文件描述符是一个索引，这样，要操作文件的时候，我们直接找到索引就可以对其进行操作了。我们将这个索引叫做文件描述符（file descriptor），简称fd。</li>
</ul>
<p>2、多个客户端与服务端连接时，Redis 使用 「I&#x2F;O 多路复用程序」 将客户端 socket 对应的 FD 注册到监听列表(一个队列)中。当客服端执行 read、write 等操作命令时，I&#x2F;O 多路复用程序会将命令封装成一个事件，并绑定到对应的 FD 上。</p>
<p>3、「文件事件处理器」使用 I&#x2F;O 多路复用模块同时监控多个文件描述符（fd）的读写情况，当 accept、read、write 和 close 文件事件产生时，文件事件处理器就会回调 FD 绑定的事件处理器进行处理相关命令操作。</p>
<p>4、文件事件分派器接收到I&#x2F;O多路复用程序传来的套接字fd后，并根据套接字产生的事件类型，将套接字派发给相应的事件处理器来进行处理相关命令操作。</p>
<p>5、整个文件事件处理器是在单线程上运行的，但是通过 I&#x2F;O 多路复用模块的引入，实现了同时对多个 FD 读写的监控，当其中一个 client 端达到写或读的状态，文件事件处理器就马上执行，从而就不会出现 I&#x2F;O 堵塞的问题，提高了网络通信的性能。</p>
<h1 id="第三章-Redis常用数据类型和命令"><a href="#第三章-Redis常用数据类型和命令" class="headerlink" title="第三章 Redis常用数据类型和命令"></a>第三章 Redis常用数据类型和命令</h1><h2 id="学习目标-2"><a href="#学习目标-2" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 Redis的数据类型</p>
<p>redis的存储时 key-value形式的,这里的五大类型指的是 value的五种数据类型</p>
<p>&#x2F;&#x2F;TODO</p>
<ul>
<li><p>String</p>
</li>
<li><p>List</p>
</li>
<li><p>Hash (key-value键值对)</p>
</li>
<li><p>Set （无序集合）</p>
</li>
<li><p>Zset</p>
</li>
</ul>
<hr>
<p>不常用的5个</p>
<ul>
<li>GEO （经纬度）</li>
<li>HyperLogLog （基数统计）</li>
<li>bitmap（位图）</li>
<li>bitfield (位域)</li>
<li>Stream （流）</li>
</ul>
<p>2 相关命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 如何对键进行一些操作</span><br><span class="line">2 String类型的value值如何进行操作</span><br><span class="line">3 List 类型的value如何进行操作</span><br><span class="line">4 Set类型的value如何进行操作</span><br><span class="line">5 Hash类型的value如何进行操作</span><br><span class="line">6 Zset类型的value如何进行操作</span><br></pre></td></tr></table></figure>

<h2 id="第一节-key操作的相关命令"><a href="#第一节-key操作的相关命令" class="headerlink" title="第一节 key操作的相关命令"></a>第一节 key操作的相关命令</h2><p>&#x2F;&#x2F;TODO命令，记</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>keys *</td>
<td>查看当前库所有key (匹配：keys *1)</td>
</tr>
<tr>
<td>exists key</td>
<td>判断某个key是否存在</td>
</tr>
<tr>
<td>type key</td>
<td>查看你的key是什么类型</td>
</tr>
<tr>
<td>del key</td>
<td>删除指定的key数据</td>
</tr>
<tr>
<td><code>unlink key</code></td>
<td>非阻塞删除,仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作</td>
</tr>
<tr>
<td>expire key 10</td>
<td>10秒钟：为给定的key设置过期时间</td>
</tr>
<tr>
<td>ttl key</td>
<td>查看还有多少秒过期，-1表示永不过期，-2表示已过期</td>
</tr>
<tr>
<td>select</td>
<td>命令切换数据库</td>
</tr>
<tr>
<td>dbsize</td>
<td>查看当前数据库的key的数量</td>
</tr>
<tr>
<td>flushdb</td>
<td>清空当前库</td>
</tr>
<tr>
<td>flushall</td>
<td>清空全部库</td>
</tr>
</tbody></table>
<p>&#x2F;&#x2F;TODO,unlink key，非阻塞删除</p>
<p>help命令 help @数据类型</p>
<h2 id="第二节-字符串类型-String"><a href="#第二节-字符串类型-String" class="headerlink" title="第二节 字符串类型(String)"></a>第二节 字符串类型(String)</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>1 String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p>
<p>2 String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p>
<p>3 String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</p>
<h3 id="2-2-常用命令"><a href="#2-2-常用命令" class="headerlink" title="2.2 常用命令"></a>2.2 常用命令</h3><p>&#x2F;&#x2F;TODO背</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> key value [NX|<span class="type">XX</span>] [GET] [EX seconds|<span class="type">PX</span> milliseconds|<span class="type">EXAT</span> unix-<span class="built_in">time</span>-seconds|<span class="type">PXAT</span> unix-<span class="built_in">time</span>- milliseconds|<span class="type">KEEPTTL</span></span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;TODO,EXAT unix-time-seconds 是时间戳，秒，后面是毫秒</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>set &lt;key&gt;&lt;value&gt;</td>
<td>添加键值对</td>
</tr>
<tr>
<td></td>
<td>NX：当数据库中key不存在时，可以将key-value添加数据库</td>
</tr>
<tr>
<td></td>
<td>XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥</td>
</tr>
<tr>
<td></td>
<td>EX：key的超时秒数</td>
</tr>
<tr>
<td></td>
<td>PX：key的超时毫秒数，与EX互斥</td>
</tr>
<tr>
<td>get &lt;key&gt;</td>
<td>查询对应键值</td>
</tr>
<tr>
<td>append &lt;key&gt;&lt;value&gt;</td>
<td>将给定的&lt;value&gt; 追加到原值的末尾</td>
</tr>
<tr>
<td>strlen &lt;key&gt;</td>
<td>获得值的长度</td>
</tr>
<tr>
<td>setnx &lt;key&gt;&lt;value&gt;</td>
<td>只有在 key 不存在时 设置 key 的值</td>
</tr>
<tr>
<td>incr &lt;key&gt;</td>
<td>将 key 中储存的数字值增1,只能对数字值操作，如果为空，新增值为1</td>
</tr>
<tr>
<td>decr &lt;key&gt;</td>
<td>将 key 中储存的数字值减1,只能对数字值操作，如果为空，新增值为-1</td>
</tr>
<tr>
<td>incrby &#x2F; decrby &lt;key&gt;&lt;步长&gt;</td>
<td>将 key 中储存的数字值增减。自定义步长</td>
</tr>
<tr>
<td>mset &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; …..</td>
<td>同时设置一个或多个 key-value对</td>
</tr>
<tr>
<td>mget &lt;key1&gt;&lt;key2&gt;&lt;key3&gt; …..</td>
<td>同时获取一个或多个 value</td>
</tr>
<tr>
<td>msetnx &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; …..</td>
<td>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。有一个失败则都失败(原子性)</td>
</tr>
<tr>
<td>getrange &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;</td>
<td>获得值的范围，类似java中的substring，<strong>前包，后包</strong></td>
</tr>
<tr>
<td>setrange &lt;key&gt;&lt;起始位置&gt;&lt;value&gt;</td>
<td>用 &lt;value&gt; 覆写&lt;key&gt;所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0</strong>开始)。</td>
</tr>
<tr>
<td>setex &lt;key&gt; &lt;过期时间&gt; &lt;value&gt;</td>
<td>设置键值的同时，设置过期时间，单位秒。</td>
</tr>
<tr>
<td>getset &lt;key&gt;&lt;value&gt;</td>
<td>以新换旧，设置了新值同时获得旧值。</td>
</tr>
</tbody></table>
<p>&#x2F;&#x2F;TODO</p>
<p>set默认setxx,</p>
<p>set k1 v1 get</p>
<p>取出老的值，设置新的值v1覆盖他</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; set name lisi get</span><br><span class="line"><span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get name</span><br><span class="line"><span class="string">&quot;lisi&quot;</span></span><br></pre></td></tr></table></figure>

<p>,整理一下顺序</p>
<p>保留原来的过期时间</p>
<p>keepttl</p>
<p>mset ，一次设置多个</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; mset  name1 zhangsan name2 lisi</span><br><span class="line"><span class="attribute">OK</span></span><br><span class="line"><span class="attribute">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; keys *</span><br><span class="line"><span class="attribute">1</span>) <span class="string">&quot;name1&quot;</span></span><br><span class="line"><span class="attribute">2</span>) <span class="string">&quot;name2&quot;</span></span><br><span class="line"><span class="attribute">3</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="attribute">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; mget  name  name1 name2</span><br><span class="line"><span class="attribute">1</span>) <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="attribute">2</span>) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="attribute">3</span>) <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="attribute">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure>



<p>getrange &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;  获得值的范围，类似java中的substring，<strong>前包，后包</strong></p>
<p>127.0.0.1:6379&gt; GETRANGE name 0 -1</p>
<p>0 到 -1 就是取全部</p>
<p>setrange设置指定区间范围内的值，格式是setrange key值 第几个字符开始 ，具体值</p>
<p><img src="https://blog-resources.this0.com/image/202403282048509.png?x-oss-process=style/this0-blog" alt="下载"></p>
<p><img src="https://blog-resources.this0.com/image/202403282143643.png?x-oss-process=style/this0-blog" alt="image-20240328214346543"></p>
<p>incr key</p>
<p>incrby key increment</p>
<p>decr key</p>
<p>decrby key decrement</p>
<p>获取字符串长度和内容追加</p>
<p>&#x2F;&#x2F;TODO，</p>
<blockquote>
<p>redis指令运行的原子性</p>
</blockquote>
<ul>
<li>所谓原子操作是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。<ul>
<li>（1）在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间。</li>
<li>（2）在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。</li>
<li>（3）Redis单命令的原子性主要得益于的单线程。</li>
</ul>
</li>
</ul>
<blockquote>
<p>问题 JAVA中的 a++ 是否具有原子性</p>
</blockquote>
<p><strong>原子性：</strong>即不可分割性。比如 a&#x3D;0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作是原子操作。再比如：a++； 这个操作实际是a &#x3D; a + 1；是可分割的，所以他不是一个原子操作。非原子操作都会存在线程安全问题，需要<strong>使用同步技术（sychronized）或者锁（Lock）来让它变成一个原子操作</strong>。一个操作是原子操作，那么我们称它具有原子性。</p>
<h3 id="2-3-数据结构"><a href="#2-3-数据结构" class="headerlink" title="2.3 数据结构"></a>2.3 数据结构</h3><p>&#x2F;&#x2F;TODO</p>
<p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p>
<p><img src="https://blog-resources.this0.com/image/202403281329213.png?x-oss-process=style/this0-blog"></p>
<p>如图中所示，内部为当前字符串实际分配的空间，capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p>
<h2 id="第三节-Redis-列表-List"><a href="#第三节-Redis-列表-List" class="headerlink" title="第三节 Redis 列表(List)"></a>第三节 Redis 列表(List)</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><p>单键多值, 一个键下的value是一个List.Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p>
<p><img src="https://blog-resources.this0.com/image/202403281329214.png?x-oss-process=style/this0-blog"></p>
<h3 id="3-2-常用命令"><a href="#3-2-常用命令" class="headerlink" title="3.2 常用命令"></a>3.2 常用命令</h3><table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>lpush&#x2F;rpush &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt; ….</td>
<td>从左边&#x2F;右边插入一个或多个值。</td>
</tr>
<tr>
<td>lpop&#x2F;rpop &lt;key&gt;</td>
<td>从左边&#x2F;右边吐出一个值。值在键在，值光键亡。</td>
</tr>
<tr>
<td>rpoplpush &lt;key1&gt;&lt;key2&gt;</td>
<td>从&lt;key1&gt;列表右边吐出一个值，插到&lt;key2&gt;列表左边</td>
</tr>
<tr>
<td>lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;</td>
<td>按照索引下标获得元素(从左到右)</td>
</tr>
<tr>
<td></td>
<td>0左边第一个，-1右边第一个，（0-1表示获取所有）</td>
</tr>
<tr>
<td>lindex &lt;key&gt;&lt;index&gt;</td>
<td>按照索引下标获得元素(从左到右)</td>
</tr>
<tr>
<td>llen &lt;key&gt;</td>
<td>获得列表长度</td>
</tr>
<tr>
<td>linsert &lt;key&gt; before &lt;value&gt;&lt;newvalue&gt;</td>
<td>在&lt;value&gt;的前面插入&lt;newvalue&gt;插入值</td>
</tr>
<tr>
<td>linsert &lt;key&gt; after &lt;value&gt;&lt;newvalue&gt;</td>
<td>在&lt;value&gt;的后面插入&lt;newvalue&gt;插入值</td>
</tr>
<tr>
<td>lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;</td>
<td>从左边删除n个value(从左到右)</td>
</tr>
<tr>
<td>lset&lt;key&gt;&lt;index&gt;&lt;value&gt;</td>
<td>将列表key下标为index的值替换成value</td>
</tr>
</tbody></table>
<p>list 一键多值</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; LPUSH list1 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; RPUSH list2 <span class="number">11</span> <span class="number">22</span> <span class="number">33</span> <span class="number">44</span> <span class="number">55</span></span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; LRANGE list1</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;lrange&#x27; command</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; LRANGE list1 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;5&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;4&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; LRANGE list2 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;11&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;22&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;33&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;44&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;55&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>没有rrange操作</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; LPOP list2</span><br><span class="line"><span class="string">&quot;22&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; LRANGE list2 <span class="number">0</span> -<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;33&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;44&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;55&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>lpop</p>
<p>最左边的取值并删除，弹出</p>
<p>rpop</p>
<p>最右边的取值并删除，弹出</p>
<p>lindex</p>
<p>llen</p>
<p>lrem ，在key的值里删x个y元素：</p>
<p>lrem key x y</p>
<p>ltrim key 开始index 结束index 截取指定范围的值后再赋值给key</p>
<p>rpoplpush list1 list2左边弹出一个，放到右边：图：</p>
<p><img src="https://blog-resources.this0.com/image/202403282341076.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240328_234058"></p>
<p>lest key 下标 元素</p>
<p>linsert key before&#x2F;after</p>
<h3 id="3-3-数据结构"><a href="#3-3-数据结构" class="headerlink" title="3.3 数据结构"></a>3.3 数据结构</h3><p>&#x2F;&#x2F;TODO,五大数据解构都没看</p>
<p>List的数据结构为快速链表quickList。首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成quicklist。因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p>
<p><img src="https://blog-resources.this0.com/image/202403281329215.png?x-oss-process=style/this0-blog"></p>
<p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p>
<h2 id="第四节Redis-集合-Set"><a href="#第四节Redis-集合-Set" class="headerlink" title="第四节Redis 集合(Set)"></a>第四节Redis 集合(Set)</h2><p>java里面的hashset</p>
<p>添加</p>
<p>sadd</p>
<p>遍历</p>
<p>smembers key</p>
<p>是否存在，有返回1,没有返回0</p>
<p>sismember set1 1</p>
<p>删除</p>
<p>srem</p>
<p>统计</p>
<p>scard</p>
<p>随机取数</p>
<p>127.0.0.1:6379&gt; SRANDMEMBER set1 3</p>
<p>迁移</p>
<p>smove</p>
<p>集合运算</p>
<p>1 sdiff set1 set2 属于set1 不属于set2的元素</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; SMEMBERS set1</span><br><span class="line"><span class="attribute">1</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attribute">2</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attribute">3</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="attribute">4</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="attribute">5</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="attribute">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; SMEMBERS set2</span><br><span class="line"><span class="attribute">1</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attribute">2</span>) <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attribute">3</span>) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attribute">4</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="attribute">5</span>) <span class="string">&quot;x&quot;</span></span><br><span class="line"><span class="attribute">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; sdiff set1 set2</span><br><span class="line"><span class="attribute">1</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="attribute">2</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="attribute">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">6379</span>&gt; </span><br></pre></td></tr></table></figure>

<p>2 合并：SUNION set1 set2 </p>
<ol>
<li><pre><code>127.0.0.1:6379&gt; SUNION set1 set2 
1) &quot;1&quot; 
2) &quot;2&quot; 
3) &quot;a&quot; 
4) &quot;b&quot; 
5) &quot;c&quot; 
6) &quot;3&quot; 
7) &quot;x&quot;
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3 交集</span><br><span class="line"></span><br><span class="line">sinter <span class="keyword">set</span>1 <span class="keyword">set</span>2</span><br><span class="line"></span><br><span class="line">4 sintercard redis7新出的，返回交集的个数</span><br><span class="line"></span><br></pre></td></tr></table></figure>
127.0.0.1:6379&gt; sintercard 2 set1 set2 
(integer) 3
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 4.1 简介</span></span><br><span class="line"></span><br><span class="line">&amp;<span class="comment">#x20;   Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以**自动排重**的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</span></span><br><span class="line"></span><br><span class="line">&amp;<span class="comment">#x20;   Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的**复杂度都是O(1)**。一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变  &amp;#x20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 4.2 常用命令</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> 语法                                  </span>|<span class="string"> 功能                                                         </span>|</span><br><span class="line">|<span class="string"> ------------------------------------- </span>|<span class="string"> ------------------------------------------------------------ </span>|</span><br><span class="line">|<span class="string"> sadd \&lt;key&gt;\&lt;value1&gt;\&lt;value2&gt; .....   </span>|<span class="string"> 将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略 </span>|</span><br><span class="line">|<span class="string"> smembers \&lt;key&gt;                       </span>|<span class="string"> 取出该集合的所有值。                                         </span>|</span><br><span class="line">|<span class="string"> sismember \&lt;key&gt;\&lt;value&gt;              </span>|<span class="string"> 判断集合\&lt;key&gt;是否为含有该\&lt;value&gt;值，有1，没有0             </span>|</span><br><span class="line">|<span class="string"> scard\&lt;key&gt;                           </span>|<span class="string"> 返回该集合的元素个数。                                       </span>|</span><br><span class="line">|<span class="string"> srem \&lt;key&gt;\&lt;value1&gt;\&lt;value2&gt; ....    </span>|<span class="string"> 删除集合中的某个元素。                                       </span>|</span><br><span class="line">|<span class="string"> spop \&lt;key&gt;                           </span>|<span class="string"> 随机从该集合中吐出一个值                                     </span>|</span><br><span class="line">|<span class="string"> spop \&lt;key&gt;\&lt;N&gt;                       </span>|<span class="string"> 随机从该集合中吐出N个值。                                    </span>|</span><br><span class="line">|<span class="string"> srandmember \&lt;key&gt;\&lt;n&gt;                </span>|<span class="string"> 随机从该集合中取出n个值。不会从集合中删除 。                 </span>|</span><br><span class="line">|<span class="string"> smove \&lt;source&gt;\&lt;destination&gt;\&lt;value&gt; </span>|<span class="string"> 把集合中一个值从一个集合移动到另一个集合                     </span>|</span><br><span class="line">|<span class="string"> sinter \&lt;key1&gt;\&lt;key2&gt;                 </span>|<span class="string"> 返回两个集合的交集元素。                                     </span>|</span><br><span class="line">|<span class="string"> sunion \&lt;key1&gt;\&lt;key2&gt;                 </span>|<span class="string"> 返回两个集合的并集元素。                                     </span>|</span><br><span class="line">|<span class="string"> sdiff \&lt;key1&gt;\&lt;key2&gt;                  </span>|<span class="string"> 返回两个集合的**差集**元素(key1中的，不包含key2中的)         </span>|</span><br><span class="line"></span><br><span class="line"><span class="comment">### 4.2 数据结构</span></span><br><span class="line"></span><br><span class="line">Set数据结构是dict字典，字典是用哈希表实现的。Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它内部也使用hash结构，所有value都指向同一个内部值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 第五节 Redis 哈希(Hash)</span></span><br><span class="line"></span><br><span class="line">kv模式不变，但V是一个键值对</span><br><span class="line"></span><br></pre></td></tr></table></figure>
127.0.0.1:6379&gt; hset user id 1 name zhangsan age 25
(integer) 3
127.0.0.1:6379&gt; hget user id
&quot;1&quot;
127.0.0.1:6379&gt; hget user name
&quot;zhangsan&quot;
127.0.0.1:6379&gt; hget user age
&quot;25&quot;
</code></pre>
</li>
</ol>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">要hget key key进行取值</span><br><span class="line"></span><br><span class="line">//TODO</span><br><span class="line"></span><br><span class="line">在很早以前，3.0版本，就和hmset没区别？</span><br><span class="line"></span><br><span class="line"><span class="comment">### 5.1 简介</span></span><br><span class="line"></span><br><span class="line">Redis hash 是一个键值对集合。Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。类似Java里面的Map\<span class="variable">&lt;String,Object&gt;</span>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息</span><br><span class="line"></span><br><span class="line">- 方式1  单key+序列化 .问题:每次修改用户的某个属性需要，先反序列化改好后再序列化回去。开销较大。</span><br><span class="line"></span><br><span class="line">  ![image-20230706110321231](https://blog-resources.this0.com/image/202403281329216.png?x-oss-process=style/this0-blog)</span><br><span class="line"></span><br><span class="line">- 方式2 多key-value .问题:用户ID数据冗余 &amp;<span class="comment">#x20;</span></span><br><span class="line"></span><br><span class="line">  ![image-20230706110341117](https://blog-resources.this0.com/image/202403281329217.png?x-oss-process=style/this0-blog)</span><br><span class="line"></span><br><span class="line">- 方式3 单key + 多(field+value)</span><br><span class="line"></span><br><span class="line">![image-20230706110256007](https://blog-resources.this0.com/image/202403281329218.png?x-oss-process=style/this0-blog)</span><br><span class="line"></span><br><span class="line"><span class="symbol">*</span> <span class="symbol">*</span><span class="symbol">*</span>通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题<span class="symbol">*</span><span class="symbol">*</span>&amp;<span class="comment">#x20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 5.2 常用命令</span></span><br><span class="line"></span><br><span class="line">|<span class="string"> 语法                                                 </span>|<span class="string"> 功能                                                         </span>|</span><br><span class="line">|<span class="string"> ---------------------------------------------------- </span>|<span class="string"> ------------------------------------------------------------ </span>|</span><br><span class="line">|<span class="string"> hset \&lt;key&gt;\&lt;field&gt;\&lt;value&gt;                          </span>|<span class="string"> 给\&lt;key&gt;集合中的 \&lt;field&gt;键赋值\&lt;value&gt;                      </span>|</span><br><span class="line">|<span class="string"> hget \&lt;key1&gt;\&lt;field&gt;                                 </span>|<span class="string"> 从\&lt;key1&gt;集合\&lt;field&gt;取出 value                              </span>|</span><br><span class="line">|<span class="string"> hmset \&lt;key1&gt;\&lt;field1&gt;\&lt;value1&gt;\&lt;field2&gt;\&lt;value2&gt;... </span>|<span class="string"> 批量设置hash的值                                             </span>|</span><br><span class="line">|<span class="string"> hexists\&lt;key1&gt;\&lt;field&gt;                               </span>|<span class="string"> 查看哈希表 key 中，给定域 field 是否存在。                   </span>|</span><br><span class="line">|<span class="string"> hkeys \&lt;key&gt;                                         </span>|<span class="string"> 列出该hash集合的所有field                                    </span>|</span><br><span class="line">|<span class="string"> hvals \&lt;key&gt;                                         </span>|<span class="string"> 列出该hash集合的所有value                                    </span>|</span><br><span class="line">|<span class="string"> hincrby \&lt;key&gt;\&lt;field&gt;\&lt;increment&gt;                   </span>|<span class="string"> 为哈希表 key 中的域 field 的值加上增量 1 -1                  </span>|</span><br><span class="line">|<span class="string"> hsetnx \&lt;key&gt;\&lt;field&gt;\&lt;value&gt;                        </span>|<span class="string"> 将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 . </span>|</span><br><span class="line"></span><br><span class="line"><span class="comment">### 5.3 数据结构</span></span><br><span class="line"></span><br><span class="line">Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 第六节 Redis 有序集合Zset</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 6.1 简介</span></span><br><span class="line"></span><br><span class="line">Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。不同之处是有序集合的每个成员都关联了一个评分（score）,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 6.2 常用命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">|<span class="string"> 语法                                                         </span>|<span class="string"> 功能                                                         </span>|</span><br><span class="line">|<span class="string"> ------------------------------------------------------------ </span>|<span class="string"> ------------------------------------------------------------ </span>|</span><br><span class="line">|<span class="string"> zadd \&lt;key&gt;\&lt;score1&gt;\&lt;value1&gt;\&lt;score2&gt;\&lt;value2&gt;…             </span>|<span class="string"> 将一个或多个 member 元素及其 score 值加入到有序集 key 当中。 </span>|</span><br><span class="line">|<span class="string"> zrange\&lt;key&gt;\&lt;start&gt;\&lt;stop&gt;  \[WITHSCORES]                   </span>|<span class="string"> 升序返回有序集 key 中，下标在\&lt;start&gt;\&lt;stop&gt;之间的元素,0代表第一个元素索引,-1代表最后一个元素索引.带WITHSCORES，可以让分数一起和值返回到结果集。 </span>|</span><br><span class="line">|<span class="string"> zrevrange \&lt;key&gt;\&lt;start&gt;\&lt;stop&gt; \[WITHSCORES]                </span>|<span class="string"> 降序返回有序集 key 中，下标在\&lt;start&gt;\&lt;stop&gt;之间的元素,0代表第一个元素索引,-1代表最后一个元素索引.带WITHSCORES，可以让分数一起和值返回到结果集 </span>|</span><br><span class="line">|<span class="string"> zrangebyscore \&lt;key&gt; \&lt;min&gt; \&lt;max&gt; \[withscores] \[limit offset count] </span>|<span class="string"> 返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </span>|</span><br><span class="line">|<span class="string"> zrevrangebyscore \&lt;key&gt; \&lt;max&gt; \&lt;min&gt; \[withscores] \[limit offset count] </span>|<span class="string"> 同上，改为从大到小排列。                                     </span>|</span><br><span class="line">|<span class="string"> zincrby \&lt;key&gt;\&lt;increment&gt;\&lt;value&gt;                           </span>|<span class="string"> 为元素的score加上增量                                        </span>|</span><br><span class="line">|<span class="string"> zrem \&lt;key&gt;\&lt;value&gt;                                          </span>|<span class="string"> 删除该集合下，指定值的元素                                   </span>|</span><br><span class="line">|<span class="string"> zcount \&lt;key&gt;\&lt;min&gt;\&lt;max&gt;                                    </span>|<span class="string"> 统计该集合，分数区间内的元素个数                             </span>|</span><br><span class="line">|<span class="string"> zrank \&lt;key&gt;\&lt;value&gt;                                         </span>|<span class="string"> 返回该值在集合中的排名，从0开始。                            </span>|</span><br><span class="line"></span><br><span class="line">案例：如何利用zset实现一个文章访问量的排行榜？</span><br><span class="line"></span><br><span class="line">![](https://blog-resources.this0.com/image/202403281329219.png?x-oss-process=style/this0-blog)</span><br><span class="line"></span><br><span class="line">小括号不包含</span><br><span class="line"></span><br><span class="line">ZRANGEbyscore zset1 (70 500  withscores</span><br><span class="line"></span><br><span class="line">zmpop，7.0的 要加count 数量</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>127.0.0.1:6379&gt; ZMPOP 1 myzset max count<br>(error) ERR syntax error<br>127.0.0.1:6379&gt; ZMPOP 1 myzset max count<br>(error) ERR syntax error<br>127.0.0.1:6379&gt; ZMPOP 1 myzset max count 1</p>
<ol>
<li>“myzset”</li>
<li><ol>
<li><ol>
<li>“three”</li>
<li>“3”<br>127.0.0.1:6379&gt; ZMPOP 1 myzset max count 1</li>
</ol>
</li>
</ol>
</li>
<li>“myzset”</li>
<li><ol>
<li><ol>
<li>“two”</li>
<li>“2”<br>127.0.0.1:6379&gt; ZMPOP 1 myzset max count 1</li>
</ol>
</li>
</ol>
</li>
<li>“myzset”</li>
<li><ol>
<li><ol>
<li>“one”</li>
<li>“1”<br>127.0.0.1:6379&gt; ZMPOP 1 myzset max count 1<br>(nil)<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//TODO,我理解zmpop 后面的可选参数count 是执行几次，</span></span><br><span class="line"></span><br><span class="line">逆序</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZrevRANGE myzset <span class="number">0</span> <span class="number">-1</span>  </span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;three&quot;</span> </span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;two&quot;</span> </span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;one&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; ZRANGE myzset <span class="number">0</span> <span class="number">-1</span>  </span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;one&quot;</span> </span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;two&quot;</span> </span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;three&quot;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">### <span class="number">6.3</span> 数据结构</span><br><span class="line"></span><br><span class="line">SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map\&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO,单线程和多路复用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO,后五种没看</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="comment">//TODO第四章 Jedis客户端程序</span></span><br><span class="line"></span><br><span class="line">## 学习目标</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> 了解Jedis</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 能够独立搭建Jedis的环境</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 熟练操作key操作相关API</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> 熟练操作String操作相关API</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> 熟练操作List操作相关API</span><br><span class="line"></span><br><span class="line"><span class="number">6</span> 熟练操作Set操作相关API</span><br><span class="line"></span><br><span class="line"><span class="number">7</span> 熟练操作Hash操作相关API</span><br><span class="line"></span><br><span class="line"><span class="number">8</span> 熟练操作Zset操作相关API</span><br><span class="line"></span><br><span class="line">## 第一节 Jedis简介</span><br><span class="line"></span><br><span class="line">```纯文本</span><br><span class="line"> Redis不仅是使用命令来操作，现在基本上主流的语言都有客户端支持，比如java、C、C#、C++、php、Node.js、Go等。在官方网站里列一些Java的客户端，有Jedis、Redisson、Jredis、JDBC-Redis、等其中官方推荐使用Jedis和Redisson。 在企业中用的最多的就是Jedis。Jedis提供了完整Redis命令，而Redisson有更多分布式的容器实现。</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="第二节-环境准备"><a href="#第二节-环境准备" class="headerlink" title="第二节 环境准备"></a>第二节 环境准备</h2><blockquote>
<p>1 创建maven普通项目,导入如下依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>2 虚拟机和Redis设置</p>
</blockquote>
<ul>
<li>禁用Linux的防火墙：Linux(CentOS7)里执行命令</li>
<li>systemctl stop&#x2F;disable firewalld.service</li>
<li>redis.conf中注释掉bind 127.0.0.1 ,然后 protected-mode 的值设置为no</li>
</ul>
<blockquote>
<p>3 测试JAVA程序和Redis之间的通信</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestPing</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.6.101&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pong</span> <span class="operator">=</span> jedis.ping();</span><br><span class="line">        System.out.println(<span class="string">&quot;连接成功：&quot;</span>+pong);</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第三节-key相关API"><a href="#第三节-key相关API" class="headerlink" title="第三节 key相关API"></a>第三节 key相关API</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testKeyAPI</span><span class="params">()</span>&#123;</span><br><span class="line">    jedis.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    <span class="comment">// 添加 键值对并设置过期时间</span></span><br><span class="line">    jedis.setex(<span class="string">&quot;k2&quot;</span>,<span class="number">100</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    jedis.set(<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取所有的键</span></span><br><span class="line">    Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    System.out.println(keys.size());</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断某个键是否存在</span></span><br><span class="line">    System.out.println(jedis.exists(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">    <span class="comment">// 查看键剩余过期时间</span></span><br><span class="line">    System.out.println(jedis.ttl(<span class="string">&quot;k2&quot;</span>));</span><br><span class="line">    <span class="comment">// 根据键获取值</span></span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第四节-String相关API"><a href="#第四节-String相关API" class="headerlink" title="第四节 String相关API"></a>第四节 String相关API</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加String</span></span><br><span class="line">System.out.println(jedis.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>));</span><br><span class="line"><span class="comment">// 一次添加多个</span></span><br><span class="line">System.out.println(jedis.mset(<span class="string">&quot;ka&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;kb&quot;</span>,<span class="string">&quot;bbb&quot;</span>));</span><br><span class="line"><span class="comment">//  获取</span></span><br><span class="line">System.out.println(jedis.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line"><span class="comment">// 一次获取多个</span></span><br><span class="line">System.out.println(jedis.mget(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;ka&quot;</span>,<span class="string">&quot;kb&quot;</span>));</span><br><span class="line"><span class="comment">// 追加</span></span><br><span class="line">System.out.println(jedis.append(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;vvvvv&quot;</span>));</span><br><span class="line"><span class="comment">// 获取长度</span></span><br><span class="line">System.out.println(jedis.strlen(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line"><span class="comment">// 不存在时进行设置</span></span><br><span class="line">System.out.println(jedis.setnx(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;xxxxx&quot;</span>));</span><br><span class="line">System.out.println(jedis.setnx(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;10&quot;</span>));</span><br><span class="line"><span class="comment">// 增长/减少</span></span><br><span class="line">System.out.println(jedis.incr(<span class="string">&quot;k2&quot;</span>));</span><br><span class="line">System.out.println(jedis.decr(<span class="string">&quot;k2&quot;</span>));</span><br><span class="line">System.out.println(jedis.incrBy(<span class="string">&quot;k2&quot;</span>, <span class="number">10</span>));</span><br><span class="line">System.out.println(jedis.decrBy(<span class="string">&quot;k2&quot;</span>, <span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<h2 id="第五节-List相关API"><a href="#第五节-List相关API" class="headerlink" title="第五节 List相关API"></a>第五节 List相关API</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 放入List</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">lpush</span> <span class="operator">=</span> jedis.lpush(<span class="string">&quot;klist&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">    System.out.println(lpush);</span><br><span class="line">    <span class="comment">// 获取List</span></span><br><span class="line">    List&lt;String&gt; kList = jedis.lrange(<span class="string">&quot;klist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    kList.forEach(System.out::println);</span><br><span class="line">    <span class="comment">// 取值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">klist</span> <span class="operator">=</span> jedis.lpop(<span class="string">&quot;klist&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第六节-Set相关API"><a href="#第六节-Set相关API" class="headerlink" title="第六节 Set相关API"></a>第六节 Set相关API</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="comment">// 添加一个set集合</span></span><br><span class="line">     jedis.sadd(<span class="string">&quot;skey&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>);</span><br><span class="line">     <span class="comment">// 获取制定的set集合</span></span><br><span class="line">     Set&lt;String&gt; skey = jedis.smembers(<span class="string">&quot;skey&quot;</span>);</span><br><span class="line">     skey.forEach(System.out::println);</span><br><span class="line">     <span class="comment">//判断是否包含</span></span><br><span class="line">     System.out.println(jedis.sismember(<span class="string">&quot;skey&quot;</span>,<span class="string">&quot;a&quot;</span>));</span><br><span class="line">     <span class="comment">//删除元素</span></span><br><span class="line">     jedis.srem(<span class="string">&quot;skey&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">     <span class="comment">//弹出一个元素</span></span><br><span class="line">     System.out.println(jedis.spop(<span class="string">&quot;skey&quot;</span>));</span><br><span class="line">     <span class="comment">//弹出N个元素</span></span><br><span class="line">     System.out.println(jedis.spop(<span class="string">&quot;skey&quot;</span>,<span class="number">2</span>));</span><br><span class="line">     <span class="comment">//从一个set向另一个set移动元素</span></span><br><span class="line">     jedis.smove(<span class="string">&quot;skey&quot;</span>,<span class="string">&quot;bkey&quot;</span>,<span class="string">&quot;X&quot;</span>);</span><br><span class="line">     <span class="comment">// ……</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="第七节-Hash相关API"><a href="#第七节-Hash相关API" class="headerlink" title="第七节 Hash相关API"></a>第七节 Hash相关API</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加值</span></span><br><span class="line">jedis.hset(<span class="string">&quot;player1&quot;</span>,<span class="string">&quot;pname&quot;</span>,<span class="string">&quot;宇智波赵四儿&quot;</span>);</span><br><span class="line">jedis.hset(<span class="string">&quot;player1&quot;</span>,<span class="string">&quot;page&quot;</span>,<span class="string">&quot;14&quot;</span>);</span><br><span class="line">jedis.hset(<span class="string">&quot;player1&quot;</span>,<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;boy&quot;</span>);</span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line">System.out.println(jedis.hget(<span class="string">&quot;player1&quot;</span>,<span class="string">&quot;pname&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//  批量添加值</span></span><br><span class="line">Map&lt;String,String&gt; player2=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();</span><br><span class="line">player2.put(<span class="string">&quot;pname&quot;</span>,<span class="string">&quot;旋涡刘能&quot;</span>);</span><br><span class="line">player2.put(<span class="string">&quot;page&quot;</span>,<span class="string">&quot;13&quot;</span>);</span><br><span class="line">player2.put(<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;boy&quot;</span>);</span><br><span class="line">jedis.hmset(<span class="string">&quot;player2&quot;</span>,player2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看filed是否存在</span></span><br><span class="line">System.out.println(jedis.hexists(<span class="string">&quot;player1&quot;</span>, <span class="string">&quot;pname&quot;</span>));</span><br><span class="line"><span class="comment">// 查看集合中所有的field</span></span><br><span class="line">Set&lt;String&gt; player1fields = jedis.hkeys(<span class="string">&quot;player1&quot;</span>);</span><br><span class="line">player1fields.forEach(System.out::println);</span><br><span class="line"><span class="comment">// 查看集合中所有的value</span></span><br><span class="line">List&lt;String&gt; player1vals = jedis.hvals(<span class="string">&quot;player1&quot;</span>);</span><br><span class="line">player1vals.forEach(System.out::println);</span><br><span class="line"><span class="comment">// 给制定属性+1</span></span><br><span class="line">jedis.hincrBy(<span class="string">&quot;player1&quot;</span>,<span class="string">&quot;page&quot;</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 如不存在,添加某个属性</span></span><br><span class="line">jedis.hsetnx(<span class="string">&quot;player1&quot;</span>,<span class="string">&quot;height&quot;</span>,<span class="string">&quot;156&quot;</span>);</span><br><span class="line">System.out.println(jedis.hget(<span class="string">&quot;player1&quot;</span>,<span class="string">&quot;page&quot;</span>));</span><br><span class="line">System.out.println(jedis.hget(<span class="string">&quot;player1&quot;</span>,<span class="string">&quot;height&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="第八节-ZSet相关API"><a href="#第八节-ZSet相关API" class="headerlink" title="第八节 ZSet相关API"></a>第八节 ZSet相关API</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 准备数据</span></span><br><span class="line">Map&lt;String ,Double&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;李四&quot;</span>,<span class="number">11d</span>);</span><br><span class="line">map.put(<span class="string">&quot;王五&quot;</span>,<span class="number">8d</span>);</span><br><span class="line">map.put(<span class="string">&quot;赵六&quot;</span>,<span class="number">20d</span>);</span><br><span class="line">map.put(<span class="string">&quot;刘七&quot;</span>,<span class="number">3d</span>);</span><br><span class="line"><span class="comment">//  添加元素</span></span><br><span class="line">jedis.zadd(<span class="string">&quot;zkey&quot;</span>,<span class="number">10</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">jedis.zadd(<span class="string">&quot;zkey&quot;</span>,map);</span><br><span class="line"> <span class="comment">// 升序返回有序</span></span><br><span class="line"> Set&lt;String&gt; zkeys = jedis.zrange(<span class="string">&quot;zkey&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"> zkeys.forEach(System.out::println);</span><br><span class="line"> <span class="comment">//  降序返回元素</span></span><br><span class="line"> Set&lt;String&gt; zkeys2 = jedis.zrevrange(<span class="string">&quot;zkey&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"> zkeys2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"> System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"> Set&lt;String&gt; zkeys3 = jedis.zrangeByScore(<span class="string">&quot;zkey&quot;</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"> zkeys3.forEach(System.out::println);</span><br><span class="line"> System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"> Set&lt;String&gt; zkeys4 = jedis.zrevrangeByScore(<span class="string">&quot;zkey&quot;</span>, <span class="number">20</span>, <span class="number">10</span>);</span><br><span class="line"> zkeys4.forEach(System.out::println);</span><br><span class="line"> <span class="comment">// 增加分数</span></span><br><span class="line"> jedis.zincrby(<span class="string">&quot;zkey&quot;</span>,<span class="number">5</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"> jedis.zincrby(<span class="string">&quot;zkey&quot;</span>,-<span class="number">5</span>,<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"> <span class="comment">//  删除 元素</span></span><br><span class="line"> jedis.zrem(<span class="string">&quot;zkey&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"> System.out.println(jedis.zcount(<span class="string">&quot;zkey&quot;</span>,<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line"> System.out.println(jedis.zrank(<span class="string">&quot;zkey&quot;</span>,<span class="string">&quot;李四&quot;</span>));</span><br></pre></td></tr></table></figure>



<h1 id="TODO第五章-SpringBoot整合Redis"><a href="#TODO第五章-SpringBoot整合Redis" class="headerlink" title="&#x2F;&#x2F;TODO第五章 SpringBoot整合Redis"></a>&#x2F;&#x2F;TODO第五章 SpringBoot整合Redis</h1><h2 id="5-1-创建工程"><a href="#5-1-创建工程" class="headerlink" title="5.1 创建工程"></a>5.1 创建工程</h2><p><img src="https://blog-resources.this0.com/image/202403281329220.png?x-oss-process=style/this0-blog" alt="image-20230627195300172"></p>
<h2 id="5-2-添加依赖"><a href="#5-2-添加依赖" class="headerlink" title="5.2 添加依赖"></a>5.2 添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-3-创建配置文件"><a href="#5-3-创建配置文件" class="headerlink" title="5.3 创建配置文件"></a>5.3 创建配置文件</h2><p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">192.168.6.131</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">#spring.data.redis.client-type=lettuce</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置lettuce的底层参数</span></span><br><span class="line"><span class="comment">#spring.data.redis.lettuce.pool.enabled=true</span></span><br><span class="line"><span class="comment">#spring.data.redis.lettuce.pool.max-active=8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#切换jedis</span></span><br><span class="line"><span class="attr">spring.data.redis.client-type</span>=<span class="string">jedis</span></span><br><span class="line"><span class="attr">spring.data.redis.jedis.pool.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.data.redis.jedis.pool.max-active</span>=<span class="string">8</span></span><br></pre></td></tr></table></figure>



<p>RedisTemplate、StringRedisTemplate： 操作redis的工具类</p>
<ul>
<li><p>要从redis的连接工厂获取链接才能操作redis</p>
</li>
<li><p><strong>Redis客户端</strong></p>
</li>
<li><ul>
<li>Lettuce： 默认</li>
<li>Jedis：可以使用以下切换</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        切换 jedis 作为操作redis的底层客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-4-创建启动类"><a href="#5-4-创建启动类" class="headerlink" title="5.4 创建启动类"></a>5.4 创建启动类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-5-序列化定制"><a href="#5-5-序列化定制" class="headerlink" title="5.5 序列化定制"></a>5.5 序列化定制</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppRedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 允许Object类型的key-value，都可以被转为json进行存储。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory 自动配置好了连接工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//把对象转为json字符串的序列化工具</span></span><br><span class="line">        template.setDefaultSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-6-编写测试方法"><a href="#5-6-编写测试方法" class="headerlink" title="5.6 编写测试方法"></a>5.6 编写测试方法</h2><p>创建测试类，编写测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">redisTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//测试String</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//测试list集合</span></span><br><span class="line">    <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;mary&quot;</span>);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;abc&quot;</span>,list);</span><br><span class="line">    System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="TODO第六章-Redis配置文件解读"><a href="#TODO第六章-Redis配置文件解读" class="headerlink" title="&#x2F;&#x2F;TODO第六章 Redis配置文件解读"></a>&#x2F;&#x2F;TODO第六章 Redis配置文件解读</h1><h2 id="学习目标-3"><a href="#学习目标-3" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 了解网络相关的配置</p>
<p>2 了解GENERAL通用配置</p>
<p>3 了解SECURITY安全配置</p>
<p>4 了解LIMIT限制</p>
<h2 id="第一节-网络配置相关-x20"><a href="#第一节-网络配置相关-x20" class="headerlink" title="第一节 网络配置相关&#x20;"></a>第一节 网络配置相关&#x20;</h2><h3 id="（1）-bind绑定连接IP"><a href="#（1）-bind绑定连接IP" class="headerlink" title="（1） bind绑定连接IP"></a>（1） bind绑定连接IP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认情况bind=127.0.0.1只能接受本机的访问请求,不写的情况下，无限制接受任何ip地址的访问,生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其注释掉.如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的响应</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329221.png?x-oss-process=style/this0-blog" alt="image-20230706115102403"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">保存配置，停止服务，重启启动查看进程，不再限制是本机访问了。</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329224.png?x-oss-process=style/this0-blog" alt="image-20230706115212609"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里完成之后,就可以在window上安装一个redis客户端,连接虚拟机上的redis服务了</span><br></pre></td></tr></table></figure>



<h3 id="（2）-端口号：-6379"><a href="#（2）-端口号：-6379" class="headerlink" title="（2） 端口号： 6379"></a>（2） 端口号： 6379</h3><p><img src="https://blog-resources.this0.com/image/202403281329225.png?x-oss-process=style/this0-blog" alt="image-20230706115349569"></p>
<h3 id="（3）tcp-backlog-连接队列"><a href="#（3）tcp-backlog-连接队列" class="headerlink" title="（3）tcp-backlog 连接队列"></a>（3）tcp-backlog 连接队列</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。</span><br><span class="line"></span><br><span class="line">​  注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值（128），所以需要确认增大/proc/sys/net/core/somaxconn和/proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329227.png?x-oss-process=style/this0-blog" alt="image-20230706115554212"></p>
<h3 id="（4）timeout连接超时"><a href="#（4）timeout连接超时" class="headerlink" title="（4）timeout连接超时"></a>（4）timeout连接超时</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个空闲的客户端维持多少秒会关闭，0表示关闭该功能。即永不关闭。</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329228.png?x-oss-process=style/this0-blog" alt="image-20230706115650664"></p>
<h3 id="（5）tcp-keepalive-连接心跳检测"><a href="#（5）tcp-keepalive-连接心跳检测" class="headerlink" title="（5）tcp-keepalive  连接心跳检测"></a>（5）tcp-keepalive  连接心跳检测</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对访问客户端的一种心跳检测，每个n秒检测一次。</span><br><span class="line">单位为秒，如果设置为0 则不会进行Keepalive检测，建议设置成60  </span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329229.png?x-oss-process=style/this0-blog" alt="image-20230706115754570"></p>
<h2 id="第二节-GENREAL通用配置"><a href="#第二节-GENREAL通用配置" class="headerlink" title="第二节 GENREAL通用配置"></a>第二节 GENREAL通用配置</h2><h3 id="（1）UNITS单位"><a href="#（1）UNITS单位" class="headerlink" title="（1）UNITS单位"></a>（1）UNITS单位</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit,大小写不敏感</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329230.png?x-oss-process=style/this0-blog" alt="image-20230706120047530"></p>
<h3 id="（2）INCLUDES包含"><a href="#（2）INCLUDES包含" class="headerlink" title="（2）INCLUDES包含"></a>（2）INCLUDES包含</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在当前配置文件中引入其他配置文件中的内容,一般都是引入一些公共配置</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329231.png?x-oss-process=style/this0-blog" alt="image-20230706120131180"></p>
<h3 id="（3）daemonize-后台进程"><a href="#（3）daemonize-后台进程" class="headerlink" title="（3）daemonize 后台进程"></a>（3）daemonize 后台进程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">是否为后台进程，设置为yes ,守护进程，后台启动</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329232.png?x-oss-process=style/this0-blog" alt="image-20230706120319825"></p>
<h3 id="（4）pidfile-进程ID文件"><a href="#（4）pidfile-进程ID文件" class="headerlink" title="（4）pidfile 进程ID文件"></a>（4）pidfile 进程ID文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">存放pid文件的位置，每个实例会产生一个不同的pid文件</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329233.png?x-oss-process=style/this0-blog" alt="image-20230706120451425"></p>
<h3 id="（5）databases-16-x20"><a href="#（5）databases-16-x20" class="headerlink" title="（5）databases 16&#x20;"></a>（5）databases 16&#x20;</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设定库的数量 默认16，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329234.png?x-oss-process=style/this0-blog" alt="image-20230706120627340"></p>
<h2 id="第三节-SECURITY安全配置"><a href="#第三节-SECURITY安全配置" class="headerlink" title="第三节 SECURITY安全配置"></a>第三节 SECURITY安全配置</h2><blockquote>
<p>1 设置密码</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403281329235.png?x-oss-process=style/this0-blog" alt="image-20230706120811624"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">访问密码的查看、设置和取消</span><br><span class="line">在命令中设置密码，只是临时的。重启redis服务器，密码就还原了。</span><br><span class="line">永久设置，需要再配置文件中进行设置。</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329236.png?x-oss-process=style/this0-blog" alt="image-20230706121200103"></p>
<p><strong>重新连接客户端测试</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403281329237.png?x-oss-process=style/this0-blog" alt="image-20230706121253744"></p>
<h2 id="第四节-LIMIT限制"><a href="#第四节-LIMIT限制" class="headerlink" title="第四节 LIMIT限制"></a>第四节 LIMIT限制</h2><h3 id="（1）maxclients-客户端最大连接数"><a href="#（1）maxclients-客户端最大连接数" class="headerlink" title="（1）maxclients 客户端最大连接数"></a>（1）maxclients 客户端最大连接数</h3><ul>
<li>设置redis同时可以与多少个客户端进行连接。</li>
<li>默认情况下为10000个客户端。</li>
<li>如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329238.png?x-oss-process=style/this0-blog" alt="image-20230706121546036"></p>
<h3 id="（2）maxmemory-最大占用内存"><a href="#（2）maxmemory-最大占用内存" class="headerlink" title="（2）maxmemory 最大占用内存"></a>（2）maxmemory 最大占用内存</h3><ul>
<li>建议<strong>必须设置</strong>，否则，将内存占满，造成服务器宕机</li>
<li>设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。</li>
<li>如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。</li>
<li>但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329239.png?x-oss-process=style/this0-blog" alt="image-20230706121729584"></p>
<h3 id="（3）maxmemory-policy-置换策略"><a href="#（3）maxmemory-policy-置换策略" class="headerlink" title="（3）maxmemory-policy  置换策略"></a>（3）maxmemory-policy  置换策略</h3><ul>
<li>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）</li>
<li>allkeys-lru：在所有集合key中，使用LRU算法移除key</li>
<li>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键</li>
<li>allkeys-random：在所有集合key中，移除随机的key</li>
<li>volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key</li>
<li>noeviction：不进行移除。针对写操作，只是返回错误信息</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329240.png?x-oss-process=style/this0-blog" alt="image-20230706121843454"></p>
<h3 id="（4）maxmemory-samples"><a href="#（4）maxmemory-samples" class="headerlink" title="（4）maxmemory-samples"></a>（4）maxmemory-samples</h3><ul>
<li>设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis默认会检查这么多个key并选择其中LRU的那个。</li>
<li>一般设置3到7的数字，数值越小样本越不准确，但性能消耗越小。</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329241.png?x-oss-process=style/this0-blog" alt="image-20230706122145032"></p>
<ul>
<li>设置为 10，那么 Redis 将会增加额外的 CPU 开销以保证接近真正的 LRU 性能</li>
</ul>
<h1 id="TODO第七章-Redis事务锁机制及案例"><a href="#TODO第七章-Redis事务锁机制及案例" class="headerlink" title="&#x2F;&#x2F;TODO第七章 Redis事务锁机制及案例"></a>&#x2F;&#x2F;TODO第七章 Redis事务锁机制及案例</h1><h2 id="学习目标-4"><a href="#学习目标-4" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟悉Redis事务的定义和特点</p>
<p>2 熟练Redis事务控制的相关命令</p>
<p>3 熟练使用Redis的锁对数据进行监视</p>
<p>4 熟练编写Redis调用LUA脚本代码</p>
<h2 id="第一节-Redis事务和锁机制"><a href="#第一节-Redis事务和锁机制" class="headerlink" title="第一节 Redis事务和锁机制"></a>第一节 Redis事务和锁机制</h2><h3 id="1-1-Redis事务的定义"><a href="#1-1-Redis事务的定义" class="headerlink" title="1.1 Redis事务的定义"></a>1.1 Redis事务的定义</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。Redis事务的主要作用就是串联多个命令防止别的命令插队。</span><br></pre></td></tr></table></figure>



<h3 id="1-2-Redis事务控制命令"><a href="#1-2-Redis事务控制命令" class="headerlink" title="1.2 Redis事务控制命令"></a>1.2 Redis事务控制命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>multi</td>
<td>开始组队</td>
</tr>
<tr>
<td>exec</td>
<td>执行队列中的命令</td>
</tr>
<tr>
<td>discard</td>
<td>取消组队</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。组队的过程中可以通过discard取消组队</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329242.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>情况1 ,组队成功,提交成功</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403281329243.png?x-oss-process=style/this0-blog" alt="image-20230706135508396"></p>
<h3 id="1-3-Redis事务错误处理"><a href="#1-3-Redis事务错误处理" class="headerlink" title="1.3 Redis事务错误处理"></a>1.3 Redis事务错误处理</h3><blockquote>
<p>情况2,组队报错,提交失败：提交失败组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403281329244.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202403281329245.png?x-oss-process=style/this0-blog" alt="image-20230706135937567"></p>
<blockquote>
<p>情况3, 组队成功,提交时有成功有失败。如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，其他的命令都会执行，不会回滚。</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403281329246.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202403281329247.png?x-oss-process=style/this0-blog" alt="image-20230706140338715"></p>
<h3 id="1-4-Redis事务场景案例"><a href="#1-4-Redis事务场景案例" class="headerlink" title="1.4 Redis事务场景案例"></a>1.4 Redis事务场景案例</h3><blockquote>
<p>场景说明</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">想想一个场景：有很多人有你的账户,同时去参加双十一抢购  </span><br><span class="line">一个请求想给金额减8000</span><br><span class="line">一个请求想给金额减5000</span><br><span class="line">一个请求想给金额减1000</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329248.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p><strong>悲观锁</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329249.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p><strong>乐观锁</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。Redis就是利用这种check-and-set机制实现事务的。</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329250.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p><strong>监视和取消监视key</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务**执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。**</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329252.png?x-oss-process=style/this0-blog" alt="image-20230706141601678"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">取消 WATCH 命令对所有 key 的监视。如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。 </span><br></pre></td></tr></table></figure>



<h3 id="1-5-Redis事务的三个特性"><a href="#1-5-Redis事务的三个特性" class="headerlink" title="1.5 Redis事务的三个特性"></a>1.5 Redis事务的三个特性</h3><ul>
<li>单独的隔离操作<ul>
<li>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>
</ul>
</li>
<li>没有隔离级别的概念<ul>
<li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li>
</ul>
</li>
<li>不保证原子性<ul>
<li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li>
</ul>
</li>
</ul>
<h2 id="第二节-Redis-Lua-脚本"><a href="#第二节-Redis-Lua-脚本" class="headerlink" title="第二节 Redis Lua 脚本"></a>第二节 Redis Lua 脚本</h2><h3 id="2-1-什么是LUA"><a href="#2-1-什么是LUA" class="headerlink" title="2.1 什么是LUA"></a>2.1 什么是LUA</h3><blockquote>
<p>什么是LUA脚本</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403281329253.png?x-oss-process=style/this0-blog"></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Lua 是一个小巧的[脚本语言](http://baike.baidu.com/item/脚本语言)，Lua脚本可以很容易的被C/C++ 代码调用，也可以反过来调用C/C++的函数，Lua并没有提供强大的库，一个完整的Lua解释器不过200k，所以Lua不适合作为开发独立应用程序的语言，而是作为嵌入式脚本语言。很多应用程序、游戏使用LUA作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。这其中包括魔兽争霸地图、魔兽世界、博德之门、愤怒的小鸟等众多游戏插件或外挂。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>LUA脚本的优势</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数。提升性能。</span><br><span class="line">LUA脚本是类似redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务性的操作。但是注意redis的lua脚本功能，只有在Redis 2.6以上的版本才可以使用。利用lua脚本淘汰用户，解决超卖问题。redis 2.6版本以后，通过lua脚本解决争抢问题，实际上是redis利用其单线程的特性，用任务队列的方式解决多任务并发问题。</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329254.png?x-oss-process=style/this0-blog"></p>
<h3 id="2-2-创建SpringBoot工程"><a href="#2-2-创建SpringBoot工程" class="headerlink" title="2.2 创建SpringBoot工程"></a>2.2 创建SpringBoot工程</h3><p><img src="https://blog-resources.this0.com/image/202403281329255.png?x-oss-process=style/this0-blog" alt="image-20230706154943584"></p>
<h3 id="2-3-引入相关依赖"><a href="#2-3-引入相关依赖" class="headerlink" title="2.3 引入相关依赖"></a>2.3 引入相关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-4-创建配置文件"><a href="#2-4-创建配置文件" class="headerlink" title="2.4 创建配置文件"></a>2.4 创建配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">192.168.6.131</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure>



<h3 id="2-5-创建LUA脚本"><a href="#2-5-创建LUA脚本" class="headerlink" title="2.5 创建LUA脚本"></a>2.5 创建LUA脚本</h3><p>创建文件夹lua，创建脚本文件test.lua</p>
<p><img src="https://blog-resources.this0.com/image/202403281329256.png?x-oss-process=style/this0-blog" alt="image-20230706155329622"></p>
<blockquote>
<p>LUA脚本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">local</span> current = redis.call(<span class="string">&#x27;GET&#x27;</span>, KEYS[1])</span><br><span class="line"><span class="keyword">if</span> current == ARGV[1]</span><br><span class="line">  <span class="keyword">then</span> redis.call(<span class="string">&#x27;SET&#x27;</span>, KEYS[1], ARGV[2])</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">true</span></span><br><span class="line">end</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<h3 id="2-6-创建配置类"><a href="#2-6-创建配置类" class="headerlink" title="2.6 创建配置类"></a>2.6 创建配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.script.RedisScript;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppRedisConfiguration</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//简单序列化</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String,String&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String,String&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// 设置键序列化方式</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 设置简单类型值的序列化方式</span></span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 设置默认序列化方式</span></span><br><span class="line">        redisTemplate.setDefaultSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载lua脚本，设置返回值类型</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisScript&lt;Boolean&gt; <span class="title function_">script</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">scriptSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;lua/test.lua&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> RedisScript.of(scriptSource, Boolean.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-7-创建测试类"><a href="#2-7-创建测试类" class="headerlink" title="2.7 创建测试类"></a>2.7 创建测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.script.RedisScript;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLua</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisScript&lt;Boolean&gt; script;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> checkAndSet(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">        System.out.println(flag ? <span class="string">&quot;修改成功&quot;</span> : <span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手工添加一个值，再试试</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag1</span> <span class="operator">=</span> checkAndSet(<span class="string">&quot;world&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(flag1 ? <span class="string">&quot;修改成功&quot;</span> : <span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkAndSet</span><span class="params">(String value1,String value2)</span> &#123;</span><br><span class="line">        List&lt;String&gt; keyList = Collections.singletonList(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute(script, keyList, value1,value2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>RedisTemplate.execute说明</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329257.png?x-oss-process=style/this0-blog" alt="image-20230706160027980"></p>
<p><strong>RedisTemplate.execute需要传入三个值</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403281329258.png?x-oss-process=style/this0-blog" alt="image-20230706160201481"></p>
<ul>
<li><strong>第一个参数 RedisScript script：</strong> Lua脚本</li>
</ul>
<ul>
<li><strong>第二个参数 List keys：</strong>集合<ul>
<li>如果是单个参数，使用这个可以转换为<strong>单元素集合</strong><ul>
<li>Collections.singletonList(参数)；</li>
</ul>
</li>
<li>多参数<ul>
<li><code>List&lt;String&gt; keys = Arrays.asList(key1, key2, key3);</code></li>
</ul>
</li>
</ul>
</li>
<li><strong>第三个参数 args：</strong>ARGV，也就是其他类型参数</li>
</ul>
<h1 id="第八章-Redis的持久化"><a href="#第八章-Redis的持久化" class="headerlink" title="第八章 Redis的持久化"></a>第八章 Redis的持久化</h1><p>&#x2F;&#x2F;TODO,顺序跳过了</p>
<h2 id="学习目标-5"><a href="#学习目标-5" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟悉Redis持久化的概念</p>
<p>2 熟悉RDB持久化方式特点以及相关操作</p>
<p>3 熟悉AOF持久化方式特点以及相关操作</p>
<h2 id="第一节-持久化总体介绍"><a href="#第一节-持久化总体介绍" class="headerlink" title="第一节 持久化总体介绍"></a>第一节 持久化总体介绍</h2><p>&#x2F;&#x2F;TODO,rdb是将数据集整体存下来存在磁盘，aof是存操作命令，后面全部执行一次</p>
<blockquote>
<p>我们知道Redis是一个内存型数据库,内存的特性是掉电或者程序退出则不保存数据,但是经过实测我们发现,Redis重启服务后,之前存储的数据仍然在,那么这就是通过持久化的方式实现的.</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403281329259.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>Redis 提供了2个不同形式的持久化方式。</p>
</blockquote>
<ul>
<li>RDB（Redis DataBase）定时数据快照 默认方式</li>
<li>AOF（Append Of File） 指令日志文件 手动开启</li>
</ul>
<h2 id="第二节-RDB持久化"><a href="#第二节-RDB持久化" class="headerlink" title="第二节 RDB持久化"></a>第二节 RDB持久化</h2><h3 id="2-1-RDB简介"><a href="#2-1-RDB简介" class="headerlink" title="2.1 RDB简介"></a>2.1 RDB简介</h3><blockquote>
<p>在指定的时间间隔内将内存中的数据集快照写入磁盘,也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里.</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403281329260.png?x-oss-process=style/this0-blog"></p>
<h3 id="2-2-RDB持久化流程"><a href="#2-2-RDB持久化流程" class="headerlink" title="2.2 RDB持久化流程"></a>2.2 RDB持久化流程</h3><blockquote>
<p>执行流程</p>
</blockquote>
<p>&#x20;   Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p>
<blockquote>
<p>Fork子进程</p>
</blockquote>
<ul>
<li>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</li>
<li>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“写时复制技术”</li>
<li>一般情况父进程和子进程会共用同一段物理内存，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li>
</ul>
<blockquote>
<p>RDB持计划流程图</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403281329261.png?x-oss-process=style/this0-blog"></p>
<h3 id="2-3-RDB相关配置与操作"><a href="#2-3-RDB相关配置与操作" class="headerlink" title="2.3 RDB相关配置与操作"></a>2.3 RDB相关配置与操作</h3><p>1 自动触发</p>
<blockquote>
<p>RDB文件名配置</p>
</blockquote>
<ul>
<li>&#x20;在redis.conf中配置文件名称，默认为dump.rdb</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329262.png?x-oss-process=style/this0-blog" alt="image-20230706162436439"></p>
<p>我是archlinux开发，改成</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dbfilename</span> dumparch.rdb</span><br></pre></td></tr></table></figure>

<p>单机版可以不改。</p>
<p>redis能使用config命令获取配置</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; config get requirepass</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; </span><br></pre></td></tr></table></figure>



<blockquote>
<p>RDB文件位置配置</p>
</blockquote>
<ul>
<li>rdb文件的保存路径，也可以修改。默认为Redis启动时命令行所在的目录下.</li>
<li>可以通过修改该配置,将RDB文件存到系统的指定目录下</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329263.png?x-oss-process=style/this0-blog" alt="image-20230706162540821"></p>
<p>我就改成了</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">dir <span class="regexp">/home/y</span>pt<span class="regexp">/SDE/my</span>redis<span class="regexp">/dumpfiles/</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>RDB自动执行快照策略</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403281329264.png?x-oss-process=style/this0-blog" alt="image-20230706162725781"></p>
<ul>
<li>save命令临时这只快照执行策略<ul>
<li><p>格式：save 秒钟 写操作次数 RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件， 默认是1分钟至少1万个key发生变化，或5分钟至少100个key发生变化，或1个小时至少1个key发生变化。</p>
</li>
<li><p>禁用 不设置save指令，或者给save传入空字符串</p>
</li>
</ul>
</li>
</ul>
<p>比如，配置</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">save</span> <span class="number">5</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><code>对变化的计数是累计的</code></p>
<p>间隔 &gt;&#x3D; 5秒,修改次数 &gt;&#x3D; 2个,自动触发</p>
<blockquote>
<p>RDB手动执行快照命令</p>
</blockquote>
<ul>
<li><p>save VS bgsave</p>
<ul>
<li>save ：使用主进行进行持久化指令,save时只管保存，其它不管，全部阻塞。手动保存。不建议。</li>
<li>bgsave：Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。<br>可以通过lastsave 命令获取最后一次成功执行快照的时间<br><img src="https://blog-resources.this0.com/image/202403281329265.png?x-oss-process=style/this0-blog"></li>
</ul>
</li>
<li><p>flushall命令</p>
<ul>
<li>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</li>
</ul>
</li>
<li><p>shutdown命令</p>
<ul>
<li>shutdown命令在关系服务的时候也会进行自动的持久化,创建rdb文件</li>
</ul>
</li>
</ul>
<blockquote>
<p>RDB备份异常策略</p>
</blockquote>
<ul>
<li>stop-writes-on-bgsave-error 配置<ul>
<li>当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes.</li>
</ul>
</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329266.png?x-oss-process=style/this0-blog" alt="image-20230706162910097"></p>
<blockquote>
<p>RDB 文件压缩配置</p>
</blockquote>
<ul>
<li>rdbcompression配置<ul>
<li>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.<br><img src="https://blog-resources.this0.com/image/202403281329267.png?x-oss-process=style/this0-blog" alt="image-20230706163019916"></li>
</ul>
</li>
</ul>
<blockquote>
<p>RDB文件检查完整性配置</p>
</blockquote>
<ul>
<li>rdbchecksum配置<ul>
<li>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能.推荐yes.</li>
</ul>
</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329268.png?x-oss-process=style/this0-blog" alt="image-20230706163056568"></p>
<blockquote>
<p>RDB手动备份操作</p>
</blockquote>
<ul>
<li><p>查询rdb文件的目录 将 *.rdb的文件拷贝到别的地方</p>
</li>
<li><p>rdb的恢复</p>
<ul>
<li><p>关闭Redis</p>
</li>
<li><p>先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</p>
</li>
<li><p>启动Redis, 备份数据会直接加载</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>RDB禁用操作</p>
</blockquote>
<ul>
<li>修改配置文件永久禁用</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329269.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>通过指令临时禁用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">动态停止RDB：redis-cli config set save &quot;&quot;  save后给空值，表示禁用保存策略(不建议)</span><br></pre></td></tr></table></figure>



<h3 id="2-4-RDB的优势和劣势"><a href="#2-4-RDB的优势和劣势" class="headerlink" title="2.4 RDB的优势和劣势"></a>2.4 RDB的优势和劣势</h3><h4 id="2-4-1-优势"><a href="#2-4-1-优势" class="headerlink" title="2.4.1 优势"></a>2.4.1 优势</h4><ul>
<li>适合大规模的数据恢复</li>
<li>对数据完整性和一致性要求不高更适合使用</li>
<li><strong>节省磁盘空间</strong></li>
<li><strong>恢复速度快</strong></li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329270.png?x-oss-process=style/this0-blog"></p>
<h4 id="2-4-2-劣势"><a href="#2-4-2-劣势" class="headerlink" title="2.4.2 劣势"></a>2.4.2 劣势</h4><ul>
<li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li>
<li>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</li>
<li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li>
</ul>
<h3 id="2-5-RDB小总结"><a href="#2-5-RDB小总结" class="headerlink" title="2.5 RDB小总结"></a>2.5 RDB小总结</h3><p><img src="https://blog-resources.this0.com/image/202403281329271.png?x-oss-process=style/this0-blog"></p>
<h2 id="第三节-AOF持久化"><a href="#第三节-AOF持久化" class="headerlink" title="第三节 AOF持久化"></a>第三节 AOF持久化</h2><h3 id="3-1-AOF简介"><a href="#3-1-AOF简介" class="headerlink" title="3.1 AOF简介"></a>3.1 AOF简介</h3><p>&#x20;      Append Only File 以日志的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(读操作不记录)， 只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>
<h3 id="3-2-AOF持计划流程"><a href="#3-2-AOF持计划流程" class="headerlink" title="3.2 AOF持计划流程"></a>3.2 AOF持计划流程</h3><p>（1）客户端的请求写命令会被append追加到AOF缓冲区内；</p>
<p>（2）AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</p>
<p>（3）AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</p>
<p>（4）Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</p>
<p><img src="https://blog-resources.this0.com/image/202403281329272.png?x-oss-process=style/this0-blog"></p>
<h3 id="3-3-AOF相关配置与操作"><a href="#3-3-AOF相关配置与操作" class="headerlink" title="3.3 AOF相关配置与操作"></a>3.3 AOF相关配置与操作</h3><blockquote>
<p>AOF文件名配置</p>
</blockquote>
<ul>
<li>可以在redis.conf中配置文件名称，默认为 appendonly.aof</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329273.png?x-oss-process=style/this0-blog" alt="image-20230706163701368"></p>
<blockquote>
<p>AOF文件位置路径</p>
</blockquote>
<ul>
<li>Redis6中，AOF文件的保存路径，同RDB的路径一致。</li>
<li>Redis7有变化：</li>
</ul>
<p>base：基本文件</p>
<p>incr：增量文件</p>
<p>manifest：清单文件</p>
<p><img src="https://blog-resources.this0.com/image/202403281329274.png?x-oss-process=style/this0-blog" alt="image-20230706164947931"></p>
<blockquote>
<p>AOF开启-修复-恢复操作</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载。</span><br></pre></td></tr></table></figure>

<ul>
<li><p>正常恢复数据</p>
<ul>
<li><p>修改默认的appendonly no，改为yes,开启AOP方式</p>
<p><img src="https://blog-resources.this0.com/image/202403281329275.png?x-oss-process=style/this0-blog" alt="image-20230706163851658"></p>
</li>
<li><p>将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)</p>
</li>
<li><p>恢复：重启redis然后重新加载</p>
</li>
</ul>
</li>
<li><p>异常修复数据</p>
<ul>
<li><p>修改默认的appendonly no，改为yes</p>
</li>
<li><p>如遇到AOF文件损坏，通过&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-check-aof –fix appendonly.aof.1.incr.aof进行恢复</p>
</li>
<li><p>备份被写坏的AOF文件</p>
</li>
<li><p>恢复：重启redis，然后重新加载</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>AOF同步频率设置</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403281329277.png?x-oss-process=style/this0-blog" alt="image-20230706164003278"></p>
<ul>
<li><p>appendfsync always</p>
<ul>
<li>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</li>
</ul>
</li>
<li><p>appendfsync everysec</p>
<ul>
<li>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</li>
</ul>
</li>
<li><p>appendfsync no</p>
<ul>
<li>redis不主动进行同步，把同步时机交给操作系统。</li>
</ul>
</li>
</ul>
<blockquote>
<p>AOF压缩配置</p>
</blockquote>
<ul>
<li><p>什么是文件压缩 rewrite重写?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329278.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>如何实现重写?</p>
<ul>
<li>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。</li>
<li>no-appendfsync-on-rewrite 设置重写策略</li>
<li>如果 no-appendfsync-on-rewrite&#x3D;yes ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）</li>
<li>如果 no-appendfsync-on-rewrite&#x3D;no, 还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</li>
</ul>
</li>
<li><p>何时触发重写?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发,重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。</span><br></pre></td></tr></table></figure>

<ul>
<li>auto-aof-rewrite-percentage 设置重写基准值<ul>
<li>文件达到100%时开始重写（文件是原来重写后文件的2倍时触发）</li>
</ul>
</li>
<li>auto-aof-rewrite-min-size 设置重写基准值<ul>
<li>最小文件64MB。达到这个值开始重写。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如：文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB</span><br><span class="line">系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,如果Redis的AOF当前大小&gt;= base_size +base_size*100% (默认)且当前大小&gt;=64mb(默认)的情况下，Redis会对AOF进行重写。 </span><br></pre></td></tr></table></figure>
</li>
<li><p>重写的流程是?</p>
<ul>
<li>（1）bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。</li>
<li>（2）主进程fork出子进程执行重写操作，保证主进程不会阻塞。</li>
<li>（3）子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区,保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</li>
<li>（4）<ul>
<li>1).子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。&#x20;</li>
<li>2).主进程把aof_rewrite_buf中的数据写入到新的AOF文件。</li>
</ul>
</li>
<li>（5）使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。</li>
</ul>
</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329279.png?x-oss-process=style/this0-blog"></p>
<h3 id="3-4-AOF的优势"><a href="#3-4-AOF的优势" class="headerlink" title="3.4 AOF的优势"></a>3.4 AOF的优势</h3><p><img src="https://blog-resources.this0.com/image/202403281329280.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>备份机制更稳健，丢失数据概率更低。</li>
<li>可读的日志文本，通过操作AOF稳健，可以处理误操作。</li>
</ul>
<h3 id="3-5-AOF的劣势"><a href="#3-5-AOF的劣势" class="headerlink" title="3.5 AOF的劣势"></a>3.5 AOF的劣势</h3><ul>
<li>比起RDB占用更多的磁盘空间。</li>
<li>恢复备份速度要慢。</li>
<li>每次读写都同步的话，有一定的性能压力。</li>
<li>存在个别Bug，造成无法恢复。</li>
</ul>
<h3 id="3-6-AOF小总结"><a href="#3-6-AOF小总结" class="headerlink" title="3.6 AOF小总结"></a>3.6 AOF小总结</h3><p><img src="https://blog-resources.this0.com/image/202403281329281.png?x-oss-process=style/this0-blog"></p>
<h3 id="3-7-持久化方案选择"><a href="#3-7-持久化方案选择" class="headerlink" title="3.7 持久化方案选择"></a>3.7 持久化方案选择</h3><blockquote>
<p>RDB和AOP用哪个好?</p>
</blockquote>
<ul>
<li>官方推荐两个都启用。</li>
<li>如果对数据不敏感，可以选单独用RDB。</li>
<li>不建议单独用 AOF，因为可能会出现Bug。</li>
<li>如果只是做纯内存缓存，可以都不用。</li>
<li>AOF和RDB如果同时开启,系统默认取AOF中的持久化数据</li>
</ul>
<blockquote>
<p>官网建议</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403281329282.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储</li>
<li>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾.</li>
<li>Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大</li>
<li>只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.</li>
<li>同时开启两种持久化方式</li>
<li>在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据, 因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</li>
<li>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？</li>
<li>建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</li>
<li>性能建议</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。</span><br><span class="line"> </span><br><span class="line">如果使用AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。</span><br><span class="line">代价,一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。</span><br><span class="line">只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。</span><br><span class="line">默认超过原大小100%大小时重写可以改到适当的数值。</span><br></pre></td></tr></table></figure>



<h1 id="第九章-Redis主从复制"><a href="#第九章-Redis主从复制" class="headerlink" title="第九章 Redis主从复制"></a>第九章 Redis主从复制</h1><h2 id="学习目标-6"><a href="#学习目标-6" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟悉Redis主从复制的特点</p>
<p>2 能搭建Redis的 一主二仆和哨兵模式</p>
<h2 id="第一节-什么是主从复制"><a href="#第一节-什么是主从复制" class="headerlink" title="第一节 什么是主从复制"></a>第一节 什么是主从复制</h2><blockquote>
<p>主机数据更新后根据配置和策略， 自动同步到备机的master&#x2F;slaver机制，Master以写为主，Slave以读为主</p>
</blockquote>
<h2 id="第二节-主从复制的作用"><a href="#第二节-主从复制的作用" class="headerlink" title="第二节 主从复制的作用"></a>第二节 主从复制的作用</h2><ul>
<li>读写分离，性能扩展</li>
<li>容灾快速恢复</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329283.png?x-oss-process=style/this0-blog"></p>
<h2 id="第三节-主从复制具体操作"><a href="#第三节-主从复制具体操作" class="headerlink" title="第三节 主从复制具体操作"></a>第三节 主从复制具体操作</h2><h3 id="（1）实现思路"><a href="#（1）实现思路" class="headerlink" title="（1）实现思路"></a>（1）实现思路</h3><ul>
<li><p>1 一个redis服务作为主机,主要负责写操作</p>
</li>
<li><p>2 两个redis服务作为从机,主要负责读操作</p>
</li>
<li><p>3 从机自动从主机同步数据下来</p>
</li>
<li><p>4 从机主动找主机,而主机不会找从机</p>
</li>
<li><p>5 正常来说主机和从机应该在不同的IP上开启redis服务,我们为了快速模拟,可以在一台机器上模拟出三个redis服务即可</p>
</li>
</ul>
<h3 id="（2）-一台机器上启动多个redis服务"><a href="#（2）-一台机器上启动多个redis服务" class="headerlink" title="（2） 一台机器上启动多个redis服务"></a>（2） 一台机器上启动多个redis服务</h3><ul>
<li>使用redis-server启动服务时,要以来redis.conf配置文件.那么我们可以准备三个redis.conf文件,用来配置三个不同的服务,启动三次分别以来三个不同的服务即可</li>
</ul>
<h3 id="（3）新建三个redis配置文件"><a href="#（3）新建三个redis配置文件" class="headerlink" title="（3）新建三个redis配置文件"></a>（3）新建三个redis配置文件</h3><p><strong>用于定义每个服务的专属配置</strong></p>
<ul>
<li><p>新建redis6379.conf</p>
<p>关闭aof功能</p>
<p><img src="https://blog-resources.this0.com/image/202403281329284.png?x-oss-process=style/this0-blog" alt="image-20230706184344365"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /root/myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329286.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>含义介绍</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /root/myredis/redis.conf # 引入共同的配置</span><br><span class="line">pidfile /var/run/redis_6379.pid # 使用独立的进程文件</span><br><span class="line">port 6379 # 设置当前服务的端口号</span><br><span class="line">dbfilename dump6379.rdb # 使用独立的RDB持久化文件  暂时不适用AOP持久化</span><br></pre></td></tr></table></figure>


</li>
<li><p>新建redis6380.conf</p>
<p><img src="https://blog-resources.this0.com/image/202403281329287.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>新建redis6381.conf</p>
<p><img src="https://blog-resources.this0.com/image/202403281329288.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>在redis6381中多添加一个配置,设置从机的优先级，值越小，优先级越高，用于选举主机时使用。默认100</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">replica-priority 10 </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="（4）启动三个服务"><a href="#（4）启动三个服务" class="headerlink" title="（4）启动三个服务"></a>（4）启动三个服务</h3><p><img src="https://blog-resources.this0.com/image/202403281329289.png?x-oss-process=style/this0-blog" alt="image-20230706185404340"></p>
<h3 id="（5）查看启动服务进程"><a href="#（5）查看启动服务进程" class="headerlink" title="（5）查看启动服务进程"></a>（5）查看启动服务进程</h3><p><img src="https://blog-resources.this0.com/image/202403281329290.png?x-oss-process=style/this0-blog" alt="image-20230706185335546"></p>
<h3 id="（6）使用info-replication查看主从相关信息"><a href="#（6）使用info-replication查看主从相关信息" class="headerlink" title="（6）使用info replication查看主从相关信息"></a>（6）使用info replication查看主从相关信息</h3><ul>
<li>连接redis，使用：redis-cli -p 端口号</li>
<li>执行 info replication查看信息</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329291.png?x-oss-process=style/this0-blog" alt="image-20230706185249563"></p>
<h3 id="（7）-配置主从机器"><a href="#（7）-配置主从机器" class="headerlink" title="（7） 配置主从机器"></a>（7） 配置主从机器</h3><ul>
<li><p>配从不配主,是让从机主动去找主机</p>
</li>
<li><p>在6380 和6381的机器上执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行完毕再次查看主从配置信息</p>
<p><img src="https://blog-resources.this0.com/image/202403281329292.png?x-oss-process=style/this0-blog" alt="image-20230706185658801"></p>
</li>
</ul>
<h3 id="（8）测试主从读写操作"><a href="#（8）测试主从读写操作" class="headerlink" title="（8）测试主从读写操作"></a>（8）测试主从读写操作</h3><ul>
<li><p>主机上写入数据OK</p>
</li>
<li><p>在从机上写数据报错</p>
<p><img src="https://blog-resources.this0.com/image/202403281329293.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>主机宕机,重启即可恢复主从状态,无需其他操作</p>
</li>
<li><p>从机宕机,重启后需要重新执行 slaveof 127.0.0.1 6379 才能恢复</p>
</li>
<li><p>从机可以在配置文件中写入slaveof 127.0.0.1 6379 ,这样重启无需手动输入slaveof 127.0.0.1 6379就可以恢复从机状态</p>
</li>
</ul>
<h2 id="第四节-主从复制原理"><a href="#第四节-主从复制原理" class="headerlink" title="第四节 主从复制原理"></a>第四节 主从复制原理</h2><ul>
<li>Slave启动成功连接到master后会发送一个sync命令</li>
<li>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步</li>
<li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li>
<li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</li>
<li>但是只要是重新连接master,一次完全同步（全量复制)将被自动执行</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329294.png?x-oss-process=style/this0-blog"></p>
<h2 id="第五节-主动复制三种模式"><a href="#第五节-主动复制三种模式" class="headerlink" title="第五节 主动复制三种模式"></a>第五节 主动复制三种模式</h2><blockquote>
<p>第一种 一主二仆</p>
</blockquote>
<ul>
<li>问题1: 切入点问题,slave1、slave2是从头开始复制还是从切入点开始复制?比如从k4进来，那之前的k1,k2,k3是否也可以复制？</li>
<li>问题2 :从机是否可以写？set可否？</li>
<li>问题3:主机shutdown后情况如何？从机是上位还是原地待命？</li>
<li>问题4:主机又回来了后，主机新增记录，从机还能否顺利复制？</li>
<li>问题5:其中一台从机down后情况如何？依照原有它能跟上大部队吗(还会自动变为从机吗?)？</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329295.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>第二种 薪火相传</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。用 slaveof  &lt;ip&gt;&lt;port&gt;</span><br><span class="line">​中途变更转向:会清除之前的数据，重新建立拷贝最新的,风险是一旦某个slave宕机，后面的slave都没法备份,主机挂了，从机还是从机，无法写数据了</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329297.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>第三种 反客为主</p>
</blockquote>
<ul>
<li>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。用 slaveof no one  将从机变为主机。</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329298.png?x-oss-process=style/this0-blog"></p>
<h2 id="第六节-哨兵模式"><a href="#第六节-哨兵模式" class="headerlink" title="第六节 哨兵模式"></a>第六节 哨兵模式</h2><h3 id="6-1-哨兵模式简介"><a href="#6-1-哨兵模式简介" class="headerlink" title="6.1 哨兵模式简介"></a>6.1 哨兵模式简介</h3><blockquote>
<p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p>
</blockquote>
<h3 id="6-2-哨兵模式的使用步骤"><a href="#6-2-哨兵模式的使用步骤" class="headerlink" title="6.2 哨兵模式的使用步骤"></a>6.2 哨兵模式的使用步骤</h3><h4 id="（1）第一步-设置简单的一主二仆"><a href="#（1）第一步-设置简单的一主二仆" class="headerlink" title="（1）第一步: 设置简单的一主二仆"></a>（1）第一步: 设置简单的一主二仆</h4><p><img src="https://blog-resources.this0.com/image/202403281329299.png?x-oss-process=style/this0-blog"></p>
<h4 id="（2）第二步-为哨兵模式准备配置文件"><a href="#（2）第二步-为哨兵模式准备配置文件" class="headerlink" title="（2）第二步: 为哨兵模式准备配置文件"></a>（2）第二步: 为哨兵模式准备配置文件</h4><ul>
<li><p>在&#x2F;root&#x2F;myredis 目录下新建sentinel.conf 配置文件中放入如下内容</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>其中mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。 &#x20;</p>
</li>
</ul>
<h4 id="（3）第三步-启动哨兵"><a href="#（3）第三步-启动哨兵" class="headerlink" title="（3）第三步: 启动哨兵"></a>（3）第三步: 启动哨兵</h4><ul>
<li><p>运行&#x2F;usr&#x2F;local&#x2F;bin 下 redis-sentinel 命令,执行&#x2F;root&#x2F;myredis&#x2F;sentinel.conf配置文件</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">redis-sentinel /root/myredis/sentinel.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>redis做压测可以用自带的redis-benchmark工具 &#x20;</p>
</li>
</ul>
<h3 id="6-3-哨兵模式的操作演示"><a href="#6-3-哨兵模式的操作演示" class="headerlink" title="6.3 哨兵模式的操作演示"></a>6.3 哨兵模式的操作演示</h3><h4 id="（1）主机宕机演示"><a href="#（1）主机宕机演示" class="headerlink" title="（1）主机宕机演示"></a>（1）主机宕机演示</h4><ul>
<li>当主机宕机,会从从机中选择一个作为新的主机,根据优先级slave-properity, 原主机重启后会成为从机</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329300.png?x-oss-process=style/this0-blog" alt="image-20230706190854461"></p>
<h4 id="（2）复制延时"><a href="#（2）复制延时" class="headerlink" title="（2）复制延时"></a>（2）复制延时</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</span><br></pre></td></tr></table></figure>



<h4 id="（3）故障恢复"><a href="#（3）故障恢复" class="headerlink" title="（3）故障恢复"></a>（3）故障恢复</h4><ul>
<li>优先级在redis.conf中默认：replica-priority 100，值越小优先级越高</li>
<li>偏移量是指获得原主机数据最全的</li>
<li>每个redis实例启动后都会随机生成一个40位的runid</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329301.png?x-oss-process=style/this0-blog"></p>
<h1 id="第十章-Redis集群操作"><a href="#第十章-Redis集群操作" class="headerlink" title="第十章 Redis集群操作"></a>第十章 Redis集群操作</h1><h2 id="学习目标-7"><a href="#学习目标-7" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟悉Redis中的集群模式特点</p>
<p>2 能够独立搭建Redis的集群</p>
<p>3 能够熟练操作集群</p>
<h2 id="9-1-目前面临问题分析"><a href="#9-1-目前面临问题分析" class="headerlink" title="9.1 目前面临问题分析"></a>9.1 目前面临问题分析</h2><ul>
<li>容量不够，redis如何进行扩容？</li>
<li>并发写操作， redis如何分摊？</li>
<li>另外，主从模式，薪火相传模式，主机宕机，导致ip地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</li>
<li>之前通过代理主机来解决，但是redis3.0中提供了解决方案。就是无中心化集群配置。</li>
</ul>
<h2 id="9-2-什么是集群"><a href="#9-2-什么是集群" class="headerlink" title="9.2 什么是集群"></a>9.2 什么是集群</h2><blockquote>
<p>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1&#x2F;N。</p>
</blockquote>
<blockquote>
<p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability ）：即使集群中有一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求。</p>
</blockquote>
<h2 id="9-3-集群的搭建"><a href="#9-3-集群的搭建" class="headerlink" title="9.3 集群的搭建"></a>9.3 集群的搭建</h2><h3 id="（1）第一步-搭建前的准备"><a href="#（1）第一步-搭建前的准备" class="headerlink" title="（1）第一步,搭建前的准备"></a>（1）第一步,搭建前的准备</h3><ul>
<li>之前操作产生的rdb和aof文件删除</li>
<li>appendonly 修改回 no</li>
<li>清空主从复制和哨兵模式留下的一些文件</li>
<li>开启daemonize yes</li>
<li>protected-mode no</li>
<li>注释掉bind</li>
</ul>
<h3 id="（2）第二步-制作六个实例的配置文件"><a href="#（2）第二步-制作六个实例的配置文件" class="headerlink" title="（2）第二步,制作六个实例的配置文件"></a>（2）第二步,制作六个实例的配置文件</h3><ul>
<li><p>配置文件的内容</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">include /root/myredis/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">pidfile &quot;/var/run/redis_6379.pid&quot;</span><br><span class="line">dbfilename &quot;dump6379.rdb&quot;</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>
</li>
<li><p>内容解释</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">include /root/myredis/redis.conf #引用公共的配置文件</span><br><span class="line">port 6379 # 设置端口号</span><br><span class="line">pidfile &quot;/var/run/redis_6379.pid&quot; # 设置pid进程文件</span><br><span class="line">dbfilename &quot;dump6379.rdb&quot; # 设置rdb持久化问价名</span><br><span class="line">cluster-enabled yes # 开启集群</span><br><span class="line">cluster-config-file nodes-6379.conf # 设置集群使用的结点文件名</span><br><span class="line">cluster-node-timeout 15000 # 设置结点失联时间</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建6379 6380 6381  6389 6390 6391 六个结点的配置文件</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">创建一个配置文件后,进行复制即可,然后再vim下,通过 :%s/6379/目标端口 来批量替换每个配置文件中的端口号</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403281329302.png?x-oss-process=style/this0-blog" alt="image-20230706200218897"></p>
</li>
</ul>
<h3 id="（3）第三步-启动六个服务"><a href="#（3）第三步-启动六个服务" class="headerlink" title="（3）第三步,启动六个服务"></a>（3）第三步,启动六个服务</h3><p><img src="https://blog-resources.this0.com/image/202403281329303.png?x-oss-process=style/this0-blog" alt="image-20230706200143345"></p>
<ul>
<li>组合之前，请确保所有redis实例启动后，nodes-xxxx.conf文件都生成正常。</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329304.png?x-oss-process=style/this0-blog" alt="image-20230706200315643"></p>
<h3 id="（4）第四步-将六个服务合并为一个集群"><a href="#（4）第四步-将六个服务合并为一个集群" class="headerlink" title="（4）第四步 ,将六个服务合并为一个集群"></a>（4）第四步 ,将六个服务合并为一个集群</h3><ul>
<li><p>切换目录到redis的src下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cd /opt/redis-7.0.10/src</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行如下指令</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create --cluster-replicas 1 192.168.6.131:6379 192.168.6.131:6380 192.168.6.131:6381 192.168.6.131:6382 192.168.6.131:6383 192.168.6.131:6384</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure>

<p><strong>此处不要用127.0.0.1， 请用真实IP地址    –replicas 1 采用最简单的方式配置集群，一台主机，一台从机，正好三组。</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403281329305.png?x-oss-process=style/this0-blog" alt="image-20230706200816752"></p>
<p>输入 yes 继续</p>
<p><img src="https://blog-resources.this0.com/image/202403281329306.png?x-oss-process=style/this0-blog" alt="image-20230706200954694"></p>
</li>
</ul>
<h2 id="9-4集群的登录"><a href="#9-4集群的登录" class="headerlink" title="9.4集群的登录"></a>9.4集群的登录</h2><h3 id="（1）集群登录方式"><a href="#（1）集群登录方式" class="headerlink" title="（1）集群登录方式"></a>（1）集群登录方式</h3><p><img src="https://blog-resources.this0.com/image/202403281329308.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>登录指令添加 -c 代表以集群方式登录</li>
</ul>
<h3 id="（2）登录后查看集群信息"><a href="#（2）登录后查看集群信息" class="headerlink" title="（2）登录后查看集群信息"></a>（2）登录后查看集群信息</h3><ul>
<li><p>一个集群至少要有三个主节点。选项 –cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。</p>
</li>
<li><p>分配原则尽量保证每个主数据库运行在不同的IP,每个从库和主库不在一个IP地址上。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">cluster nodes</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329309.png?x-oss-process=style/this0-blog" alt="image-20230706201216761"></p>
<h2 id="9-5-集群的slots"><a href="#9-5-集群的slots" class="headerlink" title="9.5 集群的slots"></a>9.5 集群的slots</h2><p><img src="https://blog-resources.this0.com/image/202403281329310.png?x-oss-process=style/this0-blog" alt="image-20230706201426691"></p>
<ul>
<li>一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个，</li>
<li>集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</li>
<li>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中：<ul>
<li>节点 A 负责处理 0 号至 5460 号插槽。</li>
<li>节点 B 负责处理 5461 号至 10922 号插槽。</li>
<li>节点 C 负责处理 10923 号至 16383 号插槽。</li>
</ul>
</li>
</ul>
<h2 id="9-6-集群中录入值"><a href="#9-6-集群中录入值" class="headerlink" title="9.6 集群中录入值"></a>9.6 集群中录入值</h2><ul>
<li>在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口。</li>
<li>redis-cli客户端提供了 –c 参数实现自动重定向。</li>
<li>如 redis-cli -c –p 6379 登入后，再录入、查询键值对可以自动重定向。</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329311.png?x-oss-process=style/this0-blog" alt="image-20230706201647379"></p>
<ul>
<li><p>不在一个slot下的键值，是不能使用mget,mset等多键操作。</p>
</li>
<li><p>可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去。</p>
</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329312.png?x-oss-process=style/this0-blog" alt="image-20230706201756159"></p>
<h2 id="9-7-集群中查找值"><a href="#9-7-集群中查找值" class="headerlink" title="9.7 集群中查找值"></a>9.7 集群中查找值</h2><ul>
<li>cluster keyslot key 计算key应该保存在那个插槽</li>
<li>cluster countkeysinslot slot的值 计算某个插槽中保存的key的数量</li>
<li>CLUSTER GETKEYSINSLOT &lt;slot&gt;&lt;count&gt; 返回 count 个 slot 槽中的键。</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329313.png?x-oss-process=style/this0-blog" alt="image-20230706202007674"></p>
<h2 id="9-8-集群故障恢复"><a href="#9-8-集群故障恢复" class="headerlink" title="9.8 集群故障恢复"></a>9.8 集群故障恢复</h2><ul>
<li>如果主节点下线？从节点能否自动升为主节点？注意：<strong>15秒超时</strong></li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329314.png?x-oss-process=style/this0-blog" alt="image-20230706202459470"></p>
<ul>
<li>主节点恢复后，主从关系会如何？主节点回来变成从机。</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403281329315.png?x-oss-process=style/this0-blog" alt="image-20230706202640635"></p>
<ul>
<li>如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续?<ul>
<li>redis.conf中cluster-require-full-coverage 为yes 那么 ，整个集群都挂掉</li>
<li>redis.conf中cluster-require-full-coverage 为no 那么，只有该插槽数据全都不能使用。</li>
</ul>
</li>
</ul>
<h2 id="9-9-集群提供的好处"><a href="#9-9-集群提供的好处" class="headerlink" title="9.9 集群提供的好处"></a>9.9 集群提供的好处</h2><ul>
<li>实现扩容</li>
<li>分摊压力</li>
<li>无中心配置相对简单</li>
</ul>
<h2 id="9-10-集群的不足"><a href="#9-10-集群的不足" class="headerlink" title="9.10 集群的不足"></a>9.10 集群的不足</h2><ul>
<li>多键操作是不被支持的</li>
<li>多键的Redis事务是不被支持的。lua脚本不被支持</li>
<li>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</li>
</ul>
]]></content>
      <tags>
        <tag>sss</tag>
      </tags>
  </entry>
  <entry>
    <title>swagger</title>
    <url>/articles/bf71eba1.html</url>
    <content><![CDATA[<h3 id="1-Swagger概述"><a href="#1-Swagger概述" class="headerlink" title="1 Swagger概述"></a>1 Swagger概述</h3><p>Swagger是一种基于OpenAPI规范的API文档生成工具，它可以根据Java代码中的注解自动生成API接口文档，并提供UI界面进行在线测试和调试。</p>
<p>Swagger提供的UI界面相比于另外一款Api文档生成工具<strong>Knife4j</strong>较为简陋。</p>
<h3 id="2-Knife4j概述"><a href="#2-Knife4j概述" class="headerlink" title="2 Knife4j概述"></a>2 Knife4j概述</h3><p>Knife4j是一种基于Swagger构建的增强工具，有更加美观的UI界面</p>
<h3 id="3-springboot整合swagger"><a href="#3-springboot整合swagger" class="headerlink" title="3 springboot整合swagger"></a>3 springboot整合swagger</h3><h4 id="1-maven依赖"><a href="#1-maven依赖" class="headerlink" title="1 maven依赖"></a>1 maven依赖</h4><p>现在只需要一个依赖！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-openapi3-jakarta-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-配置类"><a href="#2-配置类" class="headerlink" title="2 配置类"></a>2 配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.blog.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.OpenAPI;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Contact;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Info;</span><br><span class="line"><span class="keyword">import</span> org.springdoc.core.models.GroupedOpenApi;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">adminApi</span><span class="params">()</span> &#123;      <span class="comment">// 创建了一个api接口的分组</span></span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="string">&quot;admin-api&quot;</span>)         <span class="comment">// 分组名称</span></span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/**&quot;</span>)  <span class="comment">// 接口请求路径规则</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 自定义接口信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">customOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                        .title(<span class="string">&quot;项目API接口文档&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;项目API接口文档的简介&quot;</span>)</span><br><span class="line">                        .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>().name(<span class="string">&quot;yupengtao&quot;</span>))); <span class="comment">// 设定作者</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-访问地址"><a href="#3-访问地址" class="headerlink" title="3 访问地址"></a>3 访问地址</h4><p>8001替换为你项目的端口号</p>
<p><a href="http://localhost:8001/doc.html">http://localhost:8001/doc.html</a></p>
<h4 id="4-常见注解"><a href="#4-常见注解" class="headerlink" title="4 常见注解"></a>4 常见注解</h4><p>@Tag： 用在controller类上，对<code>controller类进行说明</code> 	@Tag(name &#x3D; “文章模块”)<br>@Operation: 用在controller接口方法上<code>对方法进行描述</code>	@Operation(summary &#x3D; “查询所有分类”)<br>@Parameters：用在controller接口方法上<code>对单个参数进行描述</code><br>@Schema： 用在<code>实体类和实体类属性</code>上，对实体类以及实体类属性进行描述</p>
<p><code>类上用name,属性上用description</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Schema(name = &quot;文章分类对象&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;分类id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long cid;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;分类名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">    <span class="keyword">private</span> Date create_time;</span><br><span class="line">    <span class="keyword">private</span> Date update_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/articles/ae0f95e0.html</url>
    <content><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>这部分的代码在我的<a href="https://github.com/baifengxiao/SSM.git">SSM仓库</a>：</p>
<h2 id="一、SpringMVC简介和体验"><a href="#一、SpringMVC简介和体验" class="headerlink" title="一、SpringMVC简介和体验"></a>一、SpringMVC简介和体验</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p><a href="https://docs.spring.io/spring-framework/reference/web/webmvc.html">https://docs.spring.io/spring-framework/reference/web/webmvc.html</a></p>
<p>Spring Web MVC是基于Servlet API构建的原始Web框架，从一开始就包含在Spring Framework中。正式名称“Spring Web MVC”来自其源模块的名称（ <code>spring-webmvc</code> ），但它通常被称为“Spring MVC”。</p>
<p>在控制层框架历经Strust、WebWork、Strust2等诸多产品的历代更迭之后，目前业界普遍选择了SpringMVC作为Java EE项目表述层开发的<strong>首选方案</strong>。之所以能做到这一点，是因为SpringMVC具备如下显著优势：</p>
<ul>
<li><strong>Spring 家族原生产品</strong>，与IOC容器等基础设施无缝对接</li>
<li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li>
<li><strong>代码清新简洁</strong>，大幅度提升开发效率</li>
<li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li>
<li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li>
</ul>
<p>原生Servlet API开发代码片段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">                                                        <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;userName=&quot;</span>+userName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基于SpringMVC开发代码片段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;userName&quot;)</span> String userName,Sting password)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    log.debug(<span class="string">&quot;userName=&quot;</span>+userName);</span><br><span class="line">    <span class="comment">//调用业务即可</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-主要作用"><a href="#1-2-主要作用" class="headerlink" title="1.2 主要作用"></a>1.2 主要作用</h3><p><img src="https://blog-resources.this0.com/image/202403301701983.png?x-oss-process=style/this0-blog"></p>
<p>SSM框架构建起单体项目的技术栈需求！其中的SpringMVC负责表述层（控制层）实现简化！</p>
<p>SpringMVC的作用主要覆盖的是<code>表述层</code>，例如：</p>
<ul>
<li>请求映射</li>
<li>数据输入</li>
<li>视图界面</li>
<li>请求分发</li>
<li>表单回显</li>
<li>会话控制</li>
<li>过滤拦截</li>
<li>异步交互</li>
<li>文件上传</li>
<li>文件下载</li>
<li>数据校验</li>
<li>类型转换</li>
<li>等等等</li>
</ul>
<p><strong>最终总结：</strong></p>
<ol>
<li>简化<code>前端参数接收</code>( 形参列表 )</li>
<li>简化<code>后端数据响应</code>(返回值)</li>
<li>以及其他……</li>
</ol>
<h3 id="1-3-核心组件和调用流程理解"><a href="#1-3-核心组件和调用流程理解" class="headerlink" title="1.3 核心组件和调用流程理解"></a>1.3 核心组件和调用流程理解</h3><p>Spring MVC与许多其他Web框架一样，是围绕<code>前端控制器模式</code>设计的，其中中央 <code>Servlet</code>  <code>DispatcherServlet</code> 做整体请求处理调度！</p>
<p>除了<code>DispatcherServlet</code>SpringMVC还会提供其他特殊的组件协作完成请求处理和响应呈现。</p>
<p><strong>SpringMVC处理请求流程：</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301701749.png?x-oss-process=style/this0-blog"></p>
<p><strong>SpringMVC涉及组件理解：</strong></p>
<ol>
<li>DispatcherServlet :  SpringMVC提供，我们需要使用web.xml配置使其生效，它是整个流程处理的核心，<code>所有请求都经过它的处理和分发</code>！[ CEO ]</li>
<li>HandlerMapping :  SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效，它内部缓存handler(controller方法)和handler访问路径数据，被DispatcherServlet调用，用于查找路径对应的handler！[秘书]</li>
<li>HandlerAdapter : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效，它可以处理请求参数和处理响应数据数据，每次DispatcherServlet都是通过handlerAdapter间接调用handler，他是handler和DispatcherServlet之间的适配器！[经理]</li>
<li>Handler : handler又称处理器，他是Controller类内部的方法简称，是由我们自己定义，用来接收参数，向后调用业务，最终返回响应结果！[打工人]</li>
<li>ViewResovler : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效！视图解析器主要作用简化模版视图页面查找的，但是需要注意，前后端分离项目，后端只返回JSON数据，不返回页面，那就不需要视图解析器！所以，视图解析器，相对其他的组件不是必须的！[财务]</li>
</ol>
<h3 id="1-4-快速体验"><a href="#1-4-快速体验" class="headerlink" title="1.4 快速体验"></a>1.4 快速体验</h3><ol>
<li><p>体验场景需求</p>
<p><img src="https://blog-resources.this0.com/image/202403301701914.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>配置分析&#x2F;&#x2F;TODO</p>
<ol>
<li>DispatcherServlet，设置处理所有请求！</li>
<li>HandlerMapping,HandlerAdapter,Handler需要加入到IoC容器，供DS调用！</li>
<li>Handler自己声明（Controller）需要配置到HandlerMapping中供DS查找！</li>
</ol>
</li>
<li><p>准备项目</p>
<ol>
<li><p>创建项目</p>
<p>springmvc-base-quick</p>
<p>注意：需要转成maven&#x2F;web程序！！</p>
</li>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet.api</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">servlet.api</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springioc相关依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- web相关依赖  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 pom.xml 中引入 Jakarta EE Web API 的依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        在 Spring Web MVC 6 中，Servlet API 迁移到了 Jakarta EE API，因此在配置 DispatcherServlet 时需要使用</span></span><br><span class="line"><span class="comment">         Jakarta EE 提供的相应类库和命名空间。错误信息 “‘org.springframework.web.servlet.DispatcherServlet’</span></span><br><span class="line"><span class="comment">         is not assignable to ‘javax.servlet.Servlet,jakarta.servlet.Servlet’” 表明你使用了旧版本的</span></span><br><span class="line"><span class="comment">         Servlet API，没有更新到 Jakarta EE 规范。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet.api&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- springwebmvc相关依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Controller声明</p>
<p><code>RequestMappingHandlerMapping 就是springmvc提供的组件,支持@RequestMapping方式注册的handler,handler就是controller内部的具体方法</code>,&#x2F;&#x2F;TODO</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//handlers</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler就是controller内部的具体方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestMapping</span>(&quot;/springmvc/hello&quot;) 就是用来向handlerMapping中注册的方法注解!</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ResponseBody</span> 代表向浏览器直接返回数据!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/springmvc/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloController.hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springmvc!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Spring MVC核心组件配置类</p>
<p>可以不在配置类里添加<code>RequestMappingHandlerMapping</code>和<code>RequestMappingHandlerAdapter</code>,springmvc会检查是否配置handlerMapping和handlerAdapter,没有配置默认加载spring-webmvc包下的配置DispatcherServlet.properties下的组件!</p>
<blockquote>
<p>声明springmvc涉及组件信息的配置类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SpringMVC对应组件的配置类 [声明SpringMVC需要的组件信息]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 导入handlerMapping和handlerAdapter的三种方式</span></span><br><span class="line"><span class="comment">//1.自动导入handlerMapping和handlerAdapter [推荐]</span></span><br><span class="line"><span class="comment">//2.手动添加,使用@Bean方式配置handlerMapper和handlerAdapter</span></span><br><span class="line"><span class="comment">//3.可以不添加,springmvc会检查是否配置handlerMapping和handlerAdapter,没有配置默认加载</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@EnableWebMvc</span>     </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:spring-mvc.xml&quot;)</span>	<span class="comment">//TODO指定配置文件路径</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu.controller&quot;)</span></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HandlerMapping <span class="title function_">handlerMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerMapping</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HandlerAdapter <span class="title function_">handlerAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerAdapter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>或者 在配置文件中配置&#x2F;&#x2F;TODO</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC中负责处理请求的核心Servlet，也被称为SpringMVC的前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DispatcherServlet的全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 作为框架的核心组件，在启动过程中有大量的初始化操作要做，这些操作放在第一次请求时才执行非常不恰当 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 值为100表示在Web应用启动时就加载这个Servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>100<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对DispatcherServlet来说，url-pattern有两种方式配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置“/”，表示匹配整个Web应用范围内所有请求。这里有一个硬性规定：不能写成“/*”。</span></span><br><span class="line"><span class="comment">      只有这一个地方有这个特殊要求，以后我们再配置Filter还是可以正常写“/*”。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>SpringMVC环境搭建<br>&#x2F;&#x2F;TODO: Springmvc框架会自动检查当前类的实现类,会自动加载 getRootConfigClasses &#x2F; getServletConfigClasses 提供的配置类<br>&#x2F;&#x2F;TODO: getServletMappings 返回的地址 设置DispatherServlet对应处理的地址</p>
<blockquote>
<p>对于使用基于 Java 的 Spring 配置的应用程序，建议这样做，如以下示例所示：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebAppInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 指定根配置类</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 指定springmvc的配置类</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123; SpringMvcConfig.class &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置dispatcherServlet的处理路径!</span></span><br><span class="line"><span class="comment">   * 一般情况下为 / 代表处理所有请求!</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;/&quot;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;TODO，这个不用加注解进行注入，是因为WebApplicationInitializer这个初始化类的关系</p>
<p><img src="https://blog-resources.this0.com/image/202403301701867.png?x-oss-process=style/this0-blog" alt="image-20240304022823550"></p>
</li>
<li><p>启动测试</p>
<p>注意： tomcat应该是10+版本！方可支持 Jakarta EE API!</p>
<p><img src="https://blog-resources.this0.com/image/202403301701915.png?x-oss-process=style/this0-blog"></p>
</li>
</ol>
<h2 id="二、SpringMVC接收数据"><a href="#二、SpringMVC接收数据" class="headerlink" title="二、SpringMVC接收数据"></a>二、SpringMVC接收数据</h2><h3 id="2-1-访问路径设置"><a href="#2-1-访问路径设置" class="headerlink" title="2.1 访问路径设置"></a>2.1 访问路径设置</h3><p>@RequestMapping注解的作用就是将请求的 URL 地址和处理请求的方式（handler方法）关联起来，建立映射关系。</p>
<p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的方法来处理这个请求。</p>
<h4 id="1-精准路径匹配"><a href="#1-精准路径匹配" class="headerlink" title="1 精准路径匹配"></a>1 精准路径匹配</h4><p>   在@RequestMapping注解指定 URL 地址时，不使用任何通配符，按照请求地址进行精确匹配。</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/login</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/login&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/register</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/register&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.register&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-模糊路径匹配"><a href="#2-模糊路径匹配" class="headerlink" title="2 模糊路径匹配"></a>2 <strong>模糊路径匹配</strong></h4><p>在@RequestMapping注解指定 URL 地址时，通过使用通配符，匹配多个类似的地址。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  路径设置为 /product/*  </span></span><br><span class="line"><span class="comment">     *    /* 为单层任意字符串  /product/a  /product/aaa 可以访问此handler  </span></span><br><span class="line"><span class="comment">     *    /product/a/a 不可以</span></span><br><span class="line"><span class="comment">     *  路径设置为 /product/** </span></span><br><span class="line"><span class="comment">     *   /** 为任意层任意字符串  /product/a  /product/aaa 可以访问此handler  </span></span><br><span class="line"><span class="comment">     *   /product/a/a 也可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/product/*&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ProductController.show&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;product show!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">单层匹配和多层匹配：</span><br><span class="line">  /*：只能匹配URL地址中的一层，如果想准确匹配两层，那么就写“/*/*”以此类推。</span><br><span class="line">  /**：可以匹配URL地址中的多层。</span><br><span class="line">其中所谓的一层或多层是指一个URL地址字符串被“/”划分出来的各个层次</span><br><span class="line">这个知识点虽然对于@RequestMapping注解来说实用性不大，但是将来配置拦截器的时候也遵循这个规则。</span><br></pre></td></tr></table></figure>

<h4 id="3-类和方法级别区别"><a href="#3-类和方法级别区别" class="headerlink" title="3 类和方法级别区别"></a>3 <strong>类和方法级别区别</strong></h4><p><code>@RequestMapping</code> 注解可以用于类级别和方法级别，它们之间的区别如下：</p>
<ol>
<li>设置到类级别：<code>@RequestMapping</code> 注解可以设置在控制器类上，用于映射整个控制器的通用请求路径。这样，如果控制器中的多个方法都需要映射同一请求路径，就不需要在每个方法上都添加映射路径。</li>
<li>设置到方法级别：<code>@RequestMapping</code> 注解也可以单独设置在控制器方法上，用于更细粒度地映射请求路径和处理方法。当多个方法处理同一个路径的不同操作时，可以使用方法级别的 <code>@RequestMapping</code> 注解进行更精细的映射。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.标记到handler方法</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/register&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/logout&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.优化标记类+handler方法</span></span><br><span class="line"><span class="comment">//类上</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//handler方法上</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-附带请求方式限制"><a href="#4-附带请求方式限制" class="headerlink" title="4 附带请求方式限制"></a>4 <strong>附带请求方式限制</strong></h4><p>&#x2F;&#x2F;TODO<code>HTTP 协议定义了八种请求方式，在 SpringMVC 中封装到了RequestMethod枚举类</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RequestMethod</span> &#123;</span><br><span class="line">  GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>默认情况下：@RequestMapping(&quot;/logout&quot;) 任何请求方式都可以访问！</code></p>
<p>如果需要特定指定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/login</span></span><br><span class="line"><span class="comment">     * method = RequestMethod.POST 可以指定单个或者多个请求方式!</span></span><br><span class="line"><span class="comment">     * 注意:违背请求方式会出现405异常!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/login&quot;&#125; , method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/register</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/register&quot;&#125;,method = &#123;RequestMethod.POST,RequestMethod.GET&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.register&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：<code>违背请求方式，会出现405异常！！！</code></p>
<h4 id="5-进阶注解"><a href="#5-进阶注解" class="headerlink" title="5 进阶注解"></a>5 <strong>进阶注解</strong></h4><p>还有 <code>@RequestMapping</code> 的 HTTP 方法特定快捷方式变体：</p>
<ul>
<li><code>@GetMapping</code></li>
<li><code>@PostMapping</code></li>
<li><code>@PutMapping</code></li>
<li><code>@DeleteMapping</code></li>
<li><code>@PatchMapping//TODO</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;,method=RequestMethod.GET)</span></span><br><span class="line">||</span><br><span class="line"><span class="meta">@GetMapping(value=&quot;/login&quot;)</span></span><br></pre></td></tr></table></figure>

<p>注意：&#x2F;&#x2F;TODO<code>进阶注解只能添加到handler方法上，无法添加到类上</code>！</p>
<h4 id="6-常见配置问题"><a href="#6-常见配置问题" class="headerlink" title="6 常见配置问题"></a>6 <strong>常见配置问题</strong></h4><p>出现原因：多个 handler 方法映射了同一个地址，导致 SpringMVC 在接收到这个地址的请求时不知该找哪个 handler 方法处理。</p>
<blockquote>
<p>There is already ‘demo03MappingMethodHandler’ bean method com.atguigu.mvc.handler.Demo03MappingMethodHandler#empGet() <strong>mapped</strong>.</p>
</blockquote>
<h3 id="2-2-接收参数（重点）"><a href="#2-2-接收参数（重点）" class="headerlink" title="2.2 接收参数（重点）"></a>2.2 接收参数（重点）</h3><h4 id="2-2-1-param-和-json参数比较"><a href="#2-2-1-param-和-json参数比较" class="headerlink" title="2.2.1 param 和 json参数比较"></a>2.2.1 param 和 json参数比较</h4><p>在 HTTP 请求中，我们可以选择不同的参数类型，如 param 类型和 JSON 类型。下面对这两种参数类型进行区别和对比：</p>
<ol>
<li><p>参数编码&#x2F;&#x2F;TODO： &#x20;</p>
<p><code>param 类型的参数会被编码为 ASCII 码。</code>例如，假设 <code>name=john doe</code>，则会被编码为 <code>name=john%20doe</code>。<code>而 JSON 类型的参数会被编码为 UTF-8。</code></p>
</li>
<li><p>参数顺序： &#x20;</p>
<p>param 类型的参数没有顺序限制。但是，<code>JSON 类型的参数是有序的</code>。JSON 采用键值对的形式进行传递，其中键值对是有序排列的。</p>
</li>
<li><p>数据类型： &#x20;</p>
<p><code>param 类型的参数仅支持字符串类型、数值类型和布尔类型等简单数据类型。而 JSON 类型的参数则支持更复杂的数据类型，如数组、对象等。</code></p>
</li>
<li><p>嵌套性： &#x20;</p>
<p><code>param 类型的参数不支持嵌套。但是，JSON 类型的参数支持嵌套，可以传递更为复杂的数据结构。</code></p>
</li>
<li><p>可读性： &#x20;</p>
<p>param 类型的参数格式比 JSON 类型的参数更加简单、易读。但是，JSON 格式在传递嵌套数据结构时更加清晰易懂。</p>
</li>
</ol>
<p>总的来说，param 类型的参数适用于单一的数据传递，而 JSON 类型的参数则更适用于更复杂的数据结构传递。根据具体的业务需求，需要选择合适的参数类型。在实际开发中，常见的做法是：在 GET 请求中采用 param 类型的参数，而在 POST 请求中采用 JSON 类型的参数传递。</p>
<h4 id="2-2-2-param参数接收"><a href="#2-2-2-param参数接收" class="headerlink" title="2.2.2 param参数接收"></a>2.2.2 param参数接收</h4><h5 id="1-直接接值"><a href="#1-直接接值" class="headerlink" title="1 直接接值"></a>1 <strong>直接接值</strong></h5><p>客户端请求</p>
<p><img src="https://blog-resources.this0.com/image/202403301701770.png?x-oss-process=style/this0-blog"></p>
<p>handler接收参数</p>
<p><code>只要形参参数名和类型与传递参数相同，即可自动接收!</code></p>
<p>前端请求: <a href="http://localhost:8080/param/value?name=xx&age=18">http://localhost:8080/param/value?name=xx&amp;age=18</a></p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    * 可以利用形参列表,直接接收前端传递的param参数!</span><br><span class="line">         *    要求: 参数名 = 形参名</span><br><span class="line">         *          类型相同  </span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(value=&quot;/value&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setupForm</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> name + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-RequestParam注解"><a href="#2-RequestParam注解" class="headerlink" title="2 @RequestParam注解"></a>2 <code>@RequestParam注解</code></h5><p>可以使用 <code>@RequestParam</code> 注释将 Servlet 请求参数（即查询参数或表单数据）绑定到控制器中的方法参数。</p>
<p><code>把@RequestParam(&quot;&quot;)里的参数，绑定到形参</code></p>
<p><code>@RequestParam</code>使用场景：</p>
<ul>
<li>指定绑定的请求参数名</li>
<li><code>要求请求参数必须传递</code>&#x2F;&#x2F;TODO</li>
<li><code>为请求参数提供默认值</code>  &#x2F;&#x2F;TODO<br>基本用法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前端请求: http://localhost:8080/param/data?name=xx&amp;stuAge=18</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  使用<span class="doctag">@RequestParam</span>注解标记handler方法的形参</span></span><br><span class="line"><span class="comment"> *  指定形参对应的请求参数<span class="doctag">@RequestParam</span>(请求参数名称)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value=&quot;/data&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">paramForm</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, </span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(&quot;stuAge&quot;)</span> <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> name+age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>//TODO默认情况下，使用此批注的方法参数是必需的，</code>但您可以通过将 <code>@RequestParam</code> 批注的 <code>required</code> 标志设置为 <code>false</code>！</p>
<p><code>如果没有没有设置非必须，也没有传递参数会出现400错误：</code></p>
<p><img src="https://blog-resources.this0.com/image/202403301701985.png?x-oss-process=style/this0-blog"></p>
<p>将参数设置非必须，并且设置默认值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value=&quot;/data&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">paramForm</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, </span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;stuAge&quot;,required = false,defaultValue = &quot;18&quot;)</span> <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> name+age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-特殊场景接值-TODO"><a href="#3-特殊场景接值-TODO" class="headerlink" title="3 特殊场景接值&#x2F;&#x2F;TODO"></a>3 特殊场景接值&#x2F;&#x2F;TODO</h5><h6 id="1-一名多值"><a href="#1-一名多值" class="headerlink" title="1 一名多值"></a>1 <code>一名多值</code></h6><p>多选框，提交的数据的时候一个key对应多个值，我们可以使用集合进行接收！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前端请求: http://localhost:8080/param/mul?hbs=吃&amp;hbs=喝</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  一名多值,可以使用集合接收即可!但是需要使用<span class="doctag">@RequestParam</span>注解指定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value=&quot;/mul&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">mulForm</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hbs)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hbs = &quot;</span> + hbs);</span><br><span class="line">    <span class="keyword">return</span> hbs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-实体接收"><a href="#2-实体接收" class="headerlink" title="2 实体接收"></a>2 实体接收</h6><p>Spring MVC 是 Spring 框架提供的 Web 框架，它允许开发者使用实体对象来接收 HTTP 请求中的参数。通过这种方式，可以在方法内部直接使用对象的属性来访问请求参数，而不需要每个参数都写一遍。下面是一个使用实体对象接收参数的示例：</p>
<p>定义一个用于接收参数的实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter 和 setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在控制器中，使用实体对象接收，示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里可以使用 user 对象的属性来接收请求参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述代码中，将<code>请求参数name和age映射到实体类属性上！要求属性名必须等于参数名</code>！否则无法映射！</p>
<p>使用postman传递参数测试：</p>
<p><img src="https://blog-resources.this0.com/image/202403301701984.png?x-oss-process=style/this0-blog"></p>
<h4 id="2-2-3-路径参数接收"><a href="#2-2-3-路径参数接收" class="headerlink" title="2.2.3 路径参数接收"></a>2.2.3 路径参数接收</h4><p>路径传递参数是一种在 URL 路径中传递参数的方式。在 RESTful 的 Web 应用程序中，经常使用路径传递参数来表示资源的唯一标识符或更复杂的表示方式。而 Spring MVC 框架提供了 <code>@PathVariable</code> 注解来处理路径传递参数。</p>
<p><code>@PathVariable</code> 注解允许将 URL 中的占位符映射到控制器方法中的参数。</p>
<p>例如，如果我们想将 <code>/user/&#123;id&#125;</code> 路径下的 <code>&#123;id&#125;</code> 映射到控制器方法的一个参数中，则可以使用 <code>@PathVariable</code> 注解来实现。</p>
<p>下面是一个使用 <code>@PathVariable</code> 注解处理路径传递参数的示例：</p>
<p><code>//TODO形参列表取值: @PathVariable Long id  如果形参名 = &#123;动态标识&#125; 自动赋值!</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态路径设计: /user/&#123;动态部分&#125;/&#123;动态部分&#125;   动态部分使用&#123;&#125;包含即可! &#123;&#125;内部动态标识!</span></span><br><span class="line"><span class="comment"> * 形参列表取值: <span class="doctag">@PathVariable</span> Long id  如果形参名 = &#123;动态标识&#125; 自动赋值!</span></span><br><span class="line"><span class="comment"> *              <span class="doctag">@PathVariable</span>(&quot;动态标识&quot;) Long id  如果形参名 != &#123;动态标识&#125; 可以通过指定动态标识赋值!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 访问测试:  /param/user/1/root  -&gt; id = 1  uname = root</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id, </span></span><br><span class="line"><span class="params">                      <span class="meta">@PathVariable(&quot;name&quot;)</span> String uname)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id = &quot;</span> + id + <span class="string">&quot;, uname = &quot;</span> + uname);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user_detail&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-4-json参数接收"><a href="#2-2-4-json参数接收" class="headerlink" title="2.2.4 json参数接收"></a>2.2.4 json参数接收</h4><p>前端传递 JSON 数据时，Spring MVC 框架可以使用 <code>@RequestBody</code> 注解来将 JSON 数据转换为 Java 对象。<code>@RequestBody</code> 注解表示当前方法参数的值应该从请求体中获取，并且需要指定 value 属性来指示请求体应该映射到哪个参数上。其使用方式和示例代码如下：</p>
<ol>
<li><p>前端发送 JSON 数据的示例：（使用postman测试）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义一个用于接收 JSON 数据的 Java 类，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> String gender;</span><br><span class="line">  <span class="comment">// getter 和 setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在控制器中，使用 <code>@RequestBody</code> 注解来接收 JSON 数据，并将其转换为 Java 对象，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/person&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addPerson</span><span class="params">(<span class="meta">@RequestBody</span> Person person)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里可以使用 person 对象来操作 JSON 数据中包含的属性</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述代码中，<code>@RequestBody</code> 注解将请求体中的 JSON 数据映射到 <code>Person</code> 类型的 <code>person</code> 参数上，并将其作为一个对象来传递给 <code>addPerson()</code> 方法进行处理。</p>
</li>
<li><p>完善配置</p>
<p>测试：</p>
<p><img src="https://blog-resources.this0.com/image/202403301701131.png?x-oss-process=style/this0-blog"></p>
<p>问题：</p>
<p>org.springframework.web.HttpMediaTypeNotSupportedException: Content-Type ‘application&#x2F;json;charset&#x3D;UTF-8’ is not supported]</p>
<p><img src="https://blog-resources.this0.com/image/202403301701190.png?x-oss-process=style/this0-blog"></p>
<p>原因：</p>
<ul>
<li>不支持json数据类型处理</li>
<li>没有json类型处理的工具（jackson）<br>解决：<br>springmvc handlerAdpater配置json转化器,配置类需要明确：&#x2F;&#x2F;TODO，json处理</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//TODO,json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.this0.springmvc.controller&quot;)</span> </span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>pom.xml 加入jackson依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>@EnableWebMvc注解说明&#x2F;&#x2F;TODO</p>
<p>@EnableWebMvc注解效果等同于在 XML 配置中，可以使用 <code>&lt;mvc:annotation-driven&gt;</code> 元素！我们来解析<code>&lt;mvc:annotation-driven&gt;</code>对应的解析工作！</p>
<p>让我们来查看下<code>&lt;mvc:annotation-driven&gt;</code>具体的动作！</p>
<ul>
<li><p>先查看<code>&lt;mvc:annotation-driven&gt;</code>标签最终对应解析的Java类</p>
<p><img src="https://blog-resources.this0.com/image/202403301701621.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>查看解析类中具体的动作即可</p>
<p>打开源码：org.springframework.web.servlet.config.MvcNamespaceHandler</p>
<p><img src="https://blog-resources.this0.com/image/202403301701358.png?x-oss-process=style/this0-blog"></p>
<p>打开源码：org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationDrivenBeanDefinitionParser</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionParser</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HANDLER_MAPPING_BEAN_NAME</span> <span class="operator">=</span> RequestMappingHandlerMapping.class.getName();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HANDLER_ADAPTER_BEAN_NAME</span> <span class="operator">=</span> RequestMappingHandlerAdapter.class.getName();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> AnnotationDrivenBeanDefinitionParser.class.getClassLoader();</span><br><span class="line">        javaxValidationPresent = ClassUtils.isPresent(<span class="string">&quot;jakarta.validation.Validator&quot;</span>, classLoader);</span><br><span class="line">        romePresent = ClassUtils.isPresent(<span class="string">&quot;com.rometools.rome.feed.WireFeed&quot;</span>, classLoader);</span><br><span class="line">        jaxb2Present = ClassUtils.isPresent(<span class="string">&quot;jakarta.xml.bind.Binder&quot;</span>, classLoader);</span><br><span class="line">        jackson2Present = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>, classLoader) &amp;&amp;</span><br><span class="line">            ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span>, classLoader);</span><br><span class="line">        jackson2XmlPresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);</span><br><span class="line">        jackson2SmilePresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span>, classLoader);</span><br><span class="line">        jackson2CborPresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.cbor.CBORFactory&quot;</span>, classLoader);</span><br><span class="line">        gsonPresent = ClassUtils.isPresent(<span class="string">&quot;com.google.gson.Gson&quot;</span>, classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> BeanDefinition <span class="title function_">parse</span><span class="params">(Element element, ParserContext context)</span> &#123;</span><br><span class="line">        <span class="comment">//handlerMapping加入到ioc容器</span></span><br><span class="line">        readerContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME, handlerMappingDef);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加jackson转化器</span></span><br><span class="line">        addRequestBodyAdvice(handlerAdapterDef);</span><br><span class="line">        addResponseBodyAdvice(handlerAdapterDef);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//handlerAdapter加入到ioc容器</span></span><br><span class="line">        readerContext.getRegistry().registerBeanDefinition(HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体添加jackson转化对象方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addRequestBodyAdvice</span><span class="params">(RootBeanDefinition beanDef)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">            beanDef.getPropertyValues().add(<span class="string">&quot;requestBodyAdvice&quot;</span>,</span><br><span class="line">                                            <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(JsonViewRequestBodyAdvice.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResponseBodyAdvice</span><span class="params">(RootBeanDefinition beanDef)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">            beanDef.getPropertyValues().add(<span class="string">&quot;responseBodyAdvice&quot;</span>,</span><br><span class="line">                                            <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(JsonViewResponseBodyAdvice.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="2-3-接收Cookie数据"><a href="#2-3-接收Cookie数据" class="headerlink" title="2.3 接收Cookie数据"></a>2.3 接收Cookie数据</h3><p>可以使用 <code>@CookieValue</code> 注释将 HTTP Cookie 的值绑定到控制器中的方法参数。</p>
<p>考虑使用以下 cookie 的请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84</span><br></pre></td></tr></table></figure>

<p>下面的示例演示如何获取 cookie 值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String cookie)</span> &#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;接收到了cookie数据：&quot;</span>+cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试（需要先创建个cookies）</p>
<h3 id="2-4-接收请求头数据"><a href="#2-4-接收请求头数据" class="headerlink" title="2.4 接收请求头数据"></a>2.4 接收请求头数据</h3><p>可以使用 <code>@RequestHeader</code> 批注将请求标头绑定到控制器中的方法参数。</p>
<p>请考虑以下带有标头的请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Host                    localhost:<span class="number">8080</span></span><br><span class="line">Accept                  text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span></span><br><span class="line">Accept-Language         fr,en-gb;q=<span class="number">0.7</span>,en;q=<span class="number">0.3</span></span><br><span class="line">Accept-Encoding         gzip,deflate</span><br><span class="line">Accept-Charset          ISO-<span class="number">8859</span>-<span class="number">1</span>,utf-<span class="number">8</span>;q=<span class="number">0.7</span>,*;q=<span class="number">0.7</span></span><br><span class="line">Keep-Alive              <span class="number">300</span></span><br></pre></td></tr></table></figure>

<p>下面的示例获取 <code>Accept-Encoding</code> 和 <code>Keep-Alive</code> 标头的值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestHeader(&quot;Accept-Encoding&quot;)</span> String encoding, </span></span><br><span class="line"><span class="params">    <span class="meta">@RequestHeader(&quot;Keep-Alive&quot;)</span> <span class="type">long</span> keepAlive)</span> &#123; </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-原生Api对象操作"><a href="#2-5-原生Api对象操作" class="headerlink" title="2.5 原生Api对象操作"></a>2.5 原生Api对象操作</h3><p><code>//TODO还有model，map，moedlmap，三个对象没讲，下一章节讲，都是request级别的作用域，放在形参列表，另一个request级别的：ModelAndView，放在方法区。</code></p>
<p>下表描述了支持的控制器方法参数</p>
<table>
<thead>
<tr>
<th>Controller method argument 控制器方法参数</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>jakarta.servlet.ServletRequest</code>, <code>jakarta.servlet.ServletResponse</code></td>
<td>请求&#x2F;响应对象</td>
</tr>
<tr>
<td><code>jakarta.servlet.http.HttpSession</code></td>
<td>强制存在会话。因此，这样的参数永远不会为 <code>null</code> 。</td>
</tr>
<tr>
<td>java.io.InputStream, java.io.Reader</td>
<td>用于访问由 Servlet API 公开的原始请求正文。</td>
</tr>
<tr>
<td>java.io.OutputStream, java.io.Writer</td>
<td>用于访问由 Servlet API 公开的原始响应正文。</td>
</tr>
<tr>
<td><code>@PathVariable</code></td>
<td>接收路径参数注解</td>
</tr>
<tr>
<td><code>@RequestParam</code></td>
<td>用于访问 Servlet 请求参数，包括多部分文件。参数值将转换为声明的方法参数类型。</td>
</tr>
<tr>
<td><code>@RequestHeader</code></td>
<td>用于访问请求标头。标头值将转换为声明的方法参数类型。</td>
</tr>
<tr>
<td><code>@CookieValue</code></td>
<td>用于访问Cookie。Cookie 值将转换为声明的方法参数类型。</td>
</tr>
<tr>
<td><code>@RequestBody</code></td>
<td>用于访问 HTTP 请求正文。正文内容通过使用 <code>HttpMessageConverter</code> 实现转换为声明的方法参数类型。</td>
</tr>
<tr>
<td><code>java.util.Map</code>, <code>org.springframework.ui.Model</code>, <code>org.springframework.ui.ModelMap</code></td>
<td>共享域对象，并在视图呈现过程中向模板公开。</td>
</tr>
<tr>
<td>Errors, BindingResult</td>
<td>验证和数据绑定中的错误信息获取对象！</td>
</tr>
</tbody></table>
<p>获取原生对象示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果想要获取请求或者响应对象,或者会话等,可以直接在形参列表传入,并且不分先后顺序!</span></span><br><span class="line"><span class="comment"> * 注意: 接收原生对象,并不影响参数接收!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;api&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">api</span><span class="params">(HttpSession session , HttpServletRequest request,</span></span><br><span class="line"><span class="params">                  HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">    System.out.println(<span class="string">&quot;method = &quot;</span> + method);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;api&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-共享域对象操作"><a href="#2-6-共享域对象操作" class="headerlink" title="2.6 共享域对象操作"></a>2.6 共享域对象操作</h3><h4 id="2-6-1-属性（共享）域作用回顾"><a href="#2-6-1-属性（共享）域作用回顾" class="headerlink" title="2.6.1 属性（共享）域作用回顾"></a>2.6.1 属性（共享）域作用回顾</h4><p>在 JavaWeb 中，共享域指的是在 Servlet 中存储数据，以便在同一 Web 应用程序的多个组件中进行共享和访问。常见的共享域有四种：<code>ServletContext</code>、<code>HttpSession</code>、<code>HttpServletRequest</code>、<code>PageContext</code>。</p>
<ol>
<li><code>ServletContext</code> 共享域：<code>ServletContext</code> 对象可以在整个 Web 应用程序中共享数据，是最大的共享域。一般可以用于保存整个 Web 应用程序的全局配置信息，以及所有用户都共享的数据。在 <code>ServletContext</code> 中保存的数据是线程安全的。</li>
<li><code>HttpSession</code> 共享域：<code>HttpSession</code> 对象可以在同一用户发出的多个请求之间共享数据，但只能在同一个会话中使用。比如，可以将用户登录状态保存在 <code>HttpSession</code> 中，让用户在多个页面间保持登录状态。</li>
<li><code>HttpServletRequest</code> 共享域：<code>HttpServletRequest</code> 对象可以在同一个请求的多个处理器方法之间共享数据。比如，可以将请求的参数和属性存储在 <code>HttpServletRequest</code> 中，让处理器方法之间可以访问这些数据。</li>
<li><code>PageContext</code> 共享域：<code>PageContext</code> 对象是在 JSP 页面Servlet 创建时自动创建的。它可以在 JSP 的各个作用域中共享数据，包括<code>pageScope</code>、<code>requestScope</code>、<code>sessionScope</code>、<code>applicationScope</code> 等作用域。</li>
</ol>
<p>共享域的作用是提供了方便实用的方式在同一 Web 应用程序的多个组件之间传递数据，并且可以将数据保存在不同的共享域中，根据需要进行选择和使用。</p>
<p><img src="https://blog-resources.this0.com/image/202403301701410.png?x-oss-process=style/this0-blog"></p>
<h4 id="2-6-2-Request级别属性（共享）域"><a href="#2-6-2-Request级别属性（共享）域" class="headerlink" title="2.6.2 Request级别属性（共享）域"></a>2.6.2 Request级别属性（共享）域</h4><ol>
<li><p>使用 Model 类型的形参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/model&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrRequestModel</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 在形参位置声明Model类型变量，用于存储模型数据</span></span><br><span class="line"><span class="params">        Model model)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span></span><br><span class="line">    <span class="comment">// 存入请求域这个动作也被称为暴露到请求域</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;requestScopeMessageModel&quot;</span>,<span class="string">&quot;i am very happy[model]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 ModelMap 类型的形参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/model/map&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrRequestModelMap</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 在形参位置声明ModelMap类型变量，用于存储模型数据</span></span><br><span class="line"><span class="params">        ModelMap modelMap)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span></span><br><span class="line">    <span class="comment">// 存入请求域这个动作也被称为暴露到请求域</span></span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;requestScopeMessageModelMap&quot;</span>,<span class="string">&quot;i am very happy[model map]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 Map 类型的形参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/map&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrRequestMap</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 在形参位置声明Map类型变量，用于存储模型数据</span></span><br><span class="line"><span class="params">        Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span></span><br><span class="line">    <span class="comment">// 存入请求域这个动作也被称为暴露到请求域</span></span><br><span class="line">    map.put(<span class="string">&quot;requestScopeMessageMap&quot;</span>, <span class="string">&quot;i am very happy[map]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用原生 request 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/original&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrOriginalRequest</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 拿到原生对象，就可以调用原生方法执行各种操作</span></span><br><span class="line"><span class="params">        HttpServletRequest request)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    request.setAttribute(<span class="string">&quot;requestScopeMessageOriginal&quot;</span>, <span class="string">&quot;i am very happy[original]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 ModelAndView 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/mav&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testAttrByModelAndView</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.创建ModelAndView对象</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">// 2.存入模型数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;requestScopeMessageMAV&quot;</span>, <span class="string">&quot;i am very happy[mav]&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.设置视图名称</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="2-6-3-Session级别属性（共享）域"><a href="#2-6-3-Session级别属性（共享）域" class="headerlink" title="2.6.3 Session级别属性（共享）域"></a>2.6.3 Session级别属性（共享）域</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/session&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrSession</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//直接对session对象操作,即对会话范围操作!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-6-4-Application级别属性（共享）域"><a href="#2-6-4-Application级别属性（共享）域" class="headerlink" title="2.6.4 Application级别属性（共享）域"></a>2.6.4 Application级别属性（共享）域</h4><p>解释：springmvc会在初始化容器的时候，将servletContext对象存储到ioc容器中！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/attr/application&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">attrApplication</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    servletContext.setAttribute(<span class="string">&quot;appScopeMsg&quot;</span>, <span class="string">&quot;i am hungry...&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、SpringMVC响应数据"><a href="#三、SpringMVC响应数据" class="headerlink" title="三、SpringMVC响应数据"></a>三、SpringMVC响应数据</h2><h3 id="3-1-handler方法分析"><a href="#3-1-handler方法分析" class="headerlink" title="3.1 handler方法分析"></a>3.1 handler方法分析</h3><p>理解handler方法的作用和组成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个controller的方法是控制层的一个处理器,我们称为handler</span></span><br><span class="line"><span class="comment"> * handler需要使用<span class="doctag">@RequestMapping</span>/<span class="doctag">@GetMapping</span>系列,声明路径,在HandlerMapping中注册,供DS查找!</span></span><br><span class="line"><span class="comment"> * 		 handler作用总结:</span></span><br><span class="line"><span class="comment"> *       1.接收参数:</span></span><br><span class="line"><span class="comment"> *       2.调用业务: &#123; 方法体  可以向后调用业务方法 service.xx() &#125;</span></span><br><span class="line"><span class="comment"> *       3.响应数据: 响应前端数据,模版页面跳转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handler</span><span class="params">(简化请求参数接收)</span>&#123;</span><br><span class="line">    调用业务方法</span><br><span class="line">    返回结果 （页面跳转，返回数据（json））</span><br><span class="line">    <span class="keyword">return</span> 简化响应前端数据;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结： 请求数据接收，我们都是通过handler的形参列表</p>
<p>&#x20;            前端数据响应，我们都是通过handler的return关键字快速处理！</p>
<p>&#x20;       springmvc简化了参数接收和响应！</p>
<h3 id="3-2-页面跳转控制"><a href="#3-2-页面跳转控制" class="headerlink" title="3.2 页面跳转控制"></a>3.2 页面跳转控制</h3><h4 id="3-2-1-快速返回模板视图"><a href="#3-2-1-快速返回模板视图" class="headerlink" title="3.2.1 快速返回模板视图"></a>3.2.1 快速返回模板视图</h4><h5 id="1-开发模式回顾"><a href="#1-开发模式回顾" class="headerlink" title="1 开发模式回顾"></a>1 开发模式回顾</h5><p>在 Web 开发中，有两种主要的开发模式：前后端分离和混合开发。</p>
<p>前后端分离模式：[重点]</p>
<p>指将前端的界面和后端的业务逻辑通过接口分离开发的一种方式。开发人员使用不同的技术栈和框架，前端开发人员主要负责页面的呈现和用户交互，后端开发人员主要负责业务逻辑和数据存储。前后端通信通过 API 接口完成，数据格式一般使用 JSON 或 XML。前后端分离模式可以提高开发效率，同时也有助于代码重用和维护。</p>
<p>混合开发模式：</p>
<p>指将前端和后端的代码集成在同一个项目中，共享相同的技术栈和框架。这种模式在小型项目中比较常见，可以减少学习成本和部署难度。但是，在大型项目中，这种模式会导致代码耦合性很高，维护和升级难度较大。</p>
<p>对于混合开发，我们就需要使用动态页面技术，动态展示Java的共享域数据！！</p>
<h5 id="2-jsp技术-了解就行"><a href="#2-jsp技术-了解就行" class="headerlink" title="2 jsp技术,了解就行"></a>2 jsp技术,了解就行</h5><p>JSP（JavaServer Pages）是一种动态网页开发技术，它是由 Sun 公司提出的一种基于 Java 技术的 Web 页面制作技术，可以在 HTML 文件中嵌入 Java 代码，使得生成动态内容的编写更加简单。</p>
<p>JSP 最主要的作用是生成动态页面。它允许将 Java 代码嵌入到 HTML 页面中，以便使用 Java 进行数据库查询、处理表单数据和生成 HTML 等动态内容。另外，JSP 还可以与 Servlet 结合使用，实现更加复杂的 Web 应用程序开发。</p>
<p>JSP 的主要特点包括：</p>
<ol>
<li><p>简单：JSP 通过将 Java 代码嵌入到 HTML 页面中，使得生成动态内容的编写更加简单。</p>
</li>
<li><p>高效：JSP 首次运行时会被转换为 Servlet，然后编译为字节码，从而可以启用 Just-in-Time（JIT）编译器，实现更高效的运行。</p>
</li>
<li><p>多样化：JSP 支持多种标准标签库，包括 JSTL（JavaServer Pages 标准标签库）、EL（表达式语言）等，可以帮助开发人员更加方便的处理常见的 Web 开发需求。<br>总之，JSP 是一种简单高效、多样化的动态网页开发技术，它可以方便地生成动态页面和与 Servlet 结合使用，是 Java Web 开发中常用的技术之一。</p>
</li>
<li><p>准备jsp页面和依赖</p>
<p>pom.xml依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jsp需要依赖! jstl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>jsp页面创建</p>
<p>建议位置：&#x2F;WEB-INF&#x2F;下，避免外部直接访问！</p>
<p>位置：&#x2F;WEB-INF&#x2F;views&#x2F;home.jsp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">        &lt;!-- 可以获取共享域的数据,动态展示! jsp== 后台vue --&gt;</span><br><span class="line">        $&#123;msg&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>快速响应模版页面</p>
<ol>
<li><p>配置jsp视图解析器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu.controller&quot;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫描</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置jsp对应的视图解析器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//快速配置jsp模板语言对应的</span></span><br><span class="line">        registry.jsp(<span class="string">&quot;/WEB-INF/views/&quot;</span>,<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>handler返回视图</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  跳转到提交文件页面  /save/jump</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  如果要返回jsp页面!</span></span><br><span class="line"><span class="comment"> *     1.方法返回值改成字符串类型</span></span><br><span class="line"><span class="comment"> *     2.返回逻辑视图名即可    </span></span><br><span class="line"><span class="comment"> *         &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;</span></span><br><span class="line"><span class="comment"> *            + 逻辑视图名 +</span></span><br><span class="line"><span class="comment"> *         &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;jump&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jumpJsp</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;FileController.jumpJsp&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;request data!!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h4 id="3-2-2-转发和重定向"><a href="#3-2-2-转发和重定向" class="headerlink" title="3.2.2 转发和重定向"></a>3.2.2 转发和重定向</h4><p>在 Spring MVC 中，Handler 方法返回值来实现快速转发，可以使用 <code>redirect</code> 或者 <code>forward</code> 关键字来实现重定向。&#x2F;&#x2F;TODO</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/redirect-demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">redirectDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 重定向到 /demo 路径 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/demo&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/forward-demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">forwardDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 转发到 /demo 路径</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/demo&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意： 转发和重定向到项目下资源路径都是相同，都不需要添加项目根路径！填写项目下路径即可！</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>将方法的返回值，设置String类型</li>
<li>转发使用forward关键字，重定向使用redirect关键字</li>
<li>关键字: &#x2F;路径</li>
<li>注意：如果是项目下的资源，转发和重定向都一样都是项目下路径！都不需要添加项目根路径！</li>
</ul>
<h3 id="3-3-返回JSON数据（重点）"><a href="#3-3-返回JSON数据（重点）" class="headerlink" title="3.3 返回JSON数据（重点）"></a>3.3 返回JSON数据（重点）</h3><h4 id="3-3-1-前置准备"><a href="#3-3-1-前置准备" class="headerlink" title="3.3.1 前置准备"></a>3.3.1 前置准备</h4><p>导入jackson依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加json数据转化器</p>
<p>@EnableWebMvc&#x20;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.this0.springmvc.controller&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-2-ResponseBody"><a href="#3-3-2-ResponseBody" class="headerlink" title="3.3.2 @ResponseBody"></a>3.3.2 @ResponseBody</h4><ol>
<li><p>方法上使用@ResponseBody</p>
<p>可以在方法上使用 <code>@ResponseBody</code>注解，用于将方法返回的对象序列化为<code> JSON 或 XML 格式</code>的数据，并发送给客户端。在前后端分离的项目中使用！</p>
<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/accounts/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体来说，<code>@ResponseBody</code> 注解可以用来标识方法或者方法返回值，表示方法的返回值是要直接返回给客户端的数据，而不是由视图解析器来解析并渲染生成响应体（<code>这样不会使用viewResolver</code>）。		意思是不是跳转视图</p>
<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user/detail&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestBody</span> User userParam)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;userParam = &quot;</span> + userParam);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">    <span class="comment">//返回的对象,会使用jackson的序列化工具,转成json返回给前端!</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<p><img src="https://blog-resources.this0.com/image/202403301701504.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>类上使用@ResponseBody</p>
<p><code>如果类中每个方法上都标记了 @ResponseBody 注解，那么这些注解就可以提取到类上。</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span>  <span class="comment">//responseBody可以添加到类上,代表默认类中的所有方法都生效!</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-3-3-RestController"><a href="#3-3-3-RestController" class="headerlink" title="3.3.3 @RestController"></a>3.3.3 @RestController</h4><p><code>类上的 @ResponseBody 注解可以和 @Controller 注解合并为 @RestController 注解。</code>所以使用了 @RestController 注解就相当于给类中的每个方法都加了 @ResponseBody 注解。</p>
<p>RestController源码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">   * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 4.0.1</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@AliasFor(annotation = Controller.class)</span></span><br><span class="line">  String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-返回静态资源处理"><a href="#3-4-返回静态资源处理" class="headerlink" title="3.4 返回静态资源处理"></a>3.4 返回静态资源处理</h3><ol>
<li><p><strong>静态资源概念</strong></p>
<p>资源本身已经是可以直接拿到浏览器上使用的程度了，<strong>不需要在服务器端做任何运算、处理</strong>。典型的静态资源包括：</p>
<ul>
<li>纯HTML文件</li>
<li>图片</li>
<li>CSS文件</li>
<li>JavaScript文件</li>
<li>……</li>
</ul>
</li>
<li><p><strong>静态资源访问和问题解决</strong></p>
<ul>
<li><p>web应用加入静态资源</p>
<p><img src="https://blog-resources.this0.com/image/202403301701585.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>确保编译了</p>
</li>
<li><p><img src="https://blog-resources.this0.com/image/202403301701574.png?x-oss-process=style/this0-blog" alt="image-20240305221424634"></p>
<p>编译前的位置:</p>
<p><img src="https://blog-resources.this0.com/image/202403301701749.png?x-oss-process=style/this0-blog" alt="image-20240305221327383"></p>
</li>
<li><p>访问静态资源</p>
<p><img src="https://blog-resources.this0.com/image/202403301701872.png?x-oss-process=style/this0-blog" alt="image-20240305221047504"></p>
</li>
<li><p>问题分析</p>
<ul>
<li>DispatcherServlet 的 url-pattern 配置的是“&#x2F;”</li>
<li>url-pattern 配置“&#x2F;”表示整个 Web 应用范围内所有请求都由 SpringMVC 来处理</li>
<li>对 SpringMVC 来说，必须有对应的 @RequestMapping 才能找到处理请求的方法</li>
<li>现在 images&#x2F;mi.jpg 请求没有对应的 @RequestMapping 所以返回 404</li>
</ul>
</li>
<li><p>问题解决</p>
<p>在 SpringMVC 配置配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.this0.springmvc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启静态资源处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.configureDefaultServletHandling(configurer);</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="四、RESTFul风格设计和实战"><a href="#四、RESTFul风格设计和实战" class="headerlink" title="四、RESTFul风格设计和实战"></a>四、RESTFul风格设计和实战</h2><h3 id="4-1-RESTFul风格概述"><a href="#4-1-RESTFul风格概述" class="headerlink" title="4.1 RESTFul风格概述"></a>4.1 RESTFul风格概述</h3><h4 id="4-1-1-RESTFul风格简介"><a href="#4-1-1-RESTFul风格简介" class="headerlink" title="4.1.1 RESTFul风格简介"></a>4.1.1 RESTFul风格简介</h4><p><img src="https://blog-resources.this0.com/image/202403301701045.png?x-oss-process=style/this0-blog"></p>
<p>RESTful（Representational State Transfer）是一种软件架构风格，用于设计网络应用程序和服务之间的通信。它是一种基于标准 HTTP 方法的简单和轻量级的通信协议，广泛应用于现代的Web服务开发。</p>
<p>通过遵循 RESTful 架构的设计原则，可以构建出易于理解、可扩展、松耦合和可重用的 Web 服务。RESTful API 的特点是简单、清晰，并且易于使用和理解，它们使用标准的 HTTP 方法和状态码进行通信，不需要额外的协议和中间件。</p>
<p>总而言之，RESTful 是一种基于 HTTP 和标准化的设计原则的软件架构风格，用于设计和实现可靠、可扩展和易于集成的 Web 服务和应用程序！</p>
<p><img src="https://blog-resources.this0.com/image/202403301701095.png?x-oss-process=style/this0-blog"></p>
<p>学习RESTful设计原则可以帮助我们更好去设计HTTP协议的API接口！！</p>
<h4 id="4-1-2-RESTFul风格特点"><a href="#4-1-2-RESTFul风格特点" class="headerlink" title="4.1.2 RESTFul风格特点"></a>4.1.2 RESTFul风格特点</h4><ol>
<li>每一个URI代表1种资源（URI 是名词）；</li>
<li><code>客户端使用GET、POST、PUT、DELETE 4个表示操作方式的动词对服务端资源进行操作</code>：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；</li>
<li>资源的表现形式是XML或者<strong>JSON</strong>；</li>
<li>客户端与服务端之间的交互在请求之间是<code>无状态</code>的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。</li>
</ol>
<h4 id="4-1-3-RESTFul风格设计规范"><a href="#4-1-3-RESTFul风格设计规范" class="headerlink" title="4.1.3 RESTFul风格设计规范"></a>4.1.3 <strong>RESTFul风格设计规范</strong></h4><ol>
<li><p><strong>HTTP协议请求方式要求</strong></p>
<p>REST 风格主张在项目设计、开发过程中，具体的操作符合<strong>HTTP协议定义的请求方式的语义</strong>。</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询操作</td>
<td>GET</td>
</tr>
<tr>
<td>保存操作</td>
<td>POST</td>
</tr>
<tr>
<td>删除操作</td>
<td>DELETE</td>
</tr>
<tr>
<td>更新操作</td>
<td>PUT</td>
</tr>
</tbody></table>
</li>
<li><p><strong>URL路径风格要求</strong></p>
<p>REST风格下每个资源都应该有一个唯一的标识符，例如一个 <code>URI（统一资源标识符）</code>或者一个<code> URL（统一资源定位符）</code>。资源的标识符应该能明确地说明该资源的信息，同时也应该是可被理解和解释的！</p>
<p>使用URL+请求方式确定具体的动作，他也是一种标准的HTTP协议请求！</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>传统风格</th>
<th>REST 风格</th>
</tr>
</thead>
<tbody><tr>
<td>保存</td>
<td>&#x2F;CRUD&#x2F;saveEmp</td>
<td>URL 地址：&#x2F;CRUD&#x2F;emp&#xA;请求方式：POST</td>
</tr>
<tr>
<td>删除</td>
<td>&#x2F;CRUD&#x2F;removeEmp?empId&#x3D;2</td>
<td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2&#xA;请求方式：DELETE</td>
</tr>
<tr>
<td>更新</td>
<td>&#x2F;CRUD&#x2F;updateEmp</td>
<td>URL 地址：&#x2F;CRUD&#x2F;emp&#xA;请求方式：PUT</td>
</tr>
<tr>
<td>查询</td>
<td>&#x2F;CRUD&#x2F;editEmp?empId&#x3D;2</td>
<td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2&#xA;请求方式：GET</td>
</tr>
</tbody></table>
</li>
</ol>
<ul>
<li><p>总结</p>
<p>根据接口的具体动作，选择具体的HTTP协议请求方式</p>
<p>路径设计从原来携带动标识，改成名词，对应资源的唯一标识即可！</p>
</li>
</ul>
<h4 id="4-1-4-RESTFul风格好处"><a href="#4-1-4-RESTFul风格好处" class="headerlink" title="4.1.4 RESTFul风格好处"></a>4.1.4 RESTFul风格好处</h4><ol>
<li><p>含蓄，安全</p>
<p>使用问号键值对的方式给服务器传递数据太明显，容易被人利用来对系统进行破坏。使用 REST 风格携带数据不再需要明显的暴露数据的名称。</p>
</li>
<li><p>风格统一</p>
<p>URL 地址整体格式统一，从前到后始终都使用斜杠划分各个单词，用简单一致的格式表达语义。</p>
</li>
<li><p>无状态</p>
<p>在调用一个接口（访问、操作资源）的时候，可以不用考虑上下文，不用考虑当前状态，极大的降低了系统设计的复杂度。</p>
</li>
<li><p>严谨，规范</p>
<p>严格按照 HTTP1.1 协议中定义的请求方式本身的语义进行操作。</p>
</li>
<li><p>简洁，优雅</p>
<p>过去做增删改查操作需要设计4个不同的URL，现在一个就够了。</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>传统风格</th>
<th>REST 风格</th>
</tr>
</thead>
<tbody><tr>
<td>保存</td>
<td>&#x2F;CRUD&#x2F;saveEmp</td>
<td>URL 地址：&#x2F;CRUD&#x2F;emp&#xA;请求方式：POST</td>
</tr>
<tr>
<td>删除</td>
<td>&#x2F;CRUD&#x2F;removeEmp?empId&#x3D;2</td>
<td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2&#xA;请求方式：DELETE</td>
</tr>
<tr>
<td>更新</td>
<td>&#x2F;CRUD&#x2F;updateEmp</td>
<td>URL 地址：&#x2F;CRUD&#x2F;emp&#xA;请求方式：PUT</td>
</tr>
<tr>
<td>查询</td>
<td>&#x2F;CRUD&#x2F;querEmp?empId&#x3D;2</td>
<td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2&#xA;请求方式：GET</td>
</tr>
</tbody></table>
</li>
<li><p>丰富的语义</p>
<p>通过 URL 地址就可以知道资源之间的关系。它能够把一句话中的很多单词用斜杠连起来，反过来说就是可以在 URL 地址中用一句话来充分表达语义。</p>
<blockquote>
<p><a href="http://localhost:8080/shop" title="http://localhost:8080/shop">http://localhost:8080/shop</a> <a href="http://localhost:8080/shop/product" title="http://localhost:8080/shop/product">http://localhost:8080/shop/product</a> <a href="http://localhost:8080/shop/product/cellPhone" title="http://localhost:8080/shop/product/cellPhone">http://localhost:8080/shop/product/cellPhone</a> <a href="http://localhost:8080/shop/product/cellPhone/iPhone" title="http://localhost:8080/shop/product/cellPhone/iPhone">http://localhost:8080/shop/product/cellPhone/iPhone</a></p>
</blockquote>
</li>
</ol>
<h3 id="4-2-RESTFul风格实战"><a href="#4-2-RESTFul风格实战" class="headerlink" title="4.2 RESTFul风格实战"></a>4.2 RESTFul风格实战</h3><h4 id="4-2-1-需求分析"><a href="#4-2-1-需求分析" class="headerlink" title="4.2.1 需求分析"></a>4.2.1 需求分析</h4><ul>
<li>数据结构： User {id 唯一标识,name 用户名，age 用户年龄}</li>
<li>功能分析<ul>
<li>用户数据分页展示功能（条件：page 页数 默认1，size 每页数量 默认 10）</li>
<li>保存用户功能</li>
<li>根据用户id查询用户详情功能</li>
<li>根据用户id更新用户数据功能</li>
<li>根据用户id删除用户数据功能</li>
<li>多条件模糊查询用户功能（条件：keyword 模糊关键字，page 页数 默认1，size 每页数量 默认 10）</li>
</ul>
</li>
</ul>
<h4 id="4-2-2-RESTFul风格接口设计"><a href="#4-2-2-RESTFul风格接口设计" class="headerlink" title="4.2.2 RESTFul风格接口设计"></a>4.2.2 RESTFul风格接口设计</h4><ol>
<li><p><strong>接口设计</strong></p>
<table>
<thead>
<tr>
<th>功能</th>
<th>接口和请求方式</th>
<th>请求参数</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>分页查询</td>
<td>GET  &#x2F;user</td>
<td>page&#x3D;1&amp;size&#x3D;10</td>
<td>{ 响应数据 }</td>
</tr>
<tr>
<td>用户添加</td>
<td>POST &#x2F;user</td>
<td>{ user 数据 }</td>
<td>{响应数据}</td>
</tr>
<tr>
<td>用户详情</td>
<td>GET &#x2F;user&#x2F;1</td>
<td>路径参数</td>
<td>{响应数据}</td>
</tr>
<tr>
<td>用户更新</td>
<td>PUT &#x2F;user</td>
<td>{ user 更新数据}</td>
<td>{响应数据}</td>
</tr>
<tr>
<td>用户删除</td>
<td>DELETE &#x2F;user&#x2F;1</td>
<td>路径参数</td>
<td>{响应数据}</td>
</tr>
<tr>
<td>条件模糊</td>
<td>GET &#x2F;user&#x2F;search</td>
<td>page&#x3D;1&amp;size&#x3D;10&amp;keywork&#x3D;关键字</td>
<td>{响应数据}</td>
</tr>
</tbody></table>
</li>
<li><p><strong>问题讨论</strong></p>
<p>为什么查询用户详情，就使用路径传递参数，多条件模糊查询，就使用请求参数传递？</p>
<p>误区：restful风格下，不是所有请求参数都是路径传递！可以使用其他方式传递！</p>
<p>在 RESTful API 的设计中，路径和请求参数和请求体都是用来向服务器传递信息的方式。</p>
<ul>
<li>对于查询用户详情，使用路径传递参数是因为这是一个单一资源的查询，即查询一条用户记录。使用路径参数可以明确指定所请求的资源，便于服务器定位并返回对应的资源，也符合 RESTful 风格的要求。</li>
<li>而对于多条件模糊查询，使用请求参数传递参数是因为这是一个资源集合的查询，即查询多条用户记录。使用请求参数可以通过组合不同参数来限制查询结果，路径参数的组合和排列可能会很多，不如使用请求参数更加灵活和简洁。<br>此外，还有一些通用的原则可以遵循：</li>
<li>路径参数应该用于指定资源的唯一标识或者 ID，而请求参数应该用于指定查询条件或者操作参数。</li>
<li>请求参数应该限制在 10 个以内，过多的请求参数可能导致接口难以维护和使用。</li>
<li>对于敏感信息，最好使用 POST 和请求体来传递参数。</li>
</ul>
</li>
</ol>
<h4 id="4-2-3-后台接口实现"><a href="#4-2-3-后台接口实现" class="headerlink" title="4.2.3 后台接口实现"></a>4.2.3 后台接口实现</h4><p>准备用户实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.springmvc.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>准备用户Controller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 用户模块的控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟分页查询业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryPage</span><span class="params">(<span class="meta">@RequestParam(name = &quot;page&quot;,required = false,defaultValue = &quot;1&quot;)</span><span class="type">int</span> page,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;size&quot;,required = false,defaultValue = &quot;10&quot;)</span><span class="type">int</span> size)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;page = &quot;</span> + page + <span class="string">&quot;, size = &quot;</span> + size);</span><br><span class="line">        System.out.println(<span class="string">&quot;分页查询业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户保存业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户保存业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户详情业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">detailUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id = &quot;</span> + id);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户详情业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户更新业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户更新业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟条件分页查询业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryPage</span><span class="params">(<span class="meta">@RequestParam(name = &quot;page&quot;,required = false,defaultValue = &quot;1&quot;)</span><span class="type">int</span> page,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;size&quot;,required = false,defaultValue = &quot;10&quot;)</span><span class="type">int</span> size,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;keyword&quot;,required= false)</span>String keyword)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;page = &quot;</span> + page + <span class="string">&quot;, size = &quot;</span> + size + <span class="string">&quot;, keyword = &quot;</span> + keyword);</span><br><span class="line">        System.out.println(<span class="string">&quot;条件分页查询业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、SpringMVC其他扩展"><a href="#五、SpringMVC其他扩展" class="headerlink" title="五、SpringMVC其他扩展"></a>五、SpringMVC其他扩展</h2><h3 id="5-1-全局异常处理机制"><a href="#5-1-全局异常处理机制" class="headerlink" title="5.1 全局异常处理机制"></a>5.1 全局异常处理机制</h3><h4 id="5-1-1-异常处理两种方式"><a href="#5-1-1-异常处理两种方式" class="headerlink" title="5.1.1 异常处理两种方式"></a>5.1.1 异常处理两种方式</h4><p>开发过程中是不可避免地会出现各种异常情况的，例如网络连接异常、数据格式异常、空指针异常等等。异常的出现可能导致程序的运行出现问题，甚至直接导致程序崩溃。因此，在开发过程中，合理处理异常、避免异常产生、以及对异常进行有效的调试是非常重要的。</p>
<p>对于异常的处理，一般分为两种方式：</p>
<ul>
<li>编程式异常处理：是指在代码中显式地编写处理异常的逻辑。它通常涉及到对异常类型的检测及其处理，例如使用 try-catch 块来捕获异常，然后在 catch 块中编写特定的处理代码，或者在 finally 块中执行一些清理操作。在编程式异常处理中，开发人员需要显式地进行异常处理，异常处理代码混杂在业务代码中，导致代码可读性较差。</li>
<li>声明式异常处理：则是将异常处理的逻辑从具体的业务逻辑中分离出来，通过配置等方式进行统一的管理和处理。在声明式异常处理中，开发人员只需要为方法或类标注相应的注解（如 <code>@Throws</code> 或 <code>@ExceptionHandler</code>），就可以处理特定类型的异常。相较于编程式异常处理，声明式异常处理可以使代码更加简洁、易于维护和扩展。</li>
</ul>
<p>站在宏观角度来看待声明式事务处理：</p>
<p>整个项目从架构这个层面设计的异常处理的统一机制和规范。</p>
<p>一个项目中会包含很多个模块，各个模块需要分工完成。如果张三负责的模块按照 A 方案处理异常，李四负责的模块按照 B 方案处理异常……各个模块处理异常的思路、代码、命名细节都不一样，那么就会让整个项目非常混乱。</p>
<p>使用声明式异常处理，可以统一项目处理异常思路，项目更加清晰明了！</p>
<h4 id="5-1-2-基于注解异常声明异常处理-TODO"><a href="#5-1-2-基于注解异常声明异常处理-TODO" class="headerlink" title="5.1.2 基于注解异常声明异常处理	&#x2F;&#x2F;TODO"></a>5.1.2 <code>基于注解异常声明异常处理</code>	&#x2F;&#x2F;TODO</h4><ol>
<li><p>声明异常处理控制器类</p>
<p>异常处理控制类，统一定义异常处理handler方法！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * description: 全局异常处理器,内部可以定义异常处理Handler!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RestControllerAdvice</span> = <span class="doctag">@ControllerAdvice</span> + <span class="doctag">@ResponseBody</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ControllerAdvice</span> 代表当前类的异常处理controller! </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>声明异常处理hander方法</p>
<p>异常处理handler方法和普通的handler方法参数接收和响应都一致！</p>
<p>只不过<code>异常处理handler方法要映射异常，发生对应的异常会调用！</code></p>
<p>普通的handler方法要使用@RequestMapping注解映射路径，发生对应的路径调用！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理handler </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ExceptionHandler</span>(HttpMessageNotReadableException.class) </span></span><br><span class="line"><span class="comment"> * 该注解标记异常处理Handler,并且指定发生异常调用该方法!</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e 获取异常对象!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回handler处理结果!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handlerJsonDateException</span><span class="params">(HttpMessageNotReadableException e)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当发生空指针异常会触发此方法!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handlerNullException</span><span class="params">(NullPointerException e)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有异常都会触发此方法!但是如果有具体的异常处理Handler! </span></span><br><span class="line"><span class="comment"> * 具体异常处理Handler优先级更高!</span></span><br><span class="line"><span class="comment"> * 例如: 发生NullPointerException异常!</span></span><br><span class="line"><span class="comment"> *       会触发handlerNullException方法,不会触发handlerException方法!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handlerException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件扫描控制器类配置</p>
<p>确保异常处理控制类被扫描</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 扫描controller对应的包,将handler加入到ioc--&gt;</span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu.controller&quot;,</span></span><br><span class="line"><span class="meta">&quot;com.atguigu.exceptionhandler&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-2-拦截器使用"><a href="#5-2-拦截器使用" class="headerlink" title="5.2 拦截器使用"></a>5.2 拦截器使用</h3><h4 id="5-2-1-拦截器概念"><a href="#5-2-1-拦截器概念" class="headerlink" title="5.2.1 拦截器概念"></a>5.2.1 拦截器概念</h4><p>拦截器和过滤器解决问题</p>
<ul>
<li><p>生活中</p>
<p>为了提高乘车效率，在乘客进入站台前统一检票</p>
<p><img src="https://blog-resources.this0.com/image/202403301701040.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>程序中</p>
<p>在程序中，<code>使用拦截器在请求到达具体 handler 方法前，统一执行检测</code></p>
<p><img src="https://blog-resources.this0.com/image/202403301701276.png?x-oss-process=style/this0-blog"></p>
</li>
</ul>
<p>拦截器 Springmvc VS 过滤器 javaWeb：	&#x2F;&#x2F;TODO</p>
<ul>
<li>相似点<ul>
<li>拦截：必须先把请求拦住，才能执行后续操作</li>
<li>过滤：拦截器或过滤器存在的意义就是对请求进行统一处理</li>
<li>放行：对请求执行了必要操作后，放请求过去，让它访问原本想要访问的资源</li>
</ul>
</li>
<li>不同点<ul>
<li>工作平台不同<ul>
<li>过滤器工作在 Servlet 容器中</li>
<li>拦截器工作在 SpringMVC 的基础上</li>
</ul>
</li>
<li>拦截的范围<ul>
<li>过滤器：能够拦截到的最大范围是整个 Web 应用</li>
<li>拦截器：能够拦截到的最大范围是整个 SpringMVC 负责的请求</li>
</ul>
</li>
<li>IOC 容器支持<ul>
<li>过滤器：想得到 IOC 容器需要调用专门的工具方法，是间接的</li>
<li>拦截器：它自己就在 IOC 容器中，所以可以直接从 IOC 容器中装配组件，也就是可以直接得到 IOC 容器的支持</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>选择：</p>
<p>如果功能用 SpringMVC 的拦截器能够实现，就不使用过滤器。</p>
<p><img src="https://blog-resources.this0.com/image/202403301701177.png?x-oss-process=style/this0-blog"></p>
<h4 id="5-2-2-拦截器使用"><a href="#5-2-2-拦截器使用" class="headerlink" title="5.2.2 拦截器使用"></a>5.2.2 拦截器使用</h4><ol>
<li><p>创建拦截器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Process01Interceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request = &quot;</span> + request + <span class="string">&quot;, response = &quot;</span> + response + <span class="string">&quot;, handler = &quot;</span> + handler);</span><br><span class="line">        System.out.println(<span class="string">&quot;Process01Interceptor.preHandle&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回true：放行</span></span><br><span class="line">        <span class="comment">// 返回false：不放行</span></span><br><span class="line"><span class="comment">//        return HandlerInterceptor.super.preHandle(request, response, handler);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标 handler 方法之后，如果handler报错不执行!</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">        System.out.println(<span class="string">&quot;request = &quot;</span> + request + <span class="string">&quot;, response = &quot;</span> + response + <span class="string">&quot;, handler = &quot;</span> + handler + <span class="string">&quot;, modelAndView = &quot;</span> + modelAndView);</span><br><span class="line">        System.out.println(<span class="string">&quot;Process01Interceptor.postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染视图之后执行(最后),不管报错，一定执行!</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">        System.out.println(<span class="string">&quot;request = &quot;</span> + request + <span class="string">&quot;, response = &quot;</span> + response + <span class="string">&quot;, handler = &quot;</span> + handler + <span class="string">&quot;, ex = &quot;</span> + ex);</span><br><span class="line">        System.out.println(<span class="string">&quot;Process01Interceptor.afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拦截器方法拦截位置：</p>
<p><img src="https://blog-resources.this0.com/image/202403301701371.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>修改配置类添加拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.this0.springmvc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启静态资源处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.configureDefaultServletHandling(configurer);</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置详解</p>
<ol>
<li><p>默认拦截全部</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">//将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>精准配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//精准匹配,设置拦截器处理指定请求 路径可以设置一个或者多个,为项目下路径即可</span></span><br><span class="line">    <span class="comment">//addPathPatterns(&quot;/common/request/one&quot;) 添加拦截路径</span></span><br><span class="line">    <span class="comment">//也支持 /* 和 /** 模糊路径。 * 任意一层字符串 ** 任意层 任意字符串</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>()).addPathPatterns(<span class="string">&quot;/common/request/one&quot;</span>,<span class="string">&quot;/common/request/tow&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>排除配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加拦截器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//精准匹配,设置拦截器处理指定请求 路径可以设置一个或者多个,为项目下路径即可</span></span><br><span class="line">    <span class="comment">//addPathPatterns(&quot;/common/request/one&quot;) 添加拦截路径</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>()).addPathPatterns(<span class="string">&quot;/common/request/one&quot;</span>,<span class="string">&quot;/common/request/tow&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//排除匹配,排除应该在匹配的范围内排除</span></span><br><span class="line">    <span class="comment">//addPathPatterns(&quot;/common/request/one&quot;) 添加拦截路径</span></span><br><span class="line">    <span class="comment">//excludePathPatterns(&quot;/common/request/tow&quot;); 排除路径,排除应该在拦截的范围内</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>())</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/common/request/one&quot;</span>,<span class="string">&quot;/common/request/tow&quot;</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/common/request/tow&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>多个拦截器执行顺序</p>
<ol>
<li>preHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置顺序调用各个 preHandle() 方法。</li>
<li>postHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 postHandle() 方法。</li>
<li>afterCompletion() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 afterCompletion() 方法。</li>
</ol>
</li>
</ol>
<h3 id="5-3-参数校验"><a href="#5-3-参数校验" class="headerlink" title="5.3 参数校验"></a>5.3 参数校验</h3><blockquote>
<p>在 Web 应用三层架构体系中，表述层负责接收浏览器提交的数据，业务逻辑层负责数据的处理。为了能够让业务逻辑层基于正确的数据进行处理，我们需要在表述层对数据进行检查，将错误的数据隔绝在业务逻辑层之外。</p>
</blockquote>
<ol>
<li><p><strong>校验概述</strong></p>
<p>JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 6.0 标准中。JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对Bean进行验证。</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>规则</th>
</tr>
</thead>
<tbody><tr>
<td>@Null</td>
<td>标注值必须为 null</td>
</tr>
<tr>
<td>@NotNull</td>
<td>标注值不可为 null</td>
</tr>
<tr>
<td>@AssertTrue</td>
<td>标注值必须为 true</td>
</tr>
<tr>
<td>@AssertFalse</td>
<td>标注值必须为 false</td>
</tr>
<tr>
<td>@Min(value)</td>
<td>标注值必须大于或等于 value</td>
</tr>
<tr>
<td>@Max(value)</td>
<td>标注值必须小于或等于 value</td>
</tr>
<tr>
<td>@DecimalMin(value)</td>
<td>标注值必须大于或等于 value</td>
</tr>
<tr>
<td>@DecimalMax(value)</td>
<td>标注值必须小于或等于 value</td>
</tr>
<tr>
<td>@Size(max,min)</td>
<td>标注值大小必须在 max 和 min 限定的范围内</td>
</tr>
<tr>
<td>@Digits(integer,fratction)</td>
<td>标注值值必须是一个数字，且必须在可接受的范围内</td>
</tr>
<tr>
<td>@Past</td>
<td>标注值只能用于日期型，且必须是过去的日期</td>
</tr>
<tr>
<td>@Future</td>
<td>标注值只能用于日期型，且必须是将来的日期</td>
</tr>
<tr>
<td>@Pattern(value)</td>
<td>标注值必须符合指定的正则表达式</td>
</tr>
<tr>
<td>JSR 303 只是一套标准，需要提供其实现才可以使用。Hibernate Validator 是 JSR 303 的一个参考实现，除支持所有标准的校验注解外，它还支持以下的扩展注解：</td>
<td></td>
</tr>
<tr>
<td>注解</td>
<td>规则</td>
</tr>
<tr>
<td>————————————————————————————————————————————————————————————————————————————————————————————————————————————————-</td>
<td>——————–</td>
</tr>
<tr>
<td>@Email</td>
<td>标注值必须是格式正确的 Email 地址</td>
</tr>
<tr>
<td>@Length</td>
<td>标注值字符串大小必须在指定的范围内</td>
</tr>
<tr>
<td>@NotEmpty</td>
<td>标注值字符串不能是空字符串</td>
</tr>
<tr>
<td>@Range</td>
<td>标注值必须在指定的范围内</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>Spring 4.0 版本已经拥有自己独立的数据校验框架，同时支持 JSR 303 标准的校验框架。Spring 在进行数据绑定时，可同时调用校验框架完成数据校验工作。在SpringMVC 中，可直接通过注解驱动 @EnableWebMvc 的方式启用数据校验。<code>Spring 的 LocalValidatorFactoryBean 既实现了 Spring 的 Validator 接口，也实现了 JSR 303 的 Validator 接口</code>。只要在Spring容器中定义了一个LocalValidatorFactoryBean，即可将其注入到需要数据校验的 Bean中。Spring本身并没有提供JSR 303的实现，所以必须将JSR 303的实现者的jar包放到类路径下。</p>
<p><code>配置 @EnableWebMvc后，SpringMVC 会默认装配好一个 LocalValidatorFactoryBean</code>，通过在处理方法的入参上标注 @Validated 注解即可让 SpringMVC 在完成数据绑定后执行数据校验的工作。</p>
</li>
<li><p><strong>操作演示</strong></p>
<ul>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 校验注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 校验注解实现--&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator-annotation-processor --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>应用校验注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.pojo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Min(10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Length(min = 3,max = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//email 邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>handler标记和绑定错误收集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Validated</span> 代表应用校验注解! 必须添加!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">save</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> User user,</span></span><br><span class="line"><span class="params">                       //在实体类参数和 BindingResult 之间不能有任何其他参数, BindingResult可以接受错误信息,避免信息抛出!</span></span><br><span class="line"><span class="params">                       BindingResult result)</span>&#123;</span><br><span class="line">       <span class="comment">//判断是否有信息绑定错误! 有可以自行处理!</span></span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> result.getFieldError().toString();</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有,正常处理业务即可</span></span><br><span class="line">        System.out.println(<span class="string">&quot;正常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试效果</p>
<p><img src="https://blog-resources.this0.com/image/202403301701373.png?x-oss-process=style/this0-blog"></p>
</li>
</ul>
</li>
<li><p><strong>易混总结</strong>&#x2F;&#x2F;TODO</p>
<p>@NotNull、@NotEmpty、@NotBlank 都是用于在数据校验中检查字段值是否为空的注解，但是它们的用法和校验规则有所不同。</p>
<ol>
<li><p>@NotNull  (包装类型不为null)</p>
<p>@NotNull 注解是 JSR 303 规范中定义的注解，当被标注的字段值为 null 时，会认为校验失败而抛出异常。该注解不能用于字符串类型的校验，若要对字符串进行校验，应该使用 @NotBlank 或 @NotEmpty 注解。</p>
</li>
<li><p>@NotEmpty (集合类型长度大于0)</p>
<p>@NotEmpty 注解同样是 JSR 303 规范中定义的注解，对于 CharSequence、Collection、Map 或者数组对象类型的属性进行校验，校验时会检查该属性是否为 Null 或者 size()&#x3D;&#x3D;0，如果是的话就会校验失败。但是对于其他类型的属性，该注解无效。需要注意的是只校验空格前后的字符串，如果该字符串中间只有空格，不会被认为是空字符串，校验不会失败。</p>
</li>
<li><p>@NotBlank （字符串，不为null，切不为”  “字符串）</p>
<p>@NotBlank 注解是 Hibernate Validator 附加的注解，对于字符串类型的属性进行校验，校验时会检查该属性是否为 Null 或 “” 或者只包含空格，如果是的话就会校验失败。需要注意的是，@NotBlank 注解只能用于字符串类型的校验。<br>总之，这三种注解都是用于校验字段值是否为空的注解，但是其校验规则和用法有所不同。在进行数据校验时，需要根据具体情况选择合适的注解进行校验。</p>
</li>
</ol>
</li>
</ol>
<h2 id="六、SpringMVC总结"><a href="#六、SpringMVC总结" class="headerlink" title="六、SpringMVC总结"></a>六、SpringMVC总结</h2><table>
<thead>
<tr>
<th>核心点</th>
<th>掌握目标</th>
</tr>
</thead>
<tbody><tr>
<td>springmvc框架</td>
<td>主要作用、核心组件、调用流程</td>
</tr>
<tr>
<td>简化参数接收</td>
<td>路径设计、参数接收、请求头接收、cookie接收</td>
</tr>
<tr>
<td>简化数据响应</td>
<td>模板页面、转发和重定向、JSON数据、静态资源</td>
</tr>
<tr>
<td>restful风格设计</td>
<td>主要作用、具体规范、请求方式和请求参数选择</td>
</tr>
<tr>
<td>功能扩展</td>
<td>全局异常处理、拦截器、参数校验注解</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus</title>
    <url>/articles/1276cc28.html</url>
    <content><![CDATA[<h1 id="七、MyBatis-Plus高级用法：最优化持久层开发"><a href="#七、MyBatis-Plus高级用法：最优化持久层开发" class="headerlink" title="七、MyBatis-Plus高级用法：最优化持久层开发"></a>七、MyBatis-Plus高级用法：最优化持久层开发</h1><h1 id="一、MyBatis-Plus快速入门"><a href="#一、MyBatis-Plus快速入门" class="headerlink" title="一、MyBatis-Plus快速入门"></a>一、MyBatis-Plus快速入门</h1><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><blockquote>
<p>课程版本：3.5.3.1</p>
</blockquote>
<p><a href="https://baomidou.com/">https://baomidou.com/</a></p>
<p><a href="https://github.com/baomidou/mybatis-plus" title="MyBatis-Plus">MyBatis-Plus</a> <a href="https://github.com/baomidou/mybatis-plus" title=" (opens new window)"> (opens new window)</a>（简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/" title="MyBatis">MyBatis</a> <a href="https://www.mybatis.org/mybatis-3/" title=" (opens new window)"> (opens new window)</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<p><img src="https://blog-resources.this0.com/image/202403301705084.png?x-oss-process=style/this0-blog"></p>
<p>特性：</p>
<ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>
<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
</ul>
<p>支持数据库：</p>
<ul>
<li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb，informix，TDengine，redshift</li>
<li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库，优炫数据库</li>
</ul>
<p>mybatis-plus总结：</p>
<p>自动生成单表的CRUD功能</p>
<p>提供丰富的条件拼接方式</p>
<p>全自动ORM类型持久层框架</p>
<h3 id="1-2-快速入门"><a href="#1-2-快速入门" class="headerlink" title="1.2 快速入门"></a>1.2 快速入门</h3><ol>
<li><p>准备数据库脚本</p>
<p>现有一张 <code>User</code> 表，其表结构如下：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>email</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Jone</td>
<td>18</td>
<td><a href="mailto:test1@baomidou.com" title="test1@baomidou.com">test1@baomidou.com</a></td>
</tr>
<tr>
<td>2</td>
<td>Jack</td>
<td>20</td>
<td><a href="mailto:test2@baomidou.com" title="test2@baomidou.com">test2@baomidou.com</a></td>
</tr>
<tr>
<td>3</td>
<td>Tom</td>
<td>28</td>
<td><a href="mailto:test3@baomidou.com" title="test3@baomidou.com">test3@baomidou.com</a></td>
</tr>
<tr>
<td>4</td>
<td>Sandy</td>
<td>21</td>
<td><a href="mailto:test4@baomidou.com" title="test4@baomidou.com">test4@baomidou.com</a></td>
</tr>
<tr>
<td>5</td>
<td>Billie</td>
<td>24</td>
<td><a href="mailto:test5@baomidou.com" title="test5@baomidou.com">test5@baomidou.com</a></td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>


<p> INSERT INTO user (id, name, age, email) VALUES<br> (1, ‘Jone’, 18, ‘<a href="mailto:&#x74;&#x65;&#115;&#116;&#49;&#64;&#98;&#97;&#111;&#109;&#x69;&#100;&#111;&#117;&#46;&#x63;&#111;&#x6d;">&#x74;&#x65;&#115;&#116;&#49;&#64;&#98;&#97;&#111;&#109;&#x69;&#100;&#111;&#117;&#46;&#x63;&#111;&#x6d;</a>‘),<br> (2, ‘Jack’, 20, ‘<a href="mailto:&#x74;&#x65;&#x73;&#x74;&#x32;&#x40;&#x62;&#97;&#x6f;&#x6d;&#x69;&#100;&#x6f;&#117;&#46;&#99;&#x6f;&#x6d;">&#x74;&#x65;&#x73;&#x74;&#x32;&#x40;&#x62;&#97;&#x6f;&#x6d;&#x69;&#100;&#x6f;&#117;&#46;&#99;&#x6f;&#x6d;</a>‘),<br> (3, ‘Tom’, 28, ‘<a href="mailto:&#116;&#x65;&#115;&#116;&#x33;&#x40;&#x62;&#97;&#111;&#109;&#105;&#100;&#111;&#117;&#x2e;&#x63;&#111;&#x6d;">&#116;&#x65;&#115;&#116;&#x33;&#x40;&#x62;&#97;&#111;&#109;&#105;&#100;&#111;&#117;&#x2e;&#x63;&#111;&#x6d;</a>‘),<br> (4, ‘Sandy’, 21, ‘<a href="mailto:&#x74;&#x65;&#x73;&#116;&#x34;&#x40;&#x62;&#97;&#x6f;&#109;&#105;&#100;&#x6f;&#x75;&#46;&#99;&#x6f;&#x6d;">&#x74;&#x65;&#x73;&#116;&#x34;&#x40;&#x62;&#97;&#x6f;&#109;&#105;&#100;&#x6f;&#x75;&#46;&#99;&#x6f;&#x6d;</a>‘),<br> (5, ‘Billie’, 24, ‘<a href="mailto:&#x74;&#x65;&#x73;&#x74;&#x35;&#x40;&#98;&#x61;&#x6f;&#x6d;&#105;&#x64;&#111;&#x75;&#x2e;&#x63;&#x6f;&#109;">&#x74;&#x65;&#x73;&#x74;&#x35;&#x40;&#98;&#x61;&#x6f;&#x6d;&#105;&#x64;&#111;&#x75;&#x2e;&#x63;&#x6f;&#109;</a>‘);</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 准备boot工程</span><br><span class="line"></span><br><span class="line">3. 导入依赖</span><br><span class="line"></span><br><span class="line">   ```xml</span><br><span class="line">   <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-starter-mybatis-plus-06<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">           <span class="comment">&lt;!-- 测试环境 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">           <span class="comment">&lt;!-- mybatis-plus  --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">           <span class="comment">&lt;!-- 数据库相关配置启动器 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">           <span class="comment">&lt;!-- druid启动器的依赖  --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">           <span class="comment">&lt;!-- 驱动类--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--    SpringBoot应用打包插件--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件和启动类</p>
<p>完善连接池配置：</p>
<p>文件夹：META-INF.spring</p>
<p>文件名：</p>
<p>org.springframework.boot.autoconfigure.AutoConfiguration.imports</p>
<p>内容：com.alibaba.druid.spring.boot3.autoconfigure.DruidDataSourceAutoConfigure</p>
<p>application.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接池配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///day01</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>功能编码</p>
<p>编写实体类 <code>User.java</code>（此处使用了 <a href="https://www.projectlombok.org/" title="Lombok">Lombok</a> <a href="https://www.projectlombok.org/" title=" "> </a>简化代码）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写 Mapper 包下的 <code>UserMapper</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>继承mybatis-plus提供的基础Mapper接口，自带crud方法！</p>
</li>
<li><p>测试和使用</p>
<p>添加测试类，进行功能测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span> <span class="comment">//springboot下测试环境注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SampleTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println((<span class="string">&quot;----- selectAll method test ------&quot;</span>));</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        userList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>小结</p>
<p>通过以上几个简单的步骤，我们就实现了 User 表的 CRUD 功能，甚至连 XML 文件都不用编写！</p>
<p>从以上步骤中，我们可以看到集成<code>MyBatis-Plus</code>非常的简单，只需要引入 starter 工程，并配置 mapper 扫描路径即可。</p>
</li>
</ol>
<h1 id="二、MyBatis-Plus核心功能"><a href="#二、MyBatis-Plus核心功能" class="headerlink" title="二、MyBatis-Plus核心功能"></a>二、MyBatis-Plus核心功能</h1><h3 id="2-1-基于Mapper接口CRUD"><a href="#2-1-基于Mapper接口CRUD" class="headerlink" title="2.1 基于Mapper接口CRUD"></a>2.1 基于Mapper接口CRUD</h3><p>这部分的测试代码见仓库：<a href="https://github.com/baifengxiao/springboot3.git">https://github.com/baifengxiao/springboot3.git</a> 的 mybatisplus子模块</p>
<blockquote>
<p>通用 CRUD 封装<a href="https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/mapper/BaseMapper.java" title="BaseMapper (opens new window)">BaseMapper (opens new window)</a>接口， <code>Mybatis-Plus</code> 启动时自动解析实体表关系映射转换为 <code>Mybatis</code> 内部对象注入容器! 内部包含常见的单表操作！</p>
</blockquote>
<h4 id="Insert方法"><a href="#Insert方法" class="headerlink" title="Insert方法"></a>Insert方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录</span></span><br><span class="line"><span class="comment">// T 就是要插入的实体对象</span></span><br><span class="line"><span class="comment">// 默认主键生成策略为雪花算法（后面讲解）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>类型</th>
<th>参数名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>T</td>
<td>entity</td>
<td>实体对象</td>
</tr>
</tbody></table>
<h4 id="Delete方法"><a href="#Delete方法" class="headerlink" title="Delete方法"></a>Delete方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>类型</th>
<th>参数名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Wrapper&lt;T&gt;</td>
<td>wrapper</td>
<td>实体对象封装操作类（可以为 null）</td>
</tr>
<tr>
<td>Collection&lt;? extends Serializable&gt;</td>
<td>idList</td>
<td>主键 ID 列表(不能为 null 以及 empty)</td>
</tr>
<tr>
<td>Serializable</td>
<td>id</td>
<td>主键 ID</td>
</tr>
<tr>
<td>Map&lt;String, Object&gt;</td>
<td>columnMap</td>
<td>表字段 map 对象</td>
</tr>
</tbody></table>
<h4 id="Update方法"><a href="#Update方法" class="headerlink" title="Update方法"></a>Update方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T updateEntity, </span></span><br><span class="line"><span class="params">            <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; whereWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 ID 修改  主键属性必须值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>类型</th>
<th>参数名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>T</td>
<td>entity</td>
<td>实体对象 (set 条件值,可为 null)</td>
</tr>
<tr>
<td>Wrapper&lt;T&gt;</td>
<td>updateWrapper</td>
<td>实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</td>
</tr>
</tbody></table>
<h4 id="Select方法"><a href="#Select方法" class="headerlink" title="Select方法"></a>Select方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">selectById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 entity 条件，查询一条记录</span></span><br><span class="line">T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMaps</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;T&gt; <span class="title function_">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMapsPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line">Integer <span class="title function_">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>参数名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Serializable</td>
<td>id</td>
<td>主键 ID</td>
</tr>
<tr>
<td>Wrapper&lt;T&gt;</td>
<td>queryWrapper</td>
<td>实体对象封装操作类（可以为 null）</td>
</tr>
<tr>
<td>Collection&lt;? extends Serializable&gt;</td>
<td>idList</td>
<td>主键 ID 列表(不能为 null 以及 empty)</td>
</tr>
<tr>
<td>Map&lt;String, Object&gt;</td>
<td>columnMap</td>
<td>表字段 map 对象</td>
</tr>
<tr>
<td>IPage&lt;T&gt;</td>
<td>page</td>
<td>分页查询条件（可以为 RowBounds.DEFAULT）</td>
</tr>
</tbody></table>
<h4 id="自定义和多表映射"><a href="#自定义和多表映射" class="headerlink" title="自定义和多表映射"></a>自定义和多表映射</h4><p>mybatis-plus的默认mapperxml位置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span> <span class="comment"># mybatis-plus的配置</span></span><br><span class="line">  <span class="comment"># 默认位置 private String[] mapperLocations = new String[]&#123;&quot;classpath*:/mapper/**/*.xml&quot;&#125;;    </span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>自定义mapper方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常自定义方法！</span></span><br><span class="line">    <span class="comment">//可以使用注解@Select或者mapper.xml实现</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>基于mapper.xml实现：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace = 接口的全限定符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> &gt;</span></span><br><span class="line">       select * from user</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-基于Service接口CRUD"><a href="#2-2-基于Service接口CRUD" class="headerlink" title="2.2 基于Service接口CRUD"></a>2.2 基于Service接口CRUD</h3><p>通用 Service CRUD 封装<a href="https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/IService.java" title="IService (opens new window)">IService (opens new window)</a>接口，进一步封装 CRUD 采用 <code>get 查询单行</code> <code>remove 删除</code> <code>list 查询集合</code> <code>page 分页</code> 前缀命名方式区分 <code>Mapper</code> 层避免混淆，</p>
<h4 id="对比Mapper接口CRUD区别："><a href="#对比Mapper接口CRUD区别：" class="headerlink" title="对比Mapper接口CRUD区别："></a>对比Mapper接口CRUD区别：</h4><ul>
<li>service添加了批量方法</li>
<li>service层的方法自动添加事务</li>
</ul>
<h4 id="使用Iservice接口方式"><a href="#使用Iservice接口方式" class="headerlink" title="使用Iservice接口方式"></a>使用Iservice接口方式</h4><p>接口继承IService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>类继承ServiceImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="CRUD方法介绍"><a href="#CRUD方法介绍" class="headerlink" title="CRUD方法介绍"></a>CRUD方法介绍</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">保存：</span><br><span class="line"><span class="comment">// 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">save</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line">修改或者保存：</span><br><span class="line"><span class="comment">// TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line">移除：</span><br><span class="line"><span class="comment">// 根据 queryWrapper 设置的条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line">更新：</span><br><span class="line"><span class="comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">update</span><span class="params">(T updateEntity, Wrapper&lt;T&gt; whereWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 ID 选择修改</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateById</span><span class="params">(T entity)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="type">int</span> batchSize)</span>;</span><br><span class="line"></span><br><span class="line">数量： </span><br><span class="line"><span class="comment">// 查询总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">count</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">查询：</span><br><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line">T <span class="title function_">getById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">T <span class="title function_">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="type">boolean</span> throwEx)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">&lt;V&gt; V <span class="title function_">getObj</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"></span><br><span class="line">集合：</span><br><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;T&gt; <span class="title function_">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line">Collection&lt;T&gt; <span class="title function_">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"><span class="comment">// 查询所有列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">listMaps</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">&lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Object&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">&lt;V&gt; List&lt;V&gt; <span class="title function_">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="built_in">super</span> Object, V&gt; mapper)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-分页查询实现"><a href="#2-3-分页查询实现" class="headerlink" title="2.3 分页查询实现"></a>2.3 分页查询实现</h3><ol>
<li><p>导入分页插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用分页查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPageQuery</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//设置分页参数</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//获取分页数据</span></span><br><span class="line">    List&lt;User&gt; list = page.getRecords();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span>+page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;每页显示的条数：&quot;</span>+page.getSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;总记录数：&quot;</span>+page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span>+page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有上一页：&quot;</span>+page.hasPrevious());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有下一页：&quot;</span>+page.hasNext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义的mapper方法使用分页</p>
<p>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传入参数携带Ipage接口</span></span><br><span class="line"><span class="comment">//返回结果为IPage</span></span><br><span class="line">IPage&lt;User&gt; <span class="title function_">selectPageVo</span><span class="params">(IPage&lt;?&gt; page, Integer id)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接口实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectPageVo&quot;</span> resultType=<span class="string">&quot;xxx.xxx.xxx.User&quot;</span>&gt;</span><br><span class="line">    SELECT * FROM user WHERE id &gt; #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    userMapper.selectPageVo(page,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> page.getCurrent();</span><br><span class="line">    System.out.println(<span class="string">&quot;current = &quot;</span> + current);</span><br><span class="line">    <span class="type">long</span> <span class="variable">pages</span> <span class="operator">=</span> page.getPages();</span><br><span class="line">    System.out.println(<span class="string">&quot;pages = &quot;</span> + pages);</span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> page.getTotal();</span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line">    <span class="type">List</span> <span class="variable">records</span> <span class="operator">=</span> page.getRecords();</span><br><span class="line">    System.out.println(<span class="string">&quot;records = &quot;</span> + records);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-4-条件构造器使用"><a href="#2-4-条件构造器使用" class="headerlink" title="2.4 条件构造器使用"></a>2.4 条件构造器使用</h3><h4 id="2-4-1-条件构造器作用"><a href="#2-4-1-条件构造器作用" class="headerlink" title="2.4.1 条件构造器作用"></a>2.4.1 条件构造器作用</h4><p>实例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;John&quot;</span>); <span class="comment">// 添加等于条件</span></span><br><span class="line">queryWrapper.ne(<span class="string">&quot;age&quot;</span>, <span class="number">30</span>); <span class="comment">// 添加不等于条件</span></span><br><span class="line">queryWrapper.like(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;@gmail.com&quot;</span>); <span class="comment">// 添加模糊匹配条件</span></span><br><span class="line">等同于： </span><br><span class="line">delete from user <span class="type">where</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;John&quot;</span> and age != <span class="number">30</span></span><br><span class="line">                                  and email like <span class="string">&quot;%@gmail.com%&quot;</span></span><br><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span>;</span><br></pre></td></tr></table></figure>

<p>使用MyBatis-Plus的条件构造器，你可以构建灵活、高效的查询条件，而不需要手动编写复杂的 SQL 语句。它提供了许多方法来支持各种条件操作符，并且可以通过链式调用来组合多个条件。这样可以简化查询的编写过程，并提高开发效率。</p>
<h4 id="2-4-2-条件构造器继承结构"><a href="#2-4-2-条件构造器继承结构" class="headerlink" title="2.4.2 条件构造器继承结构"></a>2.4.2 条件构造器继承结构</h4><p>条件构造器类结构：</p>
<p><img src="https://blog-resources.this0.com/image/202403301705081.png?x-oss-process=style/this0-blog"></p>
<p>Wrapper ： 条件构造抽象类，最顶端父类</p>
<ul>
<li>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<ul>
<li>QueryWrapper ： 查询&#x2F;删除条件封装</li>
<li>UpdateWrapper ： 修改条件封装</li>
<li>AbstractLambdaWrapper ： 使用Lambda 语法<ul>
<li>LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper</li>
<li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-4-3-基于QueryWrapper-组装条件"><a href="#2-4-3-基于QueryWrapper-组装条件" class="headerlink" title="2.4.3 基于QueryWrapper 组装条件"></a>2.4.3 基于QueryWrapper 组装条件</h4><p><img src="https://blog-resources.this0.com/image/202403301705080.png?x-oss-process=style/this0-blog"></p>
<p>组装查询条件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询用户名包含a，年龄在20到30之间，并且邮箱不为null的用户信息</span></span><br><span class="line">    <span class="comment">//SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">            .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>组装排序条件:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//按年龄降序查询用户，如果年龄相同则按id升序排列</span></span><br><span class="line">    <span class="comment">//SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0 ORDER BY age DESC,id ASC</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper</span><br><span class="line">            .orderByDesc(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">            .orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组装删除条件:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//删除email为空的用户</span></span><br><span class="line">    <span class="comment">//DELETE FROM t_user WHERE (email IS NULL)</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="comment">//条件构造器也可以构建删除语句的条件</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.delete(queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>and和or关键字使用(修改)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//将年龄大于20并且用户名中包含有a或邮箱为null的用户信息修改</span></span><br><span class="line">    <span class="comment">//UPDATE t_user SET age=?, email=? WHERE username LIKE ? AND age &gt; ? OR email IS NULL)</span></span><br><span class="line">    queryWrapper</span><br><span class="line">            .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">            .or()</span><br><span class="line">            .isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;user@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>指定列映射查询：//TODO</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查询用户信息的username和age字段</span></span><br><span class="line">    <span class="comment">//SELECT username,age FROM t_user</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.select(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">//selectMaps()返回Map集合列表，通常配合select()使用，避免User对象中没有被查询到的列值为null</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>condition判断组织条件:</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick3</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">int</span>    <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//判断条件拼接</span></span><br><span class="line">    <span class="comment">//当name不为null拼接等于, age &gt; 1 拼接等于判断</span></span><br><span class="line">    <span class="comment">//方案1: 手动判断</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(name))&#123;</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (age &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方案2: 拼接condition判断</span></span><br><span class="line">    <span class="comment">//每个条件拼接方法都condition参数,这是一个比较运算,为true追加当前条件!</span></span><br><span class="line">    <span class="comment">//eq(condition,列名,值)</span></span><br><span class="line">    queryWrapper.eq(!StringUtils.isEmpty(name),<span class="string">&quot;name&quot;</span>,name)</span><br><span class="line">            .eq(age&gt;<span class="number">1</span>,<span class="string">&quot;age&quot;</span>,age);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-4-基于-UpdateWrapper组装条件"><a href="#2-3-4-基于-UpdateWrapper组装条件" class="headerlink" title="2.3.4 基于 UpdateWrapper组装条件"></a>2.3.4 基于 UpdateWrapper组装条件</h4><p>使用queryWrapper:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//将年龄大于20并且用户名中包含有a或邮箱为null的用户信息修改</span></span><br><span class="line">    <span class="comment">//UPDATE t_user SET age=?, email=? WHERE username LIKE ? AND age &gt; ? OR email IS NULL)</span></span><br><span class="line">    queryWrapper</span><br><span class="line">            .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">            .or()</span><br><span class="line">            .isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;user@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：<code>使用queryWrapper + 实体类形式可以实现修改，但是无法将列值修改为null值！//TODO</code></p>
<p>使用updateWrapper:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//将id = 3 的email设置为null, age = 18</span></span><br><span class="line">    updateWrapper.eq(<span class="string">&quot;id&quot;</span>,<span class="number">3</span>)</span><br><span class="line">            .set(<span class="string">&quot;email&quot;</span>,<span class="literal">null</span>)  <span class="comment">// set 指定列和结果</span></span><br><span class="line">            .set(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="comment">//如果使用updateWrapper 实体对象写null即可!</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>使用updateWrapper可以随意设置列的值！！</code></p>
<h4 id="2-3-5-基于LambdaQueryWrapper组装条件-TODO后面的lambda后面再看"><a href="#2-3-5-基于LambdaQueryWrapper组装条件-TODO后面的lambda后面再看" class="headerlink" title="2.3.5 基于LambdaQueryWrapper组装条件&#x2F;&#x2F;TODO后面的lambda后面再看"></a>2.3.5 基于LambdaQueryWrapper组装条件&#x2F;&#x2F;TODO后面的lambda后面再看</h4><p>1. <strong>LambdaQueryWrapper对比QueryWrapper优势</strong></p>
<p>QueryWrapper 示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">queryWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;John&quot;</span>)</span><br><span class="line">  .ge(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>)</span><br><span class="line">  .orderByDesc(<span class="string">&quot;create_time&quot;</span>)</span><br><span class="line">  .last(<span class="string">&quot;limit 10&quot;</span>);</span><br><span class="line">List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br></pre></td></tr></table></figure>

<p>LambdaQueryWrapper 示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">lambdaQueryWrapper.eq(User::getName, <span class="string">&quot;John&quot;</span>)</span><br><span class="line">  .ge(User::getAge, <span class="number">18</span>)</span><br><span class="line">  .orderByDesc(User::getCreateTime)</span><br><span class="line">  .last(<span class="string">&quot;limit 10&quot;</span>);</span><br><span class="line">List&lt;User&gt; userList = userMapper.selectList(lambdaQueryWrapper);</span><br></pre></td></tr></table></figure>

<p>从上面的代码对比可以看出，相比于 QueryWrapper，LambdaQueryWrapper 使用了实体类的属性引用（例如 <code>User::getName</code>、<code>User::getAge</code>），而不是字符串来表示字段名，这提高了代码的可读性和可维护性。</p>
<p>2. <strong>lambda表达式回顾</strong></p>
<p>Lambda 表达式是 Java 8 引入的一种函数式编程特性，它提供了一种更简洁、更直观的方式来表示匿名函数或函数式接口的实现。Lambda 表达式可以用于简化代码，提高代码的可读性和可维护性。</p>
<p>Lambda 表达式的语法可以分为以下几个部分：</p>
<ol>
<li><p><strong>参数列表：</strong> 参数列表用小括号 <code>()</code> 括起来，可以指定零个或多个参数。如果没有参数，可以省略小括号；如果只有一个参数，可以省略小括号。</p>
<p>示例：<code>(a, b)</code>, <code>x -&gt;</code>, <code>() -&gt;</code></p>
</li>
<li><p><strong>箭头符号：</strong> 箭头符号 <code>-&gt;</code> 分割参数列表和 Lambda 表达式的主体部分。</p>
<p>示例：<code>-&gt;</code></p>
</li>
<li><p><strong>Lambda 表达式的主体：</strong> Lambda 表达式的主体部分可以是一个表达式或一个代码块。如果是一个表达式，可以省略 return 关键字；如果是多条语句的代码块，需要使用大括号 <code>&#123;&#125;</code> 括起来，并且需要明确指定 return 关键字。</p>
<p>示例：</p>
<ul>
<li>单个表达式：<code>x -&gt; x * x</code></li>
<li>代码块：<code>(x, y) -&gt; &#123; int sum = x + y; return sum; &#125;</code></li>
</ul>
</li>
</ol>
<p>Lambda 表达式的语法可以更具体地描述如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 Lambda 表达式实现一个接口的方法</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Greeting</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//原始匿名内部类方式</span></span><br><span class="line">        <span class="type">Greeting</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Greeting</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        a-&gt;System.out.println(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式实现接口的方法</span></span><br><span class="line">        greeting = () -&gt; System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">          System.out::println;</span><br><span class="line">           () -&gt;  类.XXX(); -&gt; 类：：方法名</span><br><span class="line">        <span class="comment">// 调用接口的方法</span></span><br><span class="line">        greeting.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. 方法引用回顾:</strong></p>
<p>方法引用是 Java 8 中引入的一种语法特性，它提供了一种简洁的方式来直接引用已有的方法或构造函数。方法引用可以替代 Lambda 表达式，使代码更简洁、更易读。</p>
<p>Java 8 支持以下几种方法引用的形式：</p>
<ol>
<li><strong>静态方法引用：</strong> 引用静态方法，语法为 <code>类名::静态方法名</code>。</li>
<li><strong>实例方法引用：</strong> 引用实例方法，语法为 <code>实例对象::实例方法名</code>。</li>
<li><strong>对象方法引用：</strong> 引用特定对象的实例方法，语法为 <code>类名::实例方法名</code>。</li>
<li><strong>构造函数引用：</strong> 引用构造函数，语法为 <code>类名::new</code>。</li>
</ol>
<p>演示代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodReferenceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用 Lambda 表达式</span></span><br><span class="line">        names.forEach(name -&gt; System.out.println(name));</span><br><span class="line">        <span class="comment">// 使用方法引用</span></span><br><span class="line">        names.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. lambdaQueryWrapper使用案例:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick4</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">int</span>    <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//每个条件拼接方法都condition参数,这是一个比较运算,为true追加当前条件!</span></span><br><span class="line">    <span class="comment">//eq(condition,列名,值)</span></span><br><span class="line">    queryWrapper.eq(!StringUtils.isEmpty(name),<span class="string">&quot;name&quot;</span>,name)</span><br><span class="line">            .eq(age&gt;<span class="number">1</span>,<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> 使用lambdaQueryWrapper</span></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//注意: 需要使用方法引用</span></span><br><span class="line">    <span class="comment">//技巧: 类名::方法名</span></span><br><span class="line">    lambdaQueryWrapper.eq(!StringUtils.isEmpty(name), User::getName,name);</span><br><span class="line">    List&lt;User&gt; users= userMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-6-基于LambdaUpdateWrapper组装条件"><a href="#2-3-6-基于LambdaUpdateWrapper组装条件" class="headerlink" title="2.3.6 基于LambdaUpdateWrapper组装条件"></a>2.3.6 基于LambdaUpdateWrapper组装条件</h4><p>使用案例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//将id = 3 的email设置为null, age = 18</span></span><br><span class="line">    updateWrapper.eq(<span class="string">&quot;id&quot;</span>,<span class="number">3</span>)</span><br><span class="line">            .set(<span class="string">&quot;email&quot;</span>,<span class="literal">null</span>)  <span class="comment">// set 指定列和结果</span></span><br><span class="line">            .set(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用lambdaUpdateWrapper</span></span><br><span class="line">    LambdaUpdateWrapper&lt;User&gt; updateWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper1.eq(User::getId,<span class="number">3</span>)</span><br><span class="line">            .set(User::getEmail,<span class="literal">null</span>)</span><br><span class="line">            .set(User::getAge,<span class="number">18</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果使用updateWrapper 实体对象写null即可!</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-核心注解使用"><a href="#2-5-核心注解使用" class="headerlink" title="2.5 核心注解使用"></a>2.5 核心注解使用</h3><ol>
<li><p>理解和介绍</p>
<p>MyBatis-Plus是一个基于MyBatis框架的增强工具，提供了一系列简化和增强的功能，用于加快开发人员在使用MyBatis进行数据库访问时的效率。</p>
<p>MyBatis-Plus提供了一种基于注解的方式来定义和映射数据库操作，其中的注解起到了重要作用。</p>
<p>理解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此接口对应的方法为什么会自动触发 user表的crud呢？</p>
<p>默认情况下， 根据指定的&lt;实体类&gt;的名称对应数据库表名，属性名对应数据库的列名！</p>
<p>但是不是所有数据库的信息和实体类都完全映射！</p>
<p>例如： 表名 t_user  → 实体类 User 这时候就不对应了！</p>
<p>自定义映射关系就可以使用mybatis-plus提供的注解即可！</p>
</li>
<li><p>@TableName注解</p>
<ul>
<li>描述：表名注解，标识实体类对应的表</li>
<li>使用位置：实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span> <span class="comment">//对应数据库表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>特殊情况：如果表名和实体类名相同（忽略大小写）可以省略该注解！</p>
<p>其他解决方案：全局设置前缀 (<a href="https://www.baomidou.com/pages/56bac0/#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE" title="https://www.baomidou.com/pages/56bac0/#基本配置">https://www.baomidou.com/pages/56bac0/#基本配置</a>)	&#x2F;&#x2F;TODO</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span> <span class="comment"># mybatis-plus的配置</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">sys_</span> <span class="comment"># 表名前缀字符串</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>@TableId 注解</p>
<ul>
<li>描述：主键注解</li>
<li>使用位置：实体类主键字段</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(value=&quot;主键列名&quot;,type=主键策略)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>必须指定</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>String</td>
<td>否</td>
<td>“”</td>
<td>主键字段名</td>
</tr>
<tr>
<td>type</td>
<td>Enum</td>
<td>否</td>
<td>IdType.NONE</td>
<td>指定主键类型</td>
</tr>
<tr>
<td><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/IdType.java" title="IdType">IdType</a>属性可选值：</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>值</td>
<td>描述</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>————–</td>
<td>—————————————————————————————————————————-</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>AUTO</td>
<td>数据库 ID 自增 (mysql配置主键自增长)</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>ASSIGN_ID（默认）</td>
<td>分配 ID(主键类型为 Number(Long )或 String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>全局配置修改主键策略:</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    # 配置MyBatis日志</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      # 配置MyBatis-Plus操作表的默认前缀</span><br><span class="line">      table-prefix: t_</span><br><span class="line">      # 配置MyBatis-Plus的主键策略</span><br><span class="line">      id-type: auto</span><br></pre></td></tr></table></figure>

<p>在以下场景下，添加<code>@TableId</code>注解是必要的：</p>
<ol>
<li>实体类的字段与数据库表的主键字段不同名：如果实体类中的字段与数据库表的主键字段不一致，需要使用<code>@TableId</code>注解来指定实体类中表示主键的字段。</li>
<li>主键生成策略不是默认策略：如果需要使用除了默认主键生成策略以外的策略，也需要添加<code>@TableId</code>注解，并通过<code>value</code>属性指定生成策略。</li>
</ol>
</li>
<li><p>雪花算法使用场景</p>
<p>雪花算法（Snowflake Algorithm）是一种用于生成唯一ID的算法。它由Twitter公司提出，用于解决分布式系统中生成全局唯一ID的需求。</p>
<p>在传统的自增ID生成方式中，使用单点数据库生成ID会成为系统的瓶颈，而雪花算法通过在分布式系统中生成唯一ID，避免了单点故障和性能瓶颈的问题。</p>
<p>雪花算法生成的ID是一个64位的整数，由以下几个部分组成：</p>
<ol>
<li>时间戳：41位，精确到毫秒级，可以使用69年。</li>
<li>节点ID：10位，用于标识分布式系统中的不同节点。</li>
<li>序列号：12位，表示在同一毫秒内生成的不同ID的序号。<br>通过将这三个部分组合在一起，雪花算法可以在分布式系统中生成全局唯一的ID，并保证ID的生成顺序性。<br>雪花算法的工作方式如下：</li>
<li>当前时间戳从某一固定的起始时间开始计算，可以用于计算ID的时间部分。</li>
<li>节点ID是分布式系统中每个节点的唯一标识，可以通过配置或自动分配的方式获得。</li>
<li>序列号用于记录在同一毫秒内生成的不同ID的序号，从0开始自增，最多支持4096个ID生成。<br>需要注意的是，雪花算法依赖于系统的时钟，需要确保系统时钟的准确性和单调性，否则可能会导致生成的ID不唯一或不符合预期的顺序。<br>雪花算法是一种简单但有效的生成唯一ID的算法，广泛应用于分布式系统中，如微服务架构、分布式数据库、分布式锁等场景，以满足全局唯一标识的需求。</li>
</ol>
<p><strong>你需要记住的: 雪花算法生成的数字,需要使用Long 或者 String类型主键!!</strong></p>
</li>
<li><p>@TableField</p>
<p>描述：字段注解（非主键）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@TableField(&quot;nickname&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性	        类型	    必须指定	默认值	描述<br>value	String	否	          “”	        数据库字段名<br>exist	        boolean	否	         true	        是否为数据库表字段</p>
<p><strong>MyBatis-Plus会自动开启驼峰命名风格映射!!!</strong></p>
<p>&#x2F;&#x2F;TODO，主键策略后面再看</p>
</li>
</ol>
<h1 id="三、MyBatis-Plus高级扩展"><a href="#三、MyBatis-Plus高级扩展" class="headerlink" title="三、MyBatis-Plus高级扩展"></a>三、MyBatis-Plus高级扩展</h1><h3 id="3-1-逻辑删除实现"><a href="#3-1-逻辑删除实现" class="headerlink" title="3.1 逻辑删除实现"></a>3.1 逻辑删除实现</h3><p><strong>概念:</strong></p>
<p>逻辑删除，可以方便地实现对数据库记录的逻辑删除而不是物理删除。逻辑删除是指通过更改记录的状态或添加标记字段来模拟删除操作，从而保留了删除前的数据，便于后续的数据分析和恢复。</p>
<ul>
<li>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</li>
<li>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</li>
</ul>
<p><strong>逻辑删除实现:</strong></p>
<ol>
<li><p>数据库和实体类添加逻辑删除字段</p>
<ol>
<li><p>表添加逻辑删除字段</p>
<p>可以是一个布尔类型、整数类型或枚举类型。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">ADD</span> deleted <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> ;  # <span class="type">int</span> 类型 <span class="number">1</span> 逻辑删除 <span class="number">0</span> 未逻辑删除</span><br></pre></td></tr></table></figure>
</li>
<li><p>实体类添加逻辑删除属性</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line">public class <span class="keyword">User</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span> <span class="variable">@TableId</span></span><br><span class="line">    private <span class="type">Integer</span> id;</span><br><span class="line">    private String name;</span><br><span class="line">    private <span class="type">Integer</span> age;</span><br><span class="line">    private String email;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">@TableLogic</span></span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span>逻辑删除字段 <span class="type">int</span> mybatis<span class="operator">-</span>plus下,默认 逻辑删除值为<span class="number">1</span> 未逻辑删除 <span class="number">1</span> </span><br><span class="line">    private <span class="type">Integer</span> deleted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>指定逻辑删除字段和属性值</p>
<ol>
<li><p>单一指定</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line">public class <span class="keyword">User</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span> <span class="variable">@TableId</span></span><br><span class="line">    private <span class="type">Integer</span> id;</span><br><span class="line">    private String name;</span><br><span class="line">    private <span class="type">Integer</span> age;</span><br><span class="line">    private String email;</span><br><span class="line">     <span class="variable">@TableLogic</span></span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span>逻辑删除字段 <span class="type">int</span> mybatis<span class="operator">-</span>plus下,默认 逻辑删除值为<span class="number">1</span> 未逻辑删除 <span class="number">1</span> </span><br><span class="line">    private <span class="type">Integer</span> deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局指定</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>演示逻辑删除操作</p>
<blockquote>
<p>逻辑删除以后,没有真正的删除语句,删除改为修改语句!<br>删除代码:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick5</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//逻辑删除</span></span><br><span class="line">    userMapper.deleteById(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行效果:</p>
<p>JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@5871a482] will not be managed by Spring<br>=&#x3D;&gt; Preparing: UPDATE user SET deleted&#x3D;1 WHERE id&#x3D;? AND deleted&#x3D;0<br>=&#x3D;&gt; Parameters: 5(Integer)<br>&lt;&#x3D;&#x3D;    Updates: 1</p>
</li>
<li><p>测试查询数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick6</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//正常查询.默认查询非逻辑删除数据</span></span><br><span class="line">    userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SELECT id,name,age,email,deleted FROM user WHERE deleted=0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-2-乐观锁实现-TODO，锁后面看"><a href="#3-2-乐观锁实现-TODO，锁后面看" class="headerlink" title="3.2 乐观锁实现&#x2F;&#x2F;TODO，锁后面看"></a>3.2 乐观锁实现&#x2F;&#x2F;TODO，锁后面看</h3><h4 id="3-2-1-悲观锁和乐观锁场景和介绍"><a href="#3-2-1-悲观锁和乐观锁场景和介绍" class="headerlink" title="3.2.1 悲观锁和乐观锁场景和介绍"></a>3.2.1 悲观锁和乐观锁场景和介绍</h4><p><strong>并发问题场景演示:</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301705912.png?x-oss-process=style/this0-blog"></p>
<p>**解决思路: **</p>
<p>乐观锁和悲观锁是在并发编程中用于处理并发访问和资源竞争的两种不同的锁机制!!</p>
<p>悲观锁： &#x20;<br>悲观锁的基本思想是，在整个数据访问过程中，将共享资源锁定，以确保其他线程或进程不能同时访问和修改该资源。悲观锁的核心思想是”先保护，再修改”。在悲观锁的应用中，线程在访问共享资源之前会获取到锁，并在整个操作过程中保持锁的状态，阻塞其他线程的访问。只有当前线程完成操作后，才会释放锁，让其他线程继续操作资源。这种锁机制可以确保资源独占性和数据的一致性，但是在高并发环境下，悲观锁的效率相对较低。</p>
<p>乐观锁： &#x20;<br>乐观锁的基本思想是，认为并发冲突的概率较低，因此不需要提前加锁，而是在数据更新阶段进行冲突检测和处理。乐观锁的核心思想是”先修改，后校验”。在乐观锁的应用中，线程在读取共享资源时不会加锁，而是记录特定的版本信息。当线程准备更新资源时，会先检查该资源的版本信息是否与之前读取的版本信息一致，如果一致则执行更新操作，否则说明有其他线程修改了该资源，需要进行相应的冲突处理。乐观锁通过避免加锁操作，提高了系统的并发性能和吞吐量，但是在并发冲突较为频繁的情况下，乐观锁会导致较多的冲突处理和重试操作。</p>
<p>理解点: 悲观锁和乐观锁是两种解决并发数据问题的思路,不是具体技术!!!</p>
<p><strong>具体技术和方案:</strong></p>
<ol>
<li>乐观锁实现方案和技术：<ul>
<li>版本号&#x2F;时间戳：为数据添加一个版本号或时间戳字段，每次更新数据时，比较当前版本号或时间戳与期望值是否一致，若一致则更新成功，否则表示数据已被修改，需要进行冲突处理。</li>
<li>CAS（Compare-and-Swap）：使用原子操作比较当前值与旧值是否一致，若一致则进行更新操作，否则重新尝试。</li>
<li>无锁数据结构：采用无锁数据结构，如无锁队列、无锁哈希表等，通过使用原子操作实现并发安全。</li>
</ul>
</li>
<li>悲观锁实现方案和技术：<ul>
<li>锁机制：使用传统的锁机制，如互斥锁（Mutex Lock）或读写锁（Read-Write Lock）来保证对共享资源的独占访问。</li>
<li>数据库锁：在数据库层面使用行级锁或表级锁来控制并发访问。</li>
<li>信号量（Semaphore）：使用信号量来限制对资源的并发访问。</li>
</ul>
</li>
</ol>
<p><strong>介绍版本号乐观锁技术的实现流程:</strong></p>
<ul>
<li>每条数据添加一个版本号字段version</li>
<li>取出记录时，获取当前 version</li>
<li>更新时，检查获取版本号是不是数据库当前最新版本号</li>
<li>如果是[证明没有人修改数据], 执行更新, set 数据更新 , version &#x3D; version+ 1&#x20;</li>
<li>如果 version 不对[证明有人已经修改了]，我们现在的其他记录就是失效数据!就更新失败</li>
</ul>
<h4 id="3-2-2-使用mybatis-plus数据使用乐观锁"><a href="#3-2-2-使用mybatis-plus数据使用乐观锁" class="headerlink" title="3.2.2 使用mybatis-plus数据使用乐观锁"></a>3.2.2 使用mybatis-plus数据使用乐观锁</h4><p>&#x20;1.  添加版本号更新插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>乐观锁字段添加@Version注解</p>
<p>注意: 数据库也需要添加version字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ALTER TABLE USER ADD VERSION INT DEFAULT <span class="number">1</span> ;  # <span class="type">int</span> 类型 乐观锁字段</span><br></pre></td></tr></table></figure>

<ul>
<li>支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime</li>
<li>仅支持 <code>updateById(id)</code> 与 <code>update(entity, wrapper)</code> 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>
</li>
<li><p>正常更新使用即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//演示乐观锁生效场景</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick7</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//步骤1: 先查询,在更新 获取version数据</span></span><br><span class="line">    <span class="comment">//同时查询两条,但是version唯一,最后更新的失败</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span>  <span class="operator">=</span> userMapper.selectById(<span class="number">5</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span>  <span class="operator">=</span> userMapper.selectById(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    user.setAge(<span class="number">20</span>);</span><br><span class="line">    user1.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line">    <span class="comment">//乐观锁生效,失败!</span></span><br><span class="line">    userMapper.updateById(user1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-3-防全表更新和删除实现-TODO"><a href="#3-3-防全表更新和删除实现-TODO" class="headerlink" title="3.3 防全表更新和删除实现&#x2F;&#x2F;TODO"></a>3.3 <code>防全表更新和删除实现</code>&#x2F;&#x2F;TODO</h3><p>针对 update 和 delete 语句 作用: 阻止恶意的全表更新删除</p>
<p>添加防止全表更新和删除拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">  interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">BlockAttackInnerInterceptor</span>());</span><br><span class="line">  <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试全部更新或者删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuick8</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;custom_name&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;xxx@mail.com&quot;</span>);</span><br><span class="line">    <span class="comment">//Caused by: com.baomidou.mybatisplus.core.exceptions.MybatisPlusException: Prohibition of table update operation</span></span><br><span class="line">    <span class="comment">//全局更新,报错</span></span><br><span class="line">    userService.saveOrUpdate(user,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、MyBatis-Plus代码生成器-MyBatisX插件"><a href="#四、MyBatis-Plus代码生成器-MyBatisX插件" class="headerlink" title="四、MyBatis-Plus代码生成器(MyBatisX插件)"></a>四、MyBatis-Plus代码生成器(MyBatisX插件)</h1><h3 id="4-1-Mybatisx插件逆向工程"><a href="#4-1-Mybatisx插件逆向工程" class="headerlink" title="4.1 Mybatisx插件逆向工程"></a>4.1 Mybatisx插件逆向工程</h3><p>MyBatis-Plus为我们提供了强大的mapper和service模板，能够大大的提高开发效率</p>
<p>但是在真正开发过程中，MyBatis-Plus并不能为我们解决所有问题，例如一些复杂的SQL，多表联查，我们就需要自己去编写代码和SQL语句，我们该如何快速的解决这个问题呢，这个时候可以使用MyBatisX插件</p>
<p>MyBatisX一款基于 IDEA 的快速开发插件，为效率而生。</p>
<p><img src="https://blog-resources.this0.com/image/202403301705940.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202403301705917.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202403301705735.png?x-oss-process=style/this0-blog"></p>
<h3 id="4-2-MyBatisX快速代码生成"><a href="#4-2-MyBatisX快速代码生成" class="headerlink" title="4.2 MyBatisX快速代码生成"></a>4.2 MyBatisX快速代码生成</h3><p>使用mybatisX插件,自动生成sql语句实现</p>
<p><a href="https://baomidou.com/pages/ba5b24/#%E5%8A%9F%E8%83%BD">https://baomidou.com/pages/ba5b24/#功能</a></p>
]]></content>
      <categories>
        <category>MyBatis-Plus</category>
      </categories>
      <tags>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>在Docker中安装mysql</title>
    <url>/articles/ee432f4.html</url>
    <content><![CDATA[<h3 id="1-mysql镜像拉取"><a href="#1-mysql镜像拉取" class="headerlink" title="1 mysql镜像拉取"></a>1 mysql镜像拉取</h3><p>docker pull mysql:5.7</p>
<h3 id="2-添加mysql配置文件"><a href="#2-添加mysql配置文件" class="headerlink" title="2 添加mysql配置文件"></a>2 添加mysql配置文件</h3><h4 id="1-创建数据存放目录"><a href="#1-创建数据存放目录" class="headerlink" title="1 创建数据存放目录"></a>1 创建数据存放目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/SDK_YPT/mysql/conf</span><br></pre></td></tr></table></figure>

<h4 id="2-创建配置文件"><a href="#2-创建配置文件" class="headerlink" title="2 创建配置文件"></a>2 创建配置文件</h4><p>在刚创建的目录下新建配置文件 my.cnf</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/SDK_YPT/my</span>sql<span class="regexp">/conf/my</span>.cnf</span><br></pre></td></tr></table></figure>

<p>拷贝如下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">&#x27;SET NAMES utf8mb4&#x27;</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="attr">collation-server</span>=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure>

<h3 id="3-容器启动"><a href="#3-容器启动" class="headerlink" title="3 容器启动"></a>3 容器启动</h3><p>*<code>映射文件目录里不要有以前的数据库残留文件</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">docker run -p 映射端口:<span class="number">3306</span> --name mysql -v <span class="regexp">/usr/</span>local<span class="regexp">/SDK_YPT/</span>mysql<span class="regexp">/log:/</span><span class="keyword">var</span><span class="regexp">/log/</span>mysql -v <span class="regexp">/usr/</span>local<span class="regexp">/SDK_YPT/</span>mysql<span class="regexp">/data:/</span><span class="keyword">var</span><span class="regexp">/lib/</span>mysql -v <span class="regexp">/usr/</span>local<span class="regexp">/SDK_YPT/</span>mysql<span class="regexp">/conf:/</span>etc<span class="regexp">/mysql/</span>conf.d -e MYSQL_ROOT_PASSWORD=设置密码 -d <span class="attr">mysql:</span><span class="number">5.7</span></span><br></pre></td></tr></table></figure>

<h3 id="4-设置mysql自启"><a href="#4-设置mysql自启" class="headerlink" title="4 设置mysql自启"></a>4 设置mysql自启</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">update</span> <span class="comment">--restart=always mysql</span></span><br></pre></td></tr></table></figure>

<h3 id="5-安装成功测试"><a href="#5-安装成功测试" class="headerlink" title="5 安装成功测试"></a>5 安装成功测试</h3><h4 id="1-连接mysql测试"><a href="#1-连接mysql测试" class="headerlink" title="1 连接mysql测试"></a>1 连接mysql测试</h4><p><img src="https://blog-resources.this0.com/image/202405082036678.png?x-oss-process=style/this0-blog" alt="image-20240201070708595"></p>
<h4 id="2-查看字符集"><a href="#2-查看字符集" class="headerlink" title="2 查看字符集"></a>2 查看字符集</h4><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">SHOW <span class="keyword">VARIABLES</span> LIKE <span class="comment">&#x27;character%&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202405082037348.png?x-oss-process=style/this0-blog" alt="image-20240201072817525"></p>
<h3 id="6-授予远程访问权限"><a href="#6-授予远程访问权限" class="headerlink" title="6 授予远程访问权限"></a>6 授予远程访问权限</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure>

<p>远程登陆测试</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mysql -h  你的主机ip -<span class="selector-tag">P</span> mysql端口号 -u root -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202405082037526.png?x-oss-process=style/this0-blog" alt="image-20240201210723229"></p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>服务器运维</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea远程开发</title>
    <url>/articles/12a9a44b.html</url>
    <content><![CDATA[<h1 id="Idea远程开发（使用gateway）"><a href="#Idea远程开发（使用gateway）" class="headerlink" title="Idea远程开发（使用gateway）"></a>Idea远程开发（使用gateway）</h1><h2 id="1-idea版本要求"><a href="#1-idea版本要求" class="headerlink" title="1. idea版本要求"></a>1. idea版本要求</h2><p>2022.4之后的版本暂时不支持使用jdk1.8远程开发</p>
<p>（参考idea错误报告：<a href="https://youtrack.jetbrains.com/issue/IDEA-304440%EF%BC%89">https://youtrack.jetbrains.com/issue/IDEA-304440）</a></p>
<h2 id="2-历史版本下载"><a href="#2-历史版本下载" class="headerlink" title="2. 历史版本下载"></a>2. 历史版本下载</h2><p><a href="https://www.jetbrains.com/zh-cn/idea/download/other.html">https://www.jetbrains.com/zh-cn/idea/download/other.html</a></p>
<h2 id="3-设置服务器信息连接到远程服务器"><a href="#3-设置服务器信息连接到远程服务器" class="headerlink" title="3. 设置服务器信息连接到远程服务器"></a>3. 设置服务器信息连接到远程服务器</h2><h2 id="4-选择idea（linux版）版本（以ideaIU-2022-2-4为例）"><a href="#4-选择idea（linux版）版本（以ideaIU-2022-2-4为例）" class="headerlink" title="4. 选择idea（linux版）版本（以ideaIU-2022.2.4为例）"></a>4. 选择idea（linux版）版本（以ideaIU-2022.2.4为例）</h2><p><img src="https://blog-resources.this0.com/image/202405150354795.png?x-oss-process=style/this0-blog" alt="image-20230809185901820"></p>
<h2 id="5-选择项目目录并上传idea"><a href="#5-选择项目目录并上传idea" class="headerlink" title="5. 选择项目目录并上传idea"></a>5. 选择项目目录并上传idea</h2><p><img src="https://blog-resources.this0.com/image/202405150354079.png?x-oss-process=style/this0-blog" alt="image-20230809190000736"></p>
<h2 id="6-测试hello-world！"><a href="#6-测试hello-world！" class="headerlink" title="6. 测试hello world！"></a>6. 测试hello world！</h2><p><img src="https://blog-resources.this0.com/image/202405150354900.png?x-oss-process=style/this0-blog" alt="image-20230809191550305"></p>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>开发环境</tag>
        <tag>服务器端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器（centos8）安装docker</title>
    <url>/articles/2a40ac23.html</url>
    <content><![CDATA[<h2 id="服务器（centos8）安装docker"><a href="#服务器（centos8）安装docker" class="headerlink" title="服务器（centos8）安装docker"></a>服务器（centos8）安装docker</h2><blockquote>
<p>2024年2月测试通过</p>
</blockquote>
<h3 id="1-下载docker包"><a href="#1-下载docker包" class="headerlink" title="1 下载docker包"></a>1 下载docker包</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> https://download.docker.com/linux/static/stable/x86_64/docker-<span class="number">25</span>.<span class="number">0</span>.<span class="number">1</span>.tgz</span><br></pre></td></tr></table></figure>



<h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2 解压"></a>2 解压</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> zxf docker-<span class="number">25</span>.<span class="number">0</span>.<span class="number">1</span>.tgz</span><br></pre></td></tr></table></figure>



<h3 id="3-移动解压后的文件夹到-usr-bin"><a href="#3-移动解压后的文件夹到-usr-bin" class="headerlink" title="3 移动解压后的文件夹到&#x2F;usr&#x2F;bin"></a>3 移动解压后的文件夹到&#x2F;usr&#x2F;bin</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> docker/* /usr/bin</span><br></pre></td></tr></table></figure>



<h3 id="4-写入docker-service"><a href="#4-写入docker-service" class="headerlink" title="4 写入docker.service"></a>4 写入docker.service</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cat &gt;/usr/lib/systemd/system/docker.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line"><span class="attribute">Description</span>=Docker Application Container Engine</span><br><span class="line"><span class="attribute">Documentation</span>=https://docs.docker.com</span><br><span class="line"><span class="attribute">After</span>=network-online.target firewalld.service</span><br><span class="line"><span class="attribute">Wants</span>=network-online.target</span><br><span class="line">[Service]</span><br><span class="line"><span class="attribute">Type</span>=notify</span><br><span class="line"><span class="attribute">ExecStart</span>=/usr/bin/dockerd</span><br><span class="line"><span class="attribute">ExecReload</span>=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line"><span class="attribute">LimitNOFILE</span>=infinity</span><br><span class="line"><span class="attribute">LimitNPROC</span>=infinity</span><br><span class="line"><span class="attribute">TimeoutStartSec</span>=0</span><br><span class="line"><span class="attribute">Delegate</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attribute">KillMode</span>=process</span><br><span class="line"><span class="attribute">Restart</span>=on-failure</span><br><span class="line"><span class="attribute">StartLimitBurst</span>=3</span><br><span class="line"><span class="attribute">StartLimitInterval</span>=60s</span><br><span class="line">[Install]</span><br><span class="line"><span class="attribute">WantedBy</span>=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<h3 id="5-启动docker"><a href="#5-启动docker" class="headerlink" title="5 启动docker"></a>5 启动docker</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> docker</span><br></pre></td></tr></table></figure>



<h3 id="6-设置开机自启动"><a href="#6-设置开机自启动" class="headerlink" title="6 设置开机自启动"></a>6 设置开机自启动</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>



<h3 id="7-查看docker版本"><a href="#7-查看docker版本" class="headerlink" title="7 查看docker版本"></a>7 查看docker版本</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">version</span></span><br></pre></td></tr></table></figure>



<h3 id="8-安装成功界面"><a href="#8-安装成功界面" class="headerlink" title="8 安装成功界面"></a>8 安装成功界面</h3><p><img src="http://cdn.this0.com/blog/img/image-20240201081805985.png" alt="image-20240201081805985"></p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>服务器运维</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringFramework</title>
    <url>/articles/51cfb9c.html</url>
    <content><![CDATA[<h1 id="Spring6"><a href="#Spring6" class="headerlink" title="Spring6"></a>Spring6</h1><p><img src="https://blog-resources.this0.com/image/202403301657752.png?x-oss-process=style/this0-blog" alt="image-20221209110043449"></p>
<p>我的项目代码在：<a href="https://github.com/baifengxiao/SSM.git">https://github.com/baifengxiao/SSM.git</a></p>
<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><h3 id="1-1、Spring是什么？"><a href="#1-1、Spring是什么？" class="headerlink" title="1.1、Spring是什么？"></a>1.1、Spring是什么？</h3><p>Spring 是一款主流的 Java EE 轻量级开源框架 ，Spring 由“Spring 之父”Rod Johnson 提出并创立，其目的是用于简化 Java 企业级应用的开发难度和开发周期。Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。Spring 框架除了自己提供功能外，还提供整合其他技术和框架的能力。</p>
<p>Spring 自诞生以来备受青睐，一直被广大开发人员作为 Java 企业级应用程序开发的首选。时至今日，Spring 俨然成为了 Java EE 代名词，成为了构建 Java EE 应用的事实标准。</p>
<p>自 2004 年 4 月，Spring 1.0 版本正式发布以来，Spring 已经步入到了第 6 个大版本，也就是 Spring 6。本课程采用Spring当前最新发布的正式版本<strong>6.0.2</strong>。</p>
<p><img src="https://blog-resources.this0.com/image/202403301657785.png?x-oss-process=style/this0-blog" alt="image-20221216223135162"></p>
<h3 id="1-2、Spring-的狭义和广义"><a href="#1-2、Spring-的狭义和广义" class="headerlink" title="1.2、Spring 的狭义和广义"></a>1.2、Spring 的狭义和广义</h3><p>在不同的语境中，Spring 所代表的含义是不同的。下面我们就分别从“广义”和“狭义”两个角度，对 Spring 进行介绍。</p>
<p><strong>广义的 Spring：Spring 技术栈</strong></p>
<p>广义上的 Spring 泛指以 Spring Framework 为核心的 Spring 技术栈。</p>
<p>经过十多年的发展，Spring 已经不再是一个单纯的应用框架，而是逐渐发展成为一个由多个不同子项目（模块）组成的成熟技术，例如 Spring Framework、Spring MVC、SpringBoot、Spring Cloud、Spring Data、Spring Security 等，其中 Spring Framework 是其他子项目的基础。</p>
<p>这些子项目涵盖了从企业级应用开发到云计算等各方面的内容，能够帮助开发人员解决软件发展过程中不断产生的各种实际问题，给开发人员带来了更好的开发体验。</p>
<p><strong>狭义的 Spring：Spring Framework</strong></p>
<p>狭义的 Spring 特指 Spring Framework，通常我们将它称为 Spring 框架。</p>
<p>Spring 框架是一个分层的、面向切面的 Java 应用程序的一站式轻量级解决方案，它是 Spring 技术栈的核心和基础，是为了解决企业级应用开发的复杂性而创建的。</p>
<p>Spring 有两个最核心模块： IoC 和 AOP。</p>
<p><strong>IoC</strong>：Inverse of Control 的简写，译为<code>“控制反转”，指把创建对象过程交给 Spring 进行管理</code>。</p>
<p><strong>AOP</strong>：Aspect Oriented Programming 的简写，译为“面向切面编程”。AOP 用来封装多个类的公共行为，将那些与业务无关，却为业务模块所共同调用的逻辑封装起来，减少系统的重复代码，降低模块间的耦合度。另外，AOP 还解决一些系统层面上的问题，比如日志、事务、权限等。</p>
<h3 id="1-3、Spring-Framework特点"><a href="#1-3、Spring-Framework特点" class="headerlink" title="1.3、Spring Framework特点"></a>1.3、Spring Framework特点</h3><ul>
<li><p>非侵入式：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序时结构清晰、简洁优雅。</p>
</li>
<li><p>控制反转：IoC——Inversion of Control，翻转资源获取方向。把自己创建资源、向环境索取资源变成环境将资源准备好，我们享受资源注入。</p>
</li>
<li><p>面向切面编程：AOP——Aspect Oriented Programming，在不修改源代码的基础上增强代码功能。</p>
</li>
<li><p>容器：Spring IoC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率。</p>
</li>
<li><p>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统。</p>
</li>
<li><p>一站式：在 IoC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且 Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基础上全部使用 Spring 来实现。</p>
</li>
</ul>
<h3 id="1-4、Spring模块组成"><a href="#1-4、Spring模块组成" class="headerlink" title="1.4、Spring模块组成"></a>1.4、Spring模块组成</h3><p>官网地址：<a href="https://spring.io/">https://spring.io/</a></p>
<p><img src="https://blog-resources.this0.com/image/202403301657800.png?x-oss-process=style/this0-blog" alt="image-20221207142746771"></p>
<p><img src="https://blog-resources.this0.com/image/202403301657783.png?x-oss-process=style/this0-blog" alt="image-2097896352"></p>
<p>上图中包含了 Spring 框架的所有模块，这些模块可以满足一切企业级应用开发的需求，在开发过程中可以根据需求有选择性地使用所需要的模块。下面分别对这些模块的作用进行简单介绍。</p>
<p><strong>①Spring Core（核心容器）</strong></p>
<p>spring core提供了IOC,DI,Bean配置装载创建的核心实现。核心概念： Beans、BeanFactory、BeanDefinitions、ApplicationContext。</p>
<ul>
<li><p>spring-core ：IOC和DI的基本实现</p>
</li>
<li><p>spring-beans：BeanFactory和Bean的装配管理(BeanFactory)</p>
</li>
<li><p>spring-context：Spring context上下文，即IOC容器(AppliactionContext)</p>
</li>
<li><p>spring-expression：spring表达式语言</p>
</li>
</ul>
<p><strong>②Spring AOP</strong></p>
<ul>
<li>spring-aop：面向切面编程的应用模块，整合ASM，CGLib，JDK Proxy</li>
<li>spring-aspects：集成AspectJ，AOP应用框架</li>
<li>spring-instrument：动态Class Loading模块</li>
</ul>
<p><strong>③Spring Data Access</strong></p>
<ul>
<li>spring-jdbc：spring对JDBC的封装，用于简化jdbc操作</li>
<li>spring-orm：java对象与数据库数据的映射框架</li>
<li>spring-oxm：对象与xml文件的映射框架</li>
<li>spring-jms： Spring对Java Message Service(java消息服务)的封装，用于服务之间相互通信</li>
<li>spring-tx：spring jdbc事务管理</li>
</ul>
<p><strong>④Spring Web</strong></p>
<ul>
<li>spring-web：最基础的web支持，建立于spring-context之上，通过servlet或listener来初始化IOC容器</li>
<li>spring-webmvc：实现web mvc</li>
<li>spring-websocket：与前端的全双工通信协议</li>
<li>spring-webflux：Spring 5.0提供的，用于取代传统java servlet，非阻塞式Reactive Web框架，异步，非阻塞，事件驱动的服务</li>
</ul>
<p><strong>⑤Spring Message</strong></p>
<ul>
<li>Spring-messaging：spring 4.0提供的，为Spring集成一些基础的报文传送服务</li>
</ul>
<p><strong>⑥Spring test</strong></p>
<ul>
<li>spring-test：集成测试支持，主要是对junit的封装</li>
</ul>
<h3 id="1-5、Spring6特点"><a href="#1-5、Spring6特点" class="headerlink" title="1.5、Spring6特点"></a>1.5、Spring6特点</h3><h4 id="1-5-1、版本要求"><a href="#1-5-1、版本要求" class="headerlink" title="1.5.1、版本要求"></a>1.5.1、版本要求</h4><p><strong>（1）Spring6要求JDK最低版本是JDK17</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301657796.png?x-oss-process=style/this0-blog" alt="image-20221201103138194"></p>
<h4 id="1-5-2、本课程软件版本"><a href="#1-5-2、本课程软件版本" class="headerlink" title="1.5.2、本课程软件版本"></a>1.5.2、本课程软件版本</h4><p>（1）IDEA开发工具：2022.1.2</p>
<p>（2）JDK：Java17<strong>（Spring6要求JDK最低版本是Java17）</strong></p>
<p>（3）Spring：6.0.2</p>
<h2 id="2、入门"><a href="#2、入门" class="headerlink" title="2、入门"></a>2、入门</h2><h3 id="2-1、环境要求"><a href="#2-1、环境要求" class="headerlink" title="2.1、环境要求"></a>2.1、环境要求</h3><ul>
<li><p>JDK：Java17+<strong>（Spring6要求JDK最低版本是Java17）</strong></p>
</li>
<li><p>Maven：3.6+</p>
</li>
<li><p>Spring：6.0.2</p>
</li>
</ul>
<h3 id="2-2、构建模块"><a href="#2-2、构建模块" class="headerlink" title="2.2、构建模块"></a>2.2、构建模块</h3><p><strong>（1）构建父模块spring6</strong></p>
<p>在idea中，依次单击 File -&gt; New -&gt; Project -&gt; New Project</p>
<p><img src="https://blog-resources.this0.com/image/202403301657790.png?x-oss-process=style/this0-blog" alt="image-20221205201741893"></p>
<p>点击“Create”</p>
<p><img src="https://blog-resources.this0.com/image/202403301657220.png?x-oss-process=style/this0-blog" alt="image-20221205202000198"></p>
<p>删除src目录</p>
<p><strong>（2）构建子模块spring6-first</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301657111.png?x-oss-process=style/this0-blog" alt="image-20221205202117383"></p>
<p>点击 Create 完成</p>
<p><img src="https://blog-resources.this0.com/image/202403301657219.png?x-oss-process=style/this0-blog" alt="image-20221205202154225"></p>
<h3 id="2-3、程序开发"><a href="#2-3、程序开发" class="headerlink" title="2.3、程序开发"></a>2.3、程序开发</h3><h4 id="2-3-1、引入依赖"><a href="#2-3-1、引入依赖" class="headerlink" title="2.3.1、引入依赖"></a>2.3.1、引入依赖</h4><p><a href="https://spring.io/projects/spring-framework#learn">https://spring.io/projects/spring-framework#learn</a></p>
<p><strong>添加依赖：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>查看依赖：</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301657151.png?x-oss-process=style/this0-blog" alt="image-20221201105416558"></p>
<h4 id="2-3-2、创建java类"><a href="#2-3-2、创建java类" class="headerlink" title="2.3.2、创建java类"></a>2.3.2、创建java类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-3、创建配置文件"><a href="#2-3-3、创建配置文件" class="headerlink" title="2.3.3、创建配置文件"></a>2.3.3、创建配置文件</h4><p>在resources目录创建一个 Spring 配置文件 beans.xml（配置文件名称可随意命名，如：springs.xm）</p>
<p><img src="https://blog-resources.this0.com/image/202403301657198.png?x-oss-process=style/this0-blog" alt="img007"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理</span></span><br><span class="line"><span class="comment">    通过bean标签配置IOC容器所管理的bean</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">        id：设置bean的唯一标识</span></span><br><span class="line"><span class="comment">        class：设置bean所对应类型的全类名</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-4、创建测试类测试"><a href="#2-3-4、创建测试类测试" class="headerlink" title="2.3.4、创建测试类测试"></a>2.3.4、创建测试类测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">helloworld</span> <span class="operator">=</span> (HelloWorld) ac.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">        helloworld.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-5、运行测试程序"><a href="#2-3-5、运行测试程序" class="headerlink" title="2.3.5、运行测试程序"></a>2.3.5、运行测试程序</h4><p><img src="https://blog-resources.this0.com/image/202403301657211.png?x-oss-process=style/this0-blog" alt="image-20221031172354535"></p>
<h3 id="2-4、程序分析"><a href="#2-4、程序分析" class="headerlink" title="2.4、程序分析"></a>2.4、程序分析</h3><p><strong>1. 底层是怎么创建对象的，是通过反射机制调用无参数构造方法吗？</strong></p>
<p>修改HelloWorld类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="https://blog-resources.this0.com/image/202403301657388.png?x-oss-process=style/this0-blog" alt="image-20221031181430720"></p>
<p><strong>测试得知：创建对象时确实调用了无参数构造方法。</strong></p>
<p><strong>2. Spring是如何创建对象的呢？原理是什么？</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dom4j解析beans.xml文件，从中获取class属性值，类的全类名</span></span><br><span class="line"> <span class="comment">// 通过反射机制调用无参数构造方法创建对象</span></span><br><span class="line"> <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.spring6.bean.HelloWorld&quot;</span>);</span><br><span class="line"> <span class="comment">//Object obj = clazz.newInstance();</span></span><br><span class="line"> <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> clazz.getDeclaredConstructor().newInstance();</span><br></pre></td></tr></table></figure>



<p><strong>3. 把创建好的对象存储到一个什么样的数据结构当中了呢？</strong></p>
<p><code>bean对象最终存储在spring容器中，在spring源码底层就是一个map集合，存储bean的map在**DefaultListableBeanFactory**类中：</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure>

<p>Spring容器加载到Bean类时 , 会把这个类的描述信息, 以包名加类名的方式存到beanDefinitionMap 中,<br>Map&lt;String,BeanDefinition&gt; , 其中 String是Key , 默认是类名首字母小写 , BeanDefinition , 存的是类的定义(描述信息) , 我们通常叫BeanDefinition接口为 : bean的定义对象。</p>
<h3 id="2-5、启用Log4j2日志框架"><a href="#2-5、启用Log4j2日志框架" class="headerlink" title="2.5、启用Log4j2日志框架"></a>2.5、启用Log4j2日志框架</h3><h4 id="2-5-1、Log4j2日志概述"><a href="#2-5-1、Log4j2日志概述" class="headerlink" title="2.5.1、Log4j2日志概述"></a>2.5.1、Log4j2日志概述</h4><p>在项目开发中，日志十分的重要，不管是记录运行情况还是定位线上问题，都离不开对日志的分析。日志记录了系统行为的时间、地点、状态等相关信息，能够帮助我们了解并监控系统状态，在发生错误或者接近某种危险状态时能够及时提醒我们处理，同时在系统产生问题时，能够帮助我们快速的定位、诊断并解决问题。</p>
<p><strong>Apache Log4j2</strong>是一个开源的日志记录组件，使用非常的广泛。在工程中以易用方便代替了 System.out 等打印语句，它是JAVA下最流行的日志输入工具。 </p>
<p><strong>Log4j2主要由几个重要的组件构成：</strong></p>
<p><strong>（1）日志信息的优先级</strong>，日志信息的优先级从高到低有<strong>TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</strong><br>                TRACE：追踪，是最低的日志级别，相当于追踪程序的执行<br>                DEBUG：调试，一般在开发中，都将其设置为最低的日志级别<br>                INFO：信息，输出重要的信息，使用较多<br>                WARN：警告，输出警告的信息<br>                ERROR：错误，输出错误信息<br>                FATAL：严重错误</p>
<p>这些级别分别用来指定这条日志信息的重要程度；级别高的会自动屏蔽级别低的日志，也就是说，设置了WARN的日志，则INFO、DEBUG的日志级别的日志不会显示</p>
<p><strong>（2）日志信息的输出目的地</strong>，日志信息的输出目的地指定了日志将打印到<strong>控制台</strong>还是<strong>文件中</strong>；</p>
<p><strong>（3）日志信息的输出格式</strong>，而输出格式则控制了日志信息的显示内容。</p>
<h4 id="2-5-2、引入Log4j2依赖"><a href="#2-5-2、引入Log4j2依赖" class="headerlink" title="2.5.2、引入Log4j2依赖"></a>2.5.2、引入Log4j2依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-5-3、加入日志配置文件"><a href="#2-5-3、加入日志配置文件" class="headerlink" title="2.5.3、加入日志配置文件"></a>2.5.3、加入日志配置文件</h4><p>在类的根路径下提供log4j2.xml配置文件（文件名固定为：log4j2.xml，文件必须放到类根路径下。）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            level指定日志级别，从低到高的优先级：</span></span><br><span class="line"><span class="comment">                TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span></span><br><span class="line"><span class="comment">                trace：追踪，是最低的日志级别，相当于追踪程序的执行</span></span><br><span class="line"><span class="comment">                debug：调试，一般在开发中，都将其设置为最低的日志级别</span></span><br><span class="line"><span class="comment">                info：信息，输出重要的信息，使用较多</span></span><br><span class="line"><span class="comment">                warn：警告，输出警告的信息</span></span><br><span class="line"><span class="comment">                error：错误，输出错误信息</span></span><br><span class="line"><span class="comment">                fatal：严重错误</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;spring6log&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;log&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;spring6log&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%t] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;log&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;d:/spring6_log/test.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的信息，</span></span><br><span class="line"><span class="comment">            每次大小超过size，</span></span><br><span class="line"><span class="comment">            则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，</span></span><br><span class="line"><span class="comment">            作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;d:/spring6_log/app.log&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">&quot;log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;50MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，</span></span><br><span class="line"><span class="comment">            则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-5-4、测试"><a href="#2-5-4、测试" class="headerlink" title="2.5.4、测试"></a>2.5.4、测试</h4><p>运行原测试程序</p>
<p><img src="https://blog-resources.this0.com/image/202403301657441.png?x-oss-process=style/this0-blog" alt="image-20221031214305224"></p>
<p>运行原测试程序，多了spring打印日志</p>
<h4 id="2-5-5、使用日志"><a href="#2-5-5、使用日志" class="headerlink" title="2.5.5、使用日志"></a>2.5.5、使用日志</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloWorldTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">helloworld</span> <span class="operator">=</span> (HelloWorld) ac.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">        helloworld.sayHello();</span><br><span class="line">        logger.info(<span class="string">&quot;执行成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台：</p>
<p><img src="https://blog-resources.this0.com/image/202403301657541.png?x-oss-process=style/this0-blog" alt="image-20221031214547501"></p>
<h2 id="3、容器：IoC"><a href="#3、容器：IoC" class="headerlink" title="3、容器：IoC"></a>3、容器：IoC</h2><p>IoC 是 Inversion of Control 的简写，译为“控制反转”，它不是一门技术，而是一种设计思想，是一个重要的面向对象编程法则，能够指导我们如何设计出松耦合、更优良的程序。</p>
<p>Spring 通过 IoC 容器来管理所有 Java 对象的实例化和初始化，控制对象与对象之间的依赖关系。我们将由 IoC 容器管理的 Java 对象称为 Spring Bean，它与使用关键字 new 创建的 Java 对象没有任何区别。</p>
<p>IoC 容器是 Spring 框架中最重要的核心组件之一，它贯穿了 Spring 从诞生到成长的整个过程。</p>
<h3 id="3-1、IoC容器"><a href="#3-1、IoC容器" class="headerlink" title="3.1、IoC容器"></a>3.1、IoC容器</h3><h4 id="3-1-1、控制反转（IoC）"><a href="#3-1-1、控制反转（IoC）" class="headerlink" title="3.1.1、控制反转（IoC）"></a>3.1.1、控制反转（IoC）</h4><ul>
<li><p>控制反转是一种思想。</p>
</li>
<li><p>控制反转是为了降低程序耦合度，提高程序扩展力。</p>
</li>
<li><p>控制反转，反转的是什么？</p>
</li>
<li><ul>
<li>将对象的创建权利交出去，交给第三方容器负责。</li>
<li>将对象和对象之间关系的维护权交出去，交给第三方容器负责。</li>
</ul>
</li>
<li><p>控制反转这种思想如何实现呢？</p>
</li>
<li><ul>
<li>DI（Dependency Injection）：依赖注入</li>
</ul>
</li>
</ul>
<h4 id="3-1-2、依赖注入"><a href="#3-1-2、依赖注入" class="headerlink" title="3.1.2、依赖注入"></a>3.1.2、依赖注入</h4><p>DI（Dependency Injection）：依赖注入，依赖注入实现了控制反转的思想。</p>
<p><strong>依赖注入：</strong></p>
<ul>
<li><strong>指Spring创建对象的过程中，将对象依赖属性通过配置进行注入</strong></li>
</ul>
<p>依赖注入常见的实现方式包括两种：</p>
<ul>
<li>第一种：set注入</li>
<li>第二种：构造注入</li>
</ul>
<p>所以结论是：IOC 就是一种控制反转的思想， 而 DI 是对IoC的一种具体实现。</p>
<p><strong>Bean管理说的是：Bean对象的创建，以及Bean对象中属性的赋值（或者叫做Bean对象之间关系的维护）。</strong></p>
<h4 id="3-1-3、IoC容器在Spring的实现"><a href="#3-1-3、IoC容器在Spring的实现" class="headerlink" title="3.1.3、IoC容器在Spring的实现"></a>3.1.3、IoC容器在Spring的实现</h4><p>Spring 的 IoC 容器就是 IoC思想的一个落地的产品实现。IoC容器中管理的组件也叫做 bean。在创建 bean 之前，首先需要创建IoC 容器。Spring 提供了IoC 容器的两种实现方式：</p>
<p><strong>①BeanFactory</strong></p>
<p>这是 IoC 容器的基本实现，是 <code>Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用</code>。</p>
<p><strong>②ApplicationContext</strong></p>
<p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。</p>
<p><strong>③ApplicationContext的主要实现类</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301657539.png?x-oss-process=style/this0-blog" alt="iamges"></p>
<table>
<thead>
<tr>
<th>类型名</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>ClassPathXmlApplicationContext</td>
<td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td>
</tr>
<tr>
<td>FileSystemXmlApplicationContext</td>
<td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td>
</tr>
<tr>
<td>ConfigurableApplicationContext</td>
<td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td>
</tr>
<tr>
<td>WebApplicationContext</td>
<td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td>
</tr>
</tbody></table>
<h3 id="3-2、基于XML管理Bean"><a href="#3-2、基于XML管理Bean" class="headerlink" title="3.2、基于XML管理Bean"></a>3.2、基于XML管理Bean</h3><h4 id="3-2-1、搭建子模块spring6-ioc-xml"><a href="#3-2-1、搭建子模块spring6-ioc-xml" class="headerlink" title="3.2.1、搭建子模块spring6-ioc-xml"></a>3.2.1、搭建子模块spring6-ioc-xml</h4><p><strong>①搭建模块</strong></p>
<p>搭建方式如：spring-first</p>
<p><strong>②引入配置文件</strong></p>
<p>引入spring-first模块配置文件：beans.xml、log4j2.xml</p>
<p><strong>③添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>④引入java类</strong></p>
<p>引入spring-first模块java及test目录下实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(HelloWorldTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-2、实验一：获取bean"><a href="#3-2-2、实验一：获取bean" class="headerlink" title="3.2.2、实验一：获取bean"></a>3.2.2、实验一：获取bean</h4><h5 id="①方式一：根据id获取"><a href="#①方式一：根据id获取" class="headerlink" title="①方式一：根据id获取"></a>①方式一：根据id获取</h5><p>由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象。上个实验中我们使用的就是这种方式。</p>
<h5 id="②方式二：根据类型获取"><a href="#②方式二：根据类型获取" class="headerlink" title="②方式二：根据类型获取"></a>②方式二：根据类型获取</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld1</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(HelloWorld.class);</span><br><span class="line">    bean.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="③方式三：根据id和类型"><a href="#③方式三：根据id和类型" class="headerlink" title="③方式三：根据id和类型"></a>③方式三：根据id和类型</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld2</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;helloworld&quot;</span>, HelloWorld.class);</span><br><span class="line">    bean.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="④注意的地方"><a href="#④注意的地方" class="headerlink" title="④注意的地方"></a>④注意的地方</h5><p>当根据类型获取bean时，要求IOC容器中指定类型的bean有且只能有一个</p>
<p>当IOC容器中一共配置了两个：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloworldOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloworldTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据类型获取时会抛出异常：</p>
<blockquote>
<p>org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type ‘com.atguigu.spring6.bean.HelloWorld’ available: expected single matching bean but found 2: helloworldOne,helloworldTwo</p>
</blockquote>
<h5 id="⑤扩展知识"><a href="#⑤扩展知识" class="headerlink" title="⑤扩展知识"></a>⑤扩展知识</h5><p>如果组件类实现了接口，根据接口类型可以获取 bean 吗？</p>
<blockquote>
<p>可以，前提是bean唯一</p>
</blockquote>
<p>如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？</p>
<blockquote>
<p>不行，因为bean不唯一</p>
</blockquote>
<p><strong>结论</strong></p>
<p>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 <strong>instanceof</strong> 指定的类型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。</p>
<p>java中，instanceof运算符用于判断前面的对象是否是后面的类，或其子类、实现类的实例。如果是返回true，否则返回false。也就是说：用instanceof关键字做判断时， instanceof 操作符的左右操作必须有继承或实现关系</p>
<h4 id="3-2-3、实验二：依赖注入之setter注入"><a href="#3-2-3、实验二：依赖注入之setter注入" class="headerlink" title="3.2.3、实验二：依赖注入之setter注入"></a>3.2.3、实验二：依赖注入之setter注入</h4><p><strong>①创建学生类Student</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②配置bean时为属性赋值</strong></p>
<p>spring-di.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>③测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDIBySet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-di.xml&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">studentOne</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;studentOne&quot;</span>, Student.class);</span><br><span class="line">    System.out.println(studentOne);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-4、实验三：依赖注入之构造器注入"><a href="#3-2-4、实验三：依赖注入之构造器注入" class="headerlink" title="3.2.4、实验三：依赖注入之构造器注入"></a>3.2.4、实验三：依赖注入之构造器注入</h4><p><strong>①在Student类中添加有参构造</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer id, String name, Integer age, String sex)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②配置bean</strong></p>
<p>spring-di.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>constructor-arg标签还有两个属性可以进一步描述构造器参数：</p>
<ul>
<li>index属性：指定参数所在位置的索引（从0开始）</li>
<li>name属性：指定参数名</li>
</ul>
</blockquote>
<p><strong>③测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDIByConstructor</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-di.xml&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">studentOne</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;studentTwo&quot;</span>, Student.class);</span><br><span class="line">    System.out.println(studentOne);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-5、实验四：了解特殊值处理"><a href="#3-2-5、实验四：了解特殊值处理" class="headerlink" title="3.2.5、实验四：了解特殊值处理"></a>3.2.5、实验四：<code>了解特殊值处理</code></h4><h5 id="①字面量赋值"><a href="#①字面量赋值" class="headerlink" title="①字面量赋值"></a>①字面量赋值</h5><blockquote>
<p>什么是字面量？</p>
<p>int a &#x3D; 10;</p>
<p>声明一个变量a，初始化为10，此时a就不代表字母a了，而是作为一个变量的名字。当我们引用a的时候，我们实际上拿到的值是10。</p>
<p>而如果a是带引号的：’a’，那么它现在不是一个变量，它就是代表a这个字母本身，这就是字面量。所以字面量没有引申含义，就是我们看到的这个数据本身。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="②null值"><a href="#②null值" class="headerlink" title="②null值"></a>②null值</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;null&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上写法，为name所赋的值是字符串null</p>
</blockquote>
<h5 id="③xml实体"><a href="#③xml实体" class="headerlink" title="③xml实体"></a>③xml实体</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a <span class="symbol">&amp;lt;</span> b&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="④CDATA节"><a href="#④CDATA节" class="headerlink" title="④CDATA节"></a>④CDATA节</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-2-6、实验五：为对象类型属性赋值"><a href="#3-2-6、实验五：为对象类型属性赋值" class="headerlink" title="3.2.6、实验五：为对象类型属性赋值"></a>3.2.6、实验五：为对象类型属性赋值</h4><p><strong>①创建班级类Clazz</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer clazzId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String clazzName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getClazzId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazzId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazzId</span><span class="params">(Integer clazzId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazzId = clazzId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClazzName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazzName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazzName</span><span class="params">(String clazzName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazzName = clazzName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Clazz&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;clazzId=&quot;</span> + clazzId +</span><br><span class="line">                <span class="string">&quot;, clazzName=&#x27;&quot;</span> + clazzName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Clazz</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Clazz</span><span class="params">(Integer clazzId, String clazzName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazzId = clazzId;</span><br><span class="line">        <span class="built_in">this</span>.clazzName = clazzName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②修改Student类</strong></p>
<p>在Student类中添加以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Clazz clazz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Clazz <span class="title function_">getClazz</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazz</span><span class="params">(Clazz clazz)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方式一：引用外部bean"><a href="#方式一：引用外部bean" class="headerlink" title="方式一：引用外部bean"></a>方式一：引用外部bean</h5><p>配置Clazz类型的bean：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;财源滚滚班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为Student中的clazz属性赋值：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>错误演示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">value</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果错把ref属性写成了value属性，会抛出异常： Caused by: java.lang.IllegalStateException: Cannot convert value of type ‘java.lang.String’ to required type ‘com.atguigu.spring6.bean.Clazz’ for property ‘clazz’: no matching editors or conversion strategy found </p>
<p>意思是不能把String类型转换成我们要的Clazz类型，说明我们使用value属性时，Spring只把这个属性看做一个普通的字符串，不会认为这是一个bean的id，更不会根据它去找到bean来赋值</p>
</blockquote>
<h5 id="方式二：内部bean"><a href="#方式二：内部bean" class="headerlink" title="方式二：内部bean"></a>方式二：内部bean</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;远大前程班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="方式三：级联属性赋值"><a href="#方式三：级联属性赋值" class="headerlink" title="方式三：级联属性赋值"></a>方式三：级联属性赋值</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3333&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;最强王者班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<details class="folding-tag" cyan><summary> 查看默认打开的折叠框 </summary>
              <div class='content'>
              <p>折叠起来这些用的很少很少</p><h4 id="3-2-7、实验六：为数组类型属性赋值"><a href="#3-2-7、实验六：为数组类型属性赋值" class="headerlink" title="3.2.7、实验六：为数组类型属性赋值"></a>3.2.7、<code>实验六：为数组类型属性赋值</code></h4><p><strong>①修改Student类</strong></p><p>在Student类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] hobbies;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] getHobbies() &#123;</span><br><span class="line">    <span class="keyword">return</span> hobbies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobbies</span><span class="params">(String[] hobbies)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>②配置bean</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean6.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-8、实验七：为集合类型属性赋值"><a href="#3-2-8、实验七：为集合类型属性赋值" class="headerlink" title="3.2.8、实验七：为集合类型属性赋值"></a>3.2.8、<code>实验七：为集合类型属性赋值</code></h4><h5 id="①为List集合类型属性赋值"><a href="#①为List集合类型属性赋值" class="headerlink" title="①为List集合类型属性赋值"></a>①为List集合类型属性赋值</h5><p>在Clazz类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudents</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> students;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudents</span><span class="params">(List&lt;Student&gt; students)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.students = students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置bean：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>若为Set集合类型属性赋值，只需要将其中的list标签改为set标签即可</p></blockquote><h5 id="②为Map集合类型属性赋值"><a href="#②为Map集合类型属性赋值" class="headerlink" title="②为Map集合类型属性赋值"></a>②为Map集合类型属性赋值</h5><p>创建教师类Teacher：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer teacherId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getTeacherId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacherId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherId</span><span class="params">(Integer teacherId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacherId = teacherId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTeacherName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacherName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherName</span><span class="params">(String teacherName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacherName = teacherName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(Integer teacherId, String teacherName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacherId = teacherId;</span><br><span class="line">        <span class="built_in">this</span>.teacherName = teacherName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;teacherId=&quot;</span> + teacherId +</span><br><span class="line">                <span class="string">&quot;, teacherName=&#x27;&quot;</span> + teacherName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Student类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Teacher&gt; teacherMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Teacher&gt; <span class="title function_">getTeacherMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> teacherMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherMap</span><span class="params">(Map&lt;String, Teacher&gt; teacherMap)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.teacherMap = teacherMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置bean：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacherOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10010&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大宝&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacherTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10086&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;二宝&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="③引用集合类型的bean"><a href="#③引用集合类型的bean" class="headerlink" title="③引用集合类型的bean"></a>③引用集合类型的bean</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--list集合类型的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--map集合类型的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;students&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用util:list、util:map标签必须引入相应的命名空间</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag"> http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag"> http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag"> http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="3-2-9、实验八：p命名空间"><a href="#3-2-9、实验八：p命名空间" class="headerlink" title="3.2.9、实验八：p命名空间"></a>3.2.9、<code>实验八：p命名空间</code></h4><p>引入p命名空间</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/util/spring-util.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入p命名空间后，可以通过以下方式为bean的各个属性赋值</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentSix&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.Student&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">p:id</span>=<span class="string">&quot;1006&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;小明&quot;</span> <span class="attr">p:clazz-ref</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">p:teacherMap-ref</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-10、实验九：引入外部属性文件"><a href="#3-2-10、实验九：引入外部属性文件" class="headerlink" title="3.2.10、实验九：引入外部属性文件"></a>3.2.10、实验九：<code>引入外部属性文件</code></h4><p><strong>①加入依赖</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>②创建外部属性文件</strong></p><p><img src="https://blog-resources.this0.com/image/202403301657610.png?x-oss-process=style/this0-blog" alt="images"></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">atguigu</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p><strong>③引入属性文件</strong></p><p>引入context 名称空间</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>注意：在使用 <a href="context:property-placeholder">context:property-placeholder</a> 元素加载外包配置文件功能前，首先需要在 XML 配置的一级标签 <beans> 中添加 context 相关的约束。</p><p><strong>④配置bean</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>⑤测试</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-datasource.xml&quot;</span>);</span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ac.getBean(DataSource.class);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
              </div>
            </details>

<h4 id="3-2-11、实验十：bean的作用域-4个-TODO"><a href="#3-2-11、实验十：bean的作用域-4个-TODO" class="headerlink" title="3.2.11、实验十：bean的作用域,4个//TODO"></a>3.2.11、实验十：<code>bean的作用域,4个//TODO</code></h4><p><strong>①概念</strong></p>
<p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
<th>创建对象的时机</th>
</tr>
</thead>
<tbody><tr>
<td>singleton（默认）</td>
<td>在IOC容器中，这个bean的对象始终为单实例</td>
<td>IOC容器初始化时</td>
</tr>
<tr>
<td>prototype</td>
<td>这个bean在IOC容器中有多个实例</td>
<td>获取bean时</td>
</tr>
</tbody></table>
<p>如果是在WebApplicationContext环境下还会有另外几个作用域（但不常用）：</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>request</td>
<td>在一个请求范围内有效</td>
</tr>
<tr>
<td>session</td>
<td>在一个会话范围内有效</td>
</tr>
</tbody></table>
<p><strong>②创建类User</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String password, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③配置bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>④测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanScope</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-scope.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">    System.out.println(user1==user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-12、实验十一：bean生命周期-TODO"><a href="#3-2-12、实验十一：bean生命周期-TODO" class="headerlink" title="3.2.12、实验十一：bean生命周期//TODO"></a>3.2.12、实验十一：<code>bean生命周期//TODO</code></h4><p><strong>①具体的生命周期过程</strong></p>
<ul>
<li><p>bean对象创建（调用无参构造器）</p>
</li>
<li><p>给bean对象设置属性</p>
</li>
<li><p>bean的后置处理器（初始化之前）</p>
</li>
<li><p>bean对象初始化（需在配置bean时指定初始化方法）</p>
</li>
<li><p>bean的后置处理器（初始化之后）</p>
</li>
<li><p>bean对象就绪可以使用</p>
</li>
<li><p>bean对象销毁（需在配置bean时指定销毁方法）</p>
</li>
<li><p>IOC容器关闭</p>
</li>
</ul>
<p><strong>②修改类User</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：1、创建对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String password, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：2、依赖注入&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：3、初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：5、销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意其中的initMethod()和destroyMethod()，可以通过配置bean指定为初始化和销毁的方法</p>
</blockquote>
<p><strong>③配置bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用init-method属性指定初始化方法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用destroy-method属性指定销毁方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>④测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLife</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-lifecycle.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;生命周期：4、通过IOC容器获取bean并使用&quot;</span>);</span><br><span class="line">    ac.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>⑤bean的后置处理器</strong></p>
<p>bean的后置处理器会在生命周期的初始化前后添加额外的操作，需要实现BeanPostProcessor接口，且配置到IOC容器中，需要注意的是，bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行</p>
<p>创建bean的后置处理器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.process;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;☆☆☆&quot;</span> + beanName + <span class="string">&quot; = &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;★★★&quot;</span> + beanName + <span class="string">&quot; = &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在IOC容器中配置后置处理器：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bean的后置处理器要放入IOC容器才能生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.process.MyBeanProcessor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-2-13、实验十二：FactoryBean-TODO"><a href="#3-2-13、实验十二：FactoryBean-TODO" class="headerlink" title="3.2.13、实验十二：FactoryBean&#x2F;&#x2F;TODO"></a>3.2.13、实验十二：FactoryBean&#x2F;&#x2F;TODO</h4><p><strong>①简介</strong></p>
<p><code>FactoryBean</code>是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个FactoryBean类型的bean，<code>在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是getObject()方法的返回值。</code>通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p>
<p>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2020 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> org.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface to be implemented by objects used within a &#123;<span class="doctag">@link</span> BeanFactory&#125; which</span></span><br><span class="line"><span class="comment"> * are themselves factories for individual objects. If a bean implements this</span></span><br><span class="line"><span class="comment"> * interface, it is used as a factory for an object to expose, not directly as a</span></span><br><span class="line"><span class="comment"> * bean instance that will be exposed itself.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;NB: A bean that implements this interface cannot be used as a normal bean.&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * A FactoryBean is defined in a bean style, but the object exposed for bean</span></span><br><span class="line"><span class="comment"> * references (&#123;<span class="doctag">@link</span> #getObject()&#125;) is always the object that it creates.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;FactoryBeans can support singletons and prototypes, and can either create</span></span><br><span class="line"><span class="comment"> * objects lazily on demand or eagerly on startup. The &#123;<span class="doctag">@link</span> SmartFactoryBean&#125;</span></span><br><span class="line"><span class="comment"> * interface allows for exposing more fine-grained behavioral metadata.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This interface is heavily used within the framework itself, for example for</span></span><br><span class="line"><span class="comment"> * the AOP &#123;<span class="doctag">@link</span> org.springframework.aop.framework.ProxyFactoryBean&#125; or the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.jndi.JndiObjectFactoryBean&#125;. It can be used for</span></span><br><span class="line"><span class="comment"> * custom components as well; however, this is only common for infrastructure code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;&#123;<span class="doctag">@code</span> FactoryBean&#125; is a programmatic contract. Implementations are not</span></span><br><span class="line"><span class="comment"> * supposed to rely on annotation-driven injection or other reflective facilities.&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #getObjectType()&#125; &#123;<span class="doctag">@link</span> #getObject()&#125; invocations may arrive early in the</span></span><br><span class="line"><span class="comment"> * bootstrap process, even ahead of any post-processor setup. If you need access to</span></span><br><span class="line"><span class="comment"> * other beans, implement &#123;<span class="doctag">@link</span> BeanFactoryAware&#125; and obtain them programmatically.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;The container is only responsible for managing the lifecycle of the FactoryBean</span></span><br><span class="line"><span class="comment"> * instance, not the lifecycle of the objects created by the FactoryBean.&lt;/b&gt; Therefore,</span></span><br><span class="line"><span class="comment"> * a destroy method on an exposed bean object (such as &#123;<span class="doctag">@link</span> java.io.Closeable#close()&#125;</span></span><br><span class="line"><span class="comment"> * will &lt;i&gt;not&lt;/i&gt; be called automatically. Instead, a FactoryBean should implement</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> DisposableBean&#125; and delegate any such close call to the underlying object.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Finally, FactoryBean objects participate in the containing BeanFactory&#x27;s</span></span><br><span class="line"><span class="comment"> * synchronization of bean creation. There is usually no need for internal</span></span><br><span class="line"><span class="comment"> * synchronization other than for purposes of lazy initialization within the</span></span><br><span class="line"><span class="comment"> * FactoryBean itself (or the like).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 08.03.2003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the bean type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.BeanFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.aop.framework.ProxyFactoryBean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.jndi.JndiObjectFactoryBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FactoryBean</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name of an attribute that can be</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> org.springframework.core.AttributeAccessor#setAttribute set&#125; on a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> org.springframework.beans.factory.config.BeanDefinition&#125; so that</span></span><br><span class="line"><span class="comment">     * factory beans can signal their object type when it can&#x27;t be deduced from</span></span><br><span class="line"><span class="comment">     * the factory bean class.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 5.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">OBJECT_TYPE_ATTRIBUTE</span> <span class="operator">=</span> <span class="string">&quot;factoryBeanObjectType&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return an instance (possibly shared or independent) of the object</span></span><br><span class="line"><span class="comment">     * managed by this factory.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;As with a &#123;<span class="doctag">@link</span> BeanFactory&#125;, this allows support for both the</span></span><br><span class="line"><span class="comment">     * Singleton and Prototype design pattern.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;If this FactoryBean is not fully initialized yet at the time of</span></span><br><span class="line"><span class="comment">     * the call (for example because it is involved in a circular reference),</span></span><br><span class="line"><span class="comment">     * throw a corresponding &#123;<span class="doctag">@link</span> FactoryBeanNotInitializedException&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;As of Spring 2.0, FactoryBeans are allowed to return &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * objects. The factory will consider this as normal value to be used; it</span></span><br><span class="line"><span class="comment">     * will not throw a FactoryBeanNotInitializedException in this case anymore.</span></span><br><span class="line"><span class="comment">     * FactoryBean implementations are encouraged to throw</span></span><br><span class="line"><span class="comment">     * FactoryBeanNotInitializedException themselves now, as appropriate.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an instance of the bean (can be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception in case of creation errors</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> FactoryBeanNotInitializedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the type of object that this FactoryBean creates,</span></span><br><span class="line"><span class="comment">     * or &#123;<span class="doctag">@code</span> null&#125; if not known in advance.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This allows one to check for specific types of beans without</span></span><br><span class="line"><span class="comment">     * instantiating objects, for example on autowiring.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;In the case of implementations that are creating a singleton object,</span></span><br><span class="line"><span class="comment">     * this method should try to avoid singleton creation as far as possible;</span></span><br><span class="line"><span class="comment">     * it should rather estimate the type in advance.</span></span><br><span class="line"><span class="comment">     * For prototypes, returning a meaningful type here is advisable too.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method can be called &lt;i&gt;before&lt;/i&gt; this FactoryBean has</span></span><br><span class="line"><span class="comment">     * been fully initialized. It must not rely on state created during</span></span><br><span class="line"><span class="comment">     * initialization; of course, it can still use such state if available.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; Autowiring will simply ignore FactoryBeans that return</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> null&#125; here. Therefore it is highly recommended to implement</span></span><br><span class="line"><span class="comment">     * this method properly, using the current state of the FactoryBean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the type of object that this FactoryBean creates,</span></span><br><span class="line"><span class="comment">     * or &#123;<span class="doctag">@code</span> null&#125; if not known at the time of the call</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ListableBeanFactory#getBeansOfType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Is the object managed by this factory a singleton? That is,</span></span><br><span class="line"><span class="comment">     * will &#123;<span class="doctag">@link</span> #getObject()&#125; always return the same object</span></span><br><span class="line"><span class="comment">     * (a reference that can be cached)?</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; If a FactoryBean indicates to hold a singleton object,</span></span><br><span class="line"><span class="comment">     * the object returned from &#123;<span class="doctag">@code</span> getObject()&#125; might get cached</span></span><br><span class="line"><span class="comment">     * by the owning BeanFactory. Hence, do not return &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment">     * unless the FactoryBean always exposes the same reference.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The singleton status of the FactoryBean itself will generally</span></span><br><span class="line"><span class="comment">     * be provided by the owning BeanFactory; usually, it has to be</span></span><br><span class="line"><span class="comment">     * defined as singleton there.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; This method returning &#123;<span class="doctag">@code</span> false&#125; does not</span></span><br><span class="line"><span class="comment">     * necessarily indicate that returned objects are independent instances.</span></span><br><span class="line"><span class="comment">     * An implementation of the extended &#123;<span class="doctag">@link</span> SmartFactoryBean&#125; interface</span></span><br><span class="line"><span class="comment">     * may explicitly indicate independent instances through its</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> SmartFactoryBean#isPrototype()&#125; method. Plain &#123;<span class="doctag">@link</span> FactoryBean&#125;</span></span><br><span class="line"><span class="comment">     * implementations which do not implement this extended interface are</span></span><br><span class="line"><span class="comment">     * simply assumed to always return independent instances if the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> isSingleton()&#125; implementation returns &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The default implementation returns &#123;<span class="doctag">@code</span> true&#125;, since a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> FactoryBean&#125; typically manages a singleton instance.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> whether the exposed object is a singleton</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #getObject()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> SmartFactoryBean#isPrototype()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②创建类UserFactoryBean</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③配置bean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.bean.UserFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>④测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserFactoryBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取IOC容器</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-factorybean.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) ac.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-14、实验十三：基于xml自动装配"><a href="#3-2-14、实验十三：基于xml自动装配" class="headerlink" title="3.2.14、实验十三：基于xml自动装配"></a>3.2.14、<code>实验十三：基于xml自动装配</code></h4><blockquote>
<p>自动装配：</p>
<p>根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类型属性赋值</p>
</blockquote>
<p><strong>①场景模拟</strong></p>
<p>创建类UserController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.autowire.controller</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建接口UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.autowire.service</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建类UserServiceImpl实现接口UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.autowire.service.impl</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建接口UserDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.autowire.dao</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建类UserDaoImpl实现接口UserDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.autowire.dao.impl</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②配置bean</strong></p>
<blockquote>
<p>使用bean标签的autowire属性设置自动装配效果</p>
<p>自动装配方式：byType</p>
<p>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值</p>
<p>若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值null</p>
<p>若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常NoUniqueBeanDefinitionException</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>xml方式自动装配的说明： 此案例中，如果不使用自动装配，那么需要手动给userController装配一个UserService类型的bean,比如叫：userService，自动装配就是完成这个过程（需要有对应的set方法）</code></p>
<blockquote>
<p>自动装配方式：byName</p>
<p>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.autowire.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>③测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAutoWireByXML</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;autowire-xml.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> ac.getBean(UserController.class);</span><br><span class="line">    userController.saveUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3、基于注解管理Bean（☆）"><a href="#3-3、基于注解管理Bean（☆）" class="headerlink" title="3.3、基于注解管理Bean（☆）"></a>3.3、基于注解管理Bean（☆）</h3><p>从 Java 5 开始，Java 增加了对注解（Annotation）的支持，它是代码中的一种特殊标记，可以在编译、类加载和运行时被读取，执行相应的处理。开发人员可以通过注解在不改变原有代码和逻辑的情况下，在源代码中嵌入补充信息。</p>
<p>Spring 从 2.5 版本开始提供了对注解技术的全面支持，我们可以使用注解来实现自动装配，简化 Spring 的 XML 配置。</p>
<p>Spring 通过注解实现自动装配的步骤如下：</p>
<ol>
<li>引入依赖</li>
<li>开启组件扫描</li>
<li>使用注解定义 Bean</li>
<li>依赖注入</li>
</ol>
<h4 id="3-3-1、搭建子模块spring6-ioc-annotation"><a href="#3-3-1、搭建子模块spring6-ioc-annotation" class="headerlink" title="3.3.1、搭建子模块spring6-ioc-annotation"></a>3.3.1、搭建子模块spring6-ioc-annotation</h4><p><strong>①搭建模块</strong></p>
<p>搭建方式如：spring6-ioc-xml</p>
<p><strong>②引入配置文件</strong></p>
<p>引入spring-ioc-xml模块日志log4j2.xml</p>
<p><strong>③添加依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-2、开启组件扫描"><a href="#3-3-2、开启组件扫描" class="headerlink" title="3.3.2、开启组件扫描"></a>3.3.2、开启组件扫描</h4><p>Spring 默认不使用注解装配 Bean，因此我们需要在 Spring 的 XML 配置中，通过 <a href="context:component-scan">context:component-scan</a> 元素开启 Spring Beans的自动扫描功能。开启此功能后，Spring 会自动从扫描指定的包（base-package 属性设置）及其子包下的所有类，如果类上使用了 @Component 注解，就将该类装配到容器中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启组件扫描功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：在使用 <a href="context:component-scan">context:component-scan</a> 元素开启自动扫描功能前，首先需要在 XML 配置的一级标签 <beans> 中添加 context 相关的约束。</p>
<p><strong>情况一：最基本的扫描方式</strong>&#x2F;&#x2F;排除不排除影响大吗</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>情况二：指定要排除的组件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 		type：设置排除或包含的依据</span></span><br><span class="line"><span class="comment">		type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class="line"><span class="comment">		type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;context:exclude-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.spring6.controller.UserController&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>情况三：仅扫描指定组件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此时必须设置use-default-filters=&quot;false&quot;，因为默认规则即扫描指定包下所有类 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 		type：设置排除或包含的依据</span></span><br><span class="line"><span class="comment">		type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class="line"><span class="comment">		type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;context:include-filter type=&quot;assignable&quot; expression=&quot;com.atguigu.spring6.controller.UserController&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-3-3、使用注解定义-Bean"><a href="#3-3-3、使用注解定义-Bean" class="headerlink" title="3.3.3、使用注解定义 Bean"></a>3.3.3、使用注解定义 Bean</h4><p>Spring 提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean。</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Component</td>
<td>该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。  使用时只需将该注解标注在相应类上即可。</td>
</tr>
<tr>
<td>@Repository</td>
<td>该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td>
</tr>
<tr>
<td>@Service</td>
<td>该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td>
</tr>
<tr>
<td>@Controller</td>
<td>该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td>
</tr>
</tbody></table>
<h4 id="3-3-4、实验一：-Autowired注入"><a href="#3-3-4、实验一：-Autowired注入" class="headerlink" title="3.3.4、实验一：@Autowired注入"></a>3.3.4、实验一：@Autowired注入</h4><p>单独使用@Autowired注解，<strong>默认根据类型装配</strong>。【默认是byType】</p>
<p>查看源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码中有两处需要注意：</p>
<ul>
<li><p>第一处：该注解<code>可以标注在哪里</code>？</p>
</li>
<li><ul>
<li>构造方法上</li>
<li>方法上</li>
<li>形参上</li>
<li>属性上</li>
<li>注解上</li>
</ul>
</li>
<li><p>第二处：该注解有一个required属性，默认值是true，表示在注入的时候要求<code>被注入的Bean必须是存在的</code>，如果不存在则报错。如果required属性设置为false，表示注入的Bean存在或者不存在都没关系，存在的话就注入，不存在的话，也不报错。</p>
</li>
</ul>
<h5 id="①场景一：属性注入"><a href="#①场景一：属性注入" class="headerlink" title="①场景一：属性注入"></a>①场景一：属性注入</h5><p>创建UserDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserDaoImpl实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserServiceImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller层执行结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试一</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.controller.UserController;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(UserTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userController&quot;</span>, UserController.class);</span><br><span class="line">        userController.out();</span><br><span class="line">        logger.info(<span class="string">&quot;执行成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<p><img src="https://blog-resources.this0.com/image/202403301657596.png?x-oss-process=style/this0-blog" alt="image-20221101153556681"></p>
<p>以上构造方法和setter方法都没有提供，经过测试，仍然可以注入成功。</p>
<h5 id="②场景二：set注入"><a href="#②场景二：set注入" class="headerlink" title="②场景二：set注入"></a>②场景二：set注入</h5><p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改UserController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller层执行结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：成功调用</p>
<h5 id="③场景三：构造方法注入"><a href="#③场景三：构造方法注入" class="headerlink" title="③场景三：构造方法注入"></a>③场景三：构造方法注入</h5><p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改UserController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller层执行结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：成功调用</p>
<h5 id="④场景四：形参上注入"><a href="#④场景四：形参上注入" class="headerlink" title="④场景四：形参上注入"></a>④场景四：形参上注入</h5><p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改UserController类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(<span class="meta">@Autowired</span> UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller层执行结束。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：成功调用</p>
<h5 id="⑤场景五：只有一个构造函数，无注解"><a href="#⑤场景五：只有一个构造函数，无注解" class="headerlink" title="⑤场景五：只有一个构造函数，无注解"></a>⑤场景五：只有一个构造函数，无注解</h5><p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试通过</p>
<p><strong><code>当有参数的构造方法只有一个时，@Autowired注解可以省略。</code></strong></p>
<p>说明：有多个构造方法时呢？大家可以测试（再添加一个无参构造函数），测试报错</p>
<h5 id="⑥场景六：-Autowired注解和-Qualifier注解联合"><a href="#⑥场景六：-Autowired注解和-Qualifier注解联合" class="headerlink" title="⑥场景六：@Autowired注解和@Qualifier注解联合"></a>⑥场景六：@Autowired注解和@Qualifier注解联合</h5><p>添加dao层实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoRedisImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Redis Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：测试异常</p>
<p><code>错误信息中说：不能装配，UserDao这个Bean的数量等于2,怎么解决这个问题呢**当然要byName，根据名称进行装配了。**</code></p>
<p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDaoImpl&quot;)</span> <span class="comment">// 指定bean的名字</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>总结</strong></p>
<ul>
<li>@Autowired注解可以出现在：属性上、构造方法上、构造方法的参数上、setter方法上。</li>
<li>当带参数的构造方法只有一个，@Autowired注解可以省略。（）</li>
<li>@Autowired注解默认根据类型注入。如果要根据名称注入的话，需要配合@Qualifier注解一起使用。</li>
</ul>
<h4 id="3-3-5、实验二：-Resource注入"><a href="#3-3-5、实验二：-Resource注入" class="headerlink" title="3.3.5、实验二：@Resource注入"></a>3.3.5、实验二：@Resource注入</h4><p>@Resource注解也可以完成属性注入。那它和@Autowired注解有什么区别？</p>
<ul>
<li><code>@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分</code>。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)</li>
<li>@Autowired注解是Spring框架自己的。</li>
<li><strong>@Resource注解默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型byType装配。</strong></li>
<li><strong><code>@Autowired注解默认根据类型装配byType，如果想根据名称装配，需要配合@Qualifier注解一起用。</code></strong></li>
<li>@Resource注解用在属性上、setter方法上。</li>
<li>@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。</li>
</ul>
<p>@Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【<strong>如果是JDK8的话不需要额外引入依赖。高于JDK11或低于JDK8需要引入以下依赖。</strong>】&#x2F;&#x2F;TODO，java8新特性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jakarta.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Repeatable(Resources.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Resource &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; type() <span class="keyword">default</span> Object.class;</span><br><span class="line"></span><br><span class="line">    Resource.AuthenticationType <span class="title function_">authenticationType</span><span class="params">()</span> <span class="keyword">default</span> Resource.AuthenticationType.CONTAINER;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">shareable</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">mappedName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">description</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">AuthenticationType</span> &#123;</span><br><span class="line">        CONTAINER,</span><br><span class="line">        APPLICATION;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">AuthenticationType</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="①场景一：根据name注入"><a href="#①场景一：根据name注入" class="headerlink" title="①场景一：根据name注入"></a>①场景一：根据name注入</h5><p>修改UserDaoImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;myUserDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;myUserDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao myUserDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        myUserDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试通过</p>
<h5 id="②场景二：name未知注入"><a href="#②场景二：name未知注入" class="headerlink" title="②场景二：name未知注入"></a>②场景二：name未知注入</h5><p>修改UserDaoImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;myUserDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改UserServiceImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao myUserDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        myUserDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试通过</p>
<p><code>当@Resource注解使用时没有指定name的时候，还是根据name进行查找，这个name是属性名。</code></p>
<h5 id="③场景三-其他情况"><a href="#③场景三-其他情况" class="headerlink" title="③场景三 其他情况"></a>③场景三 其他情况</h5><p>修改UserServiceImpl类，userDao1属性名不存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.service.UserService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao1.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试异常</p>
<p>根据异常信息得知：显然当通过name找不到的时候，自然会启动byType进行注入，以上的错误是因为UserDao接口下有两个实现类导致的。所以根据类型注入就会报错。</p>
<p>@Resource的set注入可以自行测试</p>
<p><strong>总结：</strong></p>
<p><code>@Resource注解：默认byName注入，没有指定name时把属性名当做name，根据name找不到时，才会byType注入。byType注入时，某种类型的Bean只能有一个</code></p>
<h4 id="3-3-6、Spring全注解开发"><a href="#3-3-6、Spring全注解开发" class="headerlink" title="3.3.6、Spring全注解开发"></a>3.3.6、Spring全注解开发</h4><p>全注解开发就是不再使用spring配置文件了，写一个配置类来代替配置文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@ComponentScan(&#123;&quot;com.atguigu.spring6.controller&quot;, &quot;com.atguigu.spring6.service&quot;,&quot;com.atguigu.spring6.dao&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring6Config</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAllAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Spring6Config.class);</span><br><span class="line">    <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userController&quot;</span>, UserController.class);</span><br><span class="line">    userController.out();</span><br><span class="line">    logger.info(<span class="string">&quot;执行成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4、原理-手写IoC-TODO后面再看"><a href="#4、原理-手写IoC-TODO后面再看" class="headerlink" title="4、原理-手写IoC&#x2F;&#x2F;TODO后面再看"></a>4、原理-手写IoC&#x2F;&#x2F;TODO后面再看</h2><p>我们都知道，Spring框架的IOC是基于Java反射机制实现的，下面我们先回顾一下java反射。</p>
<h3 id="4-1、回顾Java反射"><a href="#4-1、回顾Java反射" class="headerlink" title="4.1、回顾Java反射"></a>4.1、回顾Java反射</h3><p><code>Java</code>反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为<code>Java</code>语言的反射机制。简单来说，反射机制指的是程序在运行时能够获取自身的信息。</p>
<p>要想解剖一个类，必须先要<strong>获取到该类的Class对象</strong>。而剖析一个类或用反射解决具体的问题就是使用相关API<strong>（1）java.lang.Class（2）java.lang.reflect</strong>，所以，<strong>Class对象是反射的根源</strong>。</p>
<p><strong>自定义类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参数构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String name, <span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有方法-run.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get和set方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编写测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、获取Class对象多种方式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1 类名.class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Car.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 对象.getClass()</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>().getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 Class.forName(&quot;全路径&quot;)</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.reflect.Car&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)clazz3.getConstructor().newInstance();</span><br><span class="line">        System.out.println(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、获取构造方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Car.class;</span><br><span class="line">        <span class="comment">//获取所有构造</span></span><br><span class="line">        <span class="comment">// getConstructors()获取所有public的构造方法</span></span><br><span class="line"><span class="comment">//        Constructor[] constructors = clazz.getConstructors();</span></span><br><span class="line">        <span class="comment">// getDeclaredConstructors()获取所有的构造方法public  private</span></span><br><span class="line">        Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor c:constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;方法名称：&quot;</span>+c.getName()+<span class="string">&quot; 参数个数：&quot;</span>+c.getParameterCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定有参数构造创建对象</span></span><br><span class="line">        <span class="comment">//1 构造public</span></span><br><span class="line"><span class="comment">//        Constructor c1 = clazz.getConstructor(String.class, int.class, String.class);</span></span><br><span class="line"><span class="comment">//        Car car1 = (Car)c1.newInstance(&quot;夏利&quot;, 10, &quot;红色&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(car1);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2 构造private</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">c2</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class, <span class="type">int</span>.class, String.class);</span><br><span class="line">        c2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car2</span> <span class="operator">=</span> (Car)c2.newInstance(<span class="string">&quot;捷达&quot;</span>, <span class="number">15</span>, <span class="string">&quot;白色&quot;</span>);</span><br><span class="line">        System.out.println(car2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、获取属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Car.class;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> (Car)clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="comment">//获取所有public属性</span></span><br><span class="line">        <span class="comment">//Field[] fields = clazz.getFields();</span></span><br><span class="line">        <span class="comment">//获取所有属性（包含私有属性）</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field:fields) &#123;</span><br><span class="line">            <span class="keyword">if</span>(field.getName().equals(<span class="string">&quot;name&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//设置允许访问</span></span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                field.set(car,<span class="string">&quot;五菱宏光&quot;</span>);</span><br><span class="line">                System.out.println(car);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、获取方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;奔驰&quot;</span>,<span class="number">10</span>,<span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> car.getClass();</span><br><span class="line">        <span class="comment">//1 public方法</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m1:methods) &#123;</span><br><span class="line">            <span class="comment">//System.out.println(m1.getName());</span></span><br><span class="line">            <span class="comment">//执行方法 toString</span></span><br><span class="line">            <span class="keyword">if</span>(m1.getName().equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">invoke</span> <span class="operator">=</span> (String)m1.invoke(car);</span><br><span class="line">                <span class="comment">//System.out.println(&quot;toString执行了：&quot;+invoke);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 private方法</span></span><br><span class="line">        Method[] methodsAll = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m:methodsAll) &#123;</span><br><span class="line">            <span class="comment">//执行方法 run</span></span><br><span class="line">            <span class="keyword">if</span>(m.getName().equals(<span class="string">&quot;run&quot;</span>)) &#123;</span><br><span class="line">                m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                m.invoke(car);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-2、实现Spring的IoC"><a href="#4-2、实现Spring的IoC" class="headerlink" title="4.2、实现Spring的IoC"></a>4.2、实现Spring的IoC</h3><p>我们知道，IoC（控制反转）和DI（依赖注入）是Spring里面核心的东西，那么，我们如何自己手写出这样的代码呢？下面我们就一步一步写出Spring框架最核心的部分。</p>
<p><strong>①搭建子模块</strong></p>
<p>搭建模块：guigu-spring，搭建方式如其他spring子模块</p>
<p><strong>②准备测试需要的bean</strong></p>
<p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建UserDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.test.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserDaoImpl实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.test.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dao层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建UserService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建UserServiceImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private UserDao userDao;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//userDao.print();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>③定义注解</strong></p>
<p>我们通过注解的形式加载bean与实现依赖注入</p>
<p>bean注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.core.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>依赖注入注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.core.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Di &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：上面两个注解可以随意取名</p>
<p><strong>④定义bean容器接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>⑤编写注解bean容器接口实现</strong></p>
<p>AnnotationApplicationContext基于注解扫描bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储bean的容器</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Class, Object&gt; beanFactory = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据包扫描加载bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePackage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>⑥编写扫描bean逻辑</strong></p>
<p>我们通过构造方法传入包的base路径，扫描被@Bean注解的java对象，完整代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储bean的容器</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Class, Object&gt; beanFactory = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String rootPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据包扫描加载bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePackage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">packageDirName</span> <span class="operator">=</span> basePackage.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line">            Enumeration&lt;URL&gt; dirs =Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class="line">            <span class="keyword">while</span> (dirs.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> dirs.nextElement();</span><br><span class="line">                <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                rootPath = filePath.substring(<span class="number">0</span>, filePath.length()-packageDirName.length());</span><br><span class="line">                loadBean(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">loadBean</span><span class="params">(File fileParent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileParent.isDirectory()) &#123;</span><br><span class="line">            File[] childrenFiles = fileParent.listFiles();</span><br><span class="line">            <span class="keyword">if</span>(childrenFiles == <span class="literal">null</span> || childrenFiles.length == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (File child : childrenFiles) &#123;</span><br><span class="line">                <span class="keyword">if</span> (child.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">//如果是个文件夹就继续调用该方法,使用了递归</span></span><br><span class="line">                    loadBean(child);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//通过文件路径转变成全类名,第一步把绝对路径部分去掉</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">pathWithClass</span> <span class="operator">=</span> child.getAbsolutePath().substring(rootPath.length() - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//选中class文件</span></span><br><span class="line">                    <span class="keyword">if</span> (pathWithClass.contains(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                        <span class="comment">//    com.xinzhi.dao.UserDao</span></span><br><span class="line">                        <span class="comment">//去掉.class后缀，并且把 \ 替换成 .</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">fullName</span> <span class="operator">=</span> pathWithClass.replaceAll(<span class="string">&quot;\\\\&quot;</span>, <span class="string">&quot;.&quot;</span>).replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Class&lt;?&gt; aClass = Class.forName(fullName);</span><br><span class="line">                            <span class="comment">//把非接口的类实例化放在map中</span></span><br><span class="line">                            <span class="keyword">if</span>(!aClass.isInterface())&#123;</span><br><span class="line">                                <span class="type">Bean</span> <span class="variable">annotation</span> <span class="operator">=</span> aClass.getAnnotation(Bean.class);</span><br><span class="line">                                <span class="keyword">if</span>(annotation != <span class="literal">null</span>)&#123;</span><br><span class="line">                                    <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">                                    <span class="comment">//判断一下有没有接口</span></span><br><span class="line">                                    <span class="keyword">if</span>(aClass.getInterfaces().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        <span class="comment">//如果有接口把接口的class当成key，实例对象当成value</span></span><br><span class="line">                                        System.out.println(<span class="string">&quot;正在加载【&quot;</span>+ aClass.getInterfaces()[<span class="number">0</span>] +<span class="string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());</span><br><span class="line">                                        beanFactory.put(aClass.getInterfaces()[<span class="number">0</span>], instance);</span><br><span class="line">                                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                        <span class="comment">//如果有接口把自己的class当成key，实例对象当成value</span></span><br><span class="line">                                        System.out.println(<span class="string">&quot;正在加载【&quot;</span>+ aClass.getName() +<span class="string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());</span><br><span class="line">                                        beanFactory.put(aClass, instance);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>⑦java类标识Bean注解</strong></p>
<p>&#x2F;&#x2F;TODO@Bean相对来说更加灵活，它可以独立加在方法上，按需注册到spring容器，而且如果你要用到第三方类库里面某个方法的时候，你就只能用@Bean把这个方法注册到spring容器，因为用@Component你需要配置组件扫描到这个第三方类路径而且还要在别人源代码加上这个注解，很明显是不现实的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> </span><br></pre></td></tr></table></figure>

<p><strong>⑧测试Bean加载</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.AnnotationApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.test.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringIocTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIoc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationApplicationContext</span>(<span class="string">&quot;com.atguigu.spring.test&quot;</span>);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService)applicationContext.getBean(UserService.class);</span><br><span class="line">        userService.out();</span><br><span class="line">        System.out.println(<span class="string">&quot;run success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台打印测试</p>
<p><strong>⑨依赖注入</strong></p>
<p>只要userDao.print();调用成功，说明就注入成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.annotation.Di;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Di</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;Service层执行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行第八步：报错了，说明当前userDao是个空对象</p>
<p><strong>⑩依赖注入实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring.core.annotation.Di;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储bean的容器</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Class, Object&gt; beanFactory = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String rootPath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据包扫描加载bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> basePackage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnnotationApplicationContext</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">packageDirName</span> <span class="operator">=</span> basePackage.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;\\\\&quot;</span>);</span><br><span class="line">            Enumeration&lt;URL&gt; dirs =Thread.currentThread().getContextClassLoader().getResources(packageDirName);</span><br><span class="line">            <span class="keyword">while</span> (dirs.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> dirs.nextElement();</span><br><span class="line">                <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                rootPath = filePath.substring(<span class="number">0</span>, filePath.length()-packageDirName.length());</span><br><span class="line">                loadBean(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//依赖注入</span></span><br><span class="line">        loadDi();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">loadBean</span><span class="params">(File fileParent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileParent.isDirectory()) &#123;</span><br><span class="line">            File[] childrenFiles = fileParent.listFiles();</span><br><span class="line">            <span class="keyword">if</span>(childrenFiles == <span class="literal">null</span> || childrenFiles.length == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (File child : childrenFiles) &#123;</span><br><span class="line">                <span class="keyword">if</span> (child.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">//如果是个文件夹就继续调用该方法,使用了递归</span></span><br><span class="line">                    loadBean(child);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//通过文件路径转变成全类名,第一步把绝对路径部分去掉</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">pathWithClass</span> <span class="operator">=</span> child.getAbsolutePath().substring(rootPath.length() - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//选中class文件</span></span><br><span class="line">                    <span class="keyword">if</span> (pathWithClass.contains(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                        <span class="comment">//    com.xinzhi.dao.UserDao</span></span><br><span class="line">                        <span class="comment">//去掉.class后缀，并且把 \ 替换成 .</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">fullName</span> <span class="operator">=</span> pathWithClass.replaceAll(<span class="string">&quot;\\\\&quot;</span>, <span class="string">&quot;.&quot;</span>).replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Class&lt;?&gt; aClass = Class.forName(fullName);</span><br><span class="line">                            <span class="comment">//把非接口的类实例化放在map中</span></span><br><span class="line">                            <span class="keyword">if</span>(!aClass.isInterface())&#123;</span><br><span class="line">                                <span class="type">Bean</span> <span class="variable">annotation</span> <span class="operator">=</span> aClass.getAnnotation(Bean.class);</span><br><span class="line">                                <span class="keyword">if</span>(annotation != <span class="literal">null</span>)&#123;</span><br><span class="line">                                    <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">                                    <span class="comment">//判断一下有没有接口</span></span><br><span class="line">                                    <span class="keyword">if</span>(aClass.getInterfaces().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        <span class="comment">//如果有接口把接口的class当成key，实例对象当成value</span></span><br><span class="line">                                        System.out.println(<span class="string">&quot;正在加载【&quot;</span>+ aClass.getInterfaces()[<span class="number">0</span>] +<span class="string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());</span><br><span class="line">                                        beanFactory.put(aClass.getInterfaces()[<span class="number">0</span>], instance);</span><br><span class="line">                                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                        <span class="comment">//如果有接口把自己的class当成key，实例对象当成value</span></span><br><span class="line">                                        System.out.println(<span class="string">&quot;正在加载【&quot;</span>+ aClass.getName() +<span class="string">&quot;】,实例对象是：&quot;</span> + instance.getClass().getName());</span><br><span class="line">                                        beanFactory.put(aClass, instance);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadDi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Class,Object&gt; entry : beanFactory.entrySet())&#123;</span><br><span class="line">            <span class="comment">//就是咱们放在容器的对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            Class&lt;?&gt; aClass = obj.getClass();</span><br><span class="line">            Field[] declaredFields = aClass.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : declaredFields)&#123;</span><br><span class="line">                <span class="type">Di</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(Di.class);</span><br><span class="line">                <span class="keyword">if</span>( annotation != <span class="literal">null</span> )&#123;</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;正在给【&quot;</span>+obj.getClass().getName()+<span class="string">&quot;】属性【&quot;</span> + field.getName() + <span class="string">&quot;】注入值【&quot;</span>+ beanFactory.get(field.getType()).getClass().getName() +<span class="string">&quot;】&quot;</span>);</span><br><span class="line">                        field.set(obj,beanFactory.get(field.getType()));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行第八步：执行成功，依赖注入成功</p>
<h2 id="5、面向切面：AOP"><a href="#5、面向切面：AOP" class="headerlink" title="5、面向切面：AOP"></a>5、面向切面：AOP</h2><h3 id="5-1、场景模拟"><a href="#5-1、场景模拟" class="headerlink" title="5.1、场景模拟"></a>5.1、场景模拟</h3><p><strong>搭建子模块：spring6-aop</strong></p>
<h4 id="5-1-1、声明接口"><a href="#5-1-1、声明接口" class="headerlink" title="5.1.1、声明接口"></a>5.1.1、声明接口</h4><p>声明计算器接口Calculator，包含加减乘除的抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-1-2、创建实现类"><a href="#5-1-2、创建实现类" class="headerlink" title="5.1.2、创建实现类"></a>5.1.2、创建实现类</h4><p><img src="https://blog-resources.this0.com/image/202403301657738.png?x-oss-process=style/this0-blog" alt="images"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-1-3、创建带日志功能的实现类"><a href="#5-1-3、创建带日志功能的实现类" class="headerlink" title="5.1.3、创建带日志功能的实现类"></a>5.1.3、创建带日志功能的实现类</h4><p><img src="https://blog-resources.this0.com/image/202403301657832.png?x-oss-process=style/this0-blog" alt="images"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorLogImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] sub 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] sub 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] mul 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] mul 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] div 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] div 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-1-4、提出问题"><a href="#5-1-4、提出问题" class="headerlink" title="5.1.4、提出问题"></a>5.1.4、提出问题</h4><p><strong>①现有代码缺陷</strong></p>
<p>针对带日志功能的实现类，我们发现有如下缺陷：</p>
<ul>
<li>对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力</li>
<li>附加功能分散在各个业务功能方法中，不利于统一维护</li>
</ul>
<p><strong>②解决思路</strong></p>
<p>解决这两个问题，核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。</p>
<p><strong>③困难</strong></p>
<p>解决问题的困难：要抽取的代码在方法内部，<code>靠以前把子类中的重复代码抽取到父类的方式没法解决。所以需要引入新的技术</code>。</p>
<h3 id="5-2、代理模式"><a href="#5-2、代理模式" class="headerlink" title="5.2、代理模式"></a>5.2、代理模式</h3><h4 id="5-2-1、概念"><a href="#5-2-1、概念" class="headerlink" title="5.2.1、概念"></a>5.2.1、概念</h4><p><strong>①介绍</strong></p>
<p>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p>
<p><img src="https://blog-resources.this0.com/image/202403301657885.png?x-oss-process=style/this0-blog" alt="images"></p>
<p>使用代理后：</p>
<p><img src="https://blog-resources.this0.com/image/202403301657930.png?x-oss-process=style/this0-blog" alt="images"></p>
<p><strong>②生活中的代理</strong></p>
<ul>
<li>广告商找大明星拍广告需要经过经纪人</li>
<li>合作伙伴找大老板谈合作要约见面时间需要经过秘书</li>
<li>房产中介是买卖双方的代理</li>
</ul>
<p><strong>③相关术语</strong></p>
<ul>
<li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li>
<li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li>
</ul>
<h4 id="5-2-2、静态代理"><a href="#5-2-2、静态代理" class="headerlink" title="5.2.2、静态代理"></a>5.2.2、静态代理</h4><p>创建静态代理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorStaticProxy</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将被代理的目标对象声明为成员变量</span></span><br><span class="line">    <span class="keyword">private</span> Calculator target;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorStaticProxy</span><span class="params">(Calculator target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 附加功能由代理类中的代理方法来实现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 通过目标对象来实现核心业务逻辑</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">addResult</span> <span class="operator">=</span> target.add(i, j);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + addResult);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> addResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。</p>
<p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理类来实现。这就需要使用动态代理技术了。</p>
</blockquote>
<h4 id="5-2-3、动态代理-TODO"><a href="#5-2-3、动态代理-TODO" class="headerlink" title="5.2.3、动态代理&#x2F;&#x2F;TODO"></a>5.2.3、动态代理&#x2F;&#x2F;TODO</h4><p><img src="https://blog-resources.this0.com/image/202403301657025.png?x-oss-process=style/this0-blog" alt="images"></p>
<h5 id="1-生产代理对象的工厂类getProxy-java："><a href="#1-生产代理对象的工厂类getProxy-java：" class="headerlink" title="1.  生产代理对象的工厂类getProxy.java："></a>1.  生产代理对象的工厂类getProxy.java：</h5><p>也就是使用java的Proxy类里面的newProxyInstance方法，生成动态代理类，需要三个参数：</p>
<ul>
<li>1、classLoader：目标对象类的<code>类加载器</code></li>
<li>2、interfaces：目标对象实现的<code>所有接口的class对象所组成的数组</code></li>
<li>3、invocationHandler：设置代理对象实现目标对象方法的过程，即<code>代理类中如何重写接口中的抽象方法</code>,在这个对象里面调用invoke方法，实现基本方法，添加新的代理方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回代理对象</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * newProxyInstance()：创建一个代理实例</span></span><br><span class="line"><span class="comment">         * 其中有三个参数：</span></span><br><span class="line"><span class="comment">         * 1、classLoader：加载动态生成的代理类的类加载器</span></span><br><span class="line"><span class="comment">         * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span></span><br><span class="line"><span class="comment">         * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 需要重写目标对象的方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * method方法里面参数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//方法调用之前输出</span></span><br><span class="line">                System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，参数：&quot;</span>+ Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//调用目标的方法</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//调用之后输出</span></span><br><span class="line">                System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，结果：&quot;</span>+ result);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="5-2-4、测试"><a href="#5-2-4、测试" class="headerlink" title="5.2.4、测试"></a>5.2.4、测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDynamicProxy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(<span class="keyword">new</span> <span class="title class_">CalculatorLogImpl</span>());</span><br><span class="line">    <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> (Calculator) factory.getProxy();</span><br><span class="line">    proxy.div(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//proxy.div(1,1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-3、AOP概念及相关术语-TODO，记一下"><a href="#5-3、AOP概念及相关术语-TODO，记一下" class="headerlink" title="5.3、AOP概念及相关术语&#x2F;&#x2F;TODO，记一下"></a>5.3、AOP概念及相关术语&#x2F;&#x2F;TODO，记一下</h3><h4 id="5-3-1、概述"><a href="#5-3-1、概述" class="headerlink" title="5.3.1、概述"></a>5.3.1、概述</h4><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<h4 id="5-3-2、相关术语"><a href="#5-3-2、相关术语" class="headerlink" title="5.3.2、相关术语"></a>5.3.2、相关术语</h4><h5 id="①横切关注点"><a href="#①横切关注点" class="headerlink" title="①横切关注点"></a>①横切关注点</h5><p>分散在每个各个模块中解决同一样的问题，如用户验证、日志管理、事务处理、数据缓存都属于<code>横切关注点</code>，我理解为附加功能。</p>
<p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p>
<p>这个概念不是语法层面的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。</p>
<p><img src="https://blog-resources.this0.com/image/202403301657023.png?x-oss-process=style/this0-blog" alt="images"></p>
<h5 id="②通知（增强）-理解为想要增强的功能"><a href="#②通知（增强）-理解为想要增强的功能" class="headerlink" title="②通知（增强） 理解为想要增强的功能"></a>②通知（增强） 理解为想要增强的功能</h5><p><strong>增强，通俗说，就是你想要增强的功能，比如 安全，事务，日志等。</strong></p>
<p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。&#x2F;&#x2F;TODO返回通知和后置通知的先后顺序</p>
<ul>
<li>前置通知：在被代理的目标方法<strong>前</strong>执行</li>
<li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li>
<li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li>
<li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li>
<li>环绕通知：使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403301657081.png?x-oss-process=style/this0-blog" alt="images"></p>
<h5 id="③切面"><a href="#③切面" class="headerlink" title="③切面"></a>③切面</h5><p><code>封装通知方法的类。</code></p>
<p><img src="https://blog-resources.this0.com/image/202403301657168.png?x-oss-process=style/this0-blog" alt="images"></p>
<h5 id="④目标"><a href="#④目标" class="headerlink" title="④目标"></a>④目标</h5><p>被代理的目标对象。</p>
<h5 id="⑤代理"><a href="#⑤代理" class="headerlink" title="⑤代理"></a>⑤代理</h5><p><code>向目标对象应用通知之后创建的代理对象。</code></p>
<h5 id="⑥连接点"><a href="#⑥连接点" class="headerlink" title="⑥连接点"></a>⑥连接点</h5><p>这也是一个纯逻辑概念，不是语法定义的。</p>
<p>把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。<strong>通俗说，就是<code>spring允许你使用通知的地方</code></strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301657228.png?x-oss-process=style/this0-blog" alt="images"></p>
<h5 id="⑦切入点"><a href="#⑦切入点" class="headerlink" title="⑦切入点"></a>⑦切入点</h5><p><code>定位连接点的方式。</code></p>
<p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。</p>
<p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。</p>
<p><strong>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。通俗说，要<code>实际去增强的方法</code></strong></p>
<p>切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。</p>
<h4 id="5-3-3、作用"><a href="#5-3-3、作用" class="headerlink" title="5.3.3、作用"></a>5.3.3、作用</h4><ul>
<li><p>简化代码：把方法中固定位置的重复的代码<strong>抽取</strong>出来，让被抽取的方法更专注于自己的核心功能，提高内聚性。</p>
</li>
<li><p>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被<strong>套用</strong>了切面逻辑的方法就被切面给增强了。</p>
</li>
</ul>
<h3 id="5-4、基于注解的AOP"><a href="#5-4、基于注解的AOP" class="headerlink" title="5.4、基于注解的AOP"></a>5.4、基于注解的AOP</h3><h4 id="5-4-1、技术说明"><a href="#5-4-1、技术说明" class="headerlink" title="5.4.1、技术说明"></a>5.4.1、技术说明</h4><p><img src="https://blog-resources.this0.com/image/202403301657282.png?x-oss-process=style/this0-blog" alt="images"></p>
<p><img src="https://blog-resources.this0.com/image/202403301657292.png?x-oss-process=style/this0-blog" alt="image-20221216132844066"></p>
<ul>
<li>动态代理分为JDK动态代理和<code>cglib动态代理//TODO</code></li>
<li><code>当目标类有接口的情况使用JDK动态代理和cglib动态代理，没有接口时只能使用cglib动态代理</code></li>
<li><code>JDK动态代理动态生成的代理类会在com.sun.proxy包下，类名为$proxy1，和目标类实现相同的接口</code></li>
<li><code>cglib动态代理动态生成的代理类会和目标在在相同的包下，会继承目标类</code></li>
<li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求<strong>代理对象和目标对象实现同样的接口</strong>（兄弟两个拜把子模式）。</li>
<li><code>cglib：通过**继承被代理的目标类**（认干爹模式）实现代理，所以不需要目标类实现接口。</code></li>
<li><code>AspectJ：是AOP思想的一种实现。本质上是静态代理，**将代理逻辑“织入”被代理的目标类编译得到的字节码文件**，所以最终效果是动态的。</code>weaver就是织入器。Spring只是借用了AspectJ中的注解。</li>
</ul>
<h4 id="5-4-2、准备工作"><a href="#5-4-2、准备工作" class="headerlink" title="5.4.2、准备工作"></a>5.4.2、准备工作</h4><p><strong>①添加依赖</strong></p>
<p>在IOC所需依赖基础上再加入下面依赖即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring aop依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring aspects依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>②准备被代理的目标资源</strong></p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-4-3、创建切面类并配置"><a href="#5-4-3、创建切面类并配置" class="headerlink" title="5.4.3、创建切面类并配置"></a>5.4.3、创建切面类并配置</h4><p><code>格式：</code></p>
<p><img src="https://blog-resources.this0.com/image/202403301657667.png?x-oss-process=style/this0-blog" alt="image-20240130191405595"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Aspect表示这个类是一个切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">// @Component注解保证这个切面类能够放入IOC容器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;后置通知，方法名：&quot;</span>+methodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);</span><br><span class="line">            <span class="comment">//目标对象（连接点）方法的执行</span></span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Spring的配置文件中配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        基于注解的AOP的实现：</span></span><br><span class="line"><span class="comment">        1、将目标对象和切面交给IOC容器管理（注解+扫描）</span></span><br><span class="line"><span class="comment">        2、开启AspectJ的自动代理，为目标对象自动生成代理</span></span><br><span class="line"><span class="comment">        3、将切面类通过注解@Aspect标识</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.aop.annotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(CalculatorTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> ac.getBean( Calculator.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> calculator.add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;执行成功:&quot;</span>+add);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="https://blog-resources.this0.com/image/202403301657792.png?x-oss-process=style/this0-blog" alt="image-20221102155523983"></p>
<h4 id="5-4-4、各种通知"><a href="#5-4-4、各种通知" class="headerlink" title="5.4.4、各种通知"></a>5.4.4、各种通知</h4><ul>
<li>前置通知：使用@Before注解标识，在被代理的目标方法<strong>前</strong>执行</li>
<li>返回通知：使用@AfterReturning注解标识，在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li>
<li>异常通知：使用@AfterThrowing注解标识，在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li>
<li>后置通知：使用@After注解标识，在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li>
<li>环绕通知：使用@Around注解标识，使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li>
</ul>
<blockquote>
<p>各种通知的执行顺序：</p>
<ul>
<li>Spring版本5.3.x以前：<ul>
<li>前置通知</li>
<li>目标操作</li>
<li>后置通知</li>
<li>返回通知或异常通知</li>
</ul>
</li>
<li>Spring版本5.3.x以后：<ul>
<li>前置通知</li>
<li>目标操作</li>
<li>返回通知或异常通知</li>
<li>后置通知</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="5-4-5、切入点表达式语法"><a href="#5-4-5、切入点表达式语法" class="headerlink" title="5.4.5、切入点表达式语法"></a>5.4.5、切入点表达式语法</h4><p><strong>①作用</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301657526.png?x-oss-process=style/this0-blog" alt="images"></p>
<p><strong>②语法细节</strong></p>
<ul>
<li><p>用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限</p>
</li>
<li><p>在包名的部分，一个“*”号只能代表包的层次结构中的一层，表示这一层是任意的。</p>
<ul>
<li>例如：*.Hello匹配com.Hello，不匹配com.atguigu.Hello</li>
</ul>
</li>
<li><p>在包名的部分，使用“*..”表示包名任意、包的层次深度任意</p>
</li>
<li><p>在类名的部分，类名部分整体用*号代替，表示类名任意</p>
</li>
<li><p>在类名的部分，可以使用*号代替类名的一部分</p>
<ul>
<li>例如：*Service匹配所有名称以Service结尾的类或接口</li>
</ul>
</li>
<li><p>在方法名部分，可以使用*号表示方法名任意</p>
</li>
<li><p>在方法名部分，可以使用*号代替方法名的一部分</p>
<ul>
<li>例如：*Operation匹配所有方法名以Operation结尾的方法</li>
</ul>
</li>
<li><p>在方法参数列表部分，使用(..)表示参数列表任意</p>
</li>
<li><p>在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头</p>
</li>
<li><p>在方法参数列表部分，基本数据类型和对应的包装类型是不一样的</p>
<ul>
<li>切入点表达式中使用 int 和实际方法中 Integer 是不匹配的</li>
</ul>
</li>
<li><p>在方法返回值部分，如果想要明确指定一个返回值类型，那么必须同时写明权限修饰符</p>
<ul>
<li>例如：execution(public int <em>..<em>Service.</em>(.., int))	正确<br>例如：execution(</em> int *..<em>Service.</em>(.., int))	错误</li>
</ul>
</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403301657623.png?x-oss-process=style/this0-blog" alt="images"></p>
<h4 id="5-4-6、重用切入点表达式，-Pointcut注解"><a href="#5-4-6、重用切入点表达式，-Pointcut注解" class="headerlink" title="5.4.6、重用切入点表达式，@Pointcut注解"></a>5.4.6、重用切入点表达式，@Pointcut注解</h4><p><strong>①声明</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.atguigu.aop.annotation.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②在同一个切面中使用</strong></p>
<p>@Pointcut注解后＋方法名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③在不同切面中使用</strong></p>
<p>@Pointcut注解后＋全路径名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;com.atguigu.aop.CommonPointCut.pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-4-7、获取通知的相关信息"><a href="#5-4-7、获取通知的相关信息" class="headerlink" title="5.4.7、获取通知的相关信息"></a>5.4.7、获取通知的相关信息</h4><p><strong>①获取连接点信息</strong></p>
<p>获取连接点信息可以在通知方法的参数位置设置JoinPoint类型的形参</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="comment">//获取连接点的签名信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="comment">//获取目标方法到的实参信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②获取目标方法的返回值</strong></p>
<p>@AfterReturning中的属性returning，用来将通知方法的某个形参，接收目标方法的返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③获取目标方法的异常</strong></p>
<p>@AfterThrowing中的属性throwing，用来将通知方法的某个形参，接收目标方法的异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-4-8、环绕通知"><a href="#5-4-8、环绕通知" class="headerlink" title="5.4.8、环绕通知"></a>5.4.8、环绕通知</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);</span><br><span class="line">        <span class="comment">//目标方法的执行，目标方法的返回值一定要返回给外界调用者</span></span><br><span class="line">        result = joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-4-9、切面的优先级"><a href="#5-4-9、切面的优先级" class="headerlink" title="5.4.9、切面的优先级"></a>5.4.9、<code>切面的优先级</code></h4><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的<strong>内外嵌套</strong>顺序。</p>
<ul>
<li>优先级高的切面：外面</li>
<li>优先级低的切面：里面</li>
</ul>
<p>使用@Order注解可以控制切面的优先级：</p>
<ul>
<li>@Order(较小的数)：优先级高</li>
<li>@Order(较大的数)：优先级低</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403301657740.png?x-oss-process=style/this0-blog" alt="images"></p>
<h3 id="5-5、基于XML的AOP"><a href="#5-5、基于XML的AOP" class="headerlink" title="5.5、基于XML的AOP"></a>5.5、基于XML的AOP</h3><h4 id="5-5-1、准备工作"><a href="#5-5-1、准备工作" class="headerlink" title="5.5.1、准备工作"></a>5.5.1、准备工作</h4><p>参考基于注解的AOP环境</p>
<h4 id="5-5-2、实现"><a href="#5-5-2、实现" class="headerlink" title="5.5.2、实现"></a>5.5.2、实现</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.aop.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">expression</span>=<span class="string">&quot;execution(* com.atguigu.aop.xml.CalculatorImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturningMethod&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowingMethod&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="6、单元测试：JUnit"><a href="#6、单元测试：JUnit" class="headerlink" title="6、单元测试：JUnit"></a>6、单元测试：JUnit</h2><p>在之前的测试方法中，几乎都能看到以下的两行代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;xxx.xml&quot;</span>);</span><br><span class="line"><span class="type">Xxxx</span> <span class="variable">xxx</span> <span class="operator">=</span> context.getBean(Xxxx.class);</span><br></pre></td></tr></table></figure>

<p>这两行代码的作用是创建Spring容器，最终获取到对象，但是每次测试都需要重复编写。针对上述问题，<code>我们需要的是程序能自动帮我们创建容器</code>。我们都知道JUnit无法知晓我们是否使用了 Spring 框架，更不用说帮我们创建 Spring 容器了。Spring提供了一个运行器，可以读取配置文件（或注解）来创建容器。我们只需要告诉它配置文件位置就可以了。这样一来，我们通过Spring整合JUnit可以使程序创建spring容器了</p>
<h3 id="6-1、整合JUnit5"><a href="#6-1、整合JUnit5" class="headerlink" title="6.1、整合JUnit5"></a>6.1、整合JUnit5</h3><h4 id="6-1-1、搭建子模块"><a href="#6-1-1、搭建子模块" class="headerlink" title="6.1.1、搭建子模块"></a>6.1.1、搭建子模块</h4><p>搭建spring-junit模块</p>
<h4 id="6-1-2、引入依赖"><a href="#6-1-2、引入依赖" class="headerlink" title="6.1.2、引入依赖"></a>6.1.2、引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring对junit的支持相关依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-1-3、添加配置文件"><a href="#6-1-3、添加配置文件" class="headerlink" title="6.1.3、添加配置文件"></a>6.1.3、添加配置文件</h4><p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6.bean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>copy日志文件：log4j2.xml</p>
<h4 id="6-1-4、添加java类"><a href="#6-1-4、添加java类" class="headerlink" title="6.1.4、添加java类"></a>6.1.4、添加java类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run user&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-1-5、测试"><a href="#6-1-5、测试" class="headerlink" title="6.1.5、测试"></a>6.1.5、测试</h4><p>&#x2F;&#x2F;TODO，两种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.spring6.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两种方式均可</span></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJUnit5Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-2、整合JUnit4"><a href="#6-2、整合JUnit4" class="headerlink" title="6.2、整合JUnit4"></a>6.2、整合JUnit4</h3><p>JUnit4在公司也会经常用到，在此也学习一下</p>
<h4 id="6-2-1、添加依赖"><a href="#6-2-1、添加依赖" class="headerlink" title="6.2.1、添加依赖"></a>6.2.1、添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-2-2、测试"><a href="#6-2-2、测试" class="headerlink" title="6.2.2、测试"></a>6.2.2、测试</h4><p>&#x2F;&#x2F;TODO，junit4和5，和普通的@Test有什么区别？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.spring6.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJUnit4Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7、事务-springtx"><a href="#7、事务-springtx" class="headerlink" title="7、事务 springtx"></a>7、事务 springtx</h2><h3 id="7-1、JdbcTemplate"><a href="#7-1、JdbcTemplate" class="headerlink" title="7.1、JdbcTemplate"></a>7.1、JdbcTemplate</h3><h4 id="7-1-1、简介"><a href="#7-1-1、简介" class="headerlink" title="7.1.1、简介"></a>7.1.1、简介</h4><p><img src="https://blog-resources.this0.com/image/202403301657723.png?x-oss-process=style/this0-blog" alt="image-20221217115515670"></p>
<p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p>
<h4 id="7-1-2、准备工作"><a href="#7-1-2、准备工作" class="headerlink" title="7.1.2、准备工作"></a>7.1.2、准备工作</h4><p><strong>①搭建子模块</strong></p>
<p>搭建子模块：spring-jdbc-tx</p>
<p><strong>②加入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring jdbc  Spring 持久化层支持jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>③创建jdbc.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p><strong>④配置Spring的配置文件</strong></p>
<p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>⑤准备数据库与测试表</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE `spring`;</span><br><span class="line"></span><br><span class="line">use `spring`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `t_emp` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(<span class="number">20</span>) DEFAULT NULL COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `sex` varchar(<span class="number">2</span>) DEFAULT NULL COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="title function_">KEY</span> <span class="params">(`id`)</span></span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-3、实现CURD"><a href="#7-1-3、实现CURD" class="headerlink" title="7.1.3、实现CURD"></a>7.1.3、实现CURD</h4><h5 id="①装配-JdbcTemplate"><a href="#①装配-JdbcTemplate" class="headerlink" title="①装配 JdbcTemplate"></a>①装配 JdbcTemplate</h5><p><strong>创建测试类，整合JUnit，注入JdbcTemplate</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="②测试增删改功能"><a href="#②测试增删改功能" class="headerlink" title="②测试增删改功能"></a>②测试增删改功能</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试增删改功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//添加功能</span></span><br><span class="line">	<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_emp values(null,?,?,?)&quot;</span>;</span><br><span class="line">	<span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改功能</span></span><br><span class="line">	<span class="comment">//String sql = &quot;update t_emp set name=? where id=?&quot;;</span></span><br><span class="line">    <span class="comment">//int result = jdbcTemplate.update(sql, &quot;张三atguigu&quot;, 1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除功能</span></span><br><span class="line">	<span class="comment">//String sql = &quot;delete from t_emp where id=?&quot;;</span></span><br><span class="line">	<span class="comment">//int result = jdbcTemplate.update(sql, 1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="③查询数据返回对象"><a href="#③查询数据返回对象" class="headerlink" title="③查询数据返回对象"></a>③查询数据返回对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成get和set方法</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Emp&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询：返回对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//写法一</span></span><br><span class="line"><span class="comment">//        String sql = &quot;select * from t_emp where id=?&quot;;</span></span><br><span class="line"><span class="comment">//        Emp empResult = jdbcTemplate.queryForObject(sql,</span></span><br><span class="line"><span class="comment">//                (rs, rowNum) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                    Emp emp = new Emp();</span></span><br><span class="line"><span class="comment">//                    emp.setId(rs.getInt(&quot;id&quot;));</span></span><br><span class="line"><span class="comment">//                    emp.setName(rs.getString(&quot;name&quot;));</span></span><br><span class="line"><span class="comment">//                    emp.setAge(rs.getInt(&quot;age&quot;));</span></span><br><span class="line"><span class="comment">//                    emp.setSex(rs.getString(&quot;sex&quot;));</span></span><br><span class="line"><span class="comment">//                    return emp;</span></span><br><span class="line"><span class="comment">//                &#125;, 1);</span></span><br><span class="line"><span class="comment">//        System.out.println(empResult);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写法二</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_emp where id=?&quot;</span>;</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql,</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class),<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="④查询数据返回list集合"><a href="#④查询数据返回list集合" class="headerlink" title="④查询数据返回list集合"></a>④查询数据返回list集合</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询多条数据为一个list集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_emp&quot;</span>;</span><br><span class="line">    List&lt;Emp&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="⑤查询返回单个的值"><a href="#⑤查询返回单个的值" class="headerlink" title="⑤查询返回单个的值"></a>⑤查询返回单个的值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询单行单列的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(id) from t_emp&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-2、声明式事务概念"><a href="#7-2、声明式事务概念" class="headerlink" title="7.2、声明式事务概念"></a>7.2、声明式事务概念</h3><h4 id="7-2-1、事务基本概念"><a href="#7-2-1、事务基本概念" class="headerlink" title="7.2.1、事务基本概念"></a>7.2.1、事务基本概念</h4><h5 id="①什么是事务"><a href="#①什么是事务" class="headerlink" title="①什么是事务"></a>①什么是事务</h5><p>数据库事务( transaction)是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。</p>
<h5 id="②事务的特性"><a href="#②事务的特性" class="headerlink" title="②事务的特性"></a>②事务的特性</h5><p><strong>A：原子性(Atomicity)</strong></p>
<p>一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p>
<p><strong>C：一致性(Consistency)</strong></p>
<p>事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。</p>
<p>如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。</p>
<p>如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p>
<p><strong>I：隔离性(Isolation)</strong></p>
<p>指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。</p>
<p><strong>D：持久性(Durability)</strong></p>
<p>指的是只要事务成功结束，它对数据库所做的更新就必须保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。</p>
<h4 id="7-2-2、编程式事务-TODO数据库中已经学过"><a href="#7-2-2、编程式事务-TODO数据库中已经学过" class="headerlink" title="7.2.2、编程式事务&#x2F;&#x2F;TODO数据库中已经学过"></a>7.2.2、编程式事务&#x2F;&#x2F;TODO数据库中已经学过</h4><p>事务功能的相关操作全部通过自己编写代码来实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ...;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开启事务：关闭事务的自动提交</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心操作</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    conn.rollBack();</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放数据库连接</span></span><br><span class="line">    conn.close();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编程式的实现方式存在缺陷：</p>
<ul>
<li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li>
<li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li>
</ul>
<h4 id="7-2-3、声明式事务"><a href="#7-2-3、声明式事务" class="headerlink" title="7.2.3、声明式事务"></a>7.2.3、声明式事务</h4><p>既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。</p>
<p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p>
<ul>
<li>好处1：提高开发效率</li>
<li>好处2：消除了冗余的代码</li>
<li>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化</li>
</ul>
<p>所以，我们可以总结下面两个概念：</p>
<ul>
<li><strong>编程式</strong>：<strong>自己写代码</strong>实现功能</li>
<li><strong>声明式</strong>：通过<strong>配置</strong>让<strong>框架</strong>实现功能</li>
</ul>
<h3 id="7-3、基于注解的声明式事务"><a href="#7-3、基于注解的声明式事务" class="headerlink" title="7.3、基于注解的声明式事务"></a>7.3、基于注解的声明式事务</h3><h4 id="7-3-1、准备工作"><a href="#7-3-1、准备工作" class="headerlink" title="7.3.1、准备工作"></a>7.3.1、准备工作</h4><p><strong>①添加配置</strong></p>
<p>在beans.xml添加配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>②创建表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_book` (</span><br><span class="line">  `book_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `book_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图书名称&#x27;</span>,</span><br><span class="line">  `price` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">  `stock` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;库存（无符号）&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`book_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_book`(`book_id`,`book_name`,`price`,`stock`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;斗破苍穹&#x27;</span>,<span class="number">80</span>,<span class="number">100</span>),(<span class="number">2</span>,<span class="string">&#x27;斗罗大陆&#x27;</span>,<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user` (</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `balance` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;余额（无符号）&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`user_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_user`(`user_id`,`username`,`balance`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<p><strong>③创建组件</strong></p>
<p>创建BookController：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>&#123;</span><br><span class="line">        bookService.buyBook(bookId, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建接口BookService：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建实现类BookServiceImpl：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">        <span class="comment">//查询图书的价格</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">        <span class="comment">//更新图书的库存</span></span><br><span class="line">        bookDao.updateStock(bookId);</span><br><span class="line">        <span class="comment">//更新用户的余额</span></span><br><span class="line">        bookDao.updateBalance(userId, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建接口BookDao：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建实现类BookDaoImpl：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.dao.impl;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select price from t_book where book_id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set stock = stock - 1 where book_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, bookId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set balance = balance - ? where user_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, price, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-3-2、测试无事务情况"><a href="#7-3-2、测试无事务情况" class="headerlink" title="7.3.2、测试无事务情况"></a>7.3.2、测试无事务情况</h4><p><strong>①创建测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxByAnnotationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookController bookController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuyBook</span><span class="params">()</span>&#123;</span><br><span class="line">        bookController.buyBook(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②模拟场景</strong></p>
<p>用户购买图书，先查询图书的价格，再更新图书的库存和用户的余额</p>
<p>假设用户id为1的用户，购买id为1的图书</p>
<p>用户余额为50，而图书价格为80</p>
<p>购买图书之后，用户的余额为-30，数据库中余额字段设置了无符号，因此无法将-30插入到余额字段</p>
<p>此时执行sql语句会抛出SQLException</p>
<p><strong>③观察结果</strong></p>
<p>因为没有添加事务，图书的库存更新了，但是用户的余额没有更新</p>
<p>显然这样的结果是错误的，购买图书是一个完整的功能，更新库存和更新余额要么都成功要么都失败</p>
<h4 id="7-3-3、加入事务"><a href="#7-3-3、加入事务" class="headerlink" title="7.3.3、加入事务"></a>7.3.3、加入事务</h4><h5 id="①添加事务配置"><a href="#①添加事务配置" class="headerlink" title="①添加事务配置"></a>①添加事务配置</h5><p>在spring配置文件中引入tx命名空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在Spring的配置文件中添加配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    开启事务的注解驱动</span></span><br><span class="line"><span class="comment">    通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就是这个默认值，则可以省略这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="②添加事务注解"><a href="#②添加事务注解" class="headerlink" title="②添加事务注解"></a>②添加事务注解</h5><p>因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理</p>
<p><strong>在BookServiceImpl的buybook()添加注解@Transactional</strong></p>
<h5 id="③观察结果"><a href="#③观察结果" class="headerlink" title="③观察结果"></a>③观察结果</h5><p>由于使用了Spring的声明式事务，更新库存和更新余额都没有执行</p>
<h4 id="7-3-4、-Transactional注解标识的位置"><a href="#7-3-4、-Transactional注解标识的位置" class="headerlink" title="7.3.4、@Transactional注解标识的位置"></a>7.3.4、@Transactional注解标识的位置</h4><p>@Transactional标识在方法上，则只会影响该方法</p>
<p>@Transactional标识的类上，则会影响类中所有的方法</p>
<h4 id="7-3-5、事务属性：只读"><a href="#7-3-5、事务属性：只读" class="headerlink" title="7.3.5、事务属性：只读"></a>7.3.5、事务属性：只读</h4><p><strong>①介绍</strong></p>
<p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p>
<p><strong>②使用方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③注意</strong></p>
<p>对增删改操作设置只读会抛出下面异常：</p>
<p>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed</p>
<h4 id="7-3-6、事务属性：超时"><a href="#7-3-6、事务属性：超时" class="headerlink" title="7.3.6、事务属性：超时"></a>7.3.6、事务属性：超时</h4><p><strong>①介绍</strong></p>
<p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p>
<p>概括来说就是一句话：超时回滚，释放资源。</p>
<p><strong>②使用方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//超时时间单位秒</span></span><br><span class="line"><span class="meta">@Transactional(timeout = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③观察结果</strong></p>
<p>执行过程中抛出异常：</p>
<p>org.springframework.transaction.<strong>TransactionTimedOutException</strong>: Transaction timed out: deadline was Fri Jun 04 16:25:39 CST 2022</p>
<h4 id="7-3-7、事务属性：回滚策略"><a href="#7-3-7、事务属性：回滚策略" class="headerlink" title="7.3.7、事务属性：回滚策略"></a>7.3.7、事务属性：回滚策略</h4><p><strong>①介绍</strong></p>
<p>声明式事务默认只针对运行时异常回滚，编译时异常不回滚。</p>
<p>可以通过@Transactional中相关属性设置回滚策略</p>
<ul>
<li><p>rollbackFor属性：需要设置一个Class类型的对象</p>
</li>
<li><p>rollbackForClassName属性：需要设置一个字符串类型的全类名</p>
</li>
<li><p>noRollbackFor属性：需要设置一个Class类型的对象</p>
</li>
<li><p>rollbackFor属性：需要设置一个字符串类型的全类名</p>
</li>
</ul>
<p><strong>②使用方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(noRollbackFor = ArithmeticException.class)</span></span><br><span class="line"><span class="comment">//@Transactional(noRollbackForClassName = &quot;java.lang.ArithmeticException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③观察结果</strong></p>
<p>虽然购买图书功能中出现了数学运算异常（ArithmeticException），但是我们设置的回滚策略是，当出现ArithmeticException不发生回滚，因此购买图书的操作正常执行</p>
<h4 id="7-3-8、事务属性：隔离级别"><a href="#7-3-8、事务属性：隔离级别" class="headerlink" title="7.3.8、事务属性：隔离级别"></a>7.3.8、事务属性：隔离级别</h4><p><strong>①介绍</strong></p>
<p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p>
<p>隔离级别一共有四种：</p>
<ul>
<li><p>读未提交：READ UNCOMMITTED</p>
<p>允许Transaction01读取Transaction02未提交的修改。</p>
</li>
<li><p>读已提交：READ COMMITTED、</p>
<p>要求Transaction01只能读取Transaction02已提交的修改。</p>
</li>
<li><p>可重复读：REPEATABLE READ</p>
<p>确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它事务对这个字段进行更新。</p>
</li>
<li><p>串行化：SERIALIZABLE</p>
<p>确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p>
</li>
</ul>
<p>各个隔离级别解决并发问题的能力见下表：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>READ UNCOMMITTED</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>无</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>无</td>
<td>无</td>
<td>有</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>无</td>
<td>无</td>
<td>无</td>
</tr>
</tbody></table>
<p>各种数据库产品对事务隔离级别的支持程度：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>Oracle</th>
<th>MySQL</th>
</tr>
</thead>
<tbody><tr>
<td>READ UNCOMMITTED</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>√(默认)</td>
<td>√</td>
</tr>
<tr>
<td>REPEATABLE READ</td>
<td>×</td>
<td>√(默认)</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<p><strong>②使用方式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.DEFAULT)</span><span class="comment">//使用数据库默认的隔离级别</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class="comment">//读未提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class="comment">//读已提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class="comment">//可重复读</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class="comment">//串行化</span></span><br></pre></td></tr></table></figure>



<h4 id="7-3-9、事务属性：传播行为"><a href="#7-3-9、事务属性：传播行为" class="headerlink" title="7.3.9、事务属性：传播行为"></a>7.3.9、事务属性：传播行为</h4><p><strong>①介绍</strong></p>
<p>什么是事务的传播行为？</p>
<p>在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。</p>
<p>一共有七种传播行为：</p>
<ul>
<li>REQUIRED：支持当前事务，如果不存在就新建一个(默认)<strong>【没有就新建，有就加入】</strong></li>
<li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行<strong>【有就加入，没有就不管了】</strong></li>
<li>MANDATORY：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常<strong>【有就加入，没有就抛异常】</strong></li>
<li>REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起<strong>【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】</strong></li>
<li>NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务<strong>【不支持事务，存在就挂起】</strong></li>
<li>NEVER：以非事务方式运行，如果有事务存在，抛出异常<strong>【不支持事务，存在就抛异常】</strong></li>
<li>NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。<strong>【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和REQUIRED一样。】</strong></li>
</ul>
<p><strong>②测试</strong></p>
<p>创建接口CheckoutService：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CheckoutService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建实现类CheckoutServiceImpl：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckoutServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CheckoutService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="comment">//一次购买多本图书</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer bookId : bookIds) &#123;</span><br><span class="line">            bookService.buyBook(bookId, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在BookController中添加方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CheckoutService checkoutService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span>&#123;</span><br><span class="line">    checkoutService.checkout(bookIds, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在数据库中将用户的余额修改为100元</p>
<p><strong>③观察结果</strong></p>
<p>可以通过@Transactional中的propagation属性设置事务传播行为</p>
<p>修改BookServiceImpl中buyBook()上，注解@Transactional的propagation属性</p>
<p>@Transactional(propagation &#x3D; Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法buyBook()在checkout()中被调用，checkout()上有事务注解，因此在此事务中执行。所购买的两本图书的价格为80和50，而用户的余额为100，因此在购买第二本图书时余额不足失败，导致整个checkout()回滚，即只要有一本书买不了，就都买不了</p>
<p>@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启的事务，都要开启新事务。同样的场景，每次购买图书都是在buyBook()的事务中执行，因此第一本图书购买成功，事务结束，第二本图书购买失败，只在第二次的buyBook()中回滚，购买第一本图书不受影响，即能买几本就买几本。</p>
<h4 id="7-3-10、全注解配置事务"><a href="#7-3-10、全注解配置事务" class="headerlink" title="7.3.10、全注解配置事务"></a>7.3.10、全注解配置事务</h4><p><strong>①添加配置类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring?characterEncoding=utf8&amp;useSSL=false&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>②测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.atguigu.spring6.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.spring6.controller.BookController;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit.jupiter.SpringJUnitConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxByAllAnnotationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTxAllAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookController</span> <span class="variable">accountService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;bookController&quot;</span>, BookController.class);</span><br><span class="line">        accountService.buyBook(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-4、基于XML的声明式事务-TODO存档不看"><a href="#7-4、基于XML的声明式事务-TODO存档不看" class="headerlink" title="7.4、基于XML的声明式事务 &#x2F;&#x2F;TODO存档不看"></a>7.4、基于XML的声明式事务 &#x2F;&#x2F;TODO存档不看</h3><h4 id="7-3-1、场景模拟"><a href="#7-3-1、场景模拟" class="headerlink" title="7.3.1、场景模拟"></a>7.3.1、场景模拟</h4><p>参考基于注解的声明式事务</p>
<h4 id="7-3-2、修改Spring配置文件"><a href="#7-3-2、修改Spring配置文件" class="headerlink" title="7.3.2、修改Spring配置文件"></a>7.3.2、修改Spring配置文件</h4><p>将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务通知和切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.atguigu.spring.tx.xml.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tx:advice标签：配置事务通知 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- read-only属性：设置只读属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- timeout属性：设置事务的超时属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- propagation属性：设置事务的传播行为 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：基于xml实现的声明式事务，必须引入aspectJ的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="8、资源操作：Resources-TODO不用"><a href="#8、资源操作：Resources-TODO不用" class="headerlink" title="8、资源操作：Resources &#x2F;&#x2F;TODO不用"></a>8、资源操作：Resources &#x2F;&#x2F;TODO不用</h2><h3 id="8-1、Spring-Resources概述"><a href="#8-1、Spring-Resources概述" class="headerlink" title="8.1、Spring Resources概述"></a>8.1、Spring Resources概述</h3><p><img src="https://blog-resources.this0.com/image/202403301657802.png?x-oss-process=style/this0-blog" alt="image-20221218154945878"></p>
<p><img src="https://blog-resources.this0.com/image/202403301657878.png?x-oss-process=style/this0-blog" alt="image-20221206231535991"></p>
<p>Java的标准java.net.URL类和各种URL前缀的标准处理程序无法满足所有对low-level资源的访问，比如：没有标准化的 URL 实现可用于访问需要从类路径或相对于 ServletContext 获取的资源。并且缺少某些Spring所需要的功能，例如检测某资源是否存在等。<strong>而Spring的Resource声明了访问low-level资源的能力。</strong></p>
<h3 id="8-2、Resource接口"><a href="#8-2、Resource接口" class="headerlink" title="8.2、Resource接口"></a>8.2、Resource接口</h3><p>Spring 的 Resource 接口位于 org.springframework.core.io 中。 旨在成为一个更强大的接口，用于抽象对低级资源的访问。以下显示了Resource接口定义的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Resource</span> <span class="keyword">extends</span> <span class="title class_">InputStreamSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isReadable</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    URL <span class="title function_">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    URI <span class="title function_">getURI</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    File <span class="title function_">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    ReadableByteChannel <span class="title function_">readableChannel</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">lastModified</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    Resource <span class="title function_">createRelative</span><span class="params">(String relativePath)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getFilename</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Resource接口继承了InputStreamSource接口，提供了很多InputStreamSource所没有的方法。InputStreamSource接口，只有一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InputStreamSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    InputStream <span class="title function_">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其中一些重要的方法：</strong></p>
<p>getInputStream(): 找到并打开资源，返回一个InputStream以从资源中读取。预计每次调用都会返回一个新的InputStream()，调用者有责任关闭每个流<br>exists(): 返回一个布尔值，表明某个资源是否以物理形式存在<br>isOpen: 返回一个布尔值，指示此资源是否具有开放流的句柄。如果为true，InputStream就不能够多次读取，只能够读取一次并且及时关闭以避免内存泄漏。对于所有常规资源实现，返回false，但是InputStreamResource除外。<br>getDescription(): 返回资源的描述，用来输出错误的日志。这通常是完全限定的文件名或资源的实际URL。</p>
<p><strong>其他方法：</strong></p>
<p>isReadable(): 表明资源的目录读取是否通过getInputStream()进行读取。<br>isFile(): 表明这个资源是否代表了一个文件系统的文件。<br>getURL(): 返回一个URL句柄，如果资源不能够被解析为URL，将抛出IOException<br>getURI(): 返回一个资源的URI句柄<br>getFile(): 返回某个文件，如果资源不能够被解析称为绝对路径，将会抛出FileNotFoundException<br>lastModified(): 资源最后一次修改的时间戳<br>createRelative(): 创建此资源的相关资源<br>getFilename(): 资源的文件名是什么 例如：最后一部分的文件名 myfile.txt</p>
<h3 id="8-3、Resource的实现类"><a href="#8-3、Resource的实现类" class="headerlink" title="8.3、Resource的实现类"></a>8.3、Resource的实现类</h3><p>Resource 接口是 Spring 资源访问策略的抽象，它本身并不提供任何资源访问实现，具体的资源访问由该接口的实现类完成——每个实现类代表一种资源访问策略。Resource一般包括这些实现类：UrlResource、ClassPathResource、FileSystemResource、ServletContextResource、InputStreamResource、ByteArrayResource</p>
<h4 id="8-3-1、UrlResource访问网络资源"><a href="#8-3-1、UrlResource访问网络资源" class="headerlink" title="8.3.1、UrlResource访问网络资源"></a>8.3.1、UrlResource访问网络资源</h4><p>Resource的一个实现类，用来访问网络资源，它支持URL的绝对路径。</p>
<p>http:——该前缀用于访问基于HTTP协议的网络资源。</p>
<p>ftp:——该前缀用于访问基于FTP协议的网络资源</p>
<p>file: ——该前缀用于从文件系统中读取资源</p>
<p><strong>实验：访问基于HTTP协议的网络资源</strong></p>
<p><strong>创建一个maven子模块spring6-resources，配置Spring依赖（参考前面）</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301657018.png?x-oss-process=style/this0-blog" alt="image-20221207102315185"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.UrlResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlResourceDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadAndReadUrlResource</span><span class="params">(String path)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个 Resource 对象</span></span><br><span class="line">        <span class="type">UrlResource</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            url = <span class="keyword">new</span> <span class="title class_">UrlResource</span>(path);</span><br><span class="line">            <span class="comment">// 获取资源名</span></span><br><span class="line">            System.out.println(url.getFilename());</span><br><span class="line">            System.out.println(url.getURI());</span><br><span class="line">            <span class="comment">// 获取资源描述</span></span><br><span class="line">            System.out.println(url.getDescription());</span><br><span class="line">            <span class="comment">//获取资源内容</span></span><br><span class="line">            System.out.println(url.getInputStream().read());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//访问网络资源</span></span><br><span class="line">        loadAndReadUrlResource(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>实验二：在项目根路径下创建文件，从文件系统中读取资源</strong></p>
<p>方法不变，修改调用传递路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1 访问网络资源</span></span><br><span class="line">	<span class="comment">//loadAndReadUrlResource(&quot;http://www.atguigu.com&quot;);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2 访问文件系统资源</span></span><br><span class="line">    loadAndReadUrlResource(<span class="string">&quot;file:atguigu.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="8-3-2、ClassPathResource-访问类路径下资源"><a href="#8-3-2、ClassPathResource-访问类路径下资源" class="headerlink" title="8.3.2、ClassPathResource 访问类路径下资源"></a>8.3.2、ClassPathResource 访问类路径下资源</h4><p>ClassPathResource 用来访问类加载路径下的资源，相对于其他的 Resource 实现类，其主要优势是方便访问类加载路径里的资源，尤其对于 Web 应用，ClassPathResource 可自动搜索位于 classes 下的资源文件，无须使用绝对路径访问。</p>
<p><strong>实验：在类路径下创建文件atguigu.txt，使用ClassPathResource 访问</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301657019.png?x-oss-process=style/this0-blog" alt="image-20221207103020854"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathResourceDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadAndReadUrlResource</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 创建一个 Resource 对象</span></span><br><span class="line">        <span class="type">ClassPathResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(path);</span><br><span class="line">        <span class="comment">// 获取文件名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());</span><br><span class="line">        <span class="comment">// 获取文件描述</span></span><br><span class="line">        System.out.println(<span class="string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());</span><br><span class="line">        <span class="comment">//获取文件内容</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span>(in.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        loadAndReadUrlResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ClassPathResource实例可使用ClassPathResource构造器显式地创建，但更多的时候它都是隐式地创建的。当执行Spring的某个方法时，该方法接受一个代表资源路径的字符串参数，当Spring识别该字符串参数中包含classpath:前缀后，系统会自动创建ClassPathResource对象。</p>
<h4 id="8-3-3、FileSystemResource-访问文件系统资源"><a href="#8-3-3、FileSystemResource-访问文件系统资源" class="headerlink" title="8.3.3、FileSystemResource 访问文件系统资源"></a>8.3.3、FileSystemResource 访问文件系统资源</h4><p>Spring 提供的 FileSystemResource 类用于访问文件系统资源，使用 FileSystemResource 来访问文件系统资源并没有太大的优势，因为 Java 提供的 File 类也可用于访问文件系统资源。</p>
<p><strong>实验：使用FileSystemResource 访问文件系统资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.FileSystemResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileSystemResourceDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadAndReadUrlResource</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//相对路径</span></span><br><span class="line">        <span class="type">FileSystemResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//绝对路径</span></span><br><span class="line">        <span class="comment">//FileSystemResource resource = new FileSystemResource(&quot;C:\\atguigu.txt&quot;);</span></span><br><span class="line">        <span class="comment">// 获取文件名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;resource.getFileName = &quot;</span> + resource.getFilename());</span><br><span class="line">        <span class="comment">// 获取文件描述</span></span><br><span class="line">        System.out.println(<span class="string">&quot;resource.getDescription = &quot;</span>+ resource.getDescription());</span><br><span class="line">        <span class="comment">//获取文件内容</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> resource.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span>(in.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        loadAndReadUrlResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>FileSystemResource实例可使用FileSystemResource构造器显示地创建，但更多的时候它都是隐式创建。执行Spring的某个方法时，该方法接受一个代表资源路径的字符串参数，当Spring识别该字符串参数中包含file:前缀后，系统将会自动创建FileSystemResource对象。</p>
<h4 id="8-3-4、ServletContextResource"><a href="#8-3-4、ServletContextResource" class="headerlink" title="8.3.4、ServletContextResource"></a>8.3.4、ServletContextResource</h4><p>这是ServletContext资源的Resource实现，它解释相关Web应用程序根目录中的相对路径。它始终支持流(stream)访问和URL访问，但只有在扩展Web应用程序存档且资源实际位于文件系统上时才允许java.io.File访问。无论它是在文件系统上扩展还是直接从JAR或其他地方（如数据库）访问，实际上都依赖于Servlet容器。</p>
<h4 id="8-3-5、InputStreamResource"><a href="#8-3-5、InputStreamResource" class="headerlink" title="8.3.5、InputStreamResource"></a>8.3.5、InputStreamResource</h4><p>InputStreamResource 是给定的输入流(InputStream)的Resource实现。它的使用场景在没有特定的资源实现的时候使用(感觉和@Component 的适用场景很相似)。与其他Resource实现相比，这是已打开资源的描述符。 因此，它的isOpen()方法返回true。如果需要将资源描述符保留在某处或者需要多次读取流，请不要使用它。</p>
<h4 id="8-3-6、ByteArrayResource"><a href="#8-3-6、ByteArrayResource" class="headerlink" title="8.3.6、ByteArrayResource"></a>8.3.6、ByteArrayResource</h4><p>字节数组的Resource实现类。通过给定的数组创建了一个ByteArrayInputStream。它对于从任何给定的字节数组加载内容非常有用，而无需求助于单次使用的InputStreamResource。</p>
<h3 id="8-4、Resource类图"><a href="#8-4、Resource类图" class="headerlink" title="8.4、Resource类图"></a>8.4、Resource类图</h3><p>上述Resource实现类与Resource顶级接口之间的关系可以用下面的UML关系模型来表示</p>
<p><img src="https://blog-resources.this0.com/image/202403301657018.png?x-oss-process=style/this0-blog" alt="image-20221206232920494"></p>
<h3 id="8-5、ResourceLoader-接口"><a href="#8-5、ResourceLoader-接口" class="headerlink" title="8.5、ResourceLoader 接口"></a>8.5、ResourceLoader 接口</h3><h4 id="8-5-1、ResourceLoader-概述"><a href="#8-5-1、ResourceLoader-概述" class="headerlink" title="8.5.1、ResourceLoader 概述"></a>8.5.1、ResourceLoader 概述</h4><p>Spring 提供如下两个标志性接口：</p>
<p><strong>（1）ResourceLoader ：</strong> 该接口实现类的实例可以获得一个Resource实例。</p>
<p><strong>（2） ResourceLoaderAware ：</strong> 该接口实现类的实例将获得一个ResourceLoader的引用。</p>
<p>在ResourceLoader接口里有如下方法：</p>
<p>（1）<strong>Resource getResource（String location）</strong> ： 该接口仅有这个方法，用于返回一个Resource实例。ApplicationContext实现类都实现ResourceLoader接口，因此ApplicationContext可直接获取Resource实例。</p>
<h4 id="8-5-2、使用演示"><a href="#8-5-2、使用演示" class="headerlink" title="8.5.2、使用演示"></a>8.5.2、使用演示</h4><p><strong>实验一：ClassPathXmlApplicationContext获取Resource实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resouceloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>();</span><br><span class="line"><span class="comment">//        通过ApplicationContext访问资源</span></span><br><span class="line"><span class="comment">//        ApplicationContext实例获取Resource实例时，</span></span><br><span class="line"><span class="comment">//        默认采用与ApplicationContext相同的资源访问策略</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">        System.out.println(res.getFilename());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>实验二：FileSystemApplicationContext获取Resource实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resouceloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>();</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">        System.out.println(res.getFilename());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="8-5-3、ResourceLoader-总结"><a href="#8-5-3、ResourceLoader-总结" class="headerlink" title="8.5.3、ResourceLoader 总结"></a>8.5.3、ResourceLoader 总结</h4><p>Spring将采用和ApplicationContext相同的策略来访问资源。也就是说，如果ApplicationContext是FileSystemXmlApplicationContext，res就是FileSystemResource实例；如果ApplicationContext是ClassPathXmlApplicationContext，res就是ClassPathResource实例</p>
<p>当Spring应用需要进行资源访问时，实际上并不需要直接使用Resource实现类，而是调用ResourceLoader实例的getResource()方法来获得资源，ReosurceLoader将会负责选择Reosurce实现类，也就是确定具体的资源访问策略，从而将应用程序和具体的资源访问策略分离开来</p>
<p>另外，使用ApplicationContext访问资源时，可通过不同前缀指定强制使用指定的ClassPathResource、FileSystemResource等实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;calsspath:bean.xml&quot;</span>);</span><br><span class="line"><span class="type">Resrouce</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;file:bean.xml&quot;</span>);</span><br><span class="line"><span class="type">Resource</span> <span class="variable">res</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;http://localhost:8080/beans.xml&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="8-6、ResourceLoaderAware-接口"><a href="#8-6、ResourceLoaderAware-接口" class="headerlink" title="8.6、ResourceLoaderAware 接口"></a>8.6、ResourceLoaderAware 接口</h3><p>ResourceLoaderAware接口实现类的实例将获得一个ResourceLoader的引用，ResourceLoaderAware接口也提供了一个setResourceLoader()方法，该方法将由Spring容器负责调用，Spring容器会将一个ResourceLoader对象作为该方法的参数传入。</p>
<p>如果把实现ResourceLoaderAware接口的Bean类部署在Spring容器中，Spring容器会将自身当成ResourceLoader作为setResourceLoader()方法的参数传入。由于ApplicationContext的实现类都实现了ResourceLoader接口，Spring容器自身完全可作为ResorceLoader使用。</p>
<p><strong>实验：演示ResourceLoaderAware使用</strong></p>
<p><strong>第一步 创建类，实现ResourceLoaderAware接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resouceloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ResourceLoaderAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoaderAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现ResourceLoaderAware接口必须实现的方法</span></span><br><span class="line">	<span class="comment">//如果把该Bean部署在Spring容器中，该方法将会有Spring容器负责调用。</span></span><br><span class="line">	<span class="comment">//SPring容器调用该方法时，Spring会将自身作为参数传给该方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回ResourceLoader对象的应用</span></span><br><span class="line">    <span class="keyword">public</span> ResourceLoader <span class="title function_">getResourceLoader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步 创建bean.xml文件，配置TestBean</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;testBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.resouceloader.TestBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第三步 测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resouceloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ResourceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Spring容器会将一个ResourceLoader对象作为该方法的参数传入</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="type">TestBean</span> <span class="variable">testBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;testBean&quot;</span>,TestBean.class);</span><br><span class="line">        <span class="comment">//获取ResourceLoader对象</span></span><br><span class="line">        <span class="type">ResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> testBean.getResourceLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;Spring容器将自身注入到ResourceLoaderAware Bean 中 ？ ：&quot;</span> + (resourceLoader == ctx));</span><br><span class="line">        <span class="comment">//加载其他资源</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> resourceLoader.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">        System.out.println(resource.getFilename());</span><br><span class="line">        System.out.println(resource.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-7、使用Resource-作为属性"><a href="#8-7、使用Resource-作为属性" class="headerlink" title="8.7、使用Resource 作为属性"></a>8.7、使用Resource 作为属性</h3><p>前面介绍了 Spring 提供的资源访问策略，但这些依赖访问策略要么需要使用 Resource 实现类，要么需要使用 ApplicationContext 来获取资源。实际上，当应用程序中的 Bean 实例需要访问资源时，Spring 有更好的解决方法：直接利用依赖注入。从这个意义上来看，Spring 框架不仅充分利用了策略模式来简化资源访问，而且还将策略模式和 IoC 进行充分地结合，最大程度地简化了 Spring 资源访问。</p>
<p>归纳起来，<strong>如果 Bean 实例需要访问资源，有如下两种解决方案：</strong></p>
<ul>
<li><strong>代码中获取 Resource 实例。</strong></li>
<li><strong>使用依赖注入。</strong></li>
</ul>
<p>对于第一种方式，当程序获取 Resource 实例时，总需要提供 Resource 所在的位置，不管通过 FileSystemResource 创建实例，还是通过 ClassPathResource 创建实例，或者通过 ApplicationContext 的 getResource() 方法获取实例，都需要提供资源位置。这意味着：资源所在的物理位置将被耦合到代码中，如果资源位置发生改变，则必须改写程序。因此，通常建议采用第二种方法，让 Spring 为 Bean 实例<strong>依赖注入</strong>资源。</p>
<p><strong>实验：让Spring为Bean实例依赖注入资源</strong></p>
<p><strong>第一步 创建依赖注入类，定义属性和方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resouceloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Resource res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRes</span><span class="params">(Resource res)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.res = res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">getRes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(res.getFilename());</span><br><span class="line">        System.out.println(res.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步 创建spring配置文件，配置依赖注入</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;resourceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring6.resouceloader.ResourceBean&quot;</span> &gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 可以使用file:、http:、ftp:等前缀强制Spring采用对应的资源访问策略 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果不采用任何前缀，则Spring将采用与该ApplicationContext相同的资源访问策略来访问资源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;res&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:atguigu.txt&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第三步 测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.resouceloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="type">ResourceBean</span> <span class="variable">resourceBean</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;resourceBean&quot;</span>,ResourceBean.class);</span><br><span class="line">        resourceBean.parse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-8、应用程序上下文和资源路径"><a href="#8-8、应用程序上下文和资源路径" class="headerlink" title="8.8、应用程序上下文和资源路径"></a>8.8、应用程序上下文和资源路径</h3><h4 id="8-8-1、概述"><a href="#8-8-1、概述" class="headerlink" title="8.8.1、概述"></a>8.8.1、概述</h4><p>不管以怎样的方式创建ApplicationContext实例，都需要为ApplicationContext指定配置文件，Spring允许使用一份或多分XML配置文件。当程序创建ApplicationContext实例时，通常也是以Resource的方式来访问配置文件的，所以ApplicationContext完全支持ClassPathResource、FileSystemResource、ServletContextResource等资源访问方式。</p>
<p><strong>ApplicationContext确定资源访问策略通常有两种方法：</strong></p>
<p><strong>（1）使用ApplicationContext实现类指定访问策略。</strong></p>
<p><strong>（2）使用前缀指定访问策略。</strong></p>
<h4 id="8-8-2、ApplicationContext实现类指定访问策略"><a href="#8-8-2、ApplicationContext实现类指定访问策略" class="headerlink" title="8.8.2、ApplicationContext实现类指定访问策略"></a>8.8.2、ApplicationContext实现类指定访问策略</h4><p>创建ApplicationContext对象时，通常可以使用如下实现类：</p>
<p>（1） ClassPathXMLApplicationContext : 对应使用ClassPathResource进行资源访问。</p>
<p>（2）FileSystemXmlApplicationContext ： 对应使用FileSystemResource进行资源访问。</p>
<p>（3）XmlWebApplicationContext ： 对应使用ServletContextResource进行资源访问。</p>
<p>当使用ApplicationContext的不同实现类时，就意味着Spring使用响应的资源访问策略。</p>
<p>效果前面已经演示</p>
<h4 id="8-8-3、使用前缀指定访问策略"><a href="#8-8-3、使用前缀指定访问策略" class="headerlink" title="8.8.3、使用前缀指定访问策略"></a>8.8.3、使用前缀指定访问策略</h4><p><strong>实验一：classpath前缀使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 通过搜索文件系统路径下的xml文件创建ApplicationContext，</span></span><br><span class="line"><span class="comment">         * 但通过指定classpath:前缀强制搜索类加载路径</span></span><br><span class="line"><span class="comment">         * classpath:bean.xml</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:bean.xml&quot;</span>);</span><br><span class="line">        System.out.println(ctx);</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> ctx.getResource(<span class="string">&quot;atguigu.txt&quot;</span>);</span><br><span class="line">        System.out.println(resource.getFilename());</span><br><span class="line">        System.out.println(resource.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>实验二：classpath通配符使用</strong></p>
<p>classpath * :前缀提供了加载多个XML配置文件的能力，当使用classpath*:前缀来指定XML配置文件时，系统将搜索类加载路径，找到所有与文件名匹配的文件，分别加载文件中的配置定义，最后合并成一个ApplicationContext。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath*:bean.xml&quot;</span>);</span><br><span class="line">System.out.println(ctx);</span><br></pre></td></tr></table></figure>

<p>当使用classpath * :前缀时，Spring将会搜索类加载路径下所有满足该规则的配置文件。</p>
<p>如果不是采用classpath * :前缀，而是改为使用classpath:前缀，Spring则只加载第一个符合条件的XML文件</p>
<p><strong>注意 ：</strong> </p>
<p>classpath * : 前缀仅对ApplicationContext有效。实际情况是，创建ApplicationContext时，分别访问多个配置文件(通过ClassLoader的getResource方法实现)。因此，classpath * :前缀不可用于Resource。</p>
<p><strong>使用三：通配符其他使用</strong></p>
<p>一次性加载多个配置文件的方式：指定配置文件时使用通配符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:bean*.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>Spring允许将classpath*:前缀和通配符结合使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath*:bean*.xml&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="9、国际化：i18n-TODO不用"><a href="#9、国际化：i18n-TODO不用" class="headerlink" title="9、国际化：i18n &#x2F;&#x2F;TODO不用"></a>9、国际化：i18n &#x2F;&#x2F;TODO不用</h2><p><img src="https://blog-resources.this0.com/image/202403301657060.png?x-oss-process=style/this0-blog" alt="image-20221218154728062"></p>
<h3 id="9-1、i18n概述"><a href="#9-1、i18n概述" class="headerlink" title="9.1、i18n概述"></a>9.1、i18n概述</h3><p>国际化也称作i18n，其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数。由于软件发行可能面向多个国家，对于不同国家的用户，软件显示不同语言的过程就是国际化。通常来讲，软件中的国际化是通过配置文件来实现的，假设要支撑两种语言，那么就需要两个版本的配置文件。</p>
<h3 id="9-2、Java国际化"><a href="#9-2、Java国际化" class="headerlink" title="9.2、Java国际化"></a>9.2、Java国际化</h3><p>（1）Java自身是支持国际化的，java.util.Locale用于指定当前用户所属的语言环境等信息，java.util.ResourceBundle用于查找绑定对应的资源文件。Locale包含了language信息和country信息，Locale创建默认locale对象时使用的静态方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method must be called only for creating the Locale.*</span></span><br><span class="line"><span class="comment"> * constants due to making shortcuts.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Locale <span class="title function_">createConstant</span><span class="params">(String lang, String country)</span> &#123;</span><br><span class="line">    <span class="type">BaseLocale</span> <span class="variable">base</span> <span class="operator">=</span> BaseLocale.createInstance(lang, country);</span><br><span class="line">    <span class="keyword">return</span> getInstance(base, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）配置文件命名规则：<br> <strong>basename_language_country.properties</strong><br> 必须遵循以上的命名规则，java才会识别。其中，basename是必须的，语言和国家是可选的。这里存在一个优先级概念，如果同时提供了messages.properties和messages_zh_CN.propertes两个配置文件，如果提供的locale符合en_CN，那么优先查找messages_en_CN.propertes配置文件，如果没查找到，再查找messages.properties配置文件。最后，提示下，所有的配置文件必须放在classpath中，一般放在resources目录下</p>
<p><strong>（3）实验：演示Java国际化</strong></p>
<p><strong>第一步 创建子模块spring6-i18n，引入spring依赖</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301657256.png?x-oss-process=style/this0-blog" alt="image-20221207122500801"></p>
<p><strong>第二步 在resource目录下创建两个配置文件：messages_zh_CN.propertes和messages_en_GB.propertes</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301657168.png?x-oss-process=style/this0-blog" alt="image-20221207124839565"></p>
<p><strong>第三步 测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.javai18n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(ResourceBundle.getBundle(<span class="string">&quot;messages&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Locale</span>(<span class="string">&quot;en&quot;</span>,<span class="string">&quot;GB&quot;</span>)).getString(<span class="string">&quot;test&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(ResourceBundle.getBundle(<span class="string">&quot;messages&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Locale</span>(<span class="string">&quot;zh&quot;</span>,<span class="string">&quot;CN&quot;</span>)).getString(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="9-3、Spring6国际化"><a href="#9-3、Spring6国际化" class="headerlink" title="9.3、Spring6国际化"></a>9.3、Spring6国际化</h3><h4 id="9-3-1、MessageSource接口"><a href="#9-3-1、MessageSource接口" class="headerlink" title="9.3.1、MessageSource接口"></a>9.3.1、MessageSource接口</h4><p>spring中国际化是通过MessageSource这个接口来支持的</p>
<p><strong>常见实现类</strong></p>
<p><strong>ResourceBundleMessageSource</strong></p>
<p>这个是基于Java的ResourceBundle基础类实现，允许仅通过资源名加载国际化资源</p>
<p><strong>ReloadableResourceBundleMessageSource</strong></p>
<p>这个功能和第一个类的功能类似，多了定时刷新功能，允许在不重启系统的情况下，更新资源的信息</p>
<p><strong>StaticMessageSource</strong></p>
<p>它允许通过编程的方式提供国际化信息，一会我们可以通过这个来实现db中存储国际化信息的功能。</p>
<h4 id="9-3-2、使用Spring6国际化"><a href="#9-3-2、使用Spring6国际化" class="headerlink" title="9.3.2、使用Spring6国际化"></a>9.3.2、使用Spring6国际化</h4><p><strong>第一步 创建资源文件</strong></p>
<p><strong>国际化文件命名格式：基本名称 _ 语言 _ 国家.properties</strong></p>
<p><strong>{0},{1}这样内容，就是动态参数</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301657189.png?x-oss-process=style/this0-blog" alt="image-20221207140024056"></p>
<p><strong>（1）创建atguigu_en_US.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">www.atguigu.com</span>=<span class="string">welcome &#123;0&#125;,时间:&#123;1&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>（2）创建atguigu_zh_CN.properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">www.atguigu.com</span>=<span class="string">欢迎 &#123;0&#125;,时间:&#123;1&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>第二步 创建spring配置文件，配置MessageSource</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basenames&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>atguigu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>第三步 创建测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.javai18n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//传递动态参数，使用数组形式对应&#123;0&#125; &#123;1&#125;顺序</span></span><br><span class="line">        Object[] objs = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;atguigu&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().toString()&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//www.atguigu.com为资源文件的key值,</span></span><br><span class="line">        <span class="comment">//objs为资源文件value值所需要的参数,Local.CHINA为国际化为语言</span></span><br><span class="line">        String str=context.getMessage(<span class="string">&quot;www.atguigu.com&quot;</span>, objs, Locale.CHINA);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="10、数据校验：Validation-TODO不用"><a href="#10、数据校验：Validation-TODO不用" class="headerlink" title="10、数据校验：Validation&#x2F;&#x2F;TODO不用"></a>10、数据校验：Validation&#x2F;&#x2F;TODO不用</h2><p><img src="https://blog-resources.this0.com/image/202403301657395.png?x-oss-process=style/this0-blog" alt="image-20221218154808754"></p>
<h3 id="10-1、Spring-Validation概述"><a href="#10-1、Spring-Validation概述" class="headerlink" title="10.1、Spring Validation概述"></a>10.1、Spring Validation概述</h3><p><img src="https://blog-resources.this0.com/image/202403301657398.png?x-oss-process=style/this0-blog" alt="image-20221206220207266"></p>
<p>在开发中，我们经常遇到参数校验的需求，比如用户注册的时候，要校验用户名不能为空、用户名长度不超过20个字符、手机号是合法的手机号格式等等。如果使用普通方式，我们会把校验的代码和真正的业务处理逻辑耦合在一起，而且如果未来要新增一种校验逻辑也需要在修改多个地方。而spring validation允许通过注解的方式来定义对象校验规则，把校验和业务逻辑分离开，让代码编写更加方便。Spring Validation其实就是对Hibernate Validator进一步的封装，方便在Spring中使用。</p>
<p>在Spring中有多种校验的方式</p>
<p><strong>第一种是通过实现org.springframework.validation.Validator接口，然后在代码中调用这个类</strong></p>
<p><strong>第二种是按照Bean Validation方式来进行校验，即通过注解的方式。</strong></p>
<p><strong>第三种是基于方法实现校验</strong></p>
<p><strong>除此之外，还可以实现自定义校验</strong></p>
<h3 id="10-2、实验一：通过Validator接口实现"><a href="#10-2、实验一：通过Validator接口实现" class="headerlink" title="10.2、实验一：通过Validator接口实现"></a>10.2、实验一：通过Validator接口实现</h3><p><strong>第一步 创建子模块 spring6-validator</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301658548.png?x-oss-process=style/this0-blog" alt="image-20221206221002615"></p>
<p><strong>第二步 引入相关依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>第三步 创建实体类，定义属性和方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>第四步 创建类实现Validator接口，实现接口方法指定校验规则</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ValidationUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonValidator</span> <span class="keyword">implements</span> <span class="title class_">Validator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Person.class.equals(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validate</span><span class="params">(Object object, Errors errors)</span> &#123;</span><br><span class="line">        ValidationUtils.rejectIfEmpty(errors, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;name.empty&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) object;</span><br><span class="line">        <span class="keyword">if</span> (p.getAge() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            errors.rejectValue(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;error value &lt; 0&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.getAge() &gt; <span class="number">110</span>) &#123;</span><br><span class="line">            errors.rejectValue(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;error value too old&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面定义的类，其实就是实现接口中对应的方法，</p>
<p>supports方法用来表示此校验用在哪个类型上，</p>
<p>validate是设置校验逻辑的地点，其中ValidationUtils，是Spring封装的校验工具类，帮助快速实现校验。</p>
<p><strong>第五步 使用上述Validator进行测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.DataBinder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建person对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        person.setAge(-<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建Person对应的DataBinder</span></span><br><span class="line">        <span class="type">DataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBinder</span>(person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置校验</span></span><br><span class="line">        binder.setValidator(<span class="keyword">new</span> <span class="title class_">PersonValidator</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 由于Person对象中的属性为空，所以校验不通过</span></span><br><span class="line">        binder.validate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">results</span> <span class="operator">=</span> binder.getBindingResult();</span><br><span class="line">        System.out.println(results.getAllErrors());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="10-3、实验二：Bean-Validation注解实现"><a href="#10-3、实验二：Bean-Validation注解实现" class="headerlink" title="10.3、实验二：Bean Validation注解实现"></a>10.3、实验二：Bean Validation注解实现</h3><p>使用Bean Validation校验方式，就是如何将Bean Validation需要使用的javax.validation.ValidatorFactory 和javax.validation.Validator注入到容器中。spring默认有一个实现类LocalValidatorFactoryBean，它实现了上面Bean Validation中的接口，并且也实现了org.springframework.validation.Validator接口。</p>
<p><strong>第一步 创建配置类，配置LocalValidatorFactoryBean</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6.validation.method2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LocalValidatorFactoryBean <span class="title function_">validator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LocalValidatorFactoryBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>第二步 创建实体类，使用注解定义校验规则</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Max;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(0)</span></span><br><span class="line">    <span class="meta">@Max(120)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>常用注解说明</strong><br>@NotNull	限制必须不为null<br>@NotEmpty	只作用于字符串类型，字符串不为空，并且长度不为0<br>@NotBlank	只作用于字符串类型，字符串不为空，并且trim()后不为空串<br>@DecimalMax(value)	限制必须为一个不大于指定值的数字<br>@DecimalMin(value)	限制必须为一个不小于指定值的数字<br>@Max(value)	限制必须为一个不大于指定值的数字<br>@Min(value)	限制必须为一个不小于指定值的数字<br>@Pattern(value)	限制必须符合指定的正则表达式<br>@Size(max,min)	限制字符长度必须在min到max之间<br>@Email	验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</p>
<p><strong>第三步 使用两种不同的校验器实现</strong></p>
<p><strong>（1）使用jakarta.validation.Validator校验</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Validator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">validator</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;User&gt;&gt; sets =  validator.validate(user);</span><br><span class="line">        <span class="keyword">return</span> sets.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（2）使用org.springframework.validation.Validator校验</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validaPersonByValidator</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">BindException</span> <span class="variable">bindException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BindException</span>(user, user.getName());</span><br><span class="line">        validator.validate(user, bindException);</span><br><span class="line">        <span class="keyword">return</span> bindException.hasErrors();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>第四步 测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">        <span class="type">MyService1</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService1.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validator</span> <span class="operator">=</span> myService.validator(user);</span><br><span class="line">        System.out.println(validator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">        <span class="type">MyService2</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService2.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">130</span>);</span><br><span class="line">        user.setAge(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">validator</span> <span class="operator">=</span> myService.validaPersonByValidator(user);</span><br><span class="line">        System.out.println(validator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="10-4、实验三：基于方法实现校验"><a href="#10-4、实验三：基于方法实现校验" class="headerlink" title="10.4、实验三：基于方法实现校验"></a>10.4、实验三：基于方法实现校验</h3><p><strong>第一步 创建配置类，配置MethodValidationPostProcessor</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.beanvalidation.MethodValidationPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.spring6.validation.method3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MethodValidationPostProcessor <span class="title function_">validationPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MethodValidationPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步 创建实体类，使用注解设置校验规则</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(0)</span></span><br><span class="line">    <span class="meta">@Max(120)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^1(3|4|5|7|8)\\d&#123;9&#125;$&quot;,message = &quot;手机号码格式错误&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;手机号码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第三步 定义Service类，通过注解操作对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testParams</span><span class="params">(<span class="meta">@NotNull</span> <span class="meta">@Valid</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第四步 测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyService1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ValidationConfig.class);</span><br><span class="line">        <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> context.getBean(MyService.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(-<span class="number">1</span>);</span><br><span class="line">        myService.testParams(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="10-5、实验四：实现自定义校验"><a href="#10-5、实验四：实现自定义校验" class="headerlink" title="10.5、实验四：实现自定义校验"></a>10.5、实验四：实现自定义校验</h3><p><strong>第一步 自定义校验注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;CannotBlankValidator.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CannotBlank &#123;</span><br><span class="line">    <span class="comment">//默认错误消息</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;不能包含空格&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分组</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//负载</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定多个时使用</span></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@interface</span> List &#123;</span><br><span class="line">        CannotBlank[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步 编写真正的校验类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring6.validation.method4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.ConstraintValidatorContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CannotBlankValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;CannotBlank, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(CannotBlank constraintAnnotation)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line">                <span class="comment">//null时不进行校验</span></span><br><span class="line">                <span class="keyword">if</span> (value != <span class="literal">null</span> &amp;&amp; value.contains(<span class="string">&quot; &quot;</span>)) &#123;</span><br><span class="line">                        <span class="comment">//获取默认提示信息</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">defaultConstraintMessageTemplate</span> <span class="operator">=</span> context.getDefaultConstraintMessageTemplate();</span><br><span class="line">                        System.out.println(<span class="string">&quot;default message :&quot;</span> + defaultConstraintMessageTemplate);</span><br><span class="line">                        <span class="comment">//禁用默认提示信息</span></span><br><span class="line">                        context.disableDefaultConstraintViolation();</span><br><span class="line">                        <span class="comment">//设置提示语</span></span><br><span class="line">                        context.buildConstraintViolationWithTemplate(<span class="string">&quot;can not contains blank&quot;</span>).addConstraintViolation();</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="11、提前编译：AOT-TODO不用"><a href="#11、提前编译：AOT-TODO不用" class="headerlink" title="11、提前编译：AOT&#x2F;&#x2F;TODO不用"></a>11、提前编译：AOT&#x2F;&#x2F;TODO不用</h2><p><img src="https://blog-resources.this0.com/image/202403301658586.png?x-oss-process=style/this0-blog" alt="image-20221218154841001"></p>
<h3 id="11-1、AOT概述"><a href="#11-1、AOT概述" class="headerlink" title="11.1、AOT概述"></a>11.1、AOT概述</h3><h4 id="11-1-1、JIT与AOT的区别"><a href="#11-1-1、JIT与AOT的区别" class="headerlink" title="11.1.1、JIT与AOT的区别"></a>11.1.1、JIT与AOT的区别</h4><p>JIT和AOT 这个名词是指两种不同的编译方式，这两种编译方式的主要区别在于是否在“运行时”进行编译</p>
<p><strong>（1）JIT， Just-in-time,动态(即时)编译，边运行边编译；</strong></p>
<p>在程序运行时，根据算法计算出热点代码，然后进行 JIT 实时编译，这种方式吞吐量高，有运行时性能加成，可以跑得更快，并可以做到动态生成代码等，但是相对启动速度较慢，并需要一定时间和调用频率才能触发 JIT 的分层机制。JIT 缺点就是编译需要占用运行时资源，会导致进程卡顿。</p>
<p><strong>（2）AOT，Ahead Of Time，指运行前编译，预先编译。</strong></p>
<p>AOT 编译能直接将源代码转化为机器码，内存占用低，启动速度快，可以无需 runtime 运行，直接将 runtime 静态链接至最终的程序中，但是无运行时性能加成，不能根据程序运行情况做进一步的优化，AOT 缺点就是在程序运行前编译会使程序安装的时间增加。                                                           </p>
<p><strong>简单来讲：</strong>JIT即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而 AOT 编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">.java -&gt; .<span class="keyword">class</span> -&gt; <span class="function"><span class="params">(使用jaotc编译工具)</span> -&gt;</span> .so（程序函数库,即编译好的可以供其他程序使用的代码和数据）</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403301658741.png?x-oss-process=style/this0-blog" alt="image-20221207113544080"></p>
<p><strong>（3）AOT的优点</strong></p>
<p><strong>简单来讲，</strong>Java 虚拟机加载已经预编译成二进制库，可以直接执行。不必等待及时编译器的预热，减少 Java 应用给人带来“第一次运行慢” 的不良体验。</p>
<p>在程序运行前编译，可以避免在运行时的编译性能消耗和内存消耗<br>可以在程序运行初期就达到最高性能，程序启动速度快<br>运行产物只有机器码，打包体积小</p>
<p><strong>AOT的缺点</strong></p>
<p>由于是静态提前编译，不能根据硬件情况或程序运行情况择优选择机器指令序列，理论峰值性能不如JIT<br>没有动态能力，同一份产物不能跨平台运行</p>
<p>第一种即时编译 (JIT) 是默认模式，Java Hotspot 虚拟机使用它在运行时将字节码转换为机器码。后者提前编译 (AOT)由新颖的 GraalVM 编译器支持，并允许在构建时将字节码直接静态编译为机器码。</p>
<p>现在正处于云原生，降本增效的时代，Java 相比于 Go、Rust 等其他编程语言非常大的弊端就是启动编译和启动进程非常慢，这对于根据实时计算资源，弹性扩缩容的云原生技术相冲突，Spring6 借助 AOT 技术在运行时内存占用低，启动速度快，逐渐的来满足 Java 在云原生时代的需求，对于大规模使用 Java 应用的商业公司可以考虑尽早调研使用 JDK17，通过云原生技术为公司实现降本增效。</p>
<h4 id="11-1-2、Graalvm"><a href="#11-1-2、Graalvm" class="headerlink" title="11.1.2、Graalvm"></a>11.1.2、Graalvm</h4><p>Spring6 支持的 AOT 技术，这个 GraalVM  就是底层的支持，Spring 也对 GraalVM 本机映像提供了一流的支持。GraalVM 是一种高性能 JDK，旨在加速用 Java 和其他 JVM 语言编写的应用程序的执行，同时还为 JavaScript、Python 和许多其他流行语言提供运行时。 GraalVM 提供两种运行 Java 应用程序的方法：在 HotSpot JVM 上使用 Graal 即时 (JIT) 编译器或作为提前 (AOT) 编译的本机可执行文件。 GraalVM 的多语言能力使得在单个应用程序中混合多种编程语言成为可能，同时消除了外语调用成本。GraalVM 向 HotSpot Java 虚拟机添加了一个用 Java 编写的高级即时 (JIT) 优化编译器。</p>
<p>GraalVM 具有以下特性：</p>
<p>（1）一种高级优化编译器，它生成更快、更精简的代码，需要更少的计算资源</p>
<p>（2）AOT 本机图像编译提前将 Java 应用程序编译为本机二进制文件，立即启动，无需预热即可实现最高性能</p>
<p>（3）Polyglot 编程在单个应用程序中利用流行语言的最佳功能和库，无需额外开销</p>
<p>（4）高级工具在 Java 和多种语言中调试、监视、分析和优化资源消耗</p>
<p>总的来说对云原生的要求不算高短期内可以继续使用 2.7.X 的版本和 JDK8，不过 Spring 官方已经对 Spring6 进行了正式版发布。</p>
<h4 id="11-1-3、Native-Image"><a href="#11-1-3、Native-Image" class="headerlink" title="11.1.3、Native Image"></a>11.1.3、Native Image</h4><p>目前业界除了这种在JVM中进行AOT的方案，还有另外一种实现Java AOT的思路，那就是直接摒弃JVM，和C&#x2F;C++一样通过编译器直接将代码编译成机器代码，然后运行。这无疑是一种直接颠覆Java语言设计的思路，那就是GraalVM Native Image。它通过C语言实现了一个超微缩的运行时组件 —— Substrate VM，基本实现了JVM的各种特性，但足够轻量、可以被轻松内嵌，这就让Java语言和工程摆脱JVM的限制，能够真正意义上实现和C&#x2F;C++一样的AOT编译。这一方案在经过长时间的优化和积累后，已经拥有非常不错的效果，基本上成为Oracle官方首推的Java AOT解决方案。<br>Native Image 是一项创新技术，可将 Java 代码编译成独立的本机可执行文件或本机共享库。在构建本机可执行文件期间处理的 Java 字节码包括所有应用程序类、依赖项、第三方依赖库和任何所需的 JDK 类。生成的自包含本机可执行文件特定于不需要 JVM 的每个单独的操作系统和机器体系结构。</p>
<h3 id="11-2、演示Native-Image构建过程"><a href="#11-2、演示Native-Image构建过程" class="headerlink" title="11.2、演示Native Image构建过程"></a>11.2、演示Native Image构建过程</h3><h4 id="11-2-1、GraalVM安装"><a href="#11-2-1、GraalVM安装" class="headerlink" title="11.2.1、GraalVM安装"></a>11.2.1、GraalVM安装</h4><h5 id="（1）下载GraalVM"><a href="#（1）下载GraalVM" class="headerlink" title="（1）下载GraalVM"></a>（1）下载GraalVM</h5><p>进入官网下载：<a href="https://www.graalvm.org/downloads/">https://www.graalvm.org/downloads/</a></p>
<p><img src="https://blog-resources.this0.com/image/202403301658995.png?x-oss-process=style/this0-blog" alt="image-20221207153944132"></p>
<p><img src="https://blog-resources.this0.com/image/202403301658871.png?x-oss-process=style/this0-blog" alt="image-20221207152841304"></p>
<h5 id="（2）配置环境变量"><a href="#（2）配置环境变量" class="headerlink" title="（2）配置环境变量"></a>（2）配置环境变量</h5><p><strong>添加GRAALVM_HOME</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301658740.png?x-oss-process=style/this0-blog" alt="image-20221207110539954"></p>
<p><strong>把JAVA_HOME修改为graalvm的位置</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301658978.png?x-oss-process=style/this0-blog" alt="image-20221207153724340"></p>
<p><strong>把Path修改位graalvm的bin位置</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301658856.png?x-oss-process=style/this0-blog" alt="image-20221207153755732"></p>
<p><strong>使用命令查看是否安装成功</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301658982.png?x-oss-process=style/this0-blog" alt="image-20221207153642253"></p>
<h5 id="（3）安装native-image插件"><a href="#（3）安装native-image插件" class="headerlink" title="（3）安装native-image插件"></a>（3）安装native-image插件</h5><p><strong>使用命令 gu install native-image下载安装</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301658109.png?x-oss-process=style/this0-blog" alt="image-20221207155009832"></p>
<h4 id="11-2-2、安装C-的编译环境"><a href="#11-2-2、安装C-的编译环境" class="headerlink" title="11.2.2、安装C++的编译环境"></a>11.2.2、安装C++的编译环境</h4><h5 id="（1）下载Visual-Studio安装软件"><a href="#（1）下载Visual-Studio安装软件" class="headerlink" title="（1）下载Visual Studio安装软件"></a>（1）下载Visual Studio安装软件</h5><p><a href="https://visualstudio.microsoft.com/zh-hans/downloads/">https://visualstudio.microsoft.com/zh-hans/downloads/</a></p>
<p><img src="https://blog-resources.this0.com/image/202403301658152.png?x-oss-process=style/this0-blog" alt="image-20221219112426052"></p>
<h5 id="（2）安装Visual-Studio"><a href="#（2）安装Visual-Studio" class="headerlink" title="（2）安装Visual Studio"></a>（2）安装Visual Studio</h5><p><img src="https://blog-resources.this0.com/image/202403301658220.png?x-oss-process=style/this0-blog" alt="image-20221207155726572"></p>
<p><img src="https://blog-resources.this0.com/image/202403301658231.png?x-oss-process=style/this0-blog" alt="image-20221207155756512"></p>
<h5 id="（3）添加Visual-Studio环境变量"><a href="#（3）添加Visual-Studio环境变量" class="headerlink" title="（3）添加Visual Studio环境变量"></a>（3）添加Visual Studio环境变量</h5><p>配置INCLUDE、LIB和Path</p>
<p><img src="https://blog-resources.this0.com/image/202403301658327.png?x-oss-process=style/this0-blog" alt="image-20221207110947997"></p>
<p><img src="https://blog-resources.this0.com/image/202403301658263.png?x-oss-process=style/this0-blog" alt="image-20221207111012582"></p>
<p><img src="https://blog-resources.this0.com/image/202403301658397.png?x-oss-process=style/this0-blog" alt="image-20221207111105569"></p>
<h5 id="（4）打开工具，在工具中操作"><a href="#（4）打开工具，在工具中操作" class="headerlink" title="（4）打开工具，在工具中操作"></a>（4）打开工具，在工具中操作</h5><p><img src="https://blog-resources.this0.com/image/202403301658504.png?x-oss-process=style/this0-blog" alt="image-20221207111206279"></p>
<h4 id="11-2-3、编写代码，构建Native-Image"><a href="#11-2-3、编写代码，构建Native-Image" class="headerlink" title="11.2.3、编写代码，构建Native Image"></a>11.2.3、编写代码，构建Native Image</h4><h5 id="（1）编写Java代码"><a href="#（1）编写Java代码" class="headerlink" title="（1）编写Java代码"></a>（1）编写Java代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="（2）复制文件到目录，执行编译"><a href="#（2）复制文件到目录，执行编译" class="headerlink" title="（2）复制文件到目录，执行编译"></a>（2）复制文件到目录，执行编译</h5><p><img src="https://blog-resources.this0.com/image/202403301658592.png?x-oss-process=style/this0-blog" alt="image-20221207111420056"></p>
<h5 id="（3）Native-Image-进行构建"><a href="#（3）Native-Image-进行构建" class="headerlink" title="（3）Native Image 进行构建"></a>（3）Native Image 进行构建</h5><p><img src="https://blog-resources.this0.com/image/202403301658650.png?x-oss-process=style/this0-blog" alt="image-20221207111509837"></p>
<p><img src="https://blog-resources.this0.com/image/202403301658652.png?x-oss-process=style/this0-blog" alt="image-20221207111609878"></p>
<h5 id="（4）查看构建的文件"><a href="#（4）查看构建的文件" class="headerlink" title="（4）查看构建的文件"></a>（4）查看构建的文件</h5><p><img src="https://blog-resources.this0.com/image/202403301658721.png?x-oss-process=style/this0-blog" alt="image-20221207111644950"></p>
<h5 id="（5）执行构建的文件"><a href="#（5）执行构建的文件" class="headerlink" title="（5）执行构建的文件"></a>（5）执行构建的文件</h5><p><img src="https://blog-resources.this0.com/image/202403301658715.png?x-oss-process=style/this0-blog" alt="image-20221207111731150"></p>
<p>可以看到这个Hello最终打包产出的二进制文件大小为11M，这是包含了SVM和JDK各种库后的大小，虽然相比C&#x2F;C++的二进制文件来说体积偏大，但是对比完整JVM来说，可以说是已经是非常小了。</p>
<p>相比于使用JVM运行，Native Image的速度要快上不少，cpu占用也更低一些，从官方提供的各类实验数据也可以看出Native Image对于启动速度和内存占用带来的提升是非常显著的：</p>
<p><img src="https://blog-resources.this0.com/image/202403301658929.png?x-oss-process=style/this0-blog" alt="image-20221207111947283"></p>
<p><img src="https://blog-resources.this0.com/image/202403301658214.png?x-oss-process=style/this0-blog" alt="image-20221207112009852"></p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>SpringFramework</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/articles/da3e1361.html</url>
    <content><![CDATA[<h1 id="MyBatis实践：提高持久层数据处理效率"><a href="#MyBatis实践：提高持久层数据处理效率" class="headerlink" title="MyBatis实践：提高持久层数据处理效率"></a>MyBatis实践：提高持久层数据处理效率</h1><p>代码在我的<a href="https://github.com/baifengxiao/SSM.git">SSM仓库</a>，</p>
<p>需要这些表</p>
<p><img src="https://blog-resources.this0.com/image/202405112003394.png?x-oss-process=style/this0-blog" alt="image-20240307010620112"></p>
<h2 id="一、Mybatis简介"><a href="#一、Mybatis简介" class="headerlink" title="一、Mybatis简介"></a>一、Mybatis简介</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p><a href="https://github.com/mybatis">https://github.com/mybatis</a></p>
<p>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github。</p>
<p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<p><img src="https://blog-resources.this0.com/image/202405112003311.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>社区会持续更新开源项目，版本会不断变化，我们不必每个小版本都追，关注重大更新的大版本升级即可。</p>
</blockquote>
<p>本课程使用：3.5.11版本</p>
<h3 id="1-2-持久层框架对比"><a href="#1-2-持久层框架对比" class="headerlink" title="1.2 持久层框架对比"></a>1.2 持久层框架对比</h3><ul>
<li>JDBC<ul>
<li>SQL 夹杂在Java代码中<code>耦合度高</code>，导致硬编码内伤</li>
<li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li>
<li>代码<code>冗长</code>，开发效率低</li>
</ul>
</li>
<li>Hibernate 和 JPA<ul>
<li>操作简便，开发效率高</li>
<li>程序中的长难复杂 SQL 需要绕过框架</li>
<li>内部自动生成的 SQL，不容易做特殊优化</li>
<li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li>
<li>反射操作太多，导致数据库性能下降</li>
</ul>
</li>
<li>MyBatis<ul>
<li>轻量级，性能出色</li>
<li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li>
<li>开发效率稍逊于 Hibernate，但是完全能够接收</li>
</ul>
</li>
</ul>
<p>开发效率：Hibernate&gt;Mybatis&gt;JDBC</p>
<p>运行效率：JDBC&gt;Mybatis&gt;Hibernate</p>
<h3 id="1-3-快速入门（基于Mybatis3方式）"><a href="#1-3-快速入门（基于Mybatis3方式）" class="headerlink" title="1.3 快速入门（基于Mybatis3方式）"></a>1.3 快速入门（基于Mybatis3方式）</h3><ol>
<li><p>准备数据模型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis<span class="operator">-</span>example`;</span><br><span class="line"></span><br><span class="line">USE `mybatis<span class="operator">-</span>example`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_emp`(</span><br><span class="line">  emp_id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">  emp_name <span class="type">CHAR</span>(<span class="number">100</span>),</span><br><span class="line">  emp_salary <span class="keyword">DOUBLE</span>(<span class="number">10</span>,<span class="number">5</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(emp_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_emp`(emp_name,emp_salary) <span class="keyword">VALUES</span>(&quot;tom&quot;,<span class="number">200.33</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_emp`(emp_name,emp_salary) <span class="keyword">VALUES</span>(&quot;jerry&quot;,<span class="number">666.66</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_emp`(emp_name,emp_salary) <span class="keyword">VALUES</span>(&quot;andy&quot;,<span class="number">777.77</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>项目搭建和准备</p>
<ol>
<li><p>项目搭建</p>
<p><img src="https://blog-resources.this0.com/image/202405112003273.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>依赖导入</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mybatis依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MySQL驱动 mybatis底层依赖jdbc驱动实现,本次不需要导入连接池,mybatis自带! --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>实体类准备</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double empSalary;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getter | setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>准备Mapper接口和MapperXML文件</p>
<p>MyBatis 框架下，SQL语句编写位置发生改变，从原来的Java类，改成<strong>XML</strong>或者注解定义！</p>
<p>推荐在XML文件中编写SQL语句，让用户能更专注于 SQL 代码，不用关注其他的JDBC代码。</p>
<p>如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码！！</p>
<p>一般编写SQL语句的文件命名：XxxMapper.xml  Xxx一般取表名！！</p>
<p>Mybatis 中的 Mapper 接口相当于以前的 Dao。但是区别在于，Mapper 仅仅只是建接口即可，我们不需要提供实现类，具体的SQL写到对应的Mapper文件，该用法的思路如下图所示：</p>
<p><img src="https://blog-resources.this0.com/image/202405112003258.png?x-oss-process=style/this0-blog"></p>
<ol>
<li><p>定义mapper接口</p>
<p>包：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.pojo.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">    Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义mapper xml</p>
<p>位置： resources&#x2F;mappers&#x2F;EmployeeMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace等于mapper接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.this0.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询使用 select标签</span></span><br><span class="line"><span class="comment">            id = 方法名</span></span><br><span class="line"><span class="comment">            resultType = 返回值类型</span></span><br><span class="line"><span class="comment">            标签内编写SQL语句</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.this0.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- #&#123;empId&#125;代表动态传入的参数,并且进行赋值!后面详细讲解 --&gt;</span></span><br><span class="line">        select emp_id empId,emp_name empName, emp_salary empSalary from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>之所以写成：emp_id empId,emp_name empName, emp_salary empSalary，是为了数据库字段和实体形成映射（一致）</code></p>
<p><strong>注意：</strong></p>
<ul>
<li>方法名和SQL的id一致</li>
<li>方法返回值和resultType一致</li>
<li>方法的参数和SQL的参数一致</li>
<li>接口的全类名和映射配置文件的名称空间一致</li>
</ul>
</li>
</ol>
</li>
<li><p>准备MyBatis配置文件</p>
<p>mybatis框架配置文件： 数据库连接信息，性能配置，mapper.xml配置等！</p>
<p>习惯上命名为 mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合 Spring 之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入MyBatis映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/EmployeeMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>上部所需的配置文件jdbc.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis-example</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行和测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> com.this0.pojo.Employee;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectEmployee</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="comment">// ①声明Mybatis全局配置文件的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mybatisConfigFilePath</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ②以输入流的形式加载Mybatis配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(mybatisConfigFilePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ③基于读取Mybatis配置文件的输入流创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.使用SqlSessionFactory对象开启一个会话</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.根据EmployeeMapper接口的Class对象获取Mapper接口类型的对象(动态代理技术)</span></span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 调用代理类方法既可以触发对应的SQL语句</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.selectEmployee(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;employee = &quot;</span> + employee);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.关闭SqlSession</span></span><br><span class="line">        session.commit(); <span class="comment">//提交事务 [DQL不需要,其他需要]</span></span><br><span class="line">        session.close(); <span class="comment">//关闭会话</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li>
<li>SqlSessionFactory：是“生产”SqlSession的“工厂”。</li>
<li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</li>
</ul>
</li>
<li><p>SqlSession和HttpSession区别</p>
<ul>
<li>HttpSession：工作在Web服务器上，属于表述层。<ul>
<li>代表浏览器和Web服务器之间的会话。</li>
</ul>
</li>
<li>SqlSession：不依赖Web服务器，属于持久化层。<ul>
<li>代表Java程序和数据库之间的会话。<br><img src="https://blog-resources.this0.com/image/202405112003292.png?x-oss-process=style/this0-blog"></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="二、MyBatis基本使用"><a href="#二、MyBatis基本使用" class="headerlink" title="二、MyBatis基本使用"></a>二、MyBatis基本使用</h2><h3 id="2-1-向SQL语句传参"><a href="#2-1-向SQL语句传参" class="headerlink" title="2.1 向SQL语句传参"></a>2.1 向SQL语句传参</h3><h4 id="2-1-1-mybatis日志输出配置"><a href="#2-1-1-mybatis日志输出配置" class="headerlink" title="2.1.1 mybatis日志输出配置"></a>2.1.1 <strong>mybatis日志输出配置</strong></h4><p>mybatis配置文件设计标签和顶层结构如下：</p>
<ul>
<li>configuration（配置）<ul>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties" title="properties（属性）">properties（属性）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" title="settings（设置）">settings（设置）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" title="typeAliases（类型别名）">typeAliases（类型别名）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" title="typeHandlers（类型处理器）">typeHandlers（类型处理器）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory" title="objectFactory（对象工厂）">objectFactory（对象工厂）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins" title="plugins（插件）">plugins（插件）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#environments" title="environments（环境配置）">environments（环境配置）</a><ul>
<li>environment（环境变量）<ul>
<li>transactionManager（事务管理器）</li>
<li>dataSource（数据源）</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider" title="databaseIdProvider（数据库厂商标识）">databaseIdProvider（数据库厂商标识）</a></li>
<li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers" title="mappers（映射器）">mappers（映射器）</a></li>
</ul>
</li>
</ul>
<p>我们可以在mybatis的配置文件使用<strong>settings标签</strong>设置，输出运行过程SQL日志！</p>
<p>通过查看日志，我们可以判定#{} 和 ${}的输出效果！</p>
<p>settings设置项：</p>
<table>
<thead>
<tr>
<th>logImpl</th>
<th>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</th>
<th>SLF4J | LOG4J（3.5.9 起废弃） | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</th>
<th>未设置</th>
</tr>
</thead>
</table>
<hr>
<p>暂时用不到的其他settings设置项：</p>
<table>
<thead>
<tr>
<th>设置名</th>
<th>描述</th>
<th>有效值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>cacheEnabled</td>
<td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td>
<td>true | false</td>
<td>true</td>
</tr>
<tr>
<td>lazyLoadingEnabled</td>
<td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td>
<td>true | false</td>
<td>false</td>
</tr>
<tr>
<td>aggressiveLazyLoading</td>
<td>开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td>
<td>true | false</td>
<td>false （在 3.4.1 及之前的版本中默认为 true）</td>
</tr>
<tr>
<td>multipleResultSetsEnabled</td>
<td>是否允许单个语句返回多结果集（需要数据库驱动支持）。</td>
<td>true | false</td>
<td>true</td>
</tr>
<tr>
<td>useColumnLabel</td>
<td>使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td>
<td>true | false</td>
<td>true</td>
</tr>
<tr>
<td>useGeneratedKeys</td>
<td>允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td>
<td>true | false</td>
<td>False</td>
</tr>
<tr>
<td>autoMappingBehavior</td>
<td>指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td>
<td>NONE, PARTIAL, FULL</td>
<td>PARTIAL</td>
</tr>
<tr>
<td>autoMappingUnknownColumnBehavior</td>
<td>指定发现自动映射目标未知列（或未知属性类型）的行为。 *   <code>NONE</code>: 不做任何反应 *   <code>WARNING</code>: 输出警告日志（<code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code> 的日志等级必须设置为 <code>WARN</code>） *   <code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td>
<td>NONE, WARNING, FAILING</td>
<td>NONE</td>
</tr>
<tr>
<td>defaultExecutorType</td>
<td>配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td>
<td>SIMPLE REUSE BATCH</td>
<td>SIMPLE</td>
</tr>
<tr>
<td>defaultStatementTimeout</td>
<td>设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td>
<td>任意正整数</td>
<td>未设置 (null)</td>
</tr>
<tr>
<td>defaultFetchSize</td>
<td>为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td>
<td>任意正整数</td>
<td>未设置 (null)</td>
</tr>
<tr>
<td>defaultResultSetType</td>
<td>指定语句默认的滚动策略。（新增于 3.5.2）</td>
<td>FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）</td>
<td>未设置 (null)</td>
</tr>
<tr>
<td>safeRowBoundsEnabled</td>
<td>是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td>
<td>true | false</td>
<td>False</td>
</tr>
<tr>
<td>safeResultHandlerEnabled</td>
<td>是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td>
<td>true | false</td>
<td>True</td>
</tr>
<tr>
<td>mapUnderscoreToCamelCase</td>
<td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td>
<td>true | false</td>
<td>False</td>
</tr>
<tr>
<td>localCacheScope</td>
<td>MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td>
<td>SESSION | STATEMENT</td>
<td>SESSION</td>
</tr>
<tr>
<td>jdbcTypeForNull</td>
<td>当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td>
<td>JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td>
<td>OTHER</td>
</tr>
<tr>
<td>lazyLoadTriggerMethods</td>
<td>指定对象的哪些方法触发一次延迟加载。</td>
<td>用逗号分隔的方法列表。</td>
<td>equals,clone,hashCode,toString</td>
</tr>
<tr>
<td>defaultScriptingLanguage</td>
<td>指定动态 SQL 生成使用的默认脚本语言。</td>
<td>一个类型别名或全限定类名。</td>
<td>org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td>
</tr>
<tr>
<td>defaultEnumTypeHandler</td>
<td>指定 Enum 使用的默认 <code>TypeHandler</code> 。（新增于 3.4.5）</td>
<td>一个类型别名或全限定类名。</td>
<td>org.apache.ibatis.type.EnumTypeHandler</td>
</tr>
<tr>
<td>callSettersOnNulls</td>
<td>指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td>
<td>true | false</td>
<td>false</td>
</tr>
<tr>
<td>returnInstanceForEmptyRow</td>
<td>当返回行的所有列都是空时，MyBatis默认返回 <code>null</code>。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td>
<td>true | false</td>
<td>false</td>
</tr>
<tr>
<td>logPrefix</td>
<td>指定 MyBatis 增加到日志名称的前缀。</td>
<td>任何字符串</td>
<td>未设置</td>
</tr>
<tr>
<td>logImpl</td>
<td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td>
<td>SLF4J | LOG4J（3.5.9 起废弃） | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td>
<td>未设置</td>
</tr>
<tr>
<td>proxyFactory</td>
<td>指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td>
<td>CGLIB （3.5.10 起废弃） | JAVASSIST</td>
<td>JAVASSIST （MyBatis 3.3 以上）</td>
</tr>
<tr>
<td>vfsImpl</td>
<td>指定 VFS 的实现</td>
<td>自定义 VFS 的实现的类全限定名，以逗号分隔。</td>
<td>未设置</td>
</tr>
<tr>
<td>useActualParamName</td>
<td>允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 <code>-parameters</code> 选项。（新增于 3.4.1）</td>
<td>true | false</td>
<td>true</td>
</tr>
<tr>
<td>configurationFactory</td>
<td>指定一个提供 <code>Configuration</code> 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为<code>static Configuration getConfiguration()</code> 的方法。（新增于 3.2.3）</td>
<td>一个类型别名或完全限定类名。</td>
<td>未设置</td>
</tr>
<tr>
<td>shrinkWhitespacesInSql</td>
<td>从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 (新增于 3.5.5)</td>
<td>true | false</td>
<td>false</td>
</tr>
<tr>
<td>defaultSqlProviderType</td>
<td>指定一个拥有 provider 方法的 sql provider 类 （新增于 3.5.6）. 这个类适用于指定 sql provider 注解上的<code>type</code>（或 <code>value</code>） 属性（当这些属性在注解中被忽略时）。 (e.g. <code>@SelectProvider</code>)</td>
<td>类型别名或者全限定名</td>
<td>未设置</td>
</tr>
<tr>
<td>nullableOnForEach</td>
<td>为 ‘foreach’ 标签的 ‘nullable’ 属性指定默认值。（新增于 3.5.9）</td>
<td>true | false</td>
<td>false</td>
</tr>
<tr>
<td>argNameBasedConstructorAutoMapping</td>
<td>当应用构造器自动映射时，参数名称被用来搜索要映射的列，而不再依赖列的顺序。（新增于 3.5.10）</td>
<td>true | false</td>
<td>false</td>
</tr>
</tbody></table>
<p>日志配置：</p>
<p><strong>最佳拍档</strong></p>
<ul>
<li>门面：<code>SLF4J</code></li>
<li>实现：<code>logback</code></li>
</ul>
<p>1.log4j2依赖:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--log4j2的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j2-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或logback依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 日志 ， 会自动传递slf4j门面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.log4j2配置文件，配置文件名不允许更改!</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            level指定日志级别，从低到高的优先级：</span></span><br><span class="line"><span class="comment">                TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span></span><br><span class="line"><span class="comment">                trace：追踪，是最低的日志级别，相当于追踪程序的执行</span></span><br><span class="line"><span class="comment">                debug：调试，一般在开发中，都将其设置为最低的日志级别</span></span><br><span class="line"><span class="comment">                info：信息，输出重要的信息，使用较多</span></span><br><span class="line"><span class="comment">                warn：警告，输出警告的信息</span></span><br><span class="line"><span class="comment">                error：错误，输出错误信息</span></span><br><span class="line"><span class="comment">                fatal：严重错误</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;spring6log&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;log&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出日志信息到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;spring6log&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制日志输出的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%t] %-3level %logger&#123;1024&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;log&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;d:/spring6_log/test.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的信息，</span></span><br><span class="line"><span class="comment">            每次大小超过size，</span></span><br><span class="line"><span class="comment">            则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，</span></span><br><span class="line"><span class="comment">            作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFile&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;d:/SDE_YPT/Data_YPT/logs/spring6_log/app.log&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">&quot;log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd &#x27;at&#x27; HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;50MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，</span></span><br><span class="line"><span class="comment">            则默认为最多同一文件夹下7个文件，这里设置了20 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<p>logback配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置，ConsoleAppender表示输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：TRACE、DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别，可也是包名或全类名。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.this0.mybatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.日志配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- SLF4J 选择slf4j输出！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SLF4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-2-形式"><a href="#2-1-2-形式" class="headerlink" title="2.1.2 #{}形式"></a>2.1.2 <strong>#{}形式</strong></h4><p>Mybatis会将SQL语句中的#{}转换为问号占位符。</p>
<p><img src="https://blog-resources.this0.com/image/202405112003288.png?x-oss-process=style/this0-blog"></p>
<h4 id="2-1-3-形式"><a href="#2-1-3-形式" class="headerlink" title="2.1.3 ${}形式"></a>2.1.3 <strong>${}形式</strong></h4><p>${}形式传参，底层Mybatis做的是字符串拼接操作。</p>
<p><img src="https://blog-resources.this0.com/image/202405112003435.png?x-oss-process=style/this0-blog"></p>
<p>通常不会采用${}的方式传值。一个特定的适用场景是：通过Java程序动态生成数据库表，表名部分需要Java程序通过参数传入；而<code>JDBC对于表名部分是不能使用问号占位符的,(对于表名、列名等数据库对象的部分，JDBC 预编译语句是不支持使用问号占位符的,这是因为数据库引擎在解释 SQL 语句时需要确定对象的名称，而这些对象名称通常不能通过占位符动态替换)此时只能使用$&#123;&#125;</code></p>
<p>结论：实际开发中，能用#{}实现的，肯定不用${}。</p>
<p>特殊情况： 动态的不是值，是列名或者关键字，需要使用${}拼接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注解方式传入参数！！</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where $&#123;column&#125; = #&#123;value&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">findByColumn</span><span class="params">(<span class="meta">@Param(&quot;column&quot;)</span> String column, </span></span><br><span class="line"><span class="params">                                <span class="meta">@Param(&quot;value&quot;)</span> String value)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-数据输入"><a href="#2-2-数据输入" class="headerlink" title="2.2 数据输入"></a>2.2 数据输入</h3><h4 id="2-2-1-Mybatis总体机制概括"><a href="#2-2-1-Mybatis总体机制概括" class="headerlink" title="2.2.1 Mybatis总体机制概括"></a>2.2.1 <strong>Mybatis总体机制概括</strong></h4><p><img src="https://blog-resources.this0.com/image/202405112003715.png?x-oss-process=style/this0-blog"></p>
<h4 id="2-2-2-概念说明"><a href="#2-2-2-概念说明" class="headerlink" title="2.2.2 概念说明"></a>2.2.2 <strong>概念说明</strong></h4><p>这里数据输入具体是指上层方法（例如Service方法）调用Mapper接口时，数据传入的形式。</p>
<ul>
<li>简单类型：只包含一个值的数据类型<ul>
<li>基本数据类型：int、byte、short、double、……</li>
<li>基本数据类型的包装类型：Integer、Character、Double、……</li>
<li>字符串类型：String</li>
</ul>
</li>
<li>复杂类型：包含多个值的数据类型<ul>
<li>实体类类型：Employee、Department、……</li>
<li>集合类型：List、Set、Map、……</li>
<li>数组类型：int[]、String[]、……</li>
<li>复合类型：List&lt;Employee&gt;、实体类中包含集合……</li>
</ul>
</li>
</ul>
<h4 id="2-2-3-单个简单类型参数"><a href="#2-2-3-单个简单类型参数" class="headerlink" title="2.2.3 单个简单类型参数"></a>2.2.3 <strong>单个简单类型参数</strong></h4><p>Mapper接口中抽象方法的声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br></pre></td></tr></table></figure>

<p>SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.this0.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.this0.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id empId,emp_name empName, emp_salary empSalary from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>单个简单类型参数，在#{}中可以随意命名，但是没有必要。通常还是使用和接口方法参数同名。</p>
</blockquote>
<h4 id="2-2-4-实体类类型参数"><a href="#2-2-4-实体类类型参数" class="headerlink" title="2.2.4 实体类类型参数"></a>2.2.4 <strong>实体类类型参数</strong></h4><p>Mapper接口中抽象方法的声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertEmployee</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure>

<p>SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span>&gt;</span></span><br><span class="line">  insert into t_emp(emp_name,emp_salary) values(#&#123;empName&#125;,#&#123;empSalary&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应关系</p>
<p><img src="https://blog-resources.this0.com/image/202405112003070.png?x-oss-process=style/this0-blog"></p>
<p>结论</p>
<p><code>表层现象：Mybatis能获取传入的实体类型的属性，也就是传实体，相当于传了实体的所有属性</code></p>
<p><code>实际原因：Mybatis会根据#&#123;&#125;中传入的数据，加工成getXxx()方法，通过反射在实体类对象中调用这个方法，从而获取到对应的数据。填充到#&#123;&#125;解析后的问号占位符这个位置。</code></p>
<h4 id="2-2-5-零散的简单类型数据"><a href="#2-2-5-零散的简单类型数据" class="headerlink" title="2.2.5 零散的简单类型数据"></a>2.2.5 <strong>零散的简单类型数据</strong></h4><p><code>零散的多个简单类型参数，如果没有特殊处理，那么Mybatis无法识别自定义名称</code>：</p>
<p>实例代码：</p>
<p><img src="https://blog-resources.this0.com/image/202405112003544.png?x-oss-process=style/this0-blog"></p>
<p>Mapper接口中抽象方法的声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateEmployee</span><span class="params">(<span class="meta">@Param(&quot;empId&quot;)</span> Integer empId,<span class="meta">@Param(&quot;empSalary&quot;)</span> Double empSalary)</span>;</span><br></pre></td></tr></table></figure>

<p>SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployee&quot;</span>&gt;</span></span><br><span class="line">  update t_emp set emp_salary=#&#123;empSalary&#125; where emp_id=#&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应关系</p>
<p><img src="https://blog-resources.this0.com/image/202405112003742.png?x-oss-process=style/this0-blog"></p>
<h4 id="2-2-6-Map类型参数"><a href="#2-2-6-Map类型参数" class="headerlink" title="2.2.6 Map类型参数"></a>2.2.6 <strong>Map类型参数</strong></h4><p>Mapper接口中抽象方法的声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateEmployeeByMap</span><span class="params">(Map&lt;String, Object&gt; paramMap)</span>;</span><br></pre></td></tr></table></figure>

<p>SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeByMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  update t_emp set emp_salary=#&#123;empSalaryKey&#125; where emp_id=#&#123;empIdKey&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>junit测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SqlSession session;</span><br><span class="line"><span class="comment">//junit5会在每一个@Test方法前执行@BeforeEach方法</span></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    session = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>()</span><br><span class="line">            .build(</span><br><span class="line">                    Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>))</span><br><span class="line">            .openSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateEmpNameByMap</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">  Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  paramMap.put(<span class="string">&quot;empSalaryKey&quot;</span>, <span class="number">999.99</span>);</span><br><span class="line">  paramMap.put(<span class="string">&quot;empIdKey&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.updateEmployeeByMap(paramMap);</span><br><span class="line">  log.info(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//junit5会在每一个@Test方法后执行@@AfterEach方法</span></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>对应关系</strong></p>
<p>#{}中写Map中的key，会自动取值</p>
<p><strong>使用场景</strong></p>
<p><code>有很多零散的参数需要传递，但是没有对应的实体类类型可以使用。使用@Param注解一个一个传入又太麻烦了。所以都封装到Map中。</code></p>
<h3 id="2-3-数据输出"><a href="#2-3-数据输出" class="headerlink" title="2.3 数据输出"></a>2.3 数据输出</h3><h4 id="2-3-1-输出概述"><a href="#2-3-1-输出概述" class="headerlink" title="2.3.1 输出概述"></a>2.3.1 输出概述</h4><p>数据输出总体上有两种形式：</p>
<ul>
<li>增删改操作返回的受影响行数：直接使用 int 或 long 类型接收即可</li>
<li>查询操作的查询结果</li>
</ul>
<p><code>我们需要做的是，指定查询的输出数据类型即可！</code></p>
<p>并且插入场景下，实现主键数据回显示！</p>
<h4 id="2-3-2-单个简单类型"><a href="#2-3-2-单个简单类型" class="headerlink" title="2.3.2 单个简单类型"></a>2.3.2 单个简单类型</h4><p>Mapper接口中的抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">selectEmpCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">  select count(*) from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>Mybatis 内部给常用的数据类型设定了很多别名。 以 int 类型为例，可以写的名称有：int、integer、Integer、java.lang.Integer、Int、INT、INTEGER 等等。</code></p>
<p>junit测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEmpCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> employeeMapper.selectEmpCount();</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>细节解释：</strong></p>
<p>select标签，通过resultType指定查询返回值类型！</p>
<p>resultType &#x3D; “全限定符 ｜ 别名 ｜ <code>如果是返回集合类型，写范型类型即可&quot;</code></p>
<p>别名问题：</p>
<p>其一：</p>
<p><code>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Author&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Blog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当这样配置时，<code>Blog</code> 可以用在任何使用 <code>domain.blog.Blog</code> 的地方。</p>
<p>其二：</p>
<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span> <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;domain.blog&quot;</span>/&gt;</span> <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。见下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;author&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Author</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是Mybatis为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p>
<table>
<thead>
<tr>
<th>别名</th>
<th>映射的类型</th>
</tr>
</thead>
<tbody><tr>
<td>_byte</td>
<td>byte</td>
</tr>
<tr>
<td>_char (since 3.5.10)</td>
<td>char</td>
</tr>
<tr>
<td>_character (since 3.5.10)</td>
<td>char</td>
</tr>
<tr>
<td>_long</td>
<td>long</td>
</tr>
<tr>
<td>_short</td>
<td>short</td>
</tr>
<tr>
<td>_int</td>
<td>int</td>
</tr>
<tr>
<td>_integer</td>
<td>int</td>
</tr>
<tr>
<td>_double</td>
<td>double</td>
</tr>
<tr>
<td>_float</td>
<td>float</td>
</tr>
<tr>
<td>_boolean</td>
<td>boolean</td>
</tr>
<tr>
<td>string</td>
<td>String</td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>char (since 3.5.10)</td>
<td>Character</td>
</tr>
<tr>
<td>character (since 3.5.10)</td>
<td>Character</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>integer</td>
<td>Integer</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>date</td>
<td>Date</td>
</tr>
<tr>
<td>decimal</td>
<td>BigDecimal</td>
</tr>
<tr>
<td>bigdecimal</td>
<td>BigDecimal</td>
</tr>
<tr>
<td>biginteger</td>
<td>BigInteger</td>
</tr>
<tr>
<td>object</td>
<td>Object</td>
</tr>
<tr>
<td>object[]</td>
<td>Object[]</td>
</tr>
<tr>
<td>map</td>
<td>Map</td>
</tr>
<tr>
<td>hashmap</td>
<td>HashMap</td>
</tr>
<tr>
<td>list</td>
<td>List</td>
</tr>
<tr>
<td>arraylist</td>
<td>ArrayList</td>
</tr>
<tr>
<td>collection</td>
<td>Collection</td>
</tr>
</tbody></table>
<h4 id="2-3-3-返回实体类对象"><a href="#2-3-3-返回实体类对象" class="headerlink" title="2.3.3 返回实体类对象"></a>2.3.3 返回实体类对象</h4><p>Mapper接口的抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br></pre></td></tr></table></figure>

<p>SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType属性：指定封装查询结果的Java实体类的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.this0.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis负责把SQL语句中的#&#123;&#125;部分替换成“?”占位符 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 --&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#&#123;maomi&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过给数据库表字段加别名，让查询结果的每一列都和Java实体类中属性对应起来。</p>
<p>增加全局配置自动识别对应关系</p>
<p><code>在 Mybatis 全局配置文件中，做了下面的配置，select语句中可以不给字段设置别名(驼峰映射)</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在全局范围内对Mybatis进行配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 具体配置 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 从org.apache.ibatis.session.Configuration类中可以查看能使用的配置项 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 将mapUnderscoreToCamelCase属性配置为true，表示开启自动映射驼峰式命名规则 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 规则要求数据库表字段命名方式：单词_单词 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 规则要求Java实体类属性名命名方式：首字母小写的驼峰式命名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-4-返回Map类型"><a href="#2-3-4-返回Map类型" class="headerlink" title="2.3.4 返回Map类型"></a>2.3.4 返回Map类型</h4><p>适用于SQL查询返回的各个字段综合起来并不和任何一个现有的实体类对应，没法封装到实体类对象中。能够封装成实体类类型的，就不使用Map类型。</p>
<p>Mapper接口的抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; <span class="title function_">selectEmpNameAndMaxSalary</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map&lt;String,Object&gt; selectEmpNameAndMaxSalary(); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 返回工资最高的员工的姓名和他的工资 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpNameAndMaxSalary&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">  SELECT</span><br><span class="line">    emp_name 员工姓名,</span><br><span class="line">    emp_salary 员工工资,</span><br><span class="line">    (SELECT AVG(emp_salary) FROM t_emp) 部门平均工资</span><br><span class="line">  FROM t_emp WHERE emp_salary=(</span><br><span class="line">    SELECT MAX(emp_salary) FROM t_emp</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>junit测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryEmpNameAndSalary</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">  Map&lt;String, Object&gt; resultMap = employeeMapper.selectEmpNameAndMaxSalary();</span><br><span class="line"></span><br><span class="line">  Set&lt;Map.Entry&lt;String, Object&gt;&gt; entrySet = resultMap.entrySet();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : entrySet) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"></span><br><span class="line">    log.info(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;TODO有个爆红，mapkey is required</p>
<h4 id="2-3-5-返回List类型"><a href="#2-3-5-返回List类型" class="headerlink" title="2.3.5 返回List类型"></a>2.3.5 返回List类型</h4><p><code>查询结果返回多个实体类对象，希望把多个实体类对象放在List集合中返回。此时不需要任何特殊处理，在resultType属性中还是设置实体类类型即可。</code></p>
<p>Mapper接口中抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Employee&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectAll(); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.this0.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary</span><br><span class="line">  from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>junit测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">  List&lt;Employee&gt; employeeList = employeeMapper.selectAll();</span><br><span class="line">  <span class="keyword">for</span> (Employee employee : employeeList) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;employee = &quot;</span> + employee);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-6-返回主键值"><a href="#2-3-6-返回主键值" class="headerlink" title="2.3.6 返回主键值"></a>2.3.6 返回主键值</h4><ol>
<li><p><strong>自增长类型主键</strong></p>
<p>Mapper接口中的抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertEmployee</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure>

<p>SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- int insertEmployee(Employee employee); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- useGeneratedKeys属性字面意思就是“使用生成的主键” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- keyProperty属性可以指定主键在实体类对象中对应的属性名，Mybatis会将拿到的主键值存入这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;empId&quot;</span>&gt;</span></span><br><span class="line">  insert into t_emp(emp_name,emp_salary)</span><br><span class="line">  values(#&#123;empName&#125;,#&#123;empSalary&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>junit测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveEmp</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">  <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">  employee.setEmpName(<span class="string">&quot;john&quot;</span>);</span><br><span class="line">  employee.setEmpSalary(<span class="number">666.66</span>);</span><br><span class="line">  employeeMapper.insertEmployee(employee);</span><br><span class="line">  log.info(<span class="string">&quot;employee.getEmpId() = &quot;</span> + employee.getEmpId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意</p>
<p>Mybatis是将自增主键的值设置到实体类对象中，而不是以Mapper接口方法返回值的形式返回。</p>
</li>
<li><p><strong><code>非自增长类型主键//TODO</code></strong></p>
<p><code>而对于不支持自增型主键的数据库（例如 Oracle）或者字符串类型主键，则可以使用 selectKey 子元素：selectKey 元素将会首先运行，id 会被设置，然后插入语句会被调用！</code></p>
<p>使用 <code>selectKey</code> 帮助插入UUID作为字符串类型主键示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">        SELECT UUID() as id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    INSERT INTO user (id, username, password) </span><br><span class="line">    VALUES (</span><br><span class="line">        #&#123;id&#125;,</span><br><span class="line">        #&#123;username&#125;,</span><br><span class="line">        #&#123;password&#125;</span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在上例中，我们定义了一个 <code>insertUser</code> 的插入语句来将 <code>User</code> 对象插入到 <code>user</code> 表中。我们使用 <code>selectKey</code> 来查询 UUID 并设置到 <code>id</code> 字段中。</p>
<p>通过 <code>keyProperty</code> 属性来指定查询到的 UUID 赋值给对象中的 <code>id</code> 属性，而 <code>resultType</code> 属性指定了 UUID 的类型为 <code>java.lang.String</code>。</p>
<p>需要注意的是，我们将 <code>selectKey</code> 放在了插入语句的前面，这是因为 MySQL 在 <code>insert</code> 语句中只支持一个 <code>select</code> 子句，而 <code>selectKey</code> 中查询 UUID 的语句就是一个 <code>select</code> 子句，因此我们需要将其放在前面。</p>
<p>最后，在将 <code>User</code> 对象插入到 <code>user</code> 表中时，我们直接使用对象中的 <code>id</code> 属性来插入主键值。</p>
<p>使用这种方式，我们可以方便地插入 UUID 作为字符串类型主键。当然，还有其他插入方式可以使用，如使用Java代码生成UUID并在类中显式设置值等。需要根据具体应用场景和需求选择合适的插入方式。</p>
</li>
</ol>
<h4 id="2-3-7-实体类属性和数据库字段对应关系-3种"><a href="#2-3-7-实体类属性和数据库字段对应关系-3种" class="headerlink" title="2.3.7 实体类属性和数据库字段对应关系(3种)"></a>2.3.7 实体类属性和数据库字段对应关系(3种)</h4><ol>
<li><p>别名对应</p>
<p>将字段的别名设置成和实体类属性一致。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType属性：指定封装查询结果的Java实体类的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.this0.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis负责把SQL语句中的#&#123;&#125;部分替换成“?”占位符 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 --&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#&#123;maomi&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于实体类属性的约定：<br>getXxx()方法、setXxx()方法把方法名中的get或set去掉，首字母小写。</p>
</blockquote>
</li>
<li><p>全局配置自动识别驼峰式命名规则</p>
<p>在Mybatis全局配置文件加入如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用settings对Mybatis全局进行设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 将xxx_xxx这样的列名自动映射到xxXxx这样驼峰式命名的属性名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SQL语句中可以不使用别名(sql语句是emp_id这种，实体类中是empId这种)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Employee selectEmployee(Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.this0.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  select emp_id,emp_name,emp_salary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用resultMap</p>
<p>使用resultMap标签定义对应关系，再在后面的SQL语句中引用这个对应关系</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 专门声明一个resultMap设定column到property之间的对应关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByRMResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.this0.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用id标签设置主键列和主键属性之间的对应关系 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- column属性用于指定字段名；property属性用于指定Java实体类属性名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用result标签设置普通字段和Java实体类属性之间的关系 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_salary&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empSalary&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Employee selectEmployeeByRM(Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByRM&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;selectEmployeeByRMResultMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  select emp_id,emp_name,emp_salary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-4-CRUD强化练习"><a href="#2-4-CRUD强化练习" class="headerlink" title="2.4 CRUD强化练习"></a>2.4 CRUD强化练习</h3><ol>
<li><p>准备数据库数据</p>
<p>首先，我们需要准备一张名为 <code>user</code> 的表。该表包含字段 id（主键）、username、password。创建SQL如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>实体类准备</p>
<p>接下来，我们需要定义一个实体类 <code>User</code>，来对应 user 表的一行数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Data</span> <span class="operator">/</span><span class="operator">/</span>lombok</span><br><span class="line">public class <span class="keyword">User</span> &#123;</span><br><span class="line">  private <span class="type">Integer</span> id;</span><br><span class="line">  private String username;</span><br><span class="line">  private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper接口定义</p>
<p>定义一个 Mapper 接口 <code>UserMapper</code>，并在其中添加 user 表的增、删、改、查方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">  User <span class="title function_">selectById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">  List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MapperXML编写</p>
<p>在 resources &#x2F;mappers目录下创建一个名为 <code>UserMapper.xml</code> 的 XML 文件，包含与 Mapper 接口中相同的五个 SQL 语句，并在其中，将查询结果映射到 <code>User</code> 实体中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace等于mapper接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.this0.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义一个插入语句，并获取主键值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO user(username, password)</span><br><span class="line">                VALUES(#&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    UPDATE user SET username=#&#123;username&#125;, password=#&#123;password&#125;</span><br><span class="line">    WHERE id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">    DELETE FROM user WHERE id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- resultType使用user别名，稍后需要配置！--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, username, password FROM user WHERE id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- resultType返回值类型为集合，所以只写范型即可！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, username, password FROM user</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>MyBatis配置文件</p>
<p>位置：resources: mybatis-config.xml&#x20;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启驼峰式映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启logback日志输出--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SLF4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给实体类起别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.this0.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- environment表示配置Mybatis的一个具体的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Mybatis的内置的事务管理器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 建立数据库连接的具体信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis-example&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper注册：指定Mybatis映射文件的具体位置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mapper标签：配置一个具体的Mapper映射文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>效果测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.this0.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.this0.test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="comment">// junit会在每一个@Test方法前执行@BeforeEach方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        session = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>()</span><br><span class="line">                .build(</span><br><span class="line">                        Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>))</span><br><span class="line">                .openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;111111&quot;</span>);</span><br><span class="line">        userMapper.update(user);</span><br><span class="line">        user = userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        userMapper.delete(<span class="number">1</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectByIdTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectAllTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectAll();</span><br><span class="line">        System.out.println(<span class="string">&quot;userList = &quot;</span> + userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// junit会在每一个@Test方法后执行@@AfterEach方法</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-5-mapperXML标签总结"><a href="#2-5-mapperXML标签总结" class="headerlink" title="2.5 mapperXML标签总结"></a>2.5 mapperXML标签总结</h3><p>MyBatis 的真正强大在于它的语句映射，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果<code>拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码</code>。MyBatis 致力于减少使用成本，让用户能更专注于 SQL 代码。</p>
<p>SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p>
<ul>
<li><code>insert</code> – 映射插入语句。</li>
<li><code>update</code> – 映射更新语句。</li>
<li><code>delete</code> – 映射删除语句。</li>
<li><code>select</code> – 映射查询语句。</li>
</ul>
<p><strong>select标签：</strong></p>
<p>MyBatis 在查询和结果映射做了相当多的改进。一个简单查询的 select 元素是非常简单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPerson&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">&quot;hashmap&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;自定义结构&quot;</span>&gt;</span> SELECT * FROM PERSON WHERE ID = #&#123;id&#125; <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个语句名为 selectPerson，接受一个 int（或 Integer）类型的参数，并返回一个 HashMap 类型的对象，其中的键是列名，值便是结果行中的对应值。</p>
<p>注意参数符号：#{id}  ${key}</p>
<p>MyBatis 创建一个预处理语句（PreparedStatement）参数，在 JDBC 中，这样的一个参数在 SQL 中会由一个“?”来标识，并被传递到一个新的预处理语句中，就像这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 近似的 JDBC 代码，非 MyBatis 代码...</span></span><br><span class="line"><span class="type">String</span> <span class="variable">selectPerson</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM PERSON WHERE ID=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(selectPerson);</span><br><span class="line">ps.setInt(<span class="number">1</span>,id);</span><br></pre></td></tr></table></figure>

<p>select 元素允许你配置很多属性来配置每条语句的行为细节：&#x2F;&#x2F;TODO,timeout和statementType基本不用</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>id</code></td>
<td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td>
</tr>
<tr>
<td><code>resultType</code></td>
<td>期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td>
</tr>
<tr>
<td><code>resultMap</code></td>
<td>对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td>
</tr>
<tr>
<td><code>timeout</code></td>
<td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td>
</tr>
<tr>
<td><code>statementType</code></td>
<td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td>
</tr>
</tbody></table>
<p><strong>insert, update 和 delete标签：</strong></p>
<p>&#x2F;&#x2F;TODO,<code>keyColumn,设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称</code></p>
<p>数据变更语句 insert，update 和 delete 的实现非常接近：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;insertAuthor&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyProperty</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyColumn</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;updateAuthor&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;deleteAuthor&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>id</code></td>
<td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td>
</tr>
<tr>
<td><code>timeout</code></td>
<td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td>
</tr>
<tr>
<td><code>statementType</code></td>
<td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td>
</tr>
<tr>
<td><code>useGeneratedKeys</code></td>
<td>（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td>
</tr>
<tr>
<td><code>keyProperty</code></td>
<td>（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
<tr>
<td><code>keyColumn</code></td>
<td>（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td>
</tr>
</tbody></table>
<h2 id="三、MyBatis多表映射"><a href="#三、MyBatis多表映射" class="headerlink" title="三、MyBatis多表映射"></a>三、MyBatis多表映射</h2><h3 id="3-1-多表映射概念"><a href="#3-1-多表映射概念" class="headerlink" title="3.1 多表映射概念"></a>3.1 多表映射概念</h3><ol>
<li><p><strong>多表查询结果映射思路</strong></p>
<p>上面课程中，我全面讲解了单表的mybatis操作！但是开发中更多的是<strong>多表查询</strong>需求，这种情况我们如何让Mybatis进行处理？</p>
<p>MyBatis 思想是：数据库不可能永远是你所想或所需的那个样子。 我们希望每个数据库都具备良好的<code>//TODO,第三范式或 BCNF 范式</code>，可惜它们并不都是那样。 如果能有一种数据库映射模式，完美适配所有的应用程序查询需求，那就太好了，而 ResultMap 就是 MyBatis 的完美答案。&#x20;</p>
<p>官方例子：我们如何映射下面这个语句？</p>
<p>&#x2F;&#x2F;TODO，现在是看不懂的&#x20;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 非常复杂的语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlogDetails&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;detailedBlogResultMap&quot;</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    </span><br><span class="line">    	博客表</span><br><span class="line">       B.id as blog_id,</span><br><span class="line">       B.title as blog_title,</span><br><span class="line">       B.author_id as blog_author_id,</span><br><span class="line">    </span><br><span class="line">    	作者表</span><br><span class="line">       A.id as author_id,</span><br><span class="line">       A.username as author_username,</span><br><span class="line">       A.password as author_password,</span><br><span class="line">       A.email as author_email,</span><br><span class="line">       A.bio as author_bio,</span><br><span class="line">       A.favourite_section as author_favourite_section,</span><br><span class="line">    </span><br><span class="line">    	文章表</span><br><span class="line">       P.id as post_id,</span><br><span class="line">       P.blog_id as post_blog_id,</span><br><span class="line">       P.author_id as post_author_id,</span><br><span class="line">       P.created_on as post_created_on,</span><br><span class="line">       P.section as post_section,</span><br><span class="line">       P.subject as post_subject,</span><br><span class="line">       P.draft as draft,</span><br><span class="line">       P.body as post_body,</span><br><span class="line">    </span><br><span class="line">    	评论表</span><br><span class="line">       C.id as comment_id,</span><br><span class="line">       C.post_id as comment_post_id,</span><br><span class="line">       C.name as comment_name,</span><br><span class="line">       C.comment as comment_text,</span><br><span class="line">    </span><br><span class="line">    	标签表</span><br><span class="line">       T.id as tag_id,</span><br><span class="line">       T.name as tag_name</span><br><span class="line">  from Blog B</span><br><span class="line">       left outer join Author A on B.author_id = A.id</span><br><span class="line">       left outer join Post P on B.id = P.blog_id</span><br><span class="line">       left outer join Comment C on P.id = C.post_id</span><br><span class="line">       left outer join Post_Tag PT on PT.post_id = P.id</span><br><span class="line">       left outer join Tag T on PT.tag_id = T.id</span><br><span class="line">  where B.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>你可能想把它映射到一个智能的对象模型，这个对象表示了一篇博客，它由某位作者所写，有很多的博文，每篇博文有零或多条的评论和标签。 我们先来看看下面这个完整的例子，它是一个非常复杂的结果映射（假设作者，博客，博文，评论和标签都是类型别名）。 虽然它看起来令人望而生畏，但其实非常简单。&#x20;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 非常复杂的结果映射 --&gt;</span><br><span class="line">&lt;resultMap id=<span class="string">&quot;detailedBlogResultMap&quot;</span> type=<span class="string">&quot;Blog&quot;</span>&gt;</span><br><span class="line">  <span class="comment">//TODO</span></span><br><span class="line">    &lt;constructor&gt;</span><br><span class="line">    &lt;idArg column=<span class="string">&quot;blog_id&quot;</span> javaType=<span class="string">&quot;int&quot;</span>/&gt;</span><br><span class="line">  &lt;/constructor&gt;</span><br><span class="line">  &lt;result property=<span class="string">&quot;title&quot;</span> column=<span class="string">&quot;blog_title&quot;</span>/&gt;</span><br><span class="line">  &lt;association property=<span class="string">&quot;author&quot;</span> javaType=<span class="string">&quot;Author&quot;</span>&gt;</span><br><span class="line">    &lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;author_id&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;username&quot;</span> column=<span class="string">&quot;author_username&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;password&quot;</span> column=<span class="string">&quot;author_password&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;email&quot;</span> column=<span class="string">&quot;author_email&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;bio&quot;</span> column=<span class="string">&quot;author_bio&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;favouriteSection&quot;</span> column=<span class="string">&quot;author_favourite_section&quot;</span>/&gt;</span><br><span class="line">  &lt;/association&gt;</span><br><span class="line">  &lt;collection property=<span class="string">&quot;posts&quot;</span> ofType=<span class="string">&quot;Post&quot;</span>&gt;</span><br><span class="line">    &lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;post_id&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;subject&quot;</span> column=<span class="string">&quot;post_subject&quot;</span>/&gt;</span><br><span class="line">    &lt;association property=<span class="string">&quot;author&quot;</span> javaType=<span class="string">&quot;Author&quot;</span>/&gt;</span><br><span class="line">    &lt;collection property=<span class="string">&quot;comments&quot;</span> ofType=<span class="string">&quot;Comment&quot;</span>&gt;</span><br><span class="line">      &lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;comment_id&quot;</span>/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">    &lt;collection property=<span class="string">&quot;tags&quot;</span> ofType=<span class="string">&quot;Tag&quot;</span> &gt;</span><br><span class="line">      &lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;tag_id&quot;</span>/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">  &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;TODO你现在可能看不懂，接下来我们要学习将多表查询结果使用ResultMap标签映射到实体类对象上！</p>
<p><strong>我们的学习目标：</strong></p>
<p>多表查询语句使用</p>
<p>多表结果承接实体类设计</p>
<p>使用ResultMap完成多表结果映射</p>
</li>
<li><p><strong>实体类设计方案</strong></p>
<p>多表关系回顾：（双向查看）</p>
<ul>
<li><p>一对一</p>
<p>夫妻关系，人和身份证号</p>
</li>
<li><p>一对多| 多对一</p>
<p>用户和用户的订单，锁和钥匙</p>
</li>
<li><p>多对多</p>
<p>老师和学生，部门和员工<br>实体类设计关系(查询)：（单向查看）</p>
<hr>
</li>
<li><p>对一 ： 夫妻一方对应另一方，订单对应用户都是对一关系</p>
<p>实体类设计：<code>对一关系下，类中只要包含单个对方对象类型属性即可！</code></p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer customerId;</span><br><span class="line">  <span class="keyword">private</span> String customerName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer orderId;</span><br><span class="line">  <span class="keyword">private</span> String orderName;</span><br><span class="line">  <span class="keyword">private</span> Customer customer;<span class="comment">// 体现的是对一的关系</span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>对多: 用户对应的订单，讲师对应的学生或者学生对应的讲师都是对多关系：</p>
<p>实体类设计：<code>对多关系下，类中只要包含对方类型集合属性即可！</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer customerId;</span><br><span class="line">  <span class="keyword">private</span> String customerName;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Order&gt; orderList;<span class="comment">// 体现的是对多的关系</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer orderId;</span><br><span class="line">  <span class="keyword">private</span> String orderName;</span><br><span class="line">  <span class="keyword">private</span> Customer customer;<span class="comment">// 体现的是对一的关系</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询客户和客户对应的订单集合  不要管!</span></span><br></pre></td></tr></table></figure>

<p>多表结果实体类设计小技巧：</p>
</li>
</ul>
<p>对一，属性中包含对方对象</p>
<p>对多，属性中包含对方对象集合</p>
<p><code>只有真实发生多表查询时，才需要设计和修改实体类，否则不提前设计和修改实体类！</code></p>
<p>无论多少张表联查，实体类设计都是两两考虑!</p>
<p>在查询映射的时候，只需要关注本次查询相关的属性！例如：查询订单和对应的客户，就不要关注客户中的订单集合！</p>
</li>
<li><p><strong>多表映射案例准备</strong></p>
<p>数据库：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_customer` (`customer_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT, `customer_name` <span class="type">CHAR</span>(<span class="number">100</span>), <span class="keyword">PRIMARY</span> KEY (`customer_id`) );</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order` ( `order_id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT, `order_name` <span class="type">CHAR</span>(<span class="number">100</span>), `customer_id` <span class="type">INT</span>, <span class="keyword">PRIMARY</span> KEY (`order_id`) ); </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_customer` (`customer_name`) <span class="keyword">VALUES</span> (<span class="string">&#x27;c01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_order` (`order_name`, `customer_id`) <span class="keyword">VALUES</span> (<span class="string">&#x27;o1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_order` (`order_name`, `customer_id`) <span class="keyword">VALUES</span> (<span class="string">&#x27;o2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_order` (`order_name`, `customer_id`) <span class="keyword">VALUES</span> (<span class="string">&#x27;o3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br></pre></td></tr></table></figure>

<p>实际开发时，一般在开发过程中，不给数据库表设置外键约束。<br>原因是避免调试不方便。<br><code>一般是功能开发完成，再加外键约束检查是否有bug。</code></p>
<p>实体类设计：</p>
<p>稍后会进行订单关联客户查询，也会进行客户关联订单查询，所以在这先练习设计</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer customerId;</span><br><span class="line">  <span class="keyword">private</span> String customerName;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Order&gt; orderList;<span class="comment">// 体现的是对多的关系</span></span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Integer orderId;</span><br><span class="line">  <span class="keyword">private</span> String orderName;</span><br><span class="line">  <span class="keyword">private</span> Customer customer;<span class="comment">// 体现的是对一的关系</span></span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-2-多对一映射"><a href="#3-2-多对一映射" class="headerlink" title="3.2 多对一映射"></a>3.2 多对一映射</h3><ol>
<li><p>需求说明</p>
<p>根据订单ID查询订单信息，以及订单关联的用户的信息！</p>
</li>
<li><p>OrderMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">  Order <span class="title function_">selectOrderWithCustomer</span><span class="params">(Integer orderId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>OrderMapper.xml配置文件</p>
<p><code>id属性：通常设置为这个resultMap所服务的那条SQL语句的id加上“ResultMap”，也就是方法名加上ResultMap</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建resultMap实现“对一”关联关系映射 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id属性：通常设置为这个resultMap所服务的那条SQL语句的id加上“ResultMap” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- type属性：要设置为这个resultMap所服务的那条SQL语句最终要返回的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;selectOrderWithCustomerResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 先设置Order自身属性和字段的对应关系 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用association标签配置“对一”关联关系 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- property属性：在Order类中对一的一端进行引用时使用的属性名 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- javaType属性：一的一端类的全类名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Customer类的属性和字段名之间的对应关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;customer_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Order selectOrderWithCustomer(Integer orderId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOrderWithCustomer&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;selectOrderWithCustomerResultMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  SELECT order_id,order_name,c.customer_id,customer_name</span><br><span class="line">  FROM t_order o</span><br><span class="line">  LEFT JOIN t_customer c</span><br><span class="line">  ON o.customer_id=c.customer_id</span><br><span class="line">  WHERE o.order_id=#&#123;orderId&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应关系可以参考下图：</p>
<p><img src="https://blog-resources.this0.com/image/202405112003943.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>Mybatis全局注册Mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Mapper配置文件：告诉Mybatis我们的Mapper配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 在mapper标签的resource属性中指定Mapper配置文件以“类路径根目录”为基准的相对路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/OrderMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>junit测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="comment">// junit会在每一个@Test方法前执行@BeforeEach方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        session = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>()</span><br><span class="line">                .build(</span><br><span class="line">                        Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>))</span><br><span class="line">                .openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRelationshipToOne</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">      <span class="type">OrderMapper</span> <span class="variable">orderMapper</span> <span class="operator">=</span> session.getMapper(OrderMapper.class);</span><br><span class="line">      <span class="comment">// 查询Order对象，检查是否同时查询了关联的Customer对象</span></span><br><span class="line">      <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectOrderWithCustomer(<span class="number">2</span>);</span><br><span class="line">      log.info(<span class="string">&quot;order = &quot;</span> + order);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// junit会在每一个@Test方法后执行@AfterEach方法</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关键词</p>
<p><code>在“对一”关联关系中，我们的配置比较多，但是关键词就只有：association和javaType</code></p>
</li>
</ol>
<h3 id="3-3-一对多映射"><a href="#3-3-一对多映射" class="headerlink" title="3.3 一对多映射"></a>3.3 一对多映射</h3><ol>
<li><p>需求说明</p>
<p>查询客户和客户关联的订单信息！</p>
</li>
<li><p>CustomerMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">  Customer <span class="title function_">selectCustomerWithOrderList</span><span class="params">(Integer customerId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>CustomerMapper.xml文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置resultMap实现从Customer到OrderList的“对多”关联关系 --&gt;</span><br><span class="line">&lt;resultMap id=<span class="string">&quot;selectCustomerWithOrderListResultMap&quot;</span></span><br><span class="line"></span><br><span class="line">  type=<span class="string">&quot;customer&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 映射Customer本身的属性 --&gt;</span><br><span class="line">  &lt;id column=<span class="string">&quot;customer_id&quot;</span> property=<span class="string">&quot;customerId&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;result column=<span class="string">&quot;customer_name&quot;</span> property=<span class="string">&quot;customerName&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- collection标签：映射“对多”的关联关系 --&gt;</span><br><span class="line">  &lt;!-- property属性：在Customer类中，关联“多”的一端的属性名 --&gt;</span><br><span class="line">  &lt;!-- ofType属性：集合属性中元素的类型 --&gt;</span><br><span class="line">  &lt;collection property=<span class="string">&quot;orderList&quot;</span> ofType=<span class="string">&quot;order&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 映射Order的属性 --&gt;</span><br><span class="line">    &lt;id column=<span class="string">&quot;order_id&quot;</span> property=<span class="string">&quot;orderId&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;result column=<span class="string">&quot;order_name&quot;</span> property=<span class="string">&quot;orderName&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/collection&gt;</span><br><span class="line"></span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Customer <span class="title function_">selectCustomerWithOrderList</span><span class="params">(Integer customerId)</span>; --&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;selectCustomerWithOrderList&quot;</span> resultMap=<span class="string">&quot;selectCustomerWithOrderListResultMap&quot;</span>&gt;</span><br><span class="line">  SELECT c.customer_id,c.customer_name,o.order_id,o.order_name</span><br><span class="line">  FROM t_customer c</span><br><span class="line">  LEFT JOIN t_order o</span><br><span class="line">  ON c.customer_id=o.customer_id</span><br><span class="line">  WHERE c.customer_id=#&#123;customerId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>对应关系可以参考下图：</p>
<p><img src="https://blog-resources.this0.com/image/202405112003440.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>Mybatis全局注册Mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Mapper配置文件：告诉Mybatis我们的Mapper配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在mapper标签的resource属性中指定Mapper配置文件以“类路径根目录”为基准的相对路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/OrderMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/CustomerMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>junit测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRelationshipToMulti</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">CustomerMapper</span> <span class="variable">customerMapper</span> <span class="operator">=</span> session.getMapper(CustomerMapper.class);</span><br><span class="line">  <span class="comment">// 查询Customer对象同时将关联的Order集合查询出来</span></span><br><span class="line">  <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> customerMapper.selectCustomerWithOrderList(<span class="number">1</span>);</span><br><span class="line">  log.info(<span class="string">&quot;customer.getCustomerId() = &quot;</span> + customer.getCustomerId());</span><br><span class="line">  log.info(<span class="string">&quot;customer.getCustomerName() = &quot;</span> + customer.getCustomerName());</span><br><span class="line">  List&lt;Order&gt; orderList = customer.getOrderList();</span><br><span class="line">  <span class="keyword">for</span> (Order order : orderList) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;order = &quot;</span> + order);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关键词</p>
<p><code>在“对多”关联关系中，同样有很多配置，但是提炼出来最关键的就是：“collection”和“ofType”</code></p>
</li>
</ol>
<h3 id="3-4-多对多映射"><a href="#3-4-多对多映射" class="headerlink" title="3.4 多对多映射"></a>3.4 多对多映射</h3><p>多对多是表关系，实体关系单向来看就是对多！只不过需要三表查询（中间表）！！！</p>
<hr>
<p>作者：知乎用户<br>链接：<a href="https://www.zhihu.com/question/459053847/answer/1884908252">https://www.zhihu.com/question/459053847/answer/1884908252</a><br>来源：知乎</p>
<p>补充说明：</p>
<p>为什么要使用中间表?</p>
<p>首先，我要说明一下，这种关系表通常用来解决<a href="https://www.zhihu.com/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1884908252%7D">数据库</a>中的多对多的关系。它是一种解耦，两张表复杂关系的一种<a href="https://www.zhihu.com/search?q=%E6%98%A0%E5%B0%84&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1884908252%7D">映射</a>，一种抽象或者说是抽离，就拿我们常见的用户表和角色表来举例，一个用户可以对应有多个角色，同时一个角色也对应着多个用户。如果建表的时候，按照在用户表里面添加一个冗余字段角色ID，我们会看到这样一种情况。</p>
<p>用户表user（主键为id,user_id）</p>
<table>
<thead>
<tr>
<th>id</th>
<th>user_id</th>
<th>user_name</th>
<th>role_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>001</td>
<td>张三</td>
<td>01</td>
</tr>
<tr>
<td>2</td>
<td>002</td>
<td>李四</td>
<td>02</td>
</tr>
<tr>
<td>3</td>
<td>003</td>
<td>王五</td>
<td>03</td>
</tr>
<tr>
<td>4</td>
<td>004</td>
<td>张三</td>
<td>02</td>
</tr>
<tr>
<td>5</td>
<td>005</td>
<td>李四</td>
<td>03</td>
</tr>
</tbody></table>
<p>角色表role(主键为id,role_id)</p>
<table>
<thead>
<tr>
<th>id</th>
<th>role_id</th>
<th>role_name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>01</td>
<td>管理员</td>
</tr>
<tr>
<td>2</td>
<td>02</td>
<td>测试</td>
</tr>
<tr>
<td>3</td>
<td>03</td>
<td>运维</td>
</tr>
</tbody></table>
<p>我们从上面的表设计是不是发现有点别扭，数据库的建表三范式是啥呢，</p>
<p>第一范式，**确保每一列保持<a href="https://www.zhihu.com/search?q=%E5%8E%9F%E5%AD%90%E6%80%A7&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1884908252%7D">原子性</a>**。</p>
<p>第二范式，<strong>确保表中的每列都和<a href="https://www.zhihu.com/search?q=%E4%B8%BB%E9%94%AE&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1884908252%7D">主键</a>相关。</strong></p>
<p><a href="https://www.zhihu.com/search?q=%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1884908252%7D">第三范式</a>，<strong>确保每列都和<a href="https://www.zhihu.com/search?q=%E4%B8%BB%E9%94%AE%E5%88%97&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1884908252%7D">主键列</a>直接相关,而不是间接相关。</strong></p>
<p>多对多表关系示意图：</p>
<p><img src="https://blog-resources.this0.com/image/202405112003546.png?x-oss-process=style/this0-blog"></p>
<p>多对多具体业务实现：</p>
<ol>
<li><p>数据库脚本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-- 创建讲师表</span><br><span class="line">CREATE TABLE <span class="title function_">t_teacher</span> <span class="params">(</span></span><br><span class="line"><span class="params">  t_id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">  t_name VARCHAR(<span class="number">50</span>)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建学生表</span><br><span class="line">CREATE TABLE <span class="title function_">t_student</span> <span class="params">(</span></span><br><span class="line"><span class="params">  s_id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">  s_name VARCHAR(<span class="number">50</span>)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建中间表</span><br><span class="line">CREATE TABLE <span class="title function_">t_inner</span> <span class="params">(</span></span><br><span class="line"><span class="params">  t_id INT,</span></span><br><span class="line"><span class="params">  s_id INT,</span></span><br><span class="line"><span class="params">  PRIMARY KEY (t_id, s_id)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 向讲师表中插入测试数据</span><br><span class="line">INSERT INTO t_teacher <span class="title function_">VALUES</span> <span class="params">(<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>)</span>;</span><br><span class="line">INSERT INTO t_teacher <span class="title function_">VALUES</span> <span class="params">(<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>)</span>;</span><br><span class="line">INSERT INTO t_teacher <span class="title function_">VALUES</span> <span class="params">(<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>)</span>;</span><br><span class="line"></span><br><span class="line">-- 向学生表中插入测试数据</span><br><span class="line">INSERT INTO t_student <span class="title function_">VALUES</span> <span class="params">(<span class="number">1</span>, <span class="string">&#x27;小明&#x27;</span>)</span>;</span><br><span class="line">INSERT INTO t_student <span class="title function_">VALUES</span> <span class="params">(<span class="number">2</span>, <span class="string">&#x27;小红&#x27;</span>)</span>;</span><br><span class="line">INSERT INTO t_student <span class="title function_">VALUES</span> <span class="params">(<span class="number">3</span>, <span class="string">&#x27;小刚&#x27;</span>)</span>;</span><br><span class="line"></span><br><span class="line">-- 向中间表中插入测试数据</span><br><span class="line">INSERT INTO t_inner <span class="title function_">VALUES</span> <span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span>;</span><br><span class="line">INSERT INTO t_inner <span class="title function_">VALUES</span> <span class="params">(<span class="number">1</span>, <span class="number">3</span>)</span>;</span><br><span class="line">INSERT INTO t_inner <span class="title function_">VALUES</span> <span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span>;</span><br><span class="line">INSERT INTO t_inner <span class="title function_">VALUES</span> <span class="params">(<span class="number">3</span>, <span class="number">1</span>)</span>;</span><br><span class="line">INSERT INTO t_inner <span class="title function_">VALUES</span> <span class="params">(<span class="number">3</span>, <span class="number">3</span>)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>查询需求分析</p>
<p>查询讲师信息，并且查询每名讲师关联的学生信息！</p>
</li>
<li><p>实体类设计</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer tId;</span><br><span class="line">    <span class="keyword">private</span> String tName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer sId;</span><br><span class="line">    <span class="keyword">private</span> String sName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>TeacherMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherMapper</span> &#123;</span><br><span class="line">    List&lt;Teacher&gt; <span class="title function_">findAllTeachers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>TeacherMapperXML文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">&quot;com.example.mapper.TeacherMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;findAllTeachers&quot;</span> resultMap=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><br><span class="line">        SELECT t.t_id, t.t_name, s.s_id, s.s_name</span><br><span class="line">        FROM t_teacher t LEFT OUTER JOIN t_inner i ON t.t_id = i.t_id</span><br><span class="line">        LEFT OUTER JOIN t_student s ON i.s_id = s.s_id</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;teacherMap&quot;</span> type=<span class="string">&quot;teacher&quot;</span>&gt;</span><br><span class="line">        &lt;id property=<span class="string">&quot;tId&quot;</span> column=<span class="string">&quot;t_id&quot;</span> /&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;tName&quot;</span> column=<span class="string">&quot;t_name&quot;</span> /&gt;</span><br><span class="line">        &lt;collection property=<span class="string">&quot;students&quot;</span> ofType=<span class="string">&quot;student&quot;</span> &gt;</span><br><span class="line">          &lt;id property=<span class="string">&quot;sId&quot;</span> column=<span class="string">&quot;s_id&quot;</span> /&gt;</span><br><span class="line">          &lt;result property=<span class="string">&quot;sName&quot;</span> column=<span class="string">&quot;s_name&quot;</span> /&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>Mybatis全局注册Mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Mapper配置文件：告诉Mybatis我们的Mapper配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在mapper标签的resource属性中指定Mapper配置文件以“类路径根目录”为基准的相对路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/OrderMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/CustomerMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/TeacherMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>junit测试程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTeacherRelationshipToMulti</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">TeacherMapper</span> <span class="variable">teacherMapper</span> <span class="operator">=</span> session.getMapper(TeacherMapper.class);</span><br><span class="line">    <span class="comment">// 查询Customer对象同时将关联的Order集合查询出来</span></span><br><span class="line">    List&lt;Teacher&gt; allTeachers = teacherMapper.findAllTeachers();</span><br><span class="line">    log.info(<span class="string">&quot;allTeachers = &quot;</span> + allTeachers);</span><br><span class="line">    <span class="keyword">for</span> (Teacher teacher : allTeachers) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;teacher = &quot;</span> + teacher);</span><br><span class="line">        log.info(<span class="string">&quot;teacher.students = &quot;</span> + teacher.getStudents());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-5-多表映射总结"><a href="#3-5-多表映射总结" class="headerlink" title="3.5 多表映射总结"></a>3.5 多表映射总结</h3><h4 id="3-5-1-多表映射优化-TODO，三个属性"><a href="#3-5-1-多表映射优化-TODO，三个属性" class="headerlink" title="3.5.1 多表映射优化&#x2F;&#x2F;TODO，三个属性"></a>3.5.1 多表映射优化&#x2F;&#x2F;TODO，三个属性</h4><table>
<thead>
<tr>
<th>setting属性</th>
<th>属性含义</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>autoMappingBehavior</td>
<td><code>指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</code></td>
<td>NONE, PARTIAL, FULL</td>
<td>PARTIAL</td>
</tr>
</tbody></table>
<p>我们可以将autoMappingBehavior设置为full,进行多表resultMap映射的时候，可以省略符合列和属性命名映射规则（列名&#x3D;属性名，或者开启驼峰映射也可以自定义映射）的result标签！</p>
<p>修改mybati-sconfig.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启resultMap自动映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;FULL&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改teacherMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;tId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;t_id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启自动映射,并且开启驼峰式支持!可以省略 result!--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;result property=&quot;tName&quot; column=&quot;t_name&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;s_id&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;result property=&quot;sName&quot; column=&quot;s_name&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-5-2-多表映射总结"><a href="#3-5-2-多表映射总结" class="headerlink" title="3.5.2 多表映射总结"></a>3.5.2 多表映射总结</h4><table>
<thead>
<tr>
<th>关联关系</th>
<th>配置项关键词</th>
<th>所在配置文件和具体位置</th>
</tr>
</thead>
<tbody><tr>
<td>对一</td>
<td>association标签&#x2F;javaType属性&#x2F;property属性</td>
<td>Mapper配置文件中的resultMap标签内</td>
</tr>
<tr>
<td>对多</td>
<td>collection标签&#x2F;ofType属性&#x2F;property属性</td>
<td>Mapper配置文件中的resultMap标签内</td>
</tr>
</tbody></table>
<h2 id="四、MyBatis动态语句"><a href="#四、MyBatis动态语句" class="headerlink" title="四、MyBatis动态语句"></a>四、MyBatis动态语句</h2><h3 id="4-1-动态语句需求和简介"><a href="#4-1-动态语句需求和简介" class="headerlink" title="4.1 动态语句需求和简介"></a>4.1 动态语句需求和简介</h3><p>经常遇到很多按照很多查询条件进行查询的情况，比如智联招聘的职位搜索等。其中经常出现很多条件不取值的情况，在后台应该如何完成最终的SQL语句呢？</p>
<p><img src="https://blog-resources.this0.com/image/202405112003035.png?x-oss-process=style/this0-blog"></p>
<p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p>
<p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p>
<p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p>
<h3 id="4-2-if和where标签"><a href="#4-2-if和where标签" class="headerlink" title="4.2 if和where标签"></a>4.2 if和where标签</h3><p>使用动态 SQL 最常见情景是根据条件包含 where  &#x2F; if 子句的一部分。比如：</p>
<p><code>where标签会自动去掉标签体内，前面多余的and/or</code></p>
<p><code>在if标签的test属性中，可以访问实体类的属性，不可以访问数据库表的字段</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByCondition(Employee employee); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp</span><br><span class="line">    <span class="comment">&lt;!-- where标签会自动去掉“标签体内前面多余的and/or” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用if标签，让我们可以有选择的加入SQL语句的片段。这个SQL语句片段是否要加入整个SQL语句，就看if标签判断的结果是否为true --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在if标签的test属性中，可以访问实体类的属性，不可以访问数据库表的字段 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在if标签内部，需要访问接口的参数时还是正常写#&#123;&#125; --&gt;</span></span><br><span class="line">            or emp_name=#&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;gt;</span> 2000&quot;</span>&gt;</span></span><br><span class="line">            or emp_salary&gt;#&#123;empSalary&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         第一种情况：所有条件都满足 WHERE emp_name=? or emp_salary&gt;?</span></span><br><span class="line"><span class="comment">         第二种情况：部分条件满足 WHERE emp_salary&gt;?</span></span><br><span class="line"><span class="comment">         第三种情况：所有条件都不满足 没有where子句</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-set标签"><a href="#4-3-set标签" class="headerlink" title="4.3 set标签"></a>4.3 set标签</h3><p><code>使用set标签动态管理set子句，并且动态去掉两端多余的逗号</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- void updateEmployeeDynamic(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeDynamic&quot;</span>&gt;</span></span><br><span class="line">    update t_emp</span><br><span class="line">    <span class="comment">&lt;!-- set emp_name=#&#123;empName&#125;,emp_salary=#&#123;empSalary&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用set标签动态管理set子句，并且动态去掉两端多余的逗号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;lt;</span> 3000&quot;</span>&gt;</span></span><br><span class="line">            emp_salary=#&#123;empSalary&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where emp_id=#&#123;empId&#125;</span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         第一种情况：所有条件都满足 SET emp_name=?, emp_salary=?</span></span><br><span class="line"><span class="comment">         第二种情况：部分条件满足 SET emp_salary=?</span></span><br><span class="line"><span class="comment">         第三种情况：所有条件都不满足 update t_emp where emp_id=?</span></span><br><span class="line"><span class="comment">            没有set子句的update语句会导致SQL语法错误</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;TODO没有set子句的update语句会导致SQL语法错误</p>
<h3 id="4-4-trim标签-了解"><a href="#4-4-trim标签-了解" class="headerlink" title="4.4 trim标签(了解)"></a>4.4 trim标签(了解)</h3><p><code>//TODO,使用trim标签控制条件部分两端是否包含某些字符</code></p>
<ul>
<li>prefix属性：指定要动态添加的前缀</li>
<li>suffix属性：指定要动态添加的后缀</li>
<li>prefixOverrides属性：指定要动态去掉的前缀，使用“|”分隔有可能的多个值</li>
<li>suffixOverrides属性：指定要动态去掉的后缀，使用“|”分隔有可能的多个值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByConditionByTrim(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByConditionByTrim&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.this0.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_age,emp_salary,emp_gender</span><br><span class="line">    from t_emp</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- prefix属性指定要动态添加的前缀 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- suffix属性指定要动态添加的后缀 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- prefixOverrides属性指定要动态去掉的前缀，使用“|”分隔有可能的多个值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- suffixOverrides属性指定要动态去掉的后缀，使用“|”分隔有可能的多个值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当前例子用where标签实现更简洁，但是trim标签更灵活，可以用在任何有需要的地方 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;gt;</span> 3000&quot;</span>&gt;</span></span><br><span class="line">            emp_salary&gt;#&#123;empSalary&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empAge <span class="symbol">&amp;lt;</span>= 20&quot;</span>&gt;</span></span><br><span class="line">            emp_age=#&#123;empAge&#125; or</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empGender==&#x27;male&#x27;&quot;</span>&gt;</span></span><br><span class="line">            emp_gender=#&#123;empGender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-5-choose-when-otherwise标签"><a href="#4-5-choose-when-otherwise标签" class="headerlink" title="4.5 choose&#x2F;when&#x2F;otherwise标签"></a>4.5 choose&#x2F;when&#x2F;otherwise标签</h3><p>&#x2F;&#x2F;TODO没实际使用过</p>
<p>在多个分支条件中，仅执行一个。</p>
<ul>
<li>从上到下依次执行条件判断</li>
<li>遇到的第一个满足条件的分支会被采纳</li>
<li>被采纳分支后面的分支都将不被考虑</li>
<li>如果所有的when分支都不满足，那么就执行otherwise分支</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByConditionByChoose(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByConditionByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.this0.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span>emp_name=#&#123;empName&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;lt;</span> 3000&quot;</span>&gt;</span>emp_salary <span class="symbol">&amp;lt;</span> 3000<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>1=1<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     第一种情况：第一个when满足条件 where emp_name=?</span></span><br><span class="line"><span class="comment">     第二种情况：第二个when满足条件 where emp_salary &lt; 3000</span></span><br><span class="line"><span class="comment">     第三种情况：两个when都不满足 where 1=1 执行了otherwise</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-6-foreach标签"><a href="#4-6-foreach标签" class="headerlink" title="4.6 foreach标签"></a>4.6 foreach标签</h3><p>&#x2F;&#x2F;TODO，没搞懂</p>
<p><strong>基本用法</strong></p>
<p>用批量插入举例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    collection属性：要遍历的集合</span></span><br><span class="line"><span class="comment">    item属性：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象</span></span><br><span class="line"><span class="comment">    separator属性：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符</span></span><br><span class="line"><span class="comment">    open属性：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串</span></span><br><span class="line"><span class="comment">    close属性：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串</span></span><br><span class="line"><span class="comment">    index属性：这里起一个名字，便于后面引用</span></span><br><span class="line"><span class="comment">        遍历List集合，这里能够得到List集合的索引值</span></span><br><span class="line"><span class="comment">        遍历Map集合，这里能够得到Map集合的key</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;values&quot;</span> <span class="attr">index</span>=<span class="string">&quot;myIndex&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在foreach标签内部如果需要引用遍历得到的具体的一个对象，需要使用item属性声明的名称 --&gt;</span></span><br><span class="line">    (#&#123;emp.empName&#125;,#&#123;myIndex&#125;,#&#123;emp.empSalary&#125;,#&#123;emp.empGender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>批量更新时需要注意</strong></p>
<p>上面批量插入的例子本质上是一条SQL语句，而实现批量更新则需要多条SQL语句拼起来，用分号分开。也就是一次性发送多条SQL语句让数据库执行。此时需要在数据库连接信息的URL地址中设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dev.url=jdbc:mysql:///mybatis-example?allowMultiQueries=true</span><br></pre></td></tr></table></figure>

<p>对应的foreach标签如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- int updateEmployeeBatch(@Param(&quot;empList&quot;) List&lt;Employee&gt; empList) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeBatch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        update t_emp set emp_name=#&#123;emp.empName&#125; where emp_id=#&#123;emp.empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>关于foreach标签的collection属性</strong></p>
<p>如果没有给接口中List类型的参数使用@Param注解指定一个具体的名字，那么在collection属性中默认可以使用collection或list来引用这个list集合。这一点可以通过异常信息看出来：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Parameter &#x27;empList&#x27; not found. Available parameters are [arg0, collection, list]</span><br></pre></td></tr></table></figure>

<p>在实际开发中，为了避免隐晦的表达造成一定的误会，建议使用@Param注解明确声明变量的名称，然后在foreach标签的collection属性中按照@Param注解指定的名称来引用传入的参数。</p>
<h3 id="4-7-sql片段"><a href="#4-7-sql片段" class="headerlink" title="4.7 sql片段"></a>4.7 sql片段</h3><p>&#x2F;&#x2F;TODO</p>
<p><strong>抽取重复的SQL片段</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用sql标签抽取重复出现的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;mySelectSql&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_age,emp_salary,emp_gender from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引用已抽取的SQL片段</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用include标签引用声明的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;mySelectSql&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="五、MyBatis高级扩展"><a href="#五、MyBatis高级扩展" class="headerlink" title="五、MyBatis高级扩展"></a>五、MyBatis高级扩展</h2><h3 id="5-1-Mapper批量映射优化"><a href="#5-1-Mapper批量映射优化" class="headerlink" title="5.1 Mapper批量映射优化"></a>5.1 Mapper批量映射优化</h3><ol>
<li><p>需求</p>
<p>Mapper 配置文件很多时，在全局配置文件中一个一个注册太麻烦，希望有一个办法能够一劳永逸。</p>
</li>
<li><p>配置方式</p>
<p>Mybatis 允许在指定 Mapper 映射文件时，只指定其所在的包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.this0.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时这个包下的所有 Mapper 配置文件将被自动加载、注册，比较方便。</p>
</li>
<li><p>资源创建要求</p>
</li>
</ol>
<ul>
<li><p>Mapper 接口和 Mapper 配置文件名称一致</p>
<ul>
<li>Mapper 接口：EmployeeMapper.java</li>
<li>Mapper 配置文件：EmployeeMapper.xml</li>
</ul>
</li>
<li><p>Mapper 配置文件放在 Mapper 接口所在的包内</p>
<ul>
<li><p>可以将mapperxml文件放在mapper接口所在的包！</p>
</li>
<li><p>可以在sources下创建mapper接口包一致的文件夹结构存放mapper.xml文件</p>
<p><img src="https://blog-resources.this0.com/image/202405112003412.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202405112003253.png?x-oss-process=style/this0-blog"></p>
</li>
</ul>
</li>
</ul>
<h3 id="5-2-插件和分页插件PageHelper"><a href="#5-2-插件和分页插件PageHelper" class="headerlink" title="5.2 插件和分页插件PageHelper"></a>5.2 插件和分页插件PageHelper</h3><h4 id="5-2-1-插件机制和PageHelper插件介绍-TODO"><a href="#5-2-1-插件机制和PageHelper插件介绍-TODO" class="headerlink" title="5.2.1 插件机制和PageHelper插件介绍&#x2F;&#x2F;TODO"></a>5.2.1 插件机制和PageHelper插件介绍&#x2F;&#x2F;TODO</h4><p>MyBatis 对插件进行了标准化的设计，并提供了一套可扩展的插件机制。插件可以在用于语句执行过程中进行拦截，并允许通过自定义处理程序来拦截和修改 SQL 语句、映射语句的结果等。</p>
<p>具体来说，MyBatis 的插件机制包括以下三个组件：</p>
<ol>
<li><code>Interceptor</code>（拦截器）：定义一个拦截方法 <code>intercept</code>，该方法在执行 SQL 语句、执行查询、查询结果的映射时会被调用。</li>
<li><code>Invocation</code>（调用）：实际上是对被拦截的方法的封装，封装了 <code>Object target</code>、<code>Method method</code> 和 <code>Object[] args</code> 这三个字段。</li>
<li><code>InterceptorChain</code>（拦截器链）：对所有的拦截器进行管理，包括将所有的 Interceptor 链接成一条链，并在执行 SQL 语句时按顺序调用。</li>
</ol>
<p><code>插件的开发非常简单，只需要实现 Interceptor 接口</code>，并使用注解 <code>@Intercepts</code> 来标注需要拦截的对象和方法，然后在 MyBatis 的配置文件中添加插件即可。</p>
<p>PageHelper 是 MyBatis 中比较著名的分页插件，它提供了多种分页方式（例如 MySQL 和 Oracle 分页方式），支持多种数据库，并且使用非常简单。下面就介绍一下 PageHelper 的使用方式。</p>
<p><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md#%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E8%A8%80">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md#如何配置数据库方言</a></p>
<h4 id="5-2-2-PageHelper插件使用"><a href="#5-2-2-PageHelper插件使用" class="headerlink" title="5.2.2 PageHelper插件使用"></a>5.2.2 PageHelper插件使用</h4><ol>
<li><p>pom.xml引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>mybatis-config.xml配置分页插件</p>
<p>在 MyBatis 的配置文件中添加 PageHelper 的插件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中，<code>com.github.pagehelper.PageInterceptor</code> 是 PageHelper 插件的名称，<code>value</code> 属性用于指定数据库类型（支持多种数据库）</p>
</li>
<li><p>页插件使用</p>
<p>在查询方法中使用分页：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTeacherRelationshipToMulti</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">TeacherMapper</span> <span class="variable">teacherMapper</span> <span class="operator">=</span> session.getMapper(TeacherMapper.class);</span><br><span class="line"></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 查询Customer对象同时将关联的Order集合查询出来</span></span><br><span class="line">    List&lt;Teacher&gt; allTeachers = teacherMapper.findAllTeachers();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    PageInfo&lt;Teacher&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(allTeachers);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;pageInfo = &quot;</span> + pageInfo);</span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> pageInfo.getTotal(); <span class="comment">// 获取总记录数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pages</span> <span class="operator">=</span> pageInfo.getPages();  <span class="comment">// 获取总页数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pages = &quot;</span> + pages);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> pageInfo.getPageNum(); <span class="comment">// 获取当前页码</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pageNum = &quot;</span> + pageNum);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> pageInfo.getPageSize(); <span class="comment">// 获取每页显示记录数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pageSize = &quot;</span> + pageSize);</span><br><span class="line">    List&lt;Teacher&gt; teachers = pageInfo.getList(); <span class="comment">//获取查询页的数据集合</span></span><br><span class="line">    System.out.println(<span class="string">&quot;teachers = &quot;</span> + teachers);</span><br><span class="line">    teachers.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-3-逆向工程和MybatisX插件"><a href="#5-3-逆向工程和MybatisX插件" class="headerlink" title="5.3 逆向工程和MybatisX插件"></a>5.3 逆向工程和MybatisX插件</h3><h4 id="5-3-1-ORM思维介绍"><a href="#5-3-1-ORM思维介绍" class="headerlink" title="5.3.1 ORM思维介绍"></a>5.3.1 ORM思维介绍</h4><p>ORM（Object-Relational Mapping，对象-关系映射）是一种将数据库和面向对象编程语言中的对象之间进行转换的技术。它将对象和关系数据库的概念进行映射，最后我们就可以通过方法调用进行数据库操作!!</p>
<p>最终: <strong>让我们可以使用面向对象思维进行数据库操作！！！</strong></p>
<p><strong>ORM 框架通常有半自动和全自动两种方式。</strong></p>
<ul>
<li>半自动 ORM 通常需要程序员手动编写 SQL 语句或者配置文件，将实体类和数据表进行映射，还需要手动将查询的结果集转换成实体对象。</li>
<li>全自动 ORM 则是将实体类和数据表进行自动映射，使用 API 进行数据库操作时，ORM 框架会自动执行 SQL 语句并将查询结果转换成实体对象，程序员无需再手动编写 SQL 语句和转换代码。</li>
</ul>
<p><strong>下面是半自动和全自动 ORM 框架的区别：</strong></p>
<ol>
<li>映射方式：半自动 ORM 框架需要程序员手动指定实体类和数据表之间的映射关系，通常使用 XML 文件或注解方式来指定；全自动 ORM 框架则可以自动进行实体类和数据表的映射，无需手动干预。</li>
<li>查询方式：半自动 ORM 框架通常需要程序员手动编写 SQL 语句并将查询结果集转换成实体对象；全自动 ORM 框架可以自动组装 SQL 语句、执行查询操作，并将查询结果转换成实体对象。</li>
<li>性能：由于半自动 ORM 框架需要手动编写 SQL 语句，因此程序员必须对 SQL 语句和数据库的底层知识有一定的了解，才能编写高效的 SQL 语句；而全自动 ORM 框架通过自动优化生成的 SQL 语句来提高性能，程序员无需进行优化。</li>
<li>学习成本：半自动 ORM 框架需要程序员手动编写 SQL 语句和映射配置，要求程序员具备较高的数据库和 SQL 知识；全自动 ORM 框架可以自动生成 SQL 语句和映射配置，程序员无需了解过多的数据库和 SQL 知识。</li>
</ol>
<p>常见的<code>半自动 ORM 框架包括 MyBatis</code> 等；常见的全自动 ORM 框架包括 Hibernate、Spring Data JPA、<code>MyBatis-Plus</code> 等。</p>
<h4 id="5-3-2-逆向工程"><a href="#5-3-2-逆向工程" class="headerlink" title="5.3.2 逆向工程"></a>5.3.2 逆向工程</h4><p>&#x20;   MyBatis 的逆向工程是一种自动化生成持久层代码和映射文件的工具，它可以根据数据库表结构和设置的参数生成对应的实体类、Mapper.xml 文件、Mapper 接口等代码文件，简化了开发者手动生成的过程。逆向工程使开发者可以快速地构建起 DAO 层，并快速上手进行业务开发。<br>&#x20;  MyBatis 的逆向工程有两种方式：通过 MyBatis Generator 插件实现和通过 Maven 插件实现。无论是哪种方式，逆向工程一般需要指定一些配置参数，例如数据库连接 URL、用户名、密码、要生成的表名、生成的文件路径等等。<br>&#x20;  总的来说，MyBatis 的逆向工程为程序员提供了一种方便快捷的方式，能够快速地生成持久层代码和映射文件，是半自动 ORM 思维像全自动发展的过程，提高程序员的开发效率。</p>
<p><strong>注意：逆向工程只能生成单表crud的操作，多表查询依然需要我们自己编写！</strong></p>
<h4 id="5-3-3-逆向工程插件MyBatisX使用"><a href="#5-3-3-逆向工程插件MyBatisX使用" class="headerlink" title="5.3.3 逆向工程插件MyBatisX使用"></a>5.3.3 逆向工程插件MyBatisX使用</h4><p>&#x20;  MyBatisX 是一个 MyBatis 的代码生成插件，可以通过简单的配置和操作快速生成 MyBatis Mapper、pojo 类和 Mapper.xml 文件。下面是使用 MyBatisX 插件实现逆向工程的步骤：</p>
<ol>
<li><p>安装插件：</p>
<p>在 IntelliJ IDEA 中打开插件市场，搜索 MyBatisX 并安装。</p>
</li>
<li><p>使用 IntelliJ IDEA连接数据库</p>
<ul>
<li><p>连接数据库</p>
<p><img src="https://blog-resources.this0.com/image/202405112003457.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>填写信息</p>
<p><img src="https://blog-resources.this0.com/image/202405112003389.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>展示库表</p>
<p><img src="https://blog-resources.this0.com/image/202405112003652.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>逆向工程使用</p>
<p><img src="https://blog-resources.this0.com/image/202405112003724.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202405112003213.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202405112003480.png?x-oss-process=style/this0-blog"></p>
</li>
</ul>
</li>
<li><p>查看生成结果</p>
<p><img src="https://blog-resources.this0.com/image/202405112003594.png?x-oss-process=style/this0-blog"></p>
</li>
<li><p>逆向工程案例使用</p>
<p>正常使用即可，自动生成单表的crud方法！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Jackiechan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 针对表【user】的数据库操作Mapper</span></span><br><span class="line"><span class="comment">* <span class="doctag">@createDate</span> 2023-06-02 16:55:32</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Entity</span> com.this0.pojo.User</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByPrimaryKey</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertSelective</span><span class="params">(User record)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">selectByPrimaryKey</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKeySelective</span><span class="params">(User record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKey</span><span class="params">(User record)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="六、MyBatis总结"><a href="#六、MyBatis总结" class="headerlink" title="六、MyBatis总结"></a>六、MyBatis总结</h2><table>
<thead>
<tr>
<th>核心点</th>
<th>掌握目标</th>
</tr>
</thead>
<tbody><tr>
<td>mybatis基础</td>
<td>使用流程, 参数输入,#{} ${},参数输出</td>
</tr>
<tr>
<td>mybatis多表</td>
<td>实体类设计,resultMap多表结果映射</td>
</tr>
<tr>
<td>mybatis动态语句</td>
<td>Mybatis动态语句概念, where , if , foreach标签</td>
</tr>
<tr>
<td>mybatis扩展</td>
<td>Mapper批量处理,分页插件,逆向工程</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/articles/1.html</url>
    <content><![CDATA[<h1 id="SpringBoot3"><a href="#SpringBoot3" class="headerlink" title="SpringBoot3"></a>SpringBoot3</h1><h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><h2 id="1-前置知识"><a href="#1-前置知识" class="headerlink" title="1. 前置知识"></a>1. 前置知识</h2><ul>
<li>Java17</li>
<li>Spring、SpringMVC、MyBatis</li>
<li>Maven、IDEA</li>
</ul>
<h2 id="2-环境要求"><a href="#2-环境要求" class="headerlink" title="2. 环境要求"></a>2. 环境要求</h2><table>
<thead>
<tr>
<th>环境&amp;工具</th>
<th>版本（or later）</th>
</tr>
</thead>
<tbody><tr>
<td>SpringBoot</td>
<td>3.0.5+</td>
</tr>
<tr>
<td>IDEA</td>
<td>2022+</td>
</tr>
<tr>
<td>Java</td>
<td>17+</td>
</tr>
<tr>
<td>Maven</td>
<td>3.5+</td>
</tr>
</tbody></table>
<h2 id="3-SpringBoot是什么"><a href="#3-SpringBoot是什么" class="headerlink" title="3. SpringBoot是什么"></a>3. SpringBoot是什么</h2><p>SpringBoot 帮我们简单、快速地创建一个独立的、生产级别的 <strong>Spring 应用（说明：SpringBoot底层是Spring）</strong></p>
<p>大多数 SpringBoot 应用只需要编写少量配置即可快速整合 Spring 平台以及第三方技术</p>
<p><strong>特性：</strong></p>
<ul>
<li><p>快速创建独立 Spring 应用</p>
<ul>
<li>SSM：导包、写配置、启动运行</li>
</ul>
</li>
<li><p>直接嵌入Tomcat、Jetty or Undertow（无需部署 war 包）【Servlet容器】</p>
<ul>
<li><p>linux  java tomcat mysql： war 放到 tomcat 的 webapps下</p>
</li>
<li><p>jar： java环境；  java -jar</p>
</li>
</ul>
</li>
<li><p><strong>重点</strong>：提供可选的starter，简化应用<strong>整合</strong></p>
<ul>
<li><p><strong>场景启动器</strong>（starter）：web、json、邮件、oss（对象存储）、异步、定时任务、缓存…</p>
</li>
<li><p>导包一堆，控制好版本。</p>
</li>
<li><p>为每一种场景准备了一个依赖； <strong>web-starter。mybatis-starter</strong></p>
</li>
</ul>
</li>
<li><p><strong>重点：</strong>按需自动配置 Spring 以及 第三方库</p>
</li>
<li><p>如果这些场景我要使用（生效）。这个场景的所有配置都会自动配置好。</p>
</li>
<li><p><strong>约定大于配置</strong>：每个场景都有很多默认配置。</p>
<ul>
<li>自定义：配置文件中修改几项就可以</li>
</ul>
</li>
<li><p>提供生产级特性：如 监控指标、健康检查、外部化配置等</p>
<ul>
<li>监控指标、健康检查（k8s）、外部化配置</li>
</ul>
</li>
<li><p>无代码生成、无xml</p>
</li>
</ul>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">约定大于配置，convention over configuration，也叫按约定编程，是一种软件设计范式，旨在减少软件开发人员需做决定的数量，获得简单的好处，而又不失灵活性。 本质是说，开发人员仅需规定应用中不符约定的部分。</span><br><span class="line">举例，如果我们项目中使用到Tomcat，Tomcat启动默认端口号是8080。只有在偏离这一约定时，例如将Tomcat端口号改为8021，才需写有关端口号的配置。 如果所用工具的约定与期待相符，便可省去配置；反之，可以配置来达到所期待的方式。所以这样既使我们的开发工作变得更简单，也保证了相应的开发灵活性。</span><br><span class="line"></span><br><span class="line">一句话总结来说，约定大于配置就是一种开发原则，就是为了减少人为的配置，能使用默认配置就使用默认配置，默认配置其实就是所谓的“约定”。当存在特殊需求的时候，我们再自行自定义配置覆盖掉默认配置即可，这样就可以大大的减少配置工作，提高我们的工作效率。</span><br></pre></td></tr></table></figure>



<p><strong>总结：简化开发，简化配置，简化整合，简化部署，简化监控，简化运维。</strong></p>
<h1 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h1><p>场景：浏览器发送**&#x2F;hello**请求，返回”<strong>Hello,Spring Boot 3!</strong>“</p>
<h2 id="1-开发步骤"><a href="#1-开发步骤" class="headerlink" title="1. 开发步骤"></a>1. 开发步骤</h2><ol>
<li><strong>创建Maven工程</strong></li>
<li><strong>添加依赖(springboot父工程依赖 , web启动器依赖)</strong></li>
<li><strong>编写启动引导类(springboot项目运行的入口)</strong></li>
<li><strong>编写处理器Controller</strong></li>
<li><strong>启动项目</strong></li>
</ol>
<h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h2><p>创建maven 项目 springboot3</p>
<h2 id="3-添加依赖"><a href="#3-添加依赖" class="headerlink" title="3. 添加依赖"></a>3. 添加依赖</h2><h3 id="（1）添加父工程坐标"><a href="#（1）添加父工程坐标" class="headerlink" title="（1）添加父工程坐标"></a>（1）添加父工程坐标</h3><p>SpringBoot可以帮我们方便的管理项目依赖 , 在Spring Boot提供了一个名为<strong>spring-boot-starter-parent</strong>的工程，里面已经对各种常用依赖的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们就不用操心依赖的版本问题了，需要什么依赖，直接引入坐标(不需要添加版本)即可！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    所有springboot项目都必须继承自 spring-boot-starter-parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="（2）添加web启动器"><a href="#（2）添加web启动器" class="headerlink" title="（2）添加web启动器"></a>（2）添加web启动器</h3><p>为了让Spring Boot帮我们完成各种自动配置，我们必须引入Spring Boot提供的<strong>自动配置依赖</strong>，我们称为<strong>启动器</strong>。因为我们是web项目，这里我们引入web启动器，在 pom.xml 文件中加入如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        web开发的场景启动器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-编写启动引导类"><a href="#4-编写启动引导类" class="headerlink" title="4. 编写启动引导类"></a>4. 编写启动引导类</h2><p>创建package：com.this0.springboot3</p>
<p>创建启动类：MainApplication</p>
<p>@SpringBootApplication注解的功效在这章后面解释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//SpringApplication.run() 方法是启动 Spring Boot 应用程序的关键步骤。它创建应用程序上下文、</span></span><br><span class="line">    <span class="comment">// 自动配置应用程序、启动应用程序，并处理命令行参数，使应用程序能够运行和提供所需的功能</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-编写处理器Controller"><a href="#5-编写处理器Controller" class="headerlink" title="5. 编写处理器Controller"></a>5. 编写处理器Controller</h2><p>创建package：com.this0.springboot3.controller</p>
<p>创建类：HelloController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.springboot3.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,Spring Boot 3!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="6-启动测试"><a href="#6-启动测试" class="headerlink" title="6. 启动测试"></a>6. 启动测试</h2><p>运行启动类main方法</p>
<p><img src="https://blog-resources.this0.com/image/202403301706555.png?x-oss-process=style/this0-blog" alt="image-20240310052620479"></p>
<p>控制台会输出如下信息 :</p>
<p><img src="https://blog-resources.this0.com/image/202403301706325.png?x-oss-process=style/this0-blog" alt="image-20230620094331984"></p>
<p>打开浏览器,访问：<a href="http://localhost:8080/hello">http://localhost:8080/hello</a></p>
<p><img src="https://blog-resources.this0.com/image/202403301706366.png?x-oss-process=style/this0-blog" alt="image-20230620094720404"></p>
<h2 id="7-小结与补充"><a href="#7-小结与补充" class="headerlink" title="7. 小结与补充"></a>7. 小结与补充</h2><h3 id="1-依赖管理机制"><a href="#1-依赖管理机制" class="headerlink" title="1. 依赖管理机制"></a>1. 依赖管理机制</h3><p>思考：</p>
<p><strong>1、为什么导入<code>starter-web</code>所有相关依赖都导入进来？</strong></p>
<ul>
<li>开发什么场景，导入什么<strong>场景启动器。</strong></li>
<li><strong>maven依赖传递原则。A-B-C： A就拥有B和C</strong></li>
<li>导入 场景启动器。 场景启动器 自动把这个场景的所有核心依赖全部导入进来</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403301706521.png?x-oss-process=style/this0-blog" alt="image-20230702115101021"></p>
<h3 id="2-为什么依赖不需要声明版本？"><a href="#2-为什么依赖不需要声明版本？" class="headerlink" title="2 为什么依赖不需要声明版本？"></a>2 为什么依赖不需要声明版本？</h3><ul>
<li><p>每个boot项目都有一个父项目<code>spring-boot-starter-parent</code></p>
</li>
<li><p>parent的父项目是<code>spring-boot-dependencies</code></p>
</li>
<li><p>父项目 <strong>版本仲裁中心</strong>，即，<code>spring-boot-dependencies</code>，把所有常见的jar的依赖版本都声明好了。</p>
</li>
<li><p>比如：<code>mysql-connector-j</code><img src="https://blog-resources.this0.com/image/202403301706338.png?x-oss-process=style/this0-blog"></p>
</li>
</ul>
<h3 id="3-自定义版本号和jar包"><a href="#3-自定义版本号和jar包" class="headerlink" title="3 自定义版本号和jar包"></a>3 自定义版本号和jar包</h3><h4 id="1-自定义版本号"><a href="#1-自定义版本号" class="headerlink" title="1 自定义版本号"></a>1 自定义版本号</h4><p>  利用maven的就近原则</p>
<ul>
<li><p>直接在当前项目<code>properties</code>标签中声明父项目用的版本属性的key</p>
</li>
<li><p>直接在<strong>导入依赖的时候声明版本</strong></p>
</li>
</ul>
<h4 id="2-第三方的jar包"><a href="#2-第三方的jar包" class="headerlink" title="2 第三方的jar包"></a>2 第三方的jar包</h4><ul>
<li>boot父项目没有管理的需要自行声明好</li>
</ul>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="3、SpringBoot配置文件"><a href="#3、SpringBoot配置文件" class="headerlink" title="3、SpringBoot配置文件"></a>3、SpringBoot配置文件</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p><strong>（1）Springboot支持两种类型的配置文件</strong></p>
<p>· properties属性配置文件</p>
<p>· yaml配置文件</p>
<p><strong>（2）配置文件必须放置在项目的类加载目录下, 并且名字必须是application</strong></p>
<p>springboot项目在运行的时候会自动加载这些配置文件</p>
<p>同级目录下打开：spring-configuration-metadata.json</p>
<p><img src="https://blog-resources.this0.com/image/202403301706349.png?x-oss-process=style/this0-blog" alt="image-20230620100128621"> </p>
<p>搜索：server.port</p>
<p><img src="https://blog-resources.this0.com/image/202403301706646.png?x-oss-process=style/this0-blog" alt="image-20230620100251782"> </p>
<p><strong>（3）为什么可以在resources下创建application.properties文件呢？</strong></p>
<p>我们查看springboot的父启动依赖：点击spring-boot-starter-parent&#x2F;&#x2F;todo</p>
<p><img src="https://blog-resources.this0.com/image/202403301706638.png?x-oss-process=style/this0-blog" alt="image-20230620100418834"> </p>
<h2 id="2-配置文件—properties"><a href="#2-配置文件—properties" class="headerlink" title="2. 配置文件—properties"></a>2. 配置文件—properties</h2><h3 id="（1）创建配置文件"><a href="#（1）创建配置文件" class="headerlink" title="（1）创建配置文件"></a>（1）创建配置文件</h3><p>在 resource 文件夹下面新建 application.properties 配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.jdbc.datasource.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.driver</span></span><br><span class="line"><span class="attr">spring.jdbc.datasource.url</span>=<span class="string">jdbc:mysql:///springboot_01</span></span><br><span class="line"><span class="attr">spring.jdbc.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.jdbc.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>



<h3 id="（2）获取配置文件"><a href="#（2）获取配置文件" class="headerlink" title="（2）获取配置文件"></a>（2）获取配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.springboot3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.driverClassName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成get set 和 toString方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDriverClassName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDriverClassName</span><span class="params">(String driverClassName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.driverClassName = driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DataSourceProperties&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;driverClassName=&#x27;&quot;</span> + driverClassName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, url=&#x27;&quot;</span> + url + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="（3）测试效果"><a href="#（3）测试效果" class="headerlink" title="（3）测试效果"></a>（3）测试效果</h3><p>在controller注入，输出进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourceProperties dataSourceProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(dataSourceProperties);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,Spring Boot 3!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>浏览器访问路径，控制台查看效果</p>
<p><img src="https://blog-resources.this0.com/image/202403301706700.png?x-oss-process=style/this0-blog" alt="image-20230620101157172"></p>
<h2 id="3-配置文件—YAML"><a href="#3-配置文件—YAML" class="headerlink" title="3. 配置文件—YAML"></a>3. 配置文件—YAML</h2><h3 id="（1）什么是YAML"><a href="#（1）什么是YAML" class="headerlink" title="（1）什么是YAML"></a>（1）什么是YAML</h3><p> YAML是一种配置文件格式，yaml与properties配置文件除了展示形式不相同以外，其它功能和作用都是一样的</p>
<h3 id="（2）语法"><a href="#（2）语法" class="headerlink" title="（2）语法"></a>（2）语法</h3><p>1.数据结构用树形结构呈现，通过缩进来表示层级，</p>
<p>2.<code>连续的项目通过减号 ” - ” 来表示</code>&#x2F;&#x2F;TODO</p>
<p>3.键值结构里面的key&#x2F;value对用冒号 ” : ” 来分隔。</p>
<p>4.YAML配置文件的扩展名是yaml 或 yml</p>
<p><strong>yaml文件示例：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8200</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">service-product</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://service-product</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/*/product/**</span></span><br></pre></td></tr></table></figure>



<h3 id="（3）读取文件"><a href="#（3）读取文件" class="headerlink" title="（3）读取文件"></a>（3）读取文件</h3><p>在 resource 文件夹下面新建 application.yml 配置文件，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///springboot_02</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>运行项目，重新请求 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a></p>
<p><img src="https://blog-resources.this0.com/image/202403301707047.png?x-oss-process=style/this0-blog" alt="image-20230620101635627"></p>
<h2 id="4-批量注入属性"><a href="#4-批量注入属性" class="headerlink" title="4. 批量注入属性"></a>4. 批量注入属性</h2><p><strong>@ConfigurationProperties</strong>是SpringBoot提供的重要注解, 他可以将一些配置属性批量注入到bean对象。</p>
<h3 id="（1）创建类，添加属性和注解"><a href="#（1）创建类，添加属性和注解" class="headerlink" title="（1）创建类，添加属性和注解"></a>（1）创建类，添加属性和注解</h3><ul>
<li><p>在类上通过@ConfigurationProperties注解声明该类要读取属性配置</p>
</li>
<li><p>prefix&#x3D;”spring.jdbc.datasource” 读取属性文件中前缀为spring.jdbc.datasource的值。前缀和属性名称和配置文件中的key必须要保持一致才可以注入成功</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.springboot3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.driverClassName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.jdbc.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成get set 和 toString方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDriverClassName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDriverClassName</span><span class="params">(String driverClassName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.driverClassName = driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;DataSourceProperties&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;driverClassName=&#x27;&quot;</span> + driverClassName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, url=&#x27;&quot;</span> + url + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="（2）添加controller测试"><a href="#（2）添加controller测试" class="headerlink" title="（2）添加controller测试"></a>（2）添加controller测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.springboot3.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.springboot3.DataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourceProperties dataSourceProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(dataSourceProperties);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,Spring Boot 3!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="5-多环境profile切换配置"><a href="#5-多环境profile切换配置" class="headerlink" title="5. 多环境profile切换配置"></a>5. 多环境profile切换配置</h2><p>Spring Boot项目中配置文件的名称只能是<strong>application</strong> , 如果我们把所有的配置全都写在一个配置文件中如果配置项比较多, 配置文件就会显得比较复杂和臃肿 ! 不利于后期的项目维护和开发</p>
<p>例如下面几个场景 :</p>
<p>1.因为开发环境变化, 我们需要修改配置文件中某一个配置项的值（比如之前是mysql数据库，切换oracle数据库）</p>
<p>2.项目开发完成需要上线了 , 需要把一些环境修改成正式环境（<strong>开发</strong>，<strong>测试</strong>，<strong>上线</strong>，多环境切换）</p>
<p><strong>解决方案 :使用profiles拆分配置</strong></p>
<p>spring boot项目中允许使用多个YAML配置文件。</p>
<p><code>这些文件名称必须为application-*.yml，并且在application.yml中激活。</code></p>
<h3 id="（1）需求："><a href="#（1）需求：" class="headerlink" title="（1）需求："></a><strong>（1）需求：</strong></h3><p><strong>将项目的开发、测试、生产环境配置进行拆分，可以根据需求切换</strong></p>
<h3 id="（2）功能实现"><a href="#（2）功能实现" class="headerlink" title="（2）功能实现"></a>（2）功能实现</h3><p> <strong>第一步：</strong>创建开发、测试、生产三个配置文件</p>
<p>application-dev.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///dev</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>application-test.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>application-prod.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql:///prod</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<p><strong>第二步：</strong>在application.yml激活</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p><strong>直接运行项目</strong>：<a href="http://localhost:8080/hello">http://localhost:8080/hello</a></p>
<p><img src="https://blog-resources.this0.com/image/202403301706847.png?x-oss-process=style/this0-blog" alt="image-20230620102713091"></p>
<p><strong>注意 :</strong> </p>
<p><code>如果properties和yml文件都存在，没有spring.profiles.active设置，如果有重叠属性，默认以properties优先。</code></p>
<p>如果设置了spring.profiles.active，并且有重叠属性，以active设置优先。</p>
<h1 id="4、SpringBoot自动配置原理"><a href="#4、SpringBoot自动配置原理" class="headerlink" title="4、SpringBoot自动配置原理"></a>4、SpringBoot自动配置原理</h1><h2 id="1-初步理解"><a href="#1-初步理解" class="headerlink" title="1. 初步理解"></a>1. 初步理解</h2><ul>
<li><p><strong>自动配置</strong>的 Tomcat、SpringMVC 等</p>
</li>
<li><ul>
<li><strong>导入场景</strong>，容器中就会自动配置好这个场景的核心组件。</li>
<li>以前：DispatcherServlet、ViewResolver、CharacterEncodingFilter….</li>
<li>现在：自动配置好的这些组件</li>
<li>验证：<strong>容器中有了什么组件，就具有什么功能</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">ioc</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、获取容器中所有组件的名字</span></span><br><span class="line">    String[] names = ioc.getBeanDefinitionNames();</span><br><span class="line">    <span class="comment">//2、挨个遍历：</span></span><br><span class="line">    <span class="comment">// dispatcherServlet、beanNameViewResolver、characterEncodingFilter、multipartResolver</span></span><br><span class="line">    <span class="comment">// SpringBoot把以前配置的核心组件现在都给我们自动配置好了。</span></span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>默认的包扫描规则</strong></p>
</li>
<li><ul>
<li><code>@SpringBootApplication</code> 标注的类就是主程序类</li>
<li><strong>SpringBoot只会扫描主程序所在的包及其下面的子包，自动的component-scan功能</strong></li>
<li><strong>自定义扫描路径</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>@SpringBootApplication(scanBasePackages &#x3D; “com.this0”)</li>
<li><code>@ComponentScan(&quot;com.this0&quot;)</code> 直接指定扫描的路径</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>配置默认值</strong></p>
</li>
<li><ul>
<li><strong>配置文件</strong>的所有配置项是和某个<strong>类的对象</strong>值进行一一绑定的。</li>
<li>绑定了配置文件中每一项值的类： <strong>属性类</strong>。</li>
<li>比如：</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><code>ServerProperties</code>绑定了所有Tomcat服务器有关的配置</li>
<li><code>MultipartProperties</code>绑定了所有文件上传相关的配置</li>
<li>….参照<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server">官方文档</a>：或者参照 绑定的  <strong>属性类</strong>。</li>
</ul>
</li>
</ul>
</li>
<li><p>按需加载自动配置</p>
</li>
<li><ul>
<li>导入场景<code>spring-boot-starter-web</code></li>
<li>场景启动器除了会导入相关功能依赖，导入一个<code>spring-boot-starter</code>，是所有<code>starter</code>的<code>starter</code>，基础核心starter</li>
<li><code>spring-boot-starter</code>导入了一个包 <code>spring-boot-autoconfigure</code>。包里面都是各种场景的<code>AutoConfiguration</code><strong>自动配置类</strong></li>
<li>虽然全场景的自动配置都在 <code>spring-boot-autoconfigure</code>这个包，但是不是全都开启的。</li>
</ul>
</li>
<li><ul>
<li>导入哪个场景就开启哪个自动配置</li>
</ul>
</li>
</ul>
<p>总结： 导入场景启动器、触发 <code>spring-boot-autoconfigure</code>这个包的自动配置生效、容器中就会具有相关场景的功能</p>
<h2 id="2-完整流程-TODO"><a href="#2-完整流程-TODO" class="headerlink" title="2. 完整流程&#x2F;&#x2F;TODO"></a>2. 完整流程&#x2F;&#x2F;TODO</h2><p>思考：</p>
<p><strong>1、SpringBoot怎么实现导一个</strong><code>starter</code><strong>、写一些简单配置，应用就能跑起来，我们无需关心整合</strong></p>
<p>2、为什么Tomcat的端口号可以配置在<code>application.properties</code>中，并且<code>Tomcat</code>能启动成功？</p>
<p>3、导入场景后哪些<strong>自动配置能生效</strong>？</p>
<p><img src="https://blog-resources.this0.com/image/202403301706882.png?x-oss-process=style/this0-blog" alt="img"></p>
<p><strong>自动配置流程细节梳理：</strong></p>
<p><strong>1、</strong>导入<code>starter-web</code>：导入了web开发场景</p>
<ul>
<li>1、场景启动器导入了相关场景的所有依赖：<code>starter-json</code>、<code>starter-tomcat</code>、<code>springmvc</code></li>
<li>2、每个场景启动器都引入了一个<code>spring-boot-starter</code>，核心场景启动器。</li>
<li>3、<strong>核心场景启动器</strong>引入了<code>spring-boot-autoconfigure</code>包。</li>
<li>4、<code>spring-boot-autoconfigure</code>里面囊括了所有场景的所有配置。</li>
<li>5、只要这个包下的所有类都能生效，那么相当于SpringBoot官方写好的整合功能就生效了。</li>
<li>6、SpringBoot默认却扫描不到 <code>spring-boot-autoconfigure</code>下写好的所有<strong>配置类</strong>。（这些<strong>配置类</strong>给我们做了整合操作），<strong>默认只扫描主程序所在的包</strong>。</li>
</ul>
<p><strong>2、</strong>主程序：<code>@SpringBootApplication</code></p>
<ul>
<li><p>1、<code>@SpringBootApplication</code>由三个注解组成<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguratio</code>、<code>@ComponentScan</code></p>
</li>
<li><p>2、SpringBoot默认只能扫描自己主程序所在的包及其下面的子包，扫描不到 <code>spring-boot-autoconfigure</code>包中官方写好的<strong>配置类</strong></p>
</li>
<li><p>3、<code>**@EnableAutoConfiguration**</code>：SpringBoot <strong>开启自动配置的核心</strong>。</p>
</li>
<li><ul>
<li><ol>
<li>是由<code>@Import(AutoConfigurationImportSelector.class)</code>提供功能：批量给容器中导入组件。</li>
</ol>
</li>
<li><ol start="2">
<li>SpringBoot启动会默认加载 142个配置类。</li>
</ol>
</li>
<li><ol start="3">
<li>这<strong>142个配置类</strong>来自于<code>spring-boot-autoconfigure</code>下 <code>META-INF/spring/**org.springframework.boot.autoconfigure.AutoConfiguration**.imports</code>文件指定的</li>
</ol>
</li>
<li>项目启动的时候利用 @Import 批量导入组件机制把 <code>autoconfigure</code> 包下的142 <code>xxxxAutoConfiguration</code>类导入进来（<strong>自动配置类</strong>）</li>
<li>虽然导入了<code>142</code>个自动配置类</li>
</ul>
</li>
<li><p>4、按需生效：</p>
</li>
<li><ul>
<li>并不是这<code>142</code>个自动配置类都能生效</li>
<li>每一个自动配置类，都有条件注解<code>@ConditionalOnxxx</code>，只有条件成立，才能生效</li>
</ul>
</li>
</ul>
<p><strong>3、</strong><code>**xxxxAutoConfiguration**</code><strong>自动配置类</strong></p>
<ul>
<li><strong>1、给容器中使用@Bean 放一堆组件。</strong></li>
<li>2、每个<strong>自动配置类</strong>都可能有这个注解<code>@EnableConfigurationProperties(**ServerProperties**.class)</code>，用来把配置文件中配的指定前缀的属性值封装到 <code>xxxProperties</code><strong>属性类</strong>中</li>
<li>3、以DataSourceAutoConfiguration为例：所有配置都是以<code>spring.datasource</code>开头的，配置都封装到了属性类中。</li>
<li>4、给<strong>容器</strong>中放的所有<strong>组件</strong>的一些<strong>核心参数</strong>，都来自于<code>**xxxProperties**</code><strong>。</strong><code>**xxxProperties**</code><strong>都是和配置文件绑定。</strong></li>
<li><strong>只需要改配置文件的值，核心组件的底层参数都能修改</strong></li>
</ul>
<p><strong>4、</strong>写业务，全程无需关心各种整合（底层这些整合写好了，而且也生效了）</p>
<p><strong>核心流程总结：</strong>&#x2F;&#x2F;TODO</p>
<p>1、导入<code>starter</code>，就会导入<code>autoconfigure</code>包。</p>
<p>2、<code>autoconfigure</code> 包里面 有一个文件 <code>META-INF/spring/**org.springframework.boot.autoconfigure.AutoConfiguration**.imports</code>,里面指定的所有启动要加载的自动配置类</p>
<p>3、@EnableAutoConfiguration 会自动的把上面文件里面写的所有<strong>自动配置类都导入进来。xxxAutoConfiguration 是有条件注解进行按需加载</strong></p>
<p>4、<code>xxxAutoConfiguration</code>给容器中导入一堆组件，组件都是从 <code>xxxProperties</code>中提取属性值</p>
<p>5、<code>xxxProperties</code>又是和<strong>配置文件</strong>进行了绑定</p>
<p><strong>效果：</strong>导入<code>starter</code>、修改配置文件，就能修改底层行为。</p>
<h2 id="3-进阶理解"><a href="#3-进阶理解" class="headerlink" title="3. 进阶理解"></a>3. 进阶理解</h2><h3 id="1-SpringBootApplication"><a href="#1-SpringBootApplication" class="headerlink" title="1. @SpringBootApplication"></a>1. @SpringBootApplication</h3><h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><p>就是： @Configuration ，容器中的组件，配置类。spring ioc启动就会加载创建这个类对象</p>
<h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><p>开启自动配置</p>
<h5 id="AutoConfigurationPackage：扫描主程序包：加载自己的组件"><a href="#AutoConfigurationPackage：扫描主程序包：加载自己的组件" class="headerlink" title="@AutoConfigurationPackage：扫描主程序包：加载自己的组件"></a>@AutoConfigurationPackage：扫描主程序包：加载自己的组件</h5><ul>
<li>利用 <code>@Import(AutoConfigurationPackages.Registrar.class)</code> 想要给容器中导入组件。</li>
<li>把主程序所在的<strong>包</strong>的所有组件导入进来。</li>
<li><strong>为什么SpringBoot默认只扫描主程序所在的包及其子包</strong></li>
</ul>
<h5 id="Import-AutoConfigurationImportSelector-class-：加载所有自动配置类：加载starter导入的组件"><a href="#Import-AutoConfigurationImportSelector-class-：加载所有自动配置类：加载starter导入的组件" class="headerlink" title="@Import(AutoConfigurationImportSelector.class)：加载所有自动配置类：加载starter导入的组件"></a>@Import(AutoConfigurationImportSelector.class)：加载所有自动配置类：加载starter导入的组件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; configurations = ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader())</span><br><span class="line">	.getCandidates();</span><br></pre></td></tr></table></figure>

<p>扫描文件：<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></p>
<h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><p>组件扫描：排除一些组件（哪些不要）</p>
<p>排除前面已经扫描进来的<code>配置类</code>、和<code>自动配置类</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br></pre></td></tr></table></figure>



<h2 id="4-SPringBoot自定义启动器"><a href="#4-SPringBoot自定义启动器" class="headerlink" title="4. SPringBoot自定义启动器"></a>4. SPringBoot自定义启动器</h2><p>场景：<strong>抽取聊天机器人场景，它可以打招呼</strong>。</p>
<p>效果：任何项目导入此<code>starter</code>都具有打招呼功能，并且<strong>问候语</strong>中的<strong>人名</strong>需要可以在<strong>配置文件</strong>中修改</p>
<p>流程梳理</p>
<ul>
<li><ol>
<li>创建<code>自定义starter</code>项目，引入<code>spring-boot-starter</code>基础依赖</li>
</ol>
</li>
<li><ol start="2">
<li>编写模块功能，引入模块所有需要的依赖。</li>
</ol>
</li>
<li><ol start="3">
<li>编写<code>xxxAutoConfiguration</code>自动配置类，帮其他项目导入这个模块需要的所有组件</li>
</ol>
</li>
<li><ol start="4">
<li>编写配置文件<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>指定启动需要加载的自动配置</li>
</ol>
</li>
<li><ol start="5">
<li>其他项目引入即可使用</li>
</ol>
</li>
</ul>
<h3 id="1-创建自定义启动工程"><a href="#1-创建自定义启动工程" class="headerlink" title="1. 创建自定义启动工程"></a>1. 创建自定义启动工程</h3><p>创建一个springboot项目：mystarter</p>
<h3 id="2-引入依赖"><a href="#2-引入依赖" class="headerlink" title="2. 引入依赖"></a>2. 引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mystarter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        导入配置处理器，这样配置文件自定义的properties才会有提示--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-自定义业务类"><a href="#3-自定义业务类" class="headerlink" title="3. 自定义业务类"></a>3. 自定义业务类</h3><h4 id="（1）RobotProperties"><a href="#（1）RobotProperties" class="headerlink" title="（1）RobotProperties"></a>（1）RobotProperties</h4><p>配置文件绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;robot&quot;)</span>  <span class="comment">//此属性类和配置文件指定前缀绑定</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（2）RobotService"><a href="#（2）RobotService" class="headerlink" title="（2）RobotService"></a>（2）RobotService</h4><p>业务层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RobotProperties robotProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好!&quot;</span>+robotProperties.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-基本抽取"><a href="#4-基本抽取" class="headerlink" title="4. 基本抽取"></a>4. 基本抽取</h3><ul>
<li><p>自己写一个 <code>RobotAutoConfiguration</code>，给容器中导入这个场景需要的所有组件</p>
</li>
<li><ul>
<li>为什么这些组件默认不会扫描进去？</li>
<li><strong>starter所在的包和引入它的项目的主程序所在的包不是父子层级</strong></li>
</ul>
</li>
<li><p>别人引用这个<code>starter</code>，直接导入这个 <code>RobotAutoConfiguration</code>,就能把这个场景的组件导入进来</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给容器中导入Robot功能要用的所有组件</span></span><br><span class="line"><span class="meta">@Import(&#123;RobotProperties.class, RobotService.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-使用-EnableXxx机制"><a href="#5-使用-EnableXxx机制" class="headerlink" title="5. 使用@EnableXxx机制"></a>5. 使用@EnableXxx机制</h3><p>&#x2F;&#x2F;TODO,import</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(RobotAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableRobot &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>别人引入<code>starter</code>需要使用 <code>@EnableRobot</code>开启功能  </p>
<h3 id="6-完全自动配置"><a href="#6-完全自动配置" class="headerlink" title="6. 完全自动配置"></a>6. 完全自动配置</h3><ul>
<li>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports 文件中编写好我们自动配置类的全类名即可</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">com</span>.this0.RobotAutoConfiguration</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403301706986.png?x-oss-process=style/this0-blog" alt="image-20240311125250384"></p>
<h3 id="7-使用自定义启动器"><a href="#7-使用自定义启动器" class="headerlink" title="7. 使用自定义启动器"></a>7. 使用自定义启动器</h3><h4 id="（1）在测试工程中引入自定义启动器项目依赖"><a href="#（1）在测试工程中引入自定义启动器项目依赖" class="headerlink" title="（1）在测试工程中引入自定义启动器项目依赖"></a>（1）在测试工程中引入自定义启动器项目依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.this0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="（2）在测试工程的启动类添加自定义启动注解"><a href="#（2）在测试工程的启动类添加自定义启动注解" class="headerlink" title="（2）在测试工程的启动类添加自定义启动注解"></a>（2）在测试工程的启动类添加自定义启动注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableRobot</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（3）在测试工程的配置文件添加数据"><a href="#（3）在测试工程的配置文件添加数据" class="headerlink" title="（3）在测试工程的配置文件添加数据"></a>（3）在测试工程的配置文件添加数据</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">robot:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ypt</span></span><br></pre></td></tr></table></figure>

<h4 id="（4）编写controller测试"><a href="#（4）编写controller测试" class="headerlink" title="（4）编写controller测试"></a>（4）编写controller测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RobotService robotService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(robotService.sayHello());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,Spring Boot 3!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动测试，访问路径：<a href="http://localhost:8080/robot/hello">http://localhost:8080/robot/hello</a></p>
<p><img src="https://blog-resources.this0.com/image/202403301707049.png?x-oss-process=style/this0-blog" alt="image-20240311125715076"></p>
<h1 id="5、SpringBoot常用启动器"><a href="#5、SpringBoot常用启动器" class="headerlink" title="5、SpringBoot常用启动器"></a>5、SpringBoot常用启动器</h1><h2 id="5-1-SpringBoot整合MVC"><a href="#5-1-SpringBoot整合MVC" class="headerlink" title="5.1. SpringBoot整合MVC"></a>5.1. SpringBoot整合MVC</h2><h3 id="5-1-1-实现"><a href="#5-1-1-实现" class="headerlink" title="5.1.1. 实现"></a>5.1.1. 实现</h3><h4 id="（1）创建工程"><a href="#（1）创建工程" class="headerlink" title="（1）创建工程"></a>（1）创建工程</h4><p>略</p>
<h4 id="（2）引入依赖"><a href="#（2）引入依赖" class="headerlink" title="（2）引入依赖"></a>（2）引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有springboot项目都必须继承自 spring-boot-starter-parent--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.this0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web开发的场景启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="（3）创建启动类"><a href="#（3）创建启动类" class="headerlink" title="（3）创建启动类"></a>（3）创建启动类</h4><p>创建package：com.this0</p>
<p>创建启动类：Application</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="（4）创建实体类"><a href="#（4）创建实体类" class="headerlink" title="（4）创建实体类"></a>（4）创建实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.springboot3.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username ;</span><br><span class="line">    <span class="keyword">private</span> String password ;</span><br><span class="line">    <span class="keyword">private</span> Integer age ;</span><br><span class="line">    <span class="keyword">private</span> String sex ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（5）编写Controller"><a href="#（5）编写Controller" class="headerlink" title="（5）编写Controller"></a>（5）编写Controller</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.springboot3.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.springboot3.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;杨过&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="（6）访问测试"><a href="#（6）访问测试" class="headerlink" title="（6）访问测试"></a>（6）访问测试</h4><p>运行项目，使用地址: <a href="http://localhost:8080/user/getUser">http://localhost:8080/user/getUser</a> 进行访问</p>
<p><img src="https://blog-resources.this0.com/image/202403301706964.png?x-oss-process=style/this0-blog" alt="image-20240312052427271"></p>
<h3 id="5-1-2-web相关配置"><a href="#5-1-2-web相关配置" class="headerlink" title="5.1.2. web相关配置"></a>5.1.2. web相关配置</h3><p>位置：application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># web相关的配置</span></span><br><span class="line"><span class="comment"># https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 端口号设置</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="comment"># 项目根路径</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/boot</span></span><br></pre></td></tr></table></figure>

<p>当涉及Spring Boot的Web应用程序配置时，以下是五个重要的配置参数：</p>
<p><code>//TODO，五个参数，后面看</code></p>
<ol>
<li><p><code>server.port</code>: 指定应用程序的HTTP服务器端口号。默认情况下，Spring Boot使用8080作为默认端口。您可以通过在配置文件中设置<code>server.port</code>来更改端口号。</p>
</li>
<li><p><code>server.servlet.context-path</code>: 设置应用程序的上下文路径。这是应用程序在URL中的基本路径。默认情况下，上下文路径为空。您可以通过在配置文件中设置<code>server.servlet.context-path</code>属性来指定自定义的上下文路径。</p>
</li>
<li><p><code>spring.mvc.view.prefix</code>和<code>spring.mvc.view.suffix</code>: 这两个属性用于配置视图解析器的前缀和后缀。视图解析器用于解析控制器返回的视图名称，并将其映射到实际的视图页面。<code>spring.mvc.view.prefix</code>定义视图的前缀，<code>spring.mvc.view.suffix</code>定义视图的后缀。</p>
</li>
<li><p><code>spring.resources.static-locations</code>: 配置静态资源的位置。静态资源可以是CSS、JavaScript、图像等。默认情况下，Spring Boot会将静态资源放在<code>classpath:/static</code>目录下。您可以通过在配置文件中设置<code>spring.resources.static-locations</code>属性来自定义静态资源的位置。</p>
</li>
<li><p><code>spring.http.encoding.charset</code>和<code>spring.http.encoding.enabled</code></p>
<p>这两个属性用于配置HTTP请求和响应的字符编码。<code>spring.http.encoding.charset</code>定义字符编码的名称（例如UTF-8），<code>spring.http.encoding.enabled</code>用于启用或禁用字符编码的自动配置。</p>
</li>
</ol>
<p>这些是在Spring Boot的配置文件中与Web应用程序相关的一些重要配置参数。根据您的需求，您可以在配置文件中设置这些参数来定制和配置您的Web应用程序</p>
<h3 id="5-1-3-静态资源目录"><a href="#5-1-3-静态资源目录" class="headerlink" title="5.1.3. 静态资源目录"></a>5.1.3. 静态资源目录</h3><p>目前项目开发中，一般都采用前后端分离开发模式（后面课程中会详细讲到），此部分内容了解即可</p>
<p>在WEB开发中我们需要引入一些静态资源 , 例如 : HTML , CSS , JS , 图片等 , 如果是普通的项目静态资源可以放在项目的webapp目录下。现在使用Spring Boot做开发 , 项目中没有webapp目录 , 我们的项目是一个jar工程，那么就没有webapp，我们的静态资源该放哪里呢？</p>
<h4 id="（1）默认路径"><a href="#（1）默认路径" class="headerlink" title="（1）默认路径"></a>（1）默认路径</h4><p>在springboot中就定义了静态资源的默认查找路径：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.web&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebProperties</span> &#123;</span><br><span class="line">    <span class="comment">//..................</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Resources</span> &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>, <span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span>&#125;;</span><br><span class="line">            <span class="keyword">private</span> String[] staticLocations;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">boolean</span> addMappings;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">boolean</span> customized;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> Chain chain;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> Cache cache;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="title function_">Resources</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line">                <span class="built_in">this</span>.addMappings = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">this</span>.customized = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">this</span>.chain = <span class="keyword">new</span> <span class="title class_">Chain</span>();</span><br><span class="line">                <span class="built_in">this</span>.cache = <span class="keyword">new</span> <span class="title class_">Cache</span>();</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">//...........        </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>默认的静态资源路径为：</strong>&#x2F;&#x2F;TODO@resources类中查</p>
<p><strong>· classpath:&#x2F;META-INF&#x2F;resources&#x2F;</strong></p>
<p><strong>· classpath:&#x2F;resources&#x2F;</strong></p>
<p><strong>· classpath:&#x2F;static&#x2F;</strong></p>
<p><strong>· classpath:&#x2F;public&#x2F;</strong></p>
<p>我们只要静态资源放在这些目录中任何一个，SpringMVC都会帮我们处理。 我们习惯会把静态资源放在classpath:&#x2F;static&#x2F; 目录下。在resources目录下创建index.html文件</p>
<p><img src="https://blog-resources.this0.com/image/202403301707133.png?x-oss-process=style/this0-blog" alt="image-20230620114628015"> </p>
<p>打开浏览器输入 : <a href="http://localhost:8080/index.html">http://localhost:8080/index.html</a></p>
<h4 id="（2）覆盖路径"><a href="#（2）覆盖路径" class="headerlink" title="（2）覆盖路径"></a>（2）覆盖路径</h4><p><strong>如果想要修改默认的静态资源路径, 配置如下 :</strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301707190.png?x-oss-process=style/this0-blog" alt="image-20230620114934219"> </p>
<p><strong>新建 application.yml</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/webapp/</span></span><br></pre></td></tr></table></figure>

<p>请求地址 <a href="http://localhost:8080/index.html">http://localhost:8080/index.html</a></p>
<h3 id="5-1-3-自定义拦截器"><a href="#5-1-3-自定义拦截器" class="headerlink" title="5.1.3. 自定义拦截器"></a>5.1.3. 自定义拦截器</h3><p>&#x2F;&#x2F;TODO，属于SpringMVC部分，已经详细讲过了，这里不再赘述！学习demo去我的<a href="https://github.com/baifengxiao/SSM.git">SSM仓库</a>，SpringMVC部分看拦截器，文章在本站。</p>
<p><img src="https://blog-resources.this0.com/image/202403301707310.png?x-oss-process=style/this0-blog" alt="image-20240312070435638"></p>
<h2 id="5-2-SpringBoot整合MyBatis"><a href="#5-2-SpringBoot整合MyBatis" class="headerlink" title="5.2. SpringBoot整合MyBatis"></a>5.2. SpringBoot整合MyBatis</h2><h3 id="5-2-1-创建工程"><a href="#5-2-1-创建工程" class="headerlink" title="5.2.1. 创建工程"></a>5.2.1. 创建工程</h3><p>略</p>
<h3 id="5-2-2-添加依赖"><a href="#5-2-2-添加依赖" class="headerlink" title="5.2.2. 添加依赖"></a>5.2.2. 添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-3-创建配置文件"><a href="#5-2-3-创建配置文件" class="headerlink" title="5.2.3. 创建配置文件"></a>5.2.3. 创建配置文件</h3><p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/springboot</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#指定mapper映射文件位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-4-创建启动类"><a href="#5-2-4-创建启动类" class="headerlink" title="5.2.4. 创建启动类"></a>5.2.4. 创建启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-2-5-创建表编写实体"><a href="#5-2-5-创建表编写实体" class="headerlink" title="5.2.5. 创建表编写实体"></a>5.2.5. 创建表编写实体</h3><h4 id="（1）创建数据库和表"><a href="#（1）创建数据库和表" class="headerlink" title="（1）创建数据库和表"></a>（1）创建数据库和表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span> (</span><br><span class="line"> id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line"> username <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line"> address <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">11</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="string">&#x27;China&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="（2）编写实体类"><a href="#（2）编写实体类" class="headerlink" title="（2）编写实体类"></a>（2）编写实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-2-6-编写Mapper"><a href="#5-2-6-编写Mapper" class="headerlink" title="5.2.6. 编写Mapper"></a>5.2.6. 编写Mapper</h3><h4 id="（1）创建UserMapper"><a href="#（1）创建UserMapper" class="headerlink" title="（1）创建UserMapper"></a>（1）创建UserMapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（2）创建UserMapper-xml"><a href="#（2）创建UserMapper-xml" class="headerlink" title="（2）创建UserMapper.xml"></a>（2）创建UserMapper.xml</h4><p>在resources下创建文件夹mapper，在mapper文件夹下创建UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.this0.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.this0.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-7-编写Service"><a href="#5-2-7-编写Service" class="headerlink" title="5.2.7. 编写Service"></a>5.2.7. 编写Service</h3><h4 id="（1）UserService"><a href="#（1）UserService" class="headerlink" title="（1）UserService"></a>（1）UserService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询索引</span></span><br><span class="line">    User <span class="title function_">getUser</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（2）UserServiceImpl"><a href="#（2）UserServiceImpl" class="headerlink" title="（2）UserServiceImpl"></a>（2）UserServiceImpl</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.this0.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUser(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-2-8-编写Controller"><a href="#5-2-8-编写Controller" class="headerlink" title="5.2.8. 编写Controller"></a>5.2.8. 编写Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.this0.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;getUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getUser(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试：<a href="http://localhost:8080/getUser/11">http://localhost:8080/getUser/11</a></p>
<h2 id="5-3-声明式事务整合配置"><a href="#5-3-声明式事务整合配置" class="headerlink" title="5.3 声明式事务整合配置"></a>5.3 声明式事务整合配置</h2><p>&#x2F;&#x2F;TODO，与SpringMVC一致</p>
<p>依赖导入:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：SpringBoot项目会自动配置一个 DataSourceTransactionManager，所以我们只需在方法（或者类）加上 @Transactional 注解，就自动纳入 Spring 的事务管理了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">1</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    user.setAccount(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    userMapper.update(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-AOP整合配置"><a href="#5-4-AOP整合配置" class="headerlink" title="5.4 AOP整合配置"></a>5.4 AOP整合配置</h2><p>依赖导入:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接使用aop注解即可:</p>
<h2 id="5-5-SpringBoot整合定时任务"><a href="#5-5-SpringBoot整合定时任务" class="headerlink" title="5.5. SpringBoot整合定时任务"></a>5.5. SpringBoot整合定时任务</h2><h3 id="1-定时任务概述"><a href="#1-定时任务概述" class="headerlink" title="1. 定时任务概述"></a>1. 定时任务概述</h3><h4 id="（1）什么是定时任务"><a href="#（1）什么是定时任务" class="headerlink" title="（1）什么是定时任务"></a>（1）什么是定时任务</h4><p>定时任务，就是在指定时间内触发执行某个动作。</p>
<p>举例说明，比如小明在网上挂了某个医院的号，医院系统会在小明就诊的前一天晚上20点给小明发送短信，通知他记得明天去看病。这个实现流程：每天晚上20点，系统会查询有哪些人挂了第二天号，就给这些人分别发送提醒短信</p>
<h4 id="（2）为什么要用定时任务"><a href="#（2）为什么要用定时任务" class="headerlink" title="（2）为什么要用定时任务"></a>（2）为什么要用定时任务</h4><ul>
<li>自动触发 ，无需手动触发动作</li>
<li>时间准确，会在准确的时间内进行业务处理；</li>
<li>低耦合，不影响其他业务功能</li>
</ul>
<h3 id="2-创建工程"><a href="#2-创建工程" class="headerlink" title="2. 创建工程"></a>2. 创建工程</h3><p><img src="https://blog-resources.this0.com/image/202403301707382.png?x-oss-process=style/this0-blog" alt="image-20230702181949669"></p>
<h3 id="3-添加依赖-1"><a href="#3-添加依赖-1" class="headerlink" title="3. 添加依赖"></a>3. 添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-创建配置文件"><a href="#4-创建配置文件" class="headerlink" title="4. 创建配置文件"></a>4. 创建配置文件</h3><p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/springboot</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#指定mapper映射文件位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:/mapper/*.xml</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>



<h3 id="5-创建启动类"><a href="#5-创建启动类" class="headerlink" title="5. 创建启动类"></a>5. 创建启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TaskApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-创建表编写实体"><a href="#6-创建表编写实体" class="headerlink" title="6. 创建表编写实体"></a>6. 创建表编写实体</h3><h4 id="（1）创建测试表"><a href="#（1）创建测试表" class="headerlink" title="（1）创建测试表"></a>（1）创建测试表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE `springboot`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `order_info` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `order_info`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `order_info` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `out_trade_no` <span class="type">varchar</span>(<span class="number">300</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单交易号&#x27;</span>,</span><br><span class="line">  `hoscode` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;医院编号&#x27;</span>,</span><br><span class="line">  `hosname` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;医院名称&#x27;</span>,</span><br><span class="line">  `depcode` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;科室编号&#x27;</span>,</span><br><span class="line">  `depname` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;科室名称&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;医生职称&#x27;</span>,</span><br><span class="line">  `hos_schedule_id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;排班编号（医院自己的排班主键）&#x27;</span>,</span><br><span class="line">  `reserve_date` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;安排日期&#x27;</span>,</span><br><span class="line">  `reserve_time` tinyint <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;安排时间（0：上午 1：下午）&#x27;</span>,</span><br><span class="line">  `patient_id` <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;就诊人id&#x27;</span>,</span><br><span class="line">  `patient_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;就诊人名称&#x27;</span>,</span><br><span class="line">  `patient_phone` <span class="type">varchar</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;就诊人手机&#x27;</span>,</span><br><span class="line">  `hos_record_id` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;预约记录唯一标识（医院预约记录主键）&#x27;</span>,</span><br><span class="line">  `number` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;预约号序&#x27;</span>,</span><br><span class="line">  `fetch_time` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;建议取号时间&#x27;</span>,</span><br><span class="line">  `fetch_address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;取号地点&#x27;</span>,</span><br><span class="line">  `amount` <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;医事服务费&#x27;</span>,</span><br><span class="line">  `quit_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;退号时间&#x27;</span>,</span><br><span class="line">  `order_status` tinyint <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单状态&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_out_trade_no` (`out_trade_no`),</span><br><span class="line">  KEY `idx_user_id` (`user_id`),</span><br><span class="line">  KEY `idx_hoscode` (`hoscode`),</span><br><span class="line">  KEY `idx_hos_schedule_id` (`hos_schedule_id`),</span><br><span class="line">  KEY `idx_hos_record_id` (`hos_record_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">19</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 COMMENT<span class="operator">=</span><span class="string">&#x27;订单表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `order_info` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `order_info`(`id`,`user_id`,`out_trade_no`,`hoscode`,`hosname`,`depcode`,`depname`,`title`,`hos_schedule_id`,`reserve_date`,`reserve_time`,`patient_id`,`patient_name`,`patient_phone`,`hos_record_id`,`number`,`fetch_time`,`fetch_address`,`amount`,`quit_time`,`order_status`,`create_time`,`update_time`) <span class="keyword">values</span> (<span class="number">14</span>,<span class="number">10</span>,<span class="string">&#x27;162825325628088&#x27;</span>,<span class="string">&#x27;10000&#x27;</span>,<span class="string">&#x27;北京协和医院&#x27;</span>,<span class="string">&#x27;200040878&#x27;</span>,<span class="string">&#x27;多发性硬化专科门诊&#x27;</span>,<span class="string">&#x27;副主任医师&#x27;</span>,<span class="string">&#x27;610282d816d1020127ebf811&#x27;</span>,<span class="string">&#x27;2023-07-03&#x27;</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="string">&#x27;张翠山&#x27;</span>,<span class="string">&#x27;15611248098&#x27;</span>,<span class="string">&#x27;12&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;2023-07-0309:00前&#x27;</span>,<span class="string">&#x27;一层114窗口&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;2023-07-03 15:30:00&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2023-07-02 20:34:16&#x27;</span>,<span class="string">&#x27;2023-07-02 18:35:33&#x27;</span>),(<span class="number">15</span>,<span class="number">11</span>,<span class="string">&#x27;162829645831986&#x27;</span>,<span class="string">&#x27;10001&#x27;</span>,<span class="string">&#x27;北京安贞医院&#x27;</span>,<span class="string">&#x27;410040832&#x27;</span>,<span class="string">&#x27;神经多发性内科&#x27;</span>,<span class="string">&#x27;专家&#x27;</span>,<span class="string">&#x27;610282d816d1020127ebf812&#x27;</span>,<span class="string">&#x27;2023-07-04&#x27;</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="string">&#x27;张无忌&#x27;</span>,<span class="string">&#x27;13511248778&#x27;</span>,<span class="string">&#x27;13&#x27;</span>,<span class="number">7</span>,<span class="string">&#x27;2023-07-0409:00前&#x27;</span>,<span class="string">&#x27;一层09窗口&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;2023-07-04 15:30:00&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2023-07-02 08:34:18&#x27;</span>,<span class="string">&#x27;2023-07-02 18:35:30&#x27;</span>),(<span class="number">16</span>,<span class="number">12</span>,<span class="string">&#x27;162830304778619&#x27;</span>,<span class="string">&#x27;10002&#x27;</span>,<span class="string">&#x27;北京大学第三医院&#x27;</span>,<span class="string">&#x27;200040862&#x27;</span>,<span class="string">&#x27;耳鼻喉专科门诊&#x27;</span>,<span class="string">&#x27;副主任医师&#x27;</span>,<span class="string">&#x27;610282d816d1020127ebf812&#x27;</span>,<span class="string">&#x27;2023-07-04&#x27;</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="string">&#x27;张三丰&#x27;</span>,<span class="string">&#x27;18911288709&#x27;</span>,<span class="string">&#x27;14&#x27;</span>,<span class="number">8</span>,<span class="string">&#x27;2023-07-0409:00前&#x27;</span>,<span class="string">&#x27;一层114窗口&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;2023-07-04 15:30:00&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2023-07-02 10:24:07&#x27;</span>,<span class="string">&#x27;2023-07-02 18:35:36&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="（2）编写实体类-1"><a href="#（2）编写实体类-1" class="headerlink" title="（2）编写实体类"></a>（2）编写实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//下单用户id</span></span><br><span class="line">	<span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//订单交易号</span></span><br><span class="line">	<span class="keyword">private</span> String outTradeNo;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//医院编号</span></span><br><span class="line">	<span class="keyword">private</span> String hoscode;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//医院名称</span></span><br><span class="line">	<span class="keyword">private</span> String hosname;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//科室编号</span></span><br><span class="line">	<span class="keyword">private</span> String depcode;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//科室名称</span></span><br><span class="line">	<span class="keyword">private</span> String depname;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//排班id</span></span><br><span class="line">	<span class="keyword">private</span> String scheduleId;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//医生职称</span></span><br><span class="line">	<span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//就诊日期</span></span><br><span class="line">	<span class="keyword">private</span> Date reserveDate;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//就诊时间：上午 下午</span></span><br><span class="line">	<span class="keyword">private</span> Integer reserveTime;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//就诊人id</span></span><br><span class="line">	<span class="keyword">private</span> Long patientId;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//就诊人名称</span></span><br><span class="line">	<span class="keyword">private</span> String patientName;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//就诊人手机号</span></span><br><span class="line">	<span class="keyword">private</span> String patientPhone;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//预约记录唯一标识（医院预约记录主键）</span></span><br><span class="line">	<span class="keyword">private</span> String hosRecordId;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//预约号序&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//建议取号时间</span></span><br><span class="line">	<span class="keyword">private</span> String fetchTime;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//取号地点</span></span><br><span class="line">	<span class="keyword">private</span> String fetchAddress;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//医事服务费</span></span><br><span class="line">	<span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//退号时间</span></span><br><span class="line">	<span class="keyword">private</span> Date quitTime;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//订单状态</span></span><br><span class="line">	<span class="keyword">private</span> Integer orderStatus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-创建定时任务类"><a href="#7-创建定时任务类" class="headerlink" title="7. 创建定时任务类"></a>7. 创建定时任务类</h3><h4 id="（1）cron表达式"><a href="#（1）cron表达式" class="headerlink" title="（1）cron表达式"></a>（1）cron表达式</h4><p>由若干数字、空格、符号按一定的规则，组成的一组字符串，从而表达时间的信息，该字符串由 <code>6</code> 个空格分为 <code>7</code> 个域，每一个域代表一个时间含义。</p>
<p><img src="https://blog-resources.this0.com/image/202403301707385.png?x-oss-process=style/this0-blog" alt="image-20230702201545476"></p>
<p>通常定义 <strong>年</strong> 的部分可以省略，实际常用的由前六部分组成</p>
<p>其实我们还可以借助于一些可视化的工具来生成 <strong>cron</strong> 表达式 <a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a></p>
<p><img src="https://blog-resources.this0.com/image/202403301707429.png?x-oss-process=style/this0-blog" alt="image-20230702202000935"></p>
<h4 id="（2）定时任务类"><a href="#（2）定时任务类" class="headerlink" title="（2）定时任务类"></a>（2）定时任务类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.service.OrderInfoService;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cron表达式设置执行规则</span></span><br><span class="line">    <span class="comment">//@Scheduled(cron = &quot;0 0 20 * * ?&quot;)</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/10 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remind</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取查询日期，获取第二天日期</span></span><br><span class="line">        <span class="type">DateTime</span> <span class="variable">dateTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateTime</span>().plusDays(<span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateString</span> <span class="operator">=</span> dateTime.toString(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        System.out.println(dateString);</span><br><span class="line">        <span class="comment">//调用方法查询</span></span><br><span class="line">        orderInfoService.senMessageForHospital(dateString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-编写Service"><a href="#8-编写Service" class="headerlink" title="8. 编写Service"></a>8. 编写Service</h3><h4 id="（1）OrderInfoService"><a href="#（1）OrderInfoService" class="headerlink" title="（1）OrderInfoService"></a>（1）OrderInfoService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderInfoService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">senMessageForHospital</span><span class="params">(String dateString)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（2）OrderInfoServiceImpl"><a href="#（2）OrderInfoServiceImpl" class="headerlink" title="（2）OrderInfoServiceImpl"></a>（2）OrderInfoServiceImpl</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.entity.OrderInfo;</span><br><span class="line"><span class="keyword">import</span> com.this0.mapper.OrderInfoMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderInfoService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoMapper orderInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">senMessageForHospital</span><span class="params">(String dateString)</span> &#123;</span><br><span class="line">        List&lt;OrderInfo&gt; orderInfoList = orderInfoMapper.selectPatientInfoByDate(dateString);</span><br><span class="line">        orderInfoList.forEach(orderInfo -&gt; &#123;</span><br><span class="line">            System.out.println(orderInfo.getPatientName()+<span class="string">&quot;:&quot;</span>+orderInfo.getPatientPhone());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="9-编写Mapper"><a href="#9-编写Mapper" class="headerlink" title="9. 编写Mapper"></a>9. 编写Mapper</h3><h4 id="（1）创建OrderInfoMapper"><a href="#（1）创建OrderInfoMapper" class="headerlink" title="（1）创建OrderInfoMapper"></a>（1）创建OrderInfoMapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.this0.entity.OrderInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderInfoMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据日期查询就诊人信息</span></span><br><span class="line">    List&lt;OrderInfo&gt; <span class="title function_">selectPatientInfoByDate</span><span class="params">(String dateString)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（2）创建UserMapper-xml-1"><a href="#（2）创建UserMapper-xml-1" class="headerlink" title="（2）创建UserMapper.xml"></a>（2）创建UserMapper.xml</h4><p>在resources下创建文件夹mapper，在mapper文件夹下创建OrderInfoMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.this0.mapper.OrderInfoMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPatientInfoByDate&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.this0.entity.OrderInfo&quot;</span>&gt;</span></span><br><span class="line">        select * from order_info where reserve_date=#&#123;dateString&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="10-效果"><a href="#10-效果" class="headerlink" title="10.效果"></a>10.效果</h3><p><img src="https://blog-resources.this0.com/image/202403301707722.png?x-oss-process=style/this0-blog" alt="image-20240312164845585"></p>
<h2 id="5-6-SpringBoot3整合Druid数据源-TODO没成功"><a href="#5-6-SpringBoot3整合Druid数据源-TODO没成功" class="headerlink" title="5.6. SpringBoot3整合Druid数据源	&#x2F;&#x2F;TODO没成功"></a>5.6. SpringBoot3整合Druid数据源	&#x2F;&#x2F;TODO没成功</h2><ol>
<li><p>创建项目</p>
</li>
<li><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-starter-druid-04<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  web开发的场景启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库相关配置启动器 jdbctemplate 事务相关--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- druid启动器的依赖  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 驱动类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    SpringBoot应用打包插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件编写</p>
<blockquote>
<p>添加druid连接池的基本配置</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 连接池类型 </span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Druid的其他属性配置 springboot3整合情况下,数据库连接信息必须在Druid属性下!</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/day01</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="comment"># 初始化时建立物理连接的个数</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 连接池的最小空闲数量</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 连接池最大连接数量</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 获取连接时最大等待时间，单位毫秒</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 既作为检测的间隔时间又作为testWhileIdel执行的依据</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">30000</span></span><br><span class="line">      <span class="comment"># 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">-1</span></span><br><span class="line">      <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line">      <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from users where id = ? ; &quot;</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class), <span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;查询的user数据为:&#123;&#125;&quot;</span>,user.toString());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动测试</p>
</li>
<li><p>问题解决</p>
<p>通过源码分析，druid-spring-boot-3-starter目前最新版本是1.2.18，虽然适配了SpringBoot3，但缺少自动装配的配置文件，需要手动在resources目录下创建META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports，文件内容如下!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.alibaba.druid.spring.boot3.autoconfigure.DruidDataSourceAutoConfigure</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403301707486.png?x-oss-process=style/this0-blog"></p>
</li>
</ol>
<h1 id="6、SpringBoot项目打包"><a href="#6、SpringBoot项目打包" class="headerlink" title="6、SpringBoot项目打包"></a>6、SpringBoot项目打包</h1><h3 id="6-1-添加打包插件"><a href="#6-1-添加打包插件" class="headerlink" title="6.1 添加打包插件"></a>6.1 添加打包插件</h3><blockquote>
<p>在Spring Boot项目中添加<code>spring-boot-maven-plugin</code>插件是为了支持将项目打包成可执行的可运行jar包。如果不添加<code>spring-boot-maven-plugin</code>插件配置，使用常规的<code>java -jar</code>命令来运行打包后的Spring Boot项目是无法找到应用程序的入口点，因此导致无法运行。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    SpringBoot应用打包插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-执行打包"><a href="#6-2-执行打包" class="headerlink" title="6.2 执行打包"></a>6.2 执行打包</h3><p>在idea点击package进行打包</p>
<p>可以在编译的target文件中查看jar包</p>
<p><img src="https://blog-resources.this0.com/image/202403301707688.png?x-oss-process=style/this0-blog"></p>
<h3 id="6-3-命令启动和参数说明-TODO"><a href="#6-3-命令启动和参数说明-TODO" class="headerlink" title="6.3 命令启动和参数说明//TODO"></a>6.3 <code>命令启动和参数说明//TODO</code></h3><p><code>java -jar</code>命令用于在Java环境中执行可执行的JAR文件。下面是关于<code>java -jar</code>命令的说明：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">命令格式：java -jar  [选项] [参数] <span class="tag">&lt;<span class="name">jar文件名</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><code>-D&lt;name&gt;=&lt;value&gt;</code>：设置系统属性，可以通过<code>System.getProperty()</code>方法在应用程序中获取该属性值。例如：<code>java -jar -Dserver.port=8080 myapp.jar</code>。</li>
<li><code>-X</code>：设置JVM参数，例如内存大小、垃圾回收策略等。常用的选项包括：<ul>
<li><code>-Xmx&lt;size&gt;</code>：设置JVM的最大堆内存大小，例如 <code>-Xmx512m</code> 表示设置最大堆内存为512MB。</li>
<li><code>-Xms&lt;size&gt;</code>：设置JVM的初始堆内存大小，例如 <code>-Xms256m</code> 表示设置初始堆内存为256MB。</li>
</ul>
</li>
<li><code>-Dspring.profiles.active=&lt;profile&gt;</code>：指定Spring Boot的激活配置文件，可以通过<code>application-&lt;profile&gt;.properties</code>或<code>application-&lt;profile&gt;.yml</code>文件来加载相应的配置。例如：<code>java -jar -Dspring.profiles.active=dev myapp.jar</code>。</li>
</ol>
<p>启动和测试：</p>
<p><img src="https://blog-resources.this0.com/image/202403301707919.png?x-oss-process=style/this0-blog"></p>
<p><code>注意： -D 参数必须要在jar之前！否者不生效！</code></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h3 id="1-markdown编辑器Typora安装"><a href="#1-markdown编辑器Typora安装" class="headerlink" title="1 markdown编辑器Typora安装"></a>1 markdown编辑器Typora安装</h3><p>略</p>
<h3 id="2-OSS图床配置"><a href="#2-OSS图床配置" class="headerlink" title="2 OSS图床配置"></a>2 OSS图床配置</h3><p>云存储不是必须的，担心费用可以使用自建云存储，比如MinIO。</p>
<p>OSS是阿里云的对象存储服务，最低费用9￥&#x2F;年，腾讯云、华为云等都有对应的对象存储服务，可以根据自己喜好选择，配置方法基本一致。</p>
<p>注意：一定！一定！要注意保护好唯一标识！桶名、服务器IP、CDN域名、accessKeyId、accessKeySecret！</p>
<h4 id="1-创建bucket"><a href="#1-创建bucket" class="headerlink" title="1 创建bucket"></a>1 创建bucket</h4><p>功能按需开通</p>
<p>没使用CDN的时候，需要匿名访问，把权限设置为公共读</p>
<p>后面使用CDN访问，就把权限设置为私有读写</p>
<p><img src="https://blog-resources.this0.com/image/202403232049206.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240321_144337"></p>
<h4 id="2-创建子用户"><a href="#2-创建子用户" class="headerlink" title="2 创建子用户"></a>2 创建子用户</h4><p>点右上角头像——AccessKey管理——开始使用子用户AccessKey</p>
<p>一定不要嫌麻烦而用主账号的AccessKey！</p>
<p><img src="https://blog-resources.this0.com/image/202403232049207.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240320_215650"></p>
<p>注意！点击确定之后出现的accessKeySecret只会在这时候出现一次，务必保存下来，之后无法获取！</p>
<h4 id="3-给子用户OSS权限"><a href="#3-给子用户OSS权限" class="headerlink" title="3 给子用户OSS权限"></a>3 给子用户OSS权限</h4><p>点击添加权限</p>
<p><img src="https://blog-resources.this0.com/image/202403232049208.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240320_220607"></p>
<p>选择OSS权限</p>
<p><img src="https://blog-resources.this0.com/image/202403232049210.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240320_220926"></p>
<h4 id="4-获取AccessKey和AccessKeySecret"><a href="#4-获取AccessKey和AccessKeySecret" class="headerlink" title="4 获取AccessKey和AccessKeySecret"></a>4 获取AccessKey和AccessKeySecret</h4><p>记录下创建用户时创建的AccessKey和AccessKeySecret，AccessKey还能在这个页面获取，AccessKeySecret如上文所说，无法再获取</p>
<p><img src="https://blog-resources.this0.com/image/202403232049211.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240320_221452"></p>
<h4 id="5-OSS安全配置"><a href="#5-OSS安全配置" class="headerlink" title="5 OSS安全配置"></a>5 OSS安全配置</h4><h6 id="1-OSS跨域设置"><a href="#1-OSS跨域设置" class="headerlink" title="1 OSS跨域设置"></a>1 OSS跨域设置</h6><p><img src="https://blog-resources.this0.com/image/202403232049212.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240321_152502"></p>
<h6 id="2-OSS开启防盗链"><a href="#2-OSS开启防盗链" class="headerlink" title="2 OSS开启防盗链"></a>2 OSS开启防盗链</h6><p><img src="https://blog-resources.this0.com/image/202403232049213.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240321_153100"></p>
<h3 id="3-上传工具PicGo-PicList配置"><a href="#3-上传工具PicGo-PicList配置" class="headerlink" title="3 上传工具PicGo&#x2F;PicList配置"></a>3 上传工具PicGo&#x2F;PicList配置</h3><p>上传工具根据自己喜好选择PicGo或者PicList，大同小异</p>
<p>笔者喜欢用PicList,在<a href="https://piclist.cn/">PicList官网</a>下载安装</p>
<p>PicList内置了<a href="https://piclist.cn/manage#%E9%98%BF%E9%87%8C%E4%BA%91oss">配置教程</a>，不再赘述</p>
<p>CDN访问需要在PliList里面配置一下CDN加速域名，不要上传完转义成存储桶名称访问，Typora的图像配置按需配置</p>
<p><img src="https://blog-resources.this0.com/image/202403232049214.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240321_144640"></p>
<p>至此，完成。</p>
<h3 id="4-加速访问—CDN"><a href="#4-加速访问—CDN" class="headerlink" title="4 加速访问—CDN"></a>4 加速访问—CDN</h3><p>使用云存储有被攻击的风险</p>
<p>云存储不是必须的，CDN同样也不是必须的，CDN需要不少的费用，没配置好安全措施，最少会被刷数以千计的￥！</p>
<h4 id="1-CDN-基础配置"><a href="#1-CDN-基础配置" class="headerlink" title="1 CDN 基础配置"></a>1 CDN 基础配置</h4><h5 id="1-添加CDN域名"><a href="#1-添加CDN域名" class="headerlink" title="1 添加CDN域名"></a>1 添加CDN域名</h5><p><img src="https://blog-resources.this0.com/image/202403232049215.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240321_170519"></p>
<h5 id="2-配置源站域名"><a href="#2-配置源站域名" class="headerlink" title="2 配置源站域名"></a>2 配置源站域名</h5><p>自动获取OSS桶的域名</p>
<p><img src="https://blog-resources.this0.com/image/202403232049216.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240321_170903"></p>
<p>确定，点击一键配置</p>
<p><img src="https://blog-resources.this0.com/image/202403232049217.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240321_162639"></p>
<p>跳转到CNAME信息页面</p>
<h5 id="3-配置CNANE"><a href="#3-配置CNANE" class="headerlink" title="3 配置CNANE"></a>3 配置CNANE</h5><p><img src="https://blog-resources.this0.com/image/202403232049218.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240321_162707"></p>
<p>到此，已经可以使用CDN加速了</p>
<h4 id="2-CDN-证书配置"><a href="#2-CDN-证书配置" class="headerlink" title="2 CDN 证书配置"></a>2 CDN 证书配置</h4><p>如图，证书可以申请免费证书，现在只有3个月免费证书了，到期无法续费，只能重新创建，看来需要另谋出路</p>
<p><img src="https://blog-resources.this0.com/image/202403232049219.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240321_172620"></p>
<h4 id="3-CDN其他配置"><a href="#3-CDN其他配置" class="headerlink" title="3 CDN其他配置"></a>3 CDN其他配置</h4><p>其他还可以开启流量限制，预防被刷流量，以及开启CDN的防盗链，以及性能优化</p>
<p>至此，完成！</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<hr>
<h2 id="2-24-23-48"><a href="#2-24-23-48" class="headerlink" title="2&#x2F;24&#x2F;23:48"></a>2&#x2F;24&#x2F;23:48</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h3><p>sudo pacman -S docker</p>
<h3 id="2-启动及自启"><a href="#2-启动及自启" class="headerlink" title="2 启动及自启"></a>2 启动及自启</h3><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">sudo <span class="params">system</span>ctl start docker</span><br><span class="line">sudo <span class="params">system</span>ctl enable docker</span><br></pre></td></tr></table></figure>

<h3 id="3-添加用户到docker组"><a href="#3-添加用户到docker组" class="headerlink" title="3 添加用户到docker组"></a>3 添加用户到docker组</h3><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="meta">#添加用户到docker组</span></span><br><span class="line">sudo usermod -aG docker ypt</span><br><span class="line"><span class="meta">#临时切换docker组</span></span><br><span class="line"><span class="keyword">new</span><span class="type">grp</span> docker</span><br></pre></td></tr></table></figure>

<p>完成</p>
]]></content>
  </entry>
  <entry>
    <title>nvm安装和使用</title>
    <url>/articles/c2bdb00f.html</url>
    <content><![CDATA[<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yay -S redis</span></span><br></pre></td></tr></table></figure>

<h3 id="2-自启"><a href="#2-自启" class="headerlink" title="2 自启"></a>2 自启</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">enable</span> <span class="comment">--now redis</span></span><br></pre></td></tr></table></figure>

<h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3 修改配置文件"></a>3 修改配置文件</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/redis/redis.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>

<p>配置文件修改4处：</p>
<p>1 后端启动</p>
<p>daemonize yes</p>
<p>2 保护模式</p>
<p>protected-mode no</p>
<p>3 远程连接</p>
<p>注释掉</p>
<p>bind 127.0.0.1 -::1</p>
<p>4 redis访问密码</p>
<p>requirepass redis</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h3 id="1-创建桌面图标："><a href="#1-创建桌面图标：" class="headerlink" title="1 创建桌面图标："></a>1 创建桌面图标：</h3><p>以idea为例</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vim</span> idea.desktop</span><br></pre></td></tr></table></figure>

<h3 id="2-编辑图标"><a href="#2-编辑图标" class="headerlink" title="2 编辑图标"></a>2 编辑图标</h3><p>复制粘贴以下内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每个desktop文件都已这个标签开始，说明这是一个Desktop Entry 文件.</span></span><br><span class="line"><span class="section">[Desktop Entry]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注明在菜单栏中显示的类别(可选)</span></span><br><span class="line"><span class="attr">Categories</span>=Application</span><br><span class="line"></span><br><span class="line"><span class="comment">#标明Desktop Entry的版本(可选).</span></span><br><span class="line"><span class="attr">Version</span>=<span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#程序的执行命令(必选),可以带参数运行</span></span><br><span class="line"><span class="attr">Exec</span>=/home/yupengtao/SDE/idea-IU-<span class="number">212.4746</span>.<span class="number">92</span>/bin/idea.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置快捷方式的图标(可选).</span></span><br><span class="line"><span class="attr">Icon</span>=/home/yupengtao/SDE/idea-IU-<span class="number">212.4746</span>.<span class="number">92</span>/bin/idea.svg</span><br><span class="line"></span><br><span class="line"><span class="comment">#程序名称(必须)</span></span><br><span class="line"><span class="attr">Name</span>=idea</span><br><span class="line"></span><br><span class="line"><span class="comment">#desktop的类型(必选),常见值有“Application”和“Link”.</span></span><br><span class="line"><span class="attr">Type</span>=Application</span><br><span class="line"></span><br><span class="line"><span class="comment">#是否在终端中运行(可选),当Type为Application,此项有效.</span></span><br><span class="line"><span class="attr">Terminal</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="3-给执行权限"><a href="#3-给执行权限" class="headerlink" title="3 给执行权限"></a>3 给执行权限</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">744</span> idea.desktop</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h3 id="linux通用安装JDK"><a href="#linux通用安装JDK" class="headerlink" title="linux通用安装JDK"></a>linux通用安装JDK</h3><h4 id="1-查询并卸载系统中自带的JDK，"><a href="#1-查询并卸载系统中自带的JDK，" class="headerlink" title="1 查询并卸载系统中自带的JDK，"></a>1 查询并卸载系统中自带的JDK，</h4><p>以centos7为例，使用自己操作系统的包管理命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询</span><br><span class="line">rpm -qa | grep jdk</span><br><span class="line">#卸载</span><br><span class="line">rpm -e --nodeps jdk的rpm软件包的名字</span><br></pre></td></tr></table></figure>

<h4 id="2-将jdk-xxx-bin-tar-gz上传到服务器"><a href="#2-将jdk-xxx-bin-tar-gz上传到服务器" class="headerlink" title="2 将jdk-xxx_bin.tar.gz上传到服务器"></a>2 将jdk-xxx_bin.tar.gz上传到服务器</h4><p>以&#x2F;opt目录为例</p>
<p>官方下载地址：<a href="https://www.oracle.com/java/technologies/downloads/">https://www.oracle.com/java/technologies/downloads/</a></p>
<h4 id="3-解压jdk压缩包"><a href="#3-解压jdk压缩包" class="headerlink" title="3 解压jdk压缩包"></a>3 解压jdk压缩包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk压缩包名称  -C /opt/</span><br></pre></td></tr></table></figure>

<h4 id="4-环境变量配置"><a href="#4-环境变量配置" class="headerlink" title="4 环境变量配置"></a>4 环境变量配置</h4><h5 id="1-在自定义配置文件中配置环境变量"><a href="#1-在自定义配置文件中配置环境变量" class="headerlink" title="1 在自定义配置文件中配置环境变量"></a>1 在自定义配置文件中配置环境变量</h5><p>(不建议直接修改&#x2F;etc&#x2F;profile)</p>
<p>&#x2F;&#x2F;TODO如何自定义配置文件，参考3.1小节</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/<span class="keyword">profile</span>.d/my_env.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p>添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#jdk环境变量</span><br><span class="line">JAVA_HOME=/opt/jdk-22	#安装目录</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export PATH JAVA_HOME</span><br></pre></td></tr></table></figure>

<h5 id="2-没有自定义配置文件"><a href="#2-没有自定义配置文件" class="headerlink" title="2 没有自定义配置文件"></a>2 没有自定义配置文件</h5><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/<span class="keyword">profile</span></span><br></pre></td></tr></table></figure>

<h4 id="5-使生效"><a href="#5-使生效" class="headerlink" title="5 使生效"></a>5 使生效</h4><p>执行</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> /etc/<span class="keyword">profile</span>.d/my\_env.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p>使配置立即生效，没有自定义配置文件直接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>重启或者注销用户都可以使环境变量生效 </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h3><p>maven官方下载地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p>
<h3 id="2-解压到指定目录"><a href="#2-解压到指定目录" class="headerlink" title="2 解压到指定目录"></a>2 解压到指定目录</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> tar -zxvf apache-maven-<span class="number">3</span>.<span class="number">9</span>.<span class="number">6</span>-bin.tar.gz -C /opt/</span><br></pre></td></tr></table></figure>

<h3 id="3-环境变量配置-可选"><a href="#3-环境变量配置-可选" class="headerlink" title="3 环境变量配置(可选)"></a>3 环境变量配置(可选)</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/<span class="keyword">profile</span>.d/my_env.<span class="keyword">sh</span>  </span><br></pre></td></tr></table></figure>

<p>添加内容：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#maven</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">MAVEN_HOME</span>=/opt/apache-maven-3.9.6/</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$&#123;MAVEN_HOME&#125;/bin</span><br></pre></td></tr></table></figure>

<h3 id="4-验证"><a href="#4-验证" class="headerlink" title="4 验证"></a>4 验证</h3><p><img src="https://blog-resources.this0.com/image/202403271934307.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240327_193416"></p>
<h3 id="5-maven配置文件修改"><a href="#5-maven配置文件修改" class="headerlink" title="5 maven配置文件修改"></a>5 maven配置文件修改</h3><h4 id="1-修改maven的本地仓库（可选）"><a href="#1-修改maven的本地仓库（可选）" class="headerlink" title="1 修改maven的本地仓库（可选）"></a>1 修改maven的本地仓库（可选）</h4><p>配置文件在</p>
<p>&#x2F;maven安装路径&#x2F;apache-maven-3.9.6&#x2F;conf&#x2F;settings.xml</p>
<p>打开settings.xml，在配置文件中搜索以下内容</p>
<p><localRepository>&#x2F;path&#x2F;to&#x2F;local&#x2F;repo</localRepository></p>
<p>会发现这段代码在注释中，作用是指定maven本地仓库的配置，复制黏贴到注释外生效。</p>
<p>比如，我想把本地仓库放在&#x2F;home&#x2F;ypt&#x2F;SDE&#x2F;maven&#x2F;repo&#x2F;</p>
<p>就把代码复制粘贴到下一行，修改成：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/home/ypt/SDE/maven/repo/<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-中央仓库修改-可选"><a href="#2-中央仓库修改-可选" class="headerlink" title="2 中央仓库修改(可选)"></a>2 中央仓库修改(可选)</h4><p>修改maven的远程仓库地址，这里用阿里云 (下载快)，不做修改，直接用默认的国外仓库也可以</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Linux简明教程</title>
    <url>/articles/2023831a.html</url>
    <content><![CDATA[<h3 id="第1章-Linux的目录结构"><a href="#第1章-Linux的目录结构" class="headerlink" title="第1章 Linux的目录结构"></a>第1章 Linux的目录结构</h3><p>&#x2F;&#x2F;TODO,背一下</p>
<p><img src="https://blog-resources.this0.com/image/202403241458828.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>Linux根目录下的常见目录及作用</p>
</blockquote>
<h4 id="1-bin：★"><a href="#1-bin：★" class="headerlink" title="1. &#x2F;bin：★"></a>1. &#x2F;bin：★</h4><p>(&#x2F;usr&#x2F;bin,&#x2F;usr&#x2F;local&#x2F;bin)</p>
<p>是Binary的缩写, 这个目录存放着最经常使用的命令,Linux默认的环境变量已经包含该路径,所以可以直接使用该路径下的指令如 cd指令&#x20;</p>
<p>可以通过echo $PATH查看系统环境变量来看是否包含了该目录</p>
<h4 id="2-sbin："><a href="#2-sbin：" class="headerlink" title="2. &#x2F;sbin："></a>2. &#x2F;sbin：</h4><p>(&#x2F;usr&#x2F;sbin, &#x2F;usr&#x2F;local&#x2F;sbin)</p>
<p>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p>
<p>以上目录，任何命令在任意目录下都可执行命令</p>
<h4 id="3-home：★"><a href="#3-home：★" class="headerlink" title="3. &#x2F;home：★"></a>3. &#x2F;home：★</h4><p>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p>
<h4 id="4-root：★"><a href="#4-root：★" class="headerlink" title="4. &#x2F;root：★"></a>4. &#x2F;root：★</h4><p>该目录为系统管理员，也称作超级权限者的用户主目录。</p>
<h4 id="5-lib："><a href="#5-lib：" class="headerlink" title="5. &#x2F;lib："></a>5. &#x2F;lib：</h4><p>系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p>
<h4 id="6-lost-found："><a href="#6-lost-found：" class="headerlink" title="6. &#x2F;lost+found："></a>6. &#x2F;lost+found：</h4><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p>
<h4 id="7-etc：★"><a href="#7-etc：★" class="headerlink" title="7. &#x2F;etc：★"></a>7. &#x2F;etc：★</h4><p>所有的系统管理所需要的配置文件和子目录。my.cnf</p>
<h4 id="8-usr：★-x20"><a href="#8-usr：★-x20" class="headerlink" title="8. &#x2F;usr：★&#x20;"></a>8. &#x2F;usr：★&#x20;</h4><p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</p>
<h4 id="9-boot：★"><a href="#9-boot：★" class="headerlink" title="9. &#x2F;boot：★"></a>9. &#x2F;boot：★</h4><p>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件，自己的安装别放这里&#x20;</p>
<h4 id="10-proc："><a href="#10-proc：" class="headerlink" title="10. &#x2F;proc："></a>10. &#x2F;proc：</h4><p>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p>
<h4 id="11-srv："><a href="#11-srv：" class="headerlink" title="11. &#x2F;srv："></a>11. &#x2F;srv：</h4><p>service缩写，该目录存放一些服务启动之后需要提取的数据。</p>
<h4 id="12-sys：-x20"><a href="#12-sys：-x20" class="headerlink" title="12.    &#x2F;sys：&#x20;"></a>12.    &#x2F;sys：&#x20;</h4><p>这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。（内核）</p>
<h4 id="13-tmp："><a href="#13-tmp：" class="headerlink" title="13.    &#x2F;tmp："></a>13.    &#x2F;tmp：</h4><p>这个目录是用来存放一些临时文件的。</p>
<h4 id="14-dev：★"><a href="#14-dev：★" class="headerlink" title="14.    &#x2F;dev：★"></a>14.    &#x2F;dev：★</h4><p>Device(设备)的缩写,类似windows的设备管理器，把所有的硬件用文件的形式存储。&#x20;</p>
<h4 id="15-media：★"><a href="#15-media：★" class="headerlink" title="15.    &#x2F;media：★"></a>15.    &#x2F;media：★</h4><p>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p>
<h4 id="16-mnt：★"><a href="#16-mnt：★" class="headerlink" title="16.    &#x2F;mnt：★"></a>16.    &#x2F;mnt：★</h4><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看光驱里的内容了。</p>
<h4 id="17-opt：★"><a href="#17-opt：★" class="headerlink" title="17.    &#x2F;opt：★"></a>17.    &#x2F;opt：★</h4><p>这是给主机额外安装软件所摆放的目录。</p>
<p>比如你安装JDK、Tomcat则就可以放到这个目录下。默认是空的。</p>
<h4 id="18-usr-local-★"><a href="#18-usr-local-★" class="headerlink" title="18.    &#x2F;usr&#x2F;local: ★"></a>18.    &#x2F;usr&#x2F;local: ★</h4><p>这是另一个给主机额外安装软件所摆放的目录.一般是通过编译源码方式安装的程序。</p>
<h4 id="19-var：★"><a href="#19-var：★" class="headerlink" title="19.    &#x2F;var：★"></a>19.    &#x2F;var：★</h4><p>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p>
<h3 id="第2章-VI-VIM编辑器"><a href="#第2章-VI-VIM编辑器" class="headerlink" title="第2章 VI&#x2F;VIM编辑器"></a>第2章 VI&#x2F;VIM编辑器</h3><p>&#x2F;&#x2F;TODO背一下</p>
<h4 id="2-1-一般模式"><a href="#2-1-一般模式" class="headerlink" title="2.1 一般模式"></a>2.1 一般模式</h4><p>以vi&#x2F;vim打开一个档案就直接进入一般模式了（这是<strong>默认的模式</strong>）</p>
<blockquote>
<p>默认模式,在这个模式中， 你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、贴上』来处理你的文件数据。</p>
</blockquote>
<h5 id="1-删除和复制操作"><a href="#1-删除和复制操作" class="headerlink" title="1.删除和复制操作"></a>1.删除和复制操作</h5><p><img src="https://blog-resources.this0.com/image/202403241458790.png?x-oss-process=style/this0-blog"></p>
<h5 id="2-光标移动操作"><a href="#2-光标移动操作" class="headerlink" title="2.光标移动操作"></a>2.光标移动操作</h5><p><img src="https://blog-resources.this0.com/image/202403241458848.png?x-oss-process=style/this0-blog" alt="image-20230703211138655"></p>
<h4 id="2-2-编辑模式"><a href="#2-2-编辑模式" class="headerlink" title="2.2 编辑模式"></a>2.2 编辑模式</h4><p>按下『i, I, o, O, a, A』等任何一个字母之后才会进入编辑模式。</p>
<p>表1-2 常用语法</p>
<table>
<thead>
<tr>
<th>按键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td><strong>当前光标前</strong></td>
</tr>
<tr>
<td>a</td>
<td>当前光标后</td>
</tr>
<tr>
<td>o</td>
<td><strong>当前光标行的下一行</strong></td>
</tr>
<tr>
<td>I</td>
<td>光标所在行最前</td>
</tr>
<tr>
<td>A</td>
<td>光标所在行最后</td>
</tr>
<tr>
<td>O</td>
<td>当前光标行的上一行</td>
</tr>
</tbody></table>
<h4 id="2-3-命令模式"><a href="#2-3-命令模式" class="headerlink" title="2.3 命令模式"></a>2.3 命令模式</h4><p><strong>在一般模式当中</strong>，输入 “ &#x2F; “ 或 “ : “ 或 “?” 3个中的任何一个按钮进入。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>:w</td>
<td><strong>保存</strong></td>
</tr>
<tr>
<td>:q</td>
<td><strong>退出</strong></td>
</tr>
<tr>
<td>:!</td>
<td><strong>强制执行</strong></td>
</tr>
<tr>
<td>: %s&#x2F;old字符&#x2F;new字符</td>
<td><strong>批量替换</strong></td>
</tr>
<tr>
<td>&#x2F; 要查找的词</td>
<td>n 查找下一个，N 往上查找</td>
</tr>
<tr>
<td>? 要查找的词</td>
<td>n是查找上一个，N是往下查找</td>
</tr>
<tr>
<td>:set nu</td>
<td>显示行号</td>
</tr>
<tr>
<td>:set nonu</td>
<td>关闭行号</td>
</tr>
<tr>
<td>ZZ（shift+zz）:nohl</td>
<td>没有修改文件直接退出，如果修改了文件保存后退出</td>
</tr>
</tbody></table>
<h4 id="2-4-模式间转换"><a href="#2-4-模式间转换" class="headerlink" title="2.4 模式间转换"></a>2.4 模式间转换</h4><p><img src="https://blog-resources.this0.com/image/202403241458838.png?x-oss-process=style/this0-blog" alt="image-20230703205329736"></p>
<blockquote>
<p>如果非正常退出,如使用ctrl+z退出,再次编辑会提示交换文件”. <em>.swp”,文件存在,并给出相应的处理方式选项,如果不删除交换文件,每次编辑都会提示,这时可以删除交换文件,通过命令: rm -f ‘</em>.swp’ 即可</p>
</blockquote>
<h3 id="第3章-网络配置和系统管理操作"><a href="#第3章-网络配置和系统管理操作" class="headerlink" title="第3章 网络配置和系统管理操作"></a>第3章 网络配置和系统管理操作</h3><h4 id="1-虚拟机的联网模式"><a href="#1-虚拟机的联网模式" class="headerlink" title="1 虚拟机的联网模式"></a>1 虚拟机的联网模式</h4><h4 id="2-配置虚拟机固定IP"><a href="#2-配置虚拟机固定IP" class="headerlink" title="2 配置虚拟机固定IP"></a>2 配置虚拟机固定IP</h4><blockquote>
<p>第一步:  打开VMware,打开虚拟网络编辑器</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403241458799.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>第二步: 选择NAT模式,对网段进行调整</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403241458260.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>第三步: 设置NAT模式的网关</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403241458326.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202403241458396.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>第四步: 检查是否有漏选的选项</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403241458440.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>第五步: 修改虚拟机自己的网络模式选用模式为NAT</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403241458458.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202403241458490.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>第六步: 修改虚拟机ens33网卡的网络配置信息</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<ul>
<li>ens33网络配置默认信息如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot; #网络类型（通常是Ethemet，工业以太网）</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;dhcp&quot;  #dhcp 为动态IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;e8582df9-96c3-4ddc-9fc6-19282dd5e019&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot; #系统启动的时候网络接口是否有效（yes/no）</span><br></pre></td></tr></table></figure>

<ul>
<li>以下选项,有则修改,无则增加</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BOOTPROTO=&quot;static&quot; #静态网址 (已有)</span><br><span class="line">ONBOOT=&quot;yes&quot; #开机启用 (已有)</span><br><span class="line">IPADDR=192.168.6.100 #IP地址 (增加)</span><br><span class="line">GATEWAY=192.168.6.2 #网关(增加)</span><br><span class="line">DNS1=192.168.6.2 #DNS域名解析(增加) 114.114.114.114 / 8.8.8.8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第七步: 重启网络服务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>如果报错,则reboot重启虚拟机</li>
</ul>
<blockquote>
<p>第八步: 如果此时宿主机和虚拟机之前ping不通,可以配置windows的 VMnet8虚拟网卡</p>
</blockquote>
<p><img src="https://blog-resources.this0.com/image/202403241458713.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202403241458674.png?x-oss-process=style/this0-blog"></p>
<ul>
<li><p>DNS配置：</p>
<ul>
<li><p>与网关一样，可以上网</p>
</li>
<li><p>8.8.8.8 测试可能无法上网</p>
</li>
<li><p>114.114.114.114 测试可以上网</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>第九步: 如果网络服务还是不能启动,可能域NetWorkManager服务冲突,关闭该服务即可</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看服务systemctl status NetworkManager.service</span><br><span class="line">停止服务 systemctl stop NetworkManager</span><br><span class="line">查看自启动 systemctl is-enabled NetworkManager</span><br><span class="line">关闭自启动systemctl disable NetworkManager</span><br></pre></td></tr></table></figure>

<h4 id="3-查看和修改主机名"><a href="#3-查看和修改主机名" class="headerlink" title="3 查看和修改主机名"></a>3 查看和修改主机名</h4><blockquote>
<p>查看主机名</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403241458703.png?x-oss-process=style/this0-blog"></p>
<blockquote>
<p>修改主机名</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403241458676.png?x-oss-process=style/this0-blog"></p>
<p><img src="https://blog-resources.this0.com/image/202403241458675.png?x-oss-process=style/this0-blog"></p>
<h4 id="4-修改主机名和IP地址的映射关系"><a href="#4-修改主机名和IP地址的映射关系" class="headerlink" title="4 修改主机名和IP地址的映射关系"></a>4 修改主机名和IP地址的映射关系</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403241458673.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>保存退出后重启计算机</li>
</ul>
<blockquote>
<p>修改宿主机的主机名和IP地址映射关系</p>
</blockquote>
<ul>
<li>windows上如果想通过centos100识别192.168.6.100 ,也需要修改hosts文件</li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403241458814.png?x-oss-process=style/this0-blog"></p>
<ul>
<li>添加一行 192.168.6.100 centos100</li>
</ul>
<h4 id="5-服务管理"><a href="#5-服务管理" class="headerlink" title="5 服务管理"></a>5 服务管理</h4><h5 id="1-临时后台服务管理"><a href="#1-临时后台服务管理" class="headerlink" title="1 临时后台服务管理"></a>1 临时后台服务管理</h5><p>基本语法</p>
<p>systemctl  start	服务名		（功能描述：开启服务）</p>
<p>systemctl  stop	服务名		（功能描述：关闭服务）</p>
<p>systemctl   restart	 服务名		（功能描述：重新启动服务）</p>
<p>systemctl   status	 服务名		（功能描述：查看服务状态）</p>
<p>systemctl  –type  service		（功能描述：查看正在运行的服务）</p>
<h5 id="2-设置后台服务的自启配置"><a href="#2-设置后台服务的自启配置" class="headerlink" title="2 设置后台服务的自启配置"></a>2 设置后台服务的自启配置</h5><p>基本语法</p>
<p>systemctl  list-unit-files   	（功能描述：查看所有服务器自启配置）</p>
<p>systemctl  disable 服务名   （功能描述：关掉指定服务的自动启动）</p>
<p>systemctl  enable  服务名  （功能描述：开启指定服务的自动启动）</p>
<p>systemctl  is-enabled 服务名（功能描述：查看服务开机启动状态）</p>
<h4 id="6-Linux系统的运行级别"><a href="#6-Linux系统的运行级别" class="headerlink" title="6 Linux系统的运行级别"></a>6 Linux系统的运行级别</h4><p>Linux系统有7种运行级别(runlevel)：常用的是级别3和5(CentOS7中只有两个级别了：3和5)</p>
<p>······</p>
<p>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</p>
<p>······</p>
<p>运行级别5：X11控制台，登陆后进入图形GUI模式</p>
<p>···</p>
<p><img src="https://blog-resources.this0.com/image/202403241458927.png?x-oss-process=style/this0-blog"></p>
<h3 id="3-5-关机重启命令"><a href="#3-5-关机重启命令" class="headerlink" title="3.5 关机重启命令"></a>3.5 关机重启命令</h3><p><strong>正确的关机流程为</strong>：sync &gt; shutdown &gt; reboot &gt;poweroff</p>
<h4 id="3-5-1-基本语法"><a href="#3-5-1-基本语法" class="headerlink" title="3.5.1 基本语法"></a>3.5.1 基本语法</h4><h5 id="（1）sync-（功能描述：将数据由内存同步到硬盘中）"><a href="#（1）sync-（功能描述：将数据由内存同步到硬盘中）" class="headerlink" title="（1）sync  			（功能描述：将数据由内存同步到硬盘中）"></a>（1）sync  			（功能描述：将数据由内存同步到硬盘中）</h5><h5 id="（2）poweroff（功能描述：关闭系统，等同于shutdown-h-now）"><a href="#（2）poweroff（功能描述：关闭系统，等同于shutdown-h-now）" class="headerlink" title="（2）poweroff		（功能描述：关闭系统，等同于shutdown -h now）"></a>（2）poweroff		（功能描述：关闭系统，等同于shutdown -h now）</h5><h5 id="（3）reboot-（功能描述：就是重启，等同于-shutdown-r-now）"><a href="#（3）reboot-（功能描述：就是重启，等同于-shutdown-r-now）" class="headerlink" title="（3）reboot 			（功能描述：就是重启，等同于 shutdown -r now）"></a>（3）reboot 			（功能描述：就是重启，等同于 shutdown -r now）</h5><h5 id="（4）shutdown-选项-时间"><a href="#（4）shutdown-选项-时间" class="headerlink" title="（4）shutdown [选项] 时间"></a>（4）shutdown [选项] 时间</h5><p>表1-4</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-h</td>
<td>-h&#x3D;halt关机</td>
</tr>
<tr>
<td>-r</td>
<td>-r&#x3D;reboot重启</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>now</td>
<td>立刻关机</td>
</tr>
<tr>
<td>时间</td>
<td>等待多久后关机（时间单位是<strong>分钟</strong>）。</td>
</tr>
</tbody></table>
<h4 id="3-5-2-经验技巧"><a href="#3-5-2-经验技巧" class="headerlink" title="3.5.2 经验技巧"></a>3.5.2 经验技巧</h4><p>​	Linux系统中为了提高磁盘的读写效率，对磁盘采取了 “预读迟写”操作方式。</p>
<h4 id="3-5-3-案例实操"><a href="#3-5-3-案例实操" class="headerlink" title="3.5.3 案例实操"></a>3.5.3 案例实操</h4><h5 id="（1）将数据由内存同步到硬盘中"><a href="#（1）将数据由内存同步到硬盘中" class="headerlink" title="（1）将数据由内存同步到硬盘中"></a>（1）将数据由内存同步到硬盘中</h5><p>sync  </p>
<h5 id="（2）重启"><a href="#（2）重启" class="headerlink" title="（2）重启"></a>（2）重启</h5><p> reboot </p>
<h5 id="（3）关机"><a href="#（3）关机" class="headerlink" title="（3）关机"></a>（3）关机</h5><p>poweroff </p>
<h5 id="（4）关机并输出提示"><a href="#（4）关机并输出提示" class="headerlink" title="（4）关机并输出提示"></a>（4）关机并输出提示</h5><p>shutdown -h 1 ‘This server will shutdown after 1 mins’</p>
<h5 id="（5）立马关机（等同于-halt）"><a href="#（5）立马关机（等同于-halt）" class="headerlink" title="（5）立马关机（等同于 halt）"></a>（5）立马关机（等同于 halt）</h5><p> shutdown -h now </p>
<h5 id="（6）系统立马重启（等同于-reboot）"><a href="#（6）系统立马重启（等同于-reboot）" class="headerlink" title="（6）系统立马重启（等同于 reboot）"></a>（6）系统立马重启（等同于 reboot）</h5><p> shutdown -r now</p>
<h3 id="第4章-远程登录"><a href="#第4章-远程登录" class="headerlink" title="第4章 远程登录"></a>第4章 远程登录</h3><h4 id="1-开启sshd服务"><a href="#1-开启sshd服务" class="headerlink" title="1 开启sshd服务"></a>1 开启sshd服务</h4><p>systemctl enable –now sshd (设置sshd开机自启，可选)</p>
<h4 id="2-远程连接"><a href="#2-远程连接" class="headerlink" title="2 远程连接"></a>2 远程连接</h4><p>通常情况下，使用ssh root@ip连接远程主机。</p>
<p>如果被禁止以root用户身份连接，需要在sshd配置文件中更改，将</p>
<p>PermitRootLogin no 改为 PermitRootLogin yes（大概在倒数第三行）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim  <span class="regexp">/etc/</span>ssh/sshd_config</span><br></pre></td></tr></table></figure>

<h4 id="3-远程工具"><a href="#3-远程工具" class="headerlink" title="3 远程工具"></a>3 远程工具</h4><p>常见的有xshell,MobaXterm,PuTTy，等，我更青睐Termius,因为ui设计更好看，并且支持linux平台。</p>
<h3 id="第5章-常用基本命令"><a href="#第5章-常用基本命令" class="headerlink" title="第5章 常用基本命令"></a>第5章 常用基本命令</h3><p>&#x2F;&#x2F;TODO，两个帮助命令</p>
<h4 id="1-帮助命令与Linux快捷键"><a href="#1-帮助命令与Linux快捷键" class="headerlink" title="1 帮助命令与Linux快捷键"></a>1 帮助命令与Linux快捷键</h4><h5 id="1-man-获得帮助信息"><a href="#1-man-获得帮助信息" class="headerlink" title="1 man 获得帮助信息"></a>1 man 获得帮助信息</h5><h6 id="1）基本语法"><a href="#1）基本语法" class="headerlink" title="1）基本语法"></a>1）基本语法</h6><p>​	man [命令或配置文件]		（功能描述：获得帮助信息）</p>
<h6 id="2）显示说明"><a href="#2）显示说明" class="headerlink" title="2）显示说明"></a>2）显示说明</h6><table>
<thead>
<tr>
<th>信息</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>NAME</td>
<td>命令的名称和单行描述</td>
</tr>
<tr>
<td>SYNOPSIS</td>
<td>怎样使用命令</td>
</tr>
<tr>
<td>DESCRIPTION</td>
<td>命令功能的深入讨论</td>
</tr>
<tr>
<td>EXAMPLES</td>
<td>怎样使用命令的例子</td>
</tr>
<tr>
<td>SEE ALSO</td>
<td>相关主题（通常是手册页）</td>
</tr>
</tbody></table>
<h5 id="2-help获得shell内置命令的帮助信息"><a href="#2-help获得shell内置命令的帮助信息" class="headerlink" title="2 help获得shell内置命令的帮助信息"></a>2 help获得shell内置命令的帮助信息</h5><h6 id="1）基本语法-1"><a href="#1）基本语法-1" class="headerlink" title="1）基本语法"></a>1）基本语法</h6><p>​	help 命令	（功能描述：获得shell内置命令的帮助信息）</p>
<h6 id="2）案例实操"><a href="#2）案例实操" class="headerlink" title="2）案例实操"></a>2）案例实操</h6><p>查看cd命令的帮助信息</p>
<p> help cd</p>
<h5 id="3-常用快捷键"><a href="#3-常用快捷键" class="headerlink" title="3 常用快捷键"></a>3 常用快捷键</h5><table>
<thead>
<tr>
<th>常用快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>ctrl + c</td>
<td>停止进程</td>
</tr>
<tr>
<td>ctrl+l</td>
<td>清屏；彻底清屏是：reset</td>
</tr>
<tr>
<td>ctrl + q</td>
<td>退出</td>
</tr>
<tr>
<td>善于用tab键</td>
<td>提示(更重要的是可以防止敲错)</td>
</tr>
<tr>
<td>上下键</td>
<td>查找执行过的命令</td>
</tr>
<tr>
<td>ctrl +alt</td>
<td>linux和Windows之间切换</td>
</tr>
</tbody></table>
<h4 id="2-文件目录类"><a href="#2-文件目录类" class="headerlink" title="2 文件目录类"></a>2 文件目录类</h4><h5 id="（1）pwd打印当前目录的绝对路径"><a href="#（1）pwd打印当前目录的绝对路径" class="headerlink" title="（1）pwd打印当前目录的绝对路径"></a>（1）pwd打印当前目录的绝对路径</h5><p>(print working directory ) </p>
<ul>
<li><p>基本语法</p>
<ul>
<li>pwd    （功能描述：显示当前工作目录的绝对路径）</li>
</ul>
</li>
<li><p>案例实操</p>
<ul>
<li>显示当前工作目录的绝对路径</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# pwd</span><br><span class="line">/root</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（2）ls-list-列出目录内容"><a href="#（2）ls-list-列出目录内容" class="headerlink" title="（2）ls(list) 列出目录内容"></a>（2）ls(list) 列出目录内容</h5><ul>
<li><p>基本语法</p>
<ul>
<li>ls [选项] [目录或是文件]</li>
</ul>
</li>
<li><p>选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)</td>
</tr>
<tr>
<td>-l</td>
<td>长数据串列出，包含文件的属性与权限等等数据；(常用)</td>
</tr>
</tbody></table>
</li>
<li><p>显示说明</p>
<p>每行列出的信息依次是： 文件类型与权限 链接数 文件属主 文件属组 文件大小用byte来表示 建立或最近修改的时间 名字&#x20;</p>
</li>
<li><p>实操案例</p>
<ul>
<li>查看当前目录的所有内容信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[this0@hadoop101 ~]$ ls -al</span><br><span class="line">总用量 44</span><br><span class="line">drwx------. 5 this0 this0 4096 5月  27 15:15 .</span><br><span class="line">drwxr-xr-x. 3 root    root    4096 5月  27 14:03 ..</span><br><span class="line">drwxrwxrwx. 2 root    root    4096 5月  27 14:14 hello</span><br><span class="line">-rwxrw-r--. 1 this0 this0   34 5月  27 14:20 test.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（3）cd-Change-Directory-切换路径"><a href="#（3）cd-Change-Directory-切换路径" class="headerlink" title="（3）cd(Change Directory)切换路径"></a>（3）cd(Change Directory)切换路径</h5><ul>
<li><p>基本语法</p>
<ul>
<li>cd [参数]</li>
</ul>
</li>
<li><p>参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>cd 绝对路径</td>
<td><strong>切换路径</strong></td>
</tr>
<tr>
<td>cd相对路径</td>
<td><strong>切换路径</strong></td>
</tr>
<tr>
<td>cd ~或者cd</td>
<td>回到自己的家目录</td>
</tr>
<tr>
<td>cd -</td>
<td>回到上一次所在目录</td>
</tr>
<tr>
<td>cd ..</td>
<td>回到当前目录的上一级目录</td>
</tr>
<tr>
<td>cd -P</td>
<td>跳转到实际物理路径，而非快捷方式路径</td>
</tr>
<tr>
<td>cd &#x2F;</td>
<td>回到系统根目录</td>
</tr>
</tbody></table>
</li>
<li><p>实操案例</p>
<ul>
<li>使用绝对路径切换到root目录</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cd /root/</span><br></pre></td></tr></table></figure>

<ul>
<li>使用相对路径切换到“公共的”目录</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cd 公共的/</span><br></pre></td></tr></table></figure>

<ul>
<li>表示回到自己的家目录，亦即是 &#x2F;root 这个目录</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 公共的]# cd ~</span><br></pre></td></tr></table></figure>

<ul>
<li>cd- 回到上一次所在目录</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cd -</span><br></pre></td></tr></table></figure>

<ul>
<li>表示回到当前目录的上一级目录，亦即是 “&#x2F;root&#x2F;公共的”的上一级目录的意思；</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 公共的]# cd ..</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（4）mkdir-Make-directory-建立目录"><a href="#（4）mkdir-Make-directory-建立目录" class="headerlink" title="（4）mkdir(Make directory) 建立目录"></a>（4）mkdir(Make directory) 建立目录</h5><ul>
<li><p>基本语法</p>
<ul>
<li>mkdir [选项] 要创建的目录</li>
</ul>
</li>
<li><p>选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-p</td>
<td>创建多层目录</td>
</tr>
</tbody></table>
</li>
<li><p>实操案例</p>
<ul>
<li>创建一个目录</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# mkdir xiyou</span><br><span class="line"></span><br><span class="line">[root@hadoop101 ~]# mkdir xiyou/mingjie</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个多级目录</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# mkdir -p xiyou/dssz/meihouwang</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（5）rmdir-Remove-directory-删除目录"><a href="#（5）rmdir-Remove-directory-删除目录" class="headerlink" title="（5）rmdir(Remove directory) 删除目录"></a>（5）rmdir(Remove directory) 删除目录</h5><ul>
<li><p>基本语法</p>
<ul>
<li>rmdir 要删除的<strong>空目录</strong></li>
</ul>
</li>
<li><p>实操案例</p>
<ul>
<li>删除一个空的文件夹</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# rmdir xiyou/dssz/meihouwang</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（6）touch-创建空文件"><a href="#（6）touch-创建空文件" class="headerlink" title="（6）touch 创建空文件"></a>（6）touch 创建空文件</h5><ul>
<li><p>基本语法</p>
<ul>
<li>touch 文件名称</li>
</ul>
</li>
<li><p>实操案例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# touch xiyou/dssz/sunwukong.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项</p>
<p>vim也可以创建文件,vim this0.txt 进入编辑模式,然后输入内容保存退出即可,但是如果不输出内容直接空文件下退出,则不会创建文件</p>
</li>
</ul>
<h5 id="（7）cp-复制文件或目录"><a href="#（7）cp-复制文件或目录" class="headerlink" title="（7）cp 复制文件或目录"></a>（7）cp 复制文件或目录</h5><ul>
<li><p>基本语法</p>
<ul>
<li>cp [选项] source dest             （功能描述：复制source文件到dest）</li>
</ul>
</li>
<li><p>选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>递归复制整个文件夹</td>
</tr>
</tbody></table>
</li>
<li><p>参数说明</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>source</td>
<td>源文件</td>
</tr>
<tr>
<td>dest</td>
<td>目标文件</td>
</tr>
</tbody></table>
</li>
<li><p>实操案例</p>
<ul>
<li>复制文件</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cp xiyou/dssz/suwukong.txt xiyou/mingjie/</span><br></pre></td></tr></table></figure>

<ul>
<li>递归复制整个文件夹</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cp -r a/b/ ./</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;TODO	强制覆盖不提示的方法：\cp</p>
</li>
</ul>
<h5 id="（8）rm移除文件或者目录"><a href="#（8）rm移除文件或者目录" class="headerlink" title="（8）rm移除文件或者目录"></a>（8）rm移除文件或者目录</h5><ul>
<li><p>基本语法</p>
<ul>
<li>rm [选项] deleteFile</li>
</ul>
</li>
<li><p>选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>递归删除目录所有内容</td>
</tr>
<tr>
<td>-f</td>
<td>强制删除,不提示用户进行确认</td>
</tr>
<tr>
<td>-v</td>
<td>显示指令的详细执行过程</td>
</tr>
</tbody></table>
</li>
<li><p>实操案例</p>
<ul>
<li>删除目录中的内容</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# rm xiyou/mingjie/sunwukong.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>递归删除目录中所有内容</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# rm -rf  dssz/</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（9）mv移动文件与目录或重命名"><a href="#（9）mv移动文件与目录或重命名" class="headerlink" title="（9）mv移动文件与目录或重命名"></a>（9）mv移动文件与目录或重命名</h5><ul>
<li><p>基本语法</p>
<ul>
<li>重命名&#x20;</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv oldNameFile newNameFile</span><br></pre></td></tr></table></figure>

<ul>
<li>移动文件&#x20;</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /temp/movefile /targetFolder</span><br></pre></td></tr></table></figure>
</li>
<li><p>实操案例</p>
<ul>
<li>重命名</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# mv xiyou/dssz/suwukong.txt xiyou/dssz/houge.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>移动文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# mv xiyou/dssz/houge.txt ./</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（10）cat查看文件内容"><a href="#（10）cat查看文件内容" class="headerlink" title="（10）cat查看文件内容"></a>（10）cat查看文件内容</h5><ul>
<li><p>基本语法</p>
<ul>
<li>cat  [选项] 文件     查看文件内容,从第一行开始显示</li>
</ul>
</li>
<li><p>选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>- n</td>
<td>显示所有行的行号,包括空行</td>
</tr>
</tbody></table>
<p>&#x2F;&#x2F;TODO 行号参数 -n</p>
</li>
<li><p>经验技巧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般查看比较小的文件,一屏幕能显示全的</span><br></pre></td></tr></table></figure>
</li>
<li><p>实操案例</p>
<ul>
<li>查看文件内容并显示行号</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[this0@hadoop101 ~]$ cat -n houge.txt </span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（11）more-文件分屏查看器"><a href="#（11）more-文件分屏查看器" class="headerlink" title="（11）more 文件分屏查看器"></a>（11）more 文件分屏查看器</h5><p>&#x2F;&#x2F;TODO，more命令</p>
<ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more 要查看的文件</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键，详见操作说明。</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作说明</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>空白键 (space)</td>
<td>代表向下翻一页；</td>
</tr>
<tr>
<td>Enter</td>
<td>代表向下翻『一行』；</td>
</tr>
<tr>
<td>q</td>
<td>代表立刻离开 more ，不再显示该文件内容。</td>
</tr>
<tr>
<td>Ctrl+F</td>
<td>向下滚动一屏</td>
</tr>
<tr>
<td>Ctrl+B</td>
<td>返回上一屏</td>
</tr>
<tr>
<td>&#x3D;</td>
<td>输出当前行的行号</td>
</tr>
<tr>
<td>:f</td>
<td>输出文件名和当前行的行号</td>
</tr>
</tbody></table>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）采用more查看文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# more smartd.conf</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（12）less-分屏显示文件内容"><a href="#（12）less-分屏显示文件内容" class="headerlink" title="（12）less 分屏显示文件内容"></a>（12）less 分屏显示文件内容</h5><p>&#x2F;&#x2F;TODO，less命令</p>
<ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</span><br><span class="line"></span><br><span class="line">less 要查看的文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作说明</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>功能说明</th>
</tr>
</thead>
<tbody><tr>
<td>空白键</td>
<td>向下翻动一页；</td>
</tr>
<tr>
<td>[pagedown]</td>
<td>向下翻动一页</td>
</tr>
<tr>
<td>[pageup]</td>
<td>向上翻动一页；</td>
</tr>
<tr>
<td>&#x2F;字串</td>
<td>向下搜寻『字串』的功能；n：向下查找；N：向上查找；</td>
</tr>
<tr>
<td>?字串</td>
<td>向上搜寻『字串』的功能；n：向上查找；N：向下查找；</td>
</tr>
<tr>
<td>q</td>
<td>离开 less 这个程序；</td>
</tr>
</tbody></table>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）采用less查看文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# less smartd.conf</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（13）head显示文件头部内容"><a href="#（13）head显示文件头部内容" class="headerlink" title="（13）head显示文件头部内容"></a>（13）head显示文件头部内容</h5><ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容。</span><br><span class="line"></span><br><span class="line">head 文件      （功能描述：查看文件头10行内容）</span><br><span class="line">head -n 5 文件   （功能描述：查看文件头5行内容，5可以是任意行数）</span><br></pre></td></tr></table></figure>
</li>
<li><p>选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-n &lt;行数&gt;</td>
<td>指定显示头部内容的行数</td>
</tr>
</tbody></table>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）查看文件的头2行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# head -n 2 smartd.conf</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（14）tail-输出文件尾部内容"><a href="#（14）tail-输出文件尾部内容" class="headerlink" title="（14）tail 输出文件尾部内容"></a>（14）tail 输出文件尾部内容</h5><ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的后10行内容。</span><br><span class="line">（1）tail 文件          （功能描述：查看文件后10行内容）</span><br><span class="line">（2）tail -n 5 文件     （功能描述：查看文件后5行内容，5可以是任意行数）</span><br><span class="line">（3）tail -f 文件      （功能描述：实时追踪该文档的所有更新）</span><br></pre></td></tr></table></figure>
</li>
<li><p>选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-n&lt;行数&gt;</td>
<td>输出文件尾部n行内容</td>
</tr>
<tr>
<td>-f</td>
<td>显示文件最新追加的内容，监视文件变化</td>
</tr>
</tbody></table>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）查看文件头1行内容</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# tail -n 1 smartd.conf </span><br></pre></td></tr></table></figure>

<ul>
<li>（2）实时追踪该档的所有更新</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# tail -f houge.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（15）echo-打印信息"><a href="#（15）echo-打印信息" class="headerlink" title="（15）echo 打印信息"></a>（15）echo 打印信息</h5><p>&#x2F;&#x2F;TODO，注意-e参数</p>
<ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo输出内容到控制台  System.out.println();</span><br><span class="line"></span><br><span class="line">echo [选项] [输出内容]</span><br></pre></td></tr></table></figure>
</li>
<li><p>选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-e</td>
<td>支持反斜线控制的字符转换</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>控制字符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>\\</td>
<td>输出\本身</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>\t</td>
<td>制表符，也就是Tab键</td>
</tr>
</tbody></table>
</li>
<li><p>实操案例</p>
<ul>
<li>(1) 打印文字信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[this0@hadoop101 ~]$ echo &quot;hello\tworld&quot;</span><br><span class="line">hello\tworld</span><br><span class="line">[this0@hadoop101 ~]$ echo -e &quot;hello\tworld&quot;</span><br><span class="line">hello   world</span><br></pre></td></tr></table></figure>

<ul>
<li>(2) 打印环境变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[this0@hadoop101 ~]$ echo $PATH</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（16）-覆盖和-追加"><a href="#（16）-覆盖和-追加" class="headerlink" title="（16）&gt; 覆盖和&gt;&gt;追加"></a>（16）&gt; 覆盖和&gt;&gt;追加</h5><p>&#x2F;&#x2F;TODO</p>
<ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）ll &gt;文件       （功能描述：列表的内容写入文件a.txt中（覆盖写））</span><br><span class="line">（2）ll &gt;&gt;文件      （功能描述：列表的内容**追加**到文件aa.txt的末尾）</span><br><span class="line">（3）cat 文件1 &gt; 文件2 （功能描述：将文件1的内容覆盖到文件2）</span><br><span class="line">（4）echo “内容” &gt;&gt; 文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）将ls查看信息写入到文件中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# ls -l&gt;houge.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>（2）将ls查看信息追加到文件中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# ls -l&gt;&gt;houge.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>（3）采用echo将hello单词追加到文件中</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# echo hello&gt;&gt;houge.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（17）ln创建链接和软连接"><a href="#（17）ln创建链接和软连接" class="headerlink" title="（17）ln创建链接和软连接"></a>（17）ln创建链接和软连接</h5><p>&#x2F;&#x2F;TODO没搞懂</p>
<ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接表示目标资源的另外的访问方式,表示一种路径</span><br><span class="line">软链接也称为符号链接，类似于windows里的快捷方式，有自己的数据块，主要存放了链接其他文件的路径。</span><br><span class="line">ln [-s] [原文件或目录] [链接名]       （功能描述：给原文件创建一个链接）</span><br></pre></td></tr></table></figure>
</li>
<li><p>选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-s</td>
<td>创建的链接为 软连接</td>
</tr>
</tbody></table>
</li>
<li><p>经验技巧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">删除软链接： rm -rf 软链接名，而不是rm -rf 软链接名/</span><br><span class="line">查询：通过ll就可以查看，列表属性第1位是l，尾部会有位置指向。</span><br></pre></td></tr></table></figure>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）创建软连接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# mv houge.txt xiyou/dssz/</span><br><span class="line">[root@hadoop101 ~]# ln -s xiyou/dssz/houge.txt houzi</span><br><span class="line">[root@hadoop101 ~]# ll</span><br><span class="line">lrwxrwxrwx. 1 root  root   20 6月 17 12:56 houzi -&gt; xiyou/dssz/houge.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>（2）删除软连接</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# rm -rf houzi</span><br></pre></td></tr></table></figure>

<ul>
<li>（3）进入软连接实际物理路径</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# ln -s xiyou/dssz/ ./dssz</span><br><span class="line">[root@hadoop101 ~]# cd -P dssz/</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（18）history查看历史命令"><a href="#（18）history查看历史命令" class="headerlink" title="（18）history查看历史命令"></a>（18）history查看历史命令</h5><ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">history                    （功能描述：查看已经执行过历史命令）</span><br></pre></td></tr></table></figure>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）查看已经执行过的历史命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 test1]# history</span><br></pre></td></tr></table></figure>

<ul>
<li>(2)   &#x2F;root&#x2F;.bash_history文件中也是历史命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less /root/.bash_history</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-用户管理命令"><a href="#3-用户管理命令" class="headerlink" title="3 用户管理命令"></a>3 <strong>用户管理命令</strong></h4><h5 id="1-useradd-添加新用户"><a href="#1-useradd-添加新用户" class="headerlink" title="1 useradd 添加新用户"></a><strong>1 useradd</strong> <strong>添加新用户</strong></h5><p>1）基本语法</p>
<p>​	useradd 用户名			（功能描述：添加新用户）</p>
<p>​	useradd -g 组名 用户名	（功能描述：添加新用户到某个组）</p>
<p>&#x2F;&#x2F;TODO 	这个命令：useradd -g 组名 用户名</p>
<p>2）案例实操</p>
<p>[root@hadoop101 ~]# useradd tangseng</p>
<p>[root@hadoop101 ~]# ll &#x2F;home&#x2F;</p>
<h5 id="2-passwd-设置用户密码"><a href="#2-passwd-设置用户密码" class="headerlink" title="2 passwd 设置用户密码"></a><strong>2 passwd</strong> <strong>设置用户密码</strong></h5><p>1）基本语法</p>
<p>​	passwd 用户名	（功能描述：设置用户密码）</p>
<p>2）案例实操</p>
<p>设置用户的密码</p>
<p>[root@hadoop101 ~]# passwd tangseng</p>
<h5 id="3-id-查看用户是否存在"><a href="#3-id-查看用户是否存在" class="headerlink" title="3 id 查看用户是否存在"></a><strong>3 id</strong> 查看用户是否存在</h5><p>1）基本语法</p>
<p>​	id 用户名</p>
<p>2）案例实操</p>
<p>查看用户是否存在</p>
<p>[root@hadoop101 ~]#id tangseng</p>
<h5 id="4-cat-etc-passwd-查看创建了哪些用户"><a href="#4-cat-etc-passwd-查看创建了哪些用户" class="headerlink" title="**4 **cat  &#x2F;etc&#x2F;passwd 查看创建了哪些用户"></a>**4 **cat  &#x2F;etc&#x2F;passwd <strong>查看创建了哪些用户</strong></h5><p>基本语法</p>
<p>[root@hadoop101 ~]# cat  &#x2F;etc&#x2F;passwd</p>
<p>&#x2F;&#x2F;TODO，上面一个</p>
<h5 id="5-su-切换用户"><a href="#5-su-切换用户" class="headerlink" title="5 su 切换用户"></a>5 <strong>su</strong> <strong>切换用户</strong></h5><p>su: swith user 切换用户</p>
<p>1）基本语法</p>
<p>su 用户名称   （功能描述：切换用户，只能获得用户的执行权限，不能获得当前用户环境变量，而是获取原用户的环境变量）</p>
<p>su - 用户名称		（功能描述：切换到用户并获得该用户的环境变量及执行权限）</p>
<p>&#x2F;&#x2F;TODO su - 用户命令的区别，切换到用户并获得该用户的环境变量及执行权限</p>
<p>2）案例实操</p>
<p>(1) 切换用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]<span class="comment">#su tangseng</span></span><br><span class="line"></span><br><span class="line">[root@hadoop101 ~]<span class="comment">#echo $PATH</span></span><br><span class="line"></span><br><span class="line">/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line"></span><br><span class="line">[root@hadoop101 ~]<span class="comment">#exit</span></span><br><span class="line"></span><br><span class="line">[root@hadoop101 ~]<span class="comment">#su - tangseng</span></span><br><span class="line"></span><br><span class="line">[root@hadoop101 ~]<span class="comment">#echo $PATH</span></span><br><span class="line"></span><br><span class="line">/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/tangseng/bin</span><br></pre></td></tr></table></figure>

<p>&#x20;(2) exit 回退到上一个用户 &#x20;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]#exit</span><br></pre></td></tr></table></figure>

<h5 id="6-userdel-删除用户"><a href="#6-userdel-删除用户" class="headerlink" title="6 userdel 删除用户"></a><strong>6 userdel</strong> <strong>删除用户</strong></h5><p>1）基本语法</p>
<p>（1）userdel  用户名		（功能描述：删除用户但保存用户主目录）</p>
<p>（2）userdel -r 用户名		（功能描述：用户和用户主目录，都删除）</p>
<p>2）选项说明</p>
<p>&#x2F;&#x2F;TODO 同时删除用户主目录</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>删除用户的同时，删除与用户相关的所有文件。</td>
</tr>
</tbody></table>
<p>3）案例实操</p>
<p>（1）删除用户但保存用户主目录</p>
<p>[root@hadoop101 ~]#userdel tangseng</p>
<p>[root@hadoop101 ~]#ll &#x2F;home&#x2F;</p>
<p>（2）删除用户和用户主目录，都删除</p>
<p>[root@hadoop101 ~]#useradd zhubajie</p>
<p>[root@hadoop101 ~]#ll &#x2F;home&#x2F;</p>
<p>[root@hadoop101 ~]#userdel -r zhubajie</p>
<p>[root@hadoop101 ~]#ll &#x2F;home&#x2F;</p>
<h5 id="7-who-查看登录用户信息"><a href="#7-who-查看登录用户信息" class="headerlink" title="7 who 查看登录用户信息"></a><strong>7 who</strong> <strong>查看登录用户信息</strong></h5><p>1）基本语法</p>
<p>&#x2F;&#x2F;TODO 两个whoami</p>
<p>（1）whoami			（功能描述：显示自身用户名称）</p>
<p>（2）who am i		（功能描述：显示<strong>登录用户</strong>的用户名）</p>
<p>2）案例实操</p>
<p>（1）显示自身用户名称</p>
<p>[root@hadoop101 opt]# whoami</p>
<p>（2）显示登录用户的用户名</p>
<p>[root@hadoop101 opt]# who am i</p>
<h5 id="8-sudo-设置普通用户具有-root-权限"><a href="#8-sudo-设置普通用户具有-root-权限" class="headerlink" title="8 sudo 设置普通用户具有 root 权限"></a><strong>8</strong> <strong>sudo</strong> 设置普通用户具有 root 权限</h5><p>1）添加this0用户，并对其设置密码。</p>
<p>[root@hadoop101 ~]#useradd this0</p>
<p>[root@hadoop101 ~]#passwd this0</p>
<p>2）修改配置文件</p>
<p>[root@hadoop101 ~]#vi &#x2F;etc&#x2F;sudoers</p>
<p>修改 &#x2F;etc&#x2F;sudoers 文件，找到下面一行(91行)，在root下面添加一行，如下所示：</p>
<p>## Allow root to run any commands anywhere</p>
<p>root    ALL&#x3D;(ALL)     ALL</p>
<p>this0   ALL&#x3D;(ALL)     ALL</p>
<p>或者配置成采用sudo命令时，不需要输入密码</p>
<p>## Allow root to run any commands anywhere</p>
<p>root      ALL&#x3D;(ALL)     ALL</p>
<p>this0   ALL&#x3D;(ALL)     NOPASSWD:ALL</p>
<p>修改完毕，现在可以用this0帐号登录，然后用命令 sudo ，即可获得root权限进行操作。</p>
<p>3）案例实操</p>
<p>​	用普通用户在&#x2F;opt目录下创建一个文件夹</p>
<p>[this0@hadoop101 opt]$ sudo mkdir module</p>
<p>[root@hadoop101 opt]# chown this0:this0 module&#x2F;</p>
<h5 id="9-usermod-修改用户"><a href="#9-usermod-修改用户" class="headerlink" title="9 usermod 修改用户"></a><strong>9 usermod</strong> 修改用户</h5><p>1）基本语法</p>
<p>usermod -g 用户组 用户名</p>
<p>2）选项说明</p>
<p>表1-24</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-g</td>
<td>修改用户的初始登录组，给定的组必须存在</td>
</tr>
<tr>
<td>-a</td>
<td>添加到指定用户组</td>
</tr>
</tbody></table>
<p><code>-aG</code>表示将用户添加到指定的用户组中，而不是改变用户所在的用户组。</p>
<p>3）案例实操</p>
<p>将用户ypt加入到docker组</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo usermod -aG docker ypt</span></span><br></pre></td></tr></table></figure>

<h4 id="4-用户组管理命令"><a href="#4-用户组管理命令" class="headerlink" title="4 用户组管理命令"></a><strong>4</strong> <strong>用户组管理命令</strong></h4><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，</p>
<p>如centos下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>
<p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对&#x2F;etc&#x2F;group文件的更新。</p>
<h5 id="1-groupadd-新增组"><a href="#1-groupadd-新增组" class="headerlink" title="1 groupadd 新增组"></a><strong>1 groupadd</strong> <strong>新增组</strong></h5><h6 id="1）基本语法-2"><a href="#1）基本语法-2" class="headerlink" title="1）基本语法"></a>1）基本语法</h6><p>groupadd 组名</p>
<h6 id="2）案例实操-1"><a href="#2）案例实操-1" class="headerlink" title="2）案例实操"></a>2）案例实操</h6><p>​	添加一个xitianqujing组</p>
<p>[root@hadoop101 opt]#groupadd xitianqujing</p>
<h5 id="2-groupdel-删除组"><a href="#2-groupdel-删除组" class="headerlink" title="2 groupdel 删除组"></a><strong>2 groupdel</strong> <strong>删除组</strong></h5><h6 id="1）基本语法-3"><a href="#1）基本语法-3" class="headerlink" title="1）基本语法"></a>1）基本语法</h6><p>groupdel 组名</p>
<h6 id="2）案例实操-2"><a href="#2）案例实操-2" class="headerlink" title="2）案例实操"></a>2）案例实操</h6><p>​	删除xitianqujing组</p>
<p>[root@hadoop101 opt]# groupdel xitianqujing</p>
<h5 id="3-groupmod-修改组"><a href="#3-groupmod-修改组" class="headerlink" title="3 groupmod 修改组"></a><strong>3 groupmod</strong> <strong>修改组</strong></h5><p>&#x2F;&#x2F;TODO修改组的命令</p>
<p>4 newgrp 临时切换组</p>
<p>newgrp docker</p>
<h6 id="1）基本语法-4"><a href="#1）基本语法-4" class="headerlink" title="1）基本语法"></a>1）基本语法</h6><p>groupmod -n 新组名 老组名</p>
<h6 id="2）选项说明"><a href="#2）选项说明" class="headerlink" title="2）选项说明"></a>2）选项说明</h6><p>表1-25</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>-n&lt;新组名&gt;</td>
<td>指定工作组的新组名</td>
</tr>
</tbody></table>
<h6 id="3）案例实操"><a href="#3）案例实操" class="headerlink" title="3）案例实操"></a>3）案例实操</h6><p>​	修改this0组名称为this01</p>
<p>[root@hadoop101 ~]#groupadd xitianqujing</p>
<p>[root@hadoop101 ~]#groupmod -n xitian xitianqujing</p>
<h5 id="4-cat-etc-group-查看创建了哪些组"><a href="#4-cat-etc-group-查看创建了哪些组" class="headerlink" title="4 cat  &#x2F;etc&#x2F;group 查看创建了哪些组"></a><strong>4 cat  &#x2F;etc&#x2F;group</strong> <strong>查看创建了哪些组</strong></h5><p>基本操作</p>
<p>[root@hadoop101 this0]# cat  &#x2F;etc&#x2F;group</p>
<h4 id="5-文件权限类命令"><a href="#5-文件权限类命令" class="headerlink" title="5 文件权限类命令"></a>5 文件权限类命令</h4><blockquote>
<p>文件属性信息解读</p>
</blockquote>
<ul>
<li><p>文件类型和权限的表示</p>
<p><img src="https://blog-resources.this0.com/image/202403241458982.png?x-oss-process=style/this0-blog"></p>
<ul>
<li><p>（1） 0首位表示类型 在Linux中第一个字符代表这个文件是目录、文件或链接文件等等</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>对应文件类型</th>
</tr>
</thead>
<tbody><tr>
<td>-</td>
<td>代表文件</td>
</tr>
<tr>
<td>d</td>
<td>d 代表目录</td>
</tr>
<tr>
<td>l</td>
<td>链接文档(link file)；</td>
</tr>
</tbody></table>
</li>
<li><p>（2）第1-3位确定属主（该文件的所有者）拥有该文件的权限。U →User</p>
</li>
<li><p>（3）第4-6位确定属组（所有者的同组用户）拥有该文件的权限，G→Group</p>
</li>
<li><p>（4）第7-9位确定其他用户拥有该文件的权限 ,   O →Other</p>
</li>
</ul>
</li>
<li><p>rwx作用到目录和文件的不同含义</p>
<ul>
<li>作用到文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ r ]代表可读(read): 可以读取，查看</span><br><span class="line">​[ w ]代表可写(write): 可以修改，但是不能删除该文件，对该文件所在的目录有写权限，才能删除.</span><br><span class="line">​[ x ]代表可执行(execute):可以被系统执行</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;TODO，对该文件所在的目录有写权限，才能删除.那写权限呢？</p>
<ul>
<li>作用到目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ r ]代表可读(read): 可以读取，ls查看目录内容</span><br><span class="line">​[ w ]代表可写(write): 可以修改，目录内创建+删除+重命名目录</span><br><span class="line">[ x ]代表可执行(execute):可以进入该目录</span><br></pre></td></tr></table></figure>
</li>
<li><p>实操案例</p>
<ul>
<li>(1)查看文件权限信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# ll</span><br><span class="line">总用量 104</span><br><span class="line">-rw-------. 1 root root 1248 1月  8 17:36 anaconda-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root 4096 1月 12 14:02 dssz</span><br><span class="line">lrwxrwxrwx. 1 root root  20 1月 12 14:32 houzi -&gt; xiyou/dssz/houge.tx</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>(2)文件属性介绍</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403241458099.png?x-oss-process=style/this0-blog"></p>
<p>** 如果查看到是文件：链接数指的是硬链接个数**<br>** 如果查看的是文件夹：链接数指的是子文件夹个数 **​</p>
</li>
</ul>
<blockquote>
<p>chmod改变文件权限</p>
</blockquote>
<ul>
<li><p>基本语法</p>
<p><img src="https://blog-resources.this0.com/image/202403241458055.png?x-oss-process=style/this0-blog"></p>
<ul>
<li><p>第一种方式变更权限</p>
<p>&#x2F;&#x2F;TODO，-和&#x3D;是什么意思</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod [&#123;ugoa&#125;&#123;+-=&#125;&#123;rwx&#125;] 文件或目录</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种方式变更权限</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod [mode=421 ] [文件或目录]</span><br></pre></td></tr></table></figure>
</li>
<li><p>经验技巧</p>
<p>&#x2F;&#x2F;TODO，ugo，还有一个a</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u:所有者 g:所有组 o:其他人 a:所有人(u、g、o的总和)</span><br><span class="line">​r=4 w=2 x=1         </span><br><span class="line">rwx=4+2+1=7</span><br></pre></td></tr></table></figure>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）修改文件使其所属主用户具有执行权限</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cp xiyou/dssz/houge.txt ./</span><br><span class="line">[root@hadoop101 ~]# chmod u+x houge.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>（2）修改文件使其所属组用户具有执行权限</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# chmod g+x houge.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>（3）修改文件所属主用户执行权限,并使其他用户具有执行权限</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# chmod u-x,o+x houge.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>（4）采用数字的方式，设置文件所有者、所属组、其他用户都具有可读可写可执行权限。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# chmod 777 houge.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>（5）修改整个文件夹里面的所有文件的所有者、所属组、其他用户都具有可读写执行权限。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# chmod -R 777 xiyou/</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>chown 改变所有者</p>
</blockquote>
<p>&#x2F;&#x2F;TODO，chown命令用得少</p>
<ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown [选项] [最终用户] [文件或目录]     （功能描述：改变文件或者目录的所有者）</span><br></pre></td></tr></table></figure>
</li>
<li><p>选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-R</td>
<td>递归操作</td>
</tr>
</tbody></table>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）修改文件所有者</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# chown this0 houge.txt </span><br><span class="line">[root@hadoop101 ~]# ls -al</span><br><span class="line">-rwxrwxrwx. 1 this0 root 551 5月 23 13:02 houge.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>（2）递归改变文件所有者和所有组</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 xiyou]# ll</span><br><span class="line">drwxrwxrwx. 2 root root 4096 9月  3 21:20 xiyou</span><br><span class="line">[root@hadoop101 xiyou]# chown -R this0:this0 xiyou/</span><br><span class="line">[root@hadoop101 xiyou]# ll</span><br><span class="line">drwxrwxrwx. 2 this0 this0 4096 9月  3 21:20 xiyou</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>chgrp改变所属组</p>
</blockquote>
<p>&#x2F;&#x2F;TODO,chgrp同样用的少</p>
<ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp [最终用户组] [文件或目录]   （功能描述：改变文件或者目录的所属组）</span><br></pre></td></tr></table></figure>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）修改文件的所属组</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# chgrp root houge.txt</span><br><span class="line">[root@hadoop101 ~]# ls -al</span><br><span class="line">-rwxrwxrwx. 1 this0 root 551 5月 23 13:02 houge.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-搜索查找类命令"><a href="#6-搜索查找类命令" class="headerlink" title="6 搜索查找类命令"></a>6 搜索查找类命令</h4><h5 id="1-find-查找文件或者目录"><a href="#1-find-查找文件或者目录" class="headerlink" title="1 find 查找文件或者目录"></a><strong>1 find</strong> <strong>查找文件或者目录</strong></h5><p>find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件显示在终端。</p>
<h6 id="1）基本语法-5"><a href="#1）基本语法-5" class="headerlink" title="1）基本语法"></a>1）基本语法</h6><p>​	find [搜索范围] [选项]</p>
<h6 id="2）选项说明-1"><a href="#2）选项说明-1" class="headerlink" title="2）选项说明"></a>2）选项说明</h6><p>表1-27</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-name&lt;查询方式&gt;</td>
<td>按照指定的文件名查找模式查找文件</td>
</tr>
<tr>
<td>-user&lt;用户名&gt;</td>
<td>查找属于指定用户名所有文件</td>
</tr>
<tr>
<td>-size&lt;文件大小&gt;</td>
<td>按照指定的文件大小查找文件。</td>
</tr>
</tbody></table>
<h6 id="3）案例实操-1"><a href="#3）案例实操-1" class="headerlink" title="3）案例实操"></a>3）案例实操</h6><p>（1）按文件名：根据名称查找&#x2F;目录下的filename.txt文件。</p>
<p>[root@hadoop101 ~]# find xiyou&#x2F; -name “*.txt”</p>
<p>（2）按拥有者：查找&#x2F;opt目录下，用户名称为-user的文件</p>
<p>[root@hadoop101 ~]# find opt&#x2F; -user this0</p>
<p>（3）按文件大小：在&#x2F;home目录下查找大于200m的文件（+n 大于  -n小于   n等于）</p>
<p>[root@hadoop101 ~]find &#x2F;home -size +204800</p>
<h5 id="2-grep-过滤查找及-“-”-管道符"><a href="#2-grep-过滤查找及-“-”-管道符" class="headerlink" title="2 grep 过滤查找及 “|” 管道符"></a><strong>2 grep</strong> 过滤查找及 “|” 管道符</h5><p>管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理</p>
<h6 id="1）基本语法-6"><a href="#1）基本语法-6" class="headerlink" title="1）基本语法"></a>1）基本语法</h6><p>grep 选项 查找内容 源文件</p>
<h6 id="2）选项说明-2"><a href="#2）选项说明-2" class="headerlink" title="2）选项说明"></a>2）选项说明</h6><p>表1-28</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-n</td>
<td>显示匹配行及行号。</td>
</tr>
</tbody></table>
<h6 id="3）案例实操-2"><a href="#3）案例实操-2" class="headerlink" title="3）案例实操"></a>3）案例实操</h6><p>​	查找某文件在第几行</p>
<p>&#x2F;&#x2F;TODO</p>
<p>[root@hadoop101 ~]# ls | grep -n test</p>
<h5 id="3-which-查找命令"><a href="#3-which-查找命令" class="headerlink" title="3 which 查找命令"></a><strong>3</strong> <strong>which</strong> <strong>查找命令</strong></h5><p>&#x2F;&#x2F;TODO</p>
<p>​	查找命令在那个目录下</p>
<h6 id="1）基本语法-7"><a href="#1）基本语法-7" class="headerlink" title="1）基本语法"></a>1）基本语法</h6><p>which 命令</p>
<h6 id="2）案例实操-3"><a href="#2）案例实操-3" class="headerlink" title="2）案例实操"></a>2）案例实操</h6><p>[root@hadoop101 ~]# which ll</p>
<h4 id="7-压缩和解压缩命令"><a href="#7-压缩和解压缩命令" class="headerlink" title="7 压缩和解压缩命令"></a>7 压缩和解压缩命令</h4><p>&#x2F;&#x2F;TODO，后面再看吧，需要实操，优先级不高</p>
<blockquote>
<p>gzip&#x2F;gunzip 压缩</p>
</blockquote>
<ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip 文件       （功能描述：压缩文件，只能将文件压缩为*.gz文件）</span><br><span class="line">gunzip 文件.gz  （功能描述：解压缩文件命令）</span><br></pre></td></tr></table></figure>
</li>
<li><p>经验技巧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）只能压缩文件,不能压缩目录</span><br><span class="line">（2）不保留原来的文件</span><br></pre></td></tr></table></figure>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）gzip压缩</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# ls</span><br><span class="line">houge.txt</span><br><span class="line">[root@hadoop101 ~]# gzip houge.txt</span><br><span class="line">[root@hadoop101 ~]# ls</span><br><span class="line">houge.txt.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>（2）gunzip解压缩文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# gunzip houge.txt.gz </span><br><span class="line">[root@hadoop101 ~]# ls</span><br><span class="line">houge.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>zip&#x2F;unzip压缩</p>
</blockquote>
<ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip [选项] XXX.zip 将要压缩的内容     （功能描述：压缩文件和目录的命令）</span><br><span class="line">​unzip [选项] XXX.zip                （功能描述：解压缩文件）</span><br></pre></td></tr></table></figure>
</li>
<li><p>选项说明</p>
<table>
<thead>
<tr>
<th>zip选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>压缩目录</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>unzip选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-d&lt;目录&gt;</td>
<td>指定解压后文件的存放目录</td>
</tr>
</tbody></table>
</li>
<li><p>经验技巧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip 压缩命令在window/linux都通用，**可以压缩目录且保留源文件**。</span><br></pre></td></tr></table></figure>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）压缩 1.txt 和2.txt，压缩后的名称为mypackage.zip&#x20;</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 opt]# touch bailongma.txt</span><br><span class="line">[root@hadoop101 ~]# zip houma.zip houge.txt bailongma.txt </span><br><span class="line"> adding: houge.txt (stored 0%)</span><br><span class="line"> adding: bailongma.txt (stored 0%)</span><br><span class="line">[root@hadoop101 opt]# ls</span><br><span class="line">houge.txt bailongma.txt  houma.zip </span><br></pre></td></tr></table></figure>

<ul>
<li>（2）解压 mypackage.zip</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# unzip houma.zip </span><br><span class="line"> Archive: houma.zip</span><br><span class="line"> extracting: houge.txt        </span><br><span class="line"> extracting: bailongma.txt    </span><br><span class="line">[root@hadoop101 ~]# ls</span><br><span class="line">houge.txt bailongma.txt  houma.zip</span><br></pre></td></tr></table></figure>

<ul>
<li>（3）解压mypackage.zip到指定目录-d</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# unzip houma.zip -d /opt</span><br><span class="line">[root@hadoop101 ~]# ls /opt/</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>tar打包</p>
</blockquote>
<ul>
<li><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar [选项] XXX.tar.gz 将要打包进去的内容  （功能描述：打包目录，压缩后的文件格式.tar.gz）</span><br></pre></td></tr></table></figure>
</li>
<li><p>选项说明</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-z</td>
<td>打包同时压缩</td>
</tr>
<tr>
<td>-c</td>
<td>产生.tar打包文件</td>
</tr>
<tr>
<td>-v</td>
<td>显示详细信息</td>
</tr>
<tr>
<td>-f</td>
<td>指定压缩后的文件名</td>
</tr>
<tr>
<td>-x</td>
<td>解包.tar文件</td>
</tr>
</tbody></table>
</li>
<li><p>实操案例</p>
<ul>
<li>（1）压缩多个文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 opt]# tar -zcvf houma.tar.gz houge.txt bailongma.txt </span><br><span class="line">houge.txt</span><br><span class="line">bailongma.txt</span><br><span class="line">[root@hadoop101 opt]# ls</span><br><span class="line">houma.tar.gz houge.txt bailongma.txt </span><br></pre></td></tr></table></figure>

<ul>
<li>（2）压缩目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# tar -zcvf xiyou.tar.gz xiyou/</span><br><span class="line">xiyou/</span><br><span class="line">xiyou/mingjie/</span><br><span class="line">xiyou/dssz/</span><br><span class="line">xiyou/dssz/houge.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>（3）解压到当前目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# tar -zxvf houma.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>（4）解压到指定目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# tar -zxvf xiyou.tar.gz -C /opt</span><br><span class="line">[root@hadoop101 ~]# ll /opt/</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-磁盘分区类"><a href="#8-磁盘分区类" class="headerlink" title="8 磁盘分区类"></a><strong>8</strong> <strong>磁盘分区类</strong></h4><h5 id="1-df-查看磁盘空间使用情况"><a href="#1-df-查看磁盘空间使用情况" class="headerlink" title="1 df 查看磁盘空间使用情况"></a><strong>1 df</strong> <strong>查看磁盘空间使用情况</strong></h5><p>df: disk free 空余硬盘</p>
<h6 id="1）基本语法-8"><a href="#1）基本语法-8" class="headerlink" title="1）基本语法"></a>1）基本语法</h6><p>​	df  选项	（功能描述：列出文件系统的整体磁盘使用量，检查文件系统的磁盘空间占用情况）</p>
<h6 id="2）选项说明-3"><a href="#2）选项说明-3" class="headerlink" title="2）选项说明"></a>2）选项说明</h6><p>表1-32</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-h</td>
<td>以人们较易阅读的GBytes, MBytes, KBytes 等格式自行显示；</td>
</tr>
</tbody></table>
<h6 id="3）案例实操-3"><a href="#3）案例实操-3" class="headerlink" title="3）案例实操"></a>3）案例实操</h6><p>​	查看磁盘使用情况</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@hadoop101</span> ~]<span class="comment"># df -h</span></span><br><span class="line"></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line"></span><br><span class="line"><span class="regexp">/dev/sda</span>2        <span class="number">15</span>G  <span class="number">3.5</span>G   <span class="number">11</span>G  <span class="number">26</span>% <span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">tmpfs           939M  224K  939M   1% /dev</span><span class="regexp">/shm</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/dev</span><span class="regexp">/sda1       190M   39M  142M  22% /boot</span></span><br></pre></td></tr></table></figure>

<h5 id="2-fdisk-查看分区"><a href="#2-fdisk-查看分区" class="headerlink" title="2 fdisk 查看分区"></a><strong>2 fdisk</strong> <strong>查看分区</strong></h5><h6 id="1）基本语法-9"><a href="#1）基本语法-9" class="headerlink" title="1）基本语法"></a>1）基本语法</h6><p>​	fdisk -l			（功能描述：查看磁盘分区详情）</p>
<h6 id="2）选项说明-4"><a href="#2）选项说明-4" class="headerlink" title="2）选项说明"></a>2）选项说明</h6><p>表1-33</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-l</td>
<td>显示所有硬盘的分区列表</td>
</tr>
</tbody></table>
<h6 id="3）经验技巧"><a href="#3）经验技巧" class="headerlink" title="3）经验技巧"></a>3）经验技巧</h6><p>该命令必须在root用户下才能使用</p>
<h6 id="4）功能说明"><a href="#4）功能说明" class="headerlink" title="4）功能说明"></a>4）功能说明</h6><p>​	（1）Linux分区</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Device：分区序列</span><br><span class="line"></span><br><span class="line">Boot：引导</span><br><span class="line"></span><br><span class="line"><span class="keyword">Start</span>：从X磁柱开始</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span>：到Y磁柱结束</span><br><span class="line"></span><br><span class="line">Blocks：容量</span><br><span class="line"></span><br><span class="line">Id：分区类型ID</span><br><span class="line"></span><br><span class="line"><span class="keyword">System</span>：分区类型</span><br></pre></td></tr></table></figure>



<h6 id="5）案例实操"><a href="#5）案例实操" class="headerlink" title="5）案例实操"></a>5）案例实操</h6><p>​	（1）查看系统分区情况</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 /]<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 21.5 GB,<span class="number"> 21474836480 </span>bytes</span><br><span class="line"></span><br><span class="line">255 heads,<span class="number"> 63 </span>sectors/track,<span class="number"> 2610 </span>cylinders</span><br><span class="line"></span><br><span class="line">Units = cylinders of<span class="number"> 16065 </span>*<span class="number"> 512 </span>=<span class="number"> 8225280 </span>bytes</span><br><span class="line"></span><br><span class="line">Sector size (logical/physical):<span class="number"> 512 </span>bytes /<span class="number"> 512 </span>bytes</span><br><span class="line"></span><br><span class="line">I/O size (minimum/optimal):<span class="number"> 512 </span>bytes /<span class="number"> 512 </span>bytes</span><br><span class="line"></span><br><span class="line">Disk identifier: 0x0005e654</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Device Boot      Start         End      Blocks   Id  System</span><br><span class="line"></span><br><span class="line">/dev/sda1   *          <span class="number"> 1 </span>        <span class="number"> 26 </span>    <span class="number"> 204800 </span> <span class="number"> 83 </span> Linux</span><br><span class="line"></span><br><span class="line">Partition<span class="number"> 1 </span>does not end on cylinder boundary.</span><br><span class="line"></span><br><span class="line">/dev/sda2             <span class="number"> 26 </span>      <span class="number"> 1332 </span>  <span class="number"> 10485760 </span> <span class="number"> 83 </span> Linux</span><br><span class="line"></span><br><span class="line">/dev/sda3           <span class="number"> 1332 </span>      <span class="number"> 1593 </span>   <span class="number"> 2097152 </span> <span class="number"> 82 </span> Linux swap / Solaris</span><br></pre></td></tr></table></figure>

<h5 id="3-mount-umount-挂载-卸载"><a href="#3-mount-umount-挂载-卸载" class="headerlink" title="3 mount&#x2F;umount 挂载&#x2F;卸载"></a><strong>3</strong> <strong>mount&#x2F;umount</strong> 挂载&#x2F;卸载</h5><p>对于Linux用户来讲，不论有几个分区，分别分给哪一个目录使用，它总归就是一个根目录、一个独立且唯一的文件结构。</p>
<p>Linux中每个分区都是用来组成整个文件系统的一部分，它在用一种叫做“挂载”的处理方法，它整个文件系统中包含了一整套的文件和目录，并将一个分区和一个目录联系起来，要载入的那个分区将使它的存储空间在这个目录下获得。</p>
<h6 id="1）挂载前准备（必须要有光盘或者已经连接镜像文件）"><a href="#1）挂载前准备（必须要有光盘或者已经连接镜像文件）" class="headerlink" title="1）挂载前准备（必须要有光盘或者已经连接镜像文件）"></a>1）挂载前准备（必须要有光盘或者已经连接镜像文件）</h6><h6 id="2）基本语法"><a href="#2）基本语法" class="headerlink" title="2）基本语法"></a>2）基本语法</h6><p>mount [-t vfstype] [-o options] device dir	（功能描述：挂载设备）</p>
<p>umount 设备文件名或挂载点			（功能描述：卸载设备）</p>
<h6 id="3）参数说明"><a href="#3）参数说明" class="headerlink" title="3）参数说明"></a>3）参数说明</h6><table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-t vfstype</td>
<td>指定文件系统的类型，通常不必指定。mount 会自动选择正确的类型。常用类型有：光盘或光盘镜像：iso9660DOS fat16文件系统：msdos<a href="http://blog.csdn.net/hancunai0017/article/details/6995284">Windows</a> 9x fat32文件系统：vfatWindows NT ntfs文件系统：ntfsMount Windows文件<a href="http://blog.csdn.net/hancunai0017/article/details/6995284">网络</a>共享：smbfs<a href="http://blog.csdn.net/hancunai0017/article/details/6995284">UNIX</a>(LINUX) 文件网络共享：nfs</td>
</tr>
<tr>
<td>-o options</td>
<td>主要用来描述设备或档案的挂接方式。常用的参数有：loop：用来把一个文件当成硬盘分区挂接上系统ro：采用只读方式挂接设备rw：采用读写方式挂接设备iocharset：指定访问文件系统所用字符集</td>
</tr>
<tr>
<td>device</td>
<td>要挂接(mount)的设备</td>
</tr>
<tr>
<td>dir</td>
<td>设备在系统上的挂接点(mount point)</td>
</tr>
</tbody></table>
<h6 id="4）案例实操"><a href="#4）案例实操" class="headerlink" title="4）案例实操"></a>4）案例实操</h6><p>（1）挂载光盘镜像文件</p>
<p>[root@hadoop101 ~]# mkdir &#x2F;mnt&#x2F;cdrom&#x2F;						建立挂载点</p>
<p>[root@hadoop101 ~]# mount -t iso9660 &#x2F;dev&#x2F;cdrom &#x2F;mnt&#x2F;cdrom&#x2F;	设备&#x2F;dev&#x2F;cdrom挂载到 挂载点 ：  &#x2F;mnt&#x2F;cdrom中</p>
<p>[root@hadoop101 ~]# ll &#x2F;mnt&#x2F;cdrom&#x2F;</p>
<p>（2）卸载光盘镜像文件</p>
<p>[root@hadoop101 ~]# umount &#x2F;mnt&#x2F;cdrom</p>
<h6 id="5）设置开机自动挂载"><a href="#5）设置开机自动挂载" class="headerlink" title="5）设置开机自动挂载"></a>5）设置开机自动挂载</h6><p>vi &#x2F;etc&#x2F;fstab</p>
<h4 id="9-进程线程类"><a href="#9-进程线程类" class="headerlink" title="9 进程线程类"></a><strong>9</strong> <strong>进程线程类</strong></h4><p>进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源。</p>
<h5 id="1-ps-查看-当前系统进程状态"><a href="#1-ps-查看-当前系统进程状态" class="headerlink" title="1 ps  查看 当前系统进程状态"></a><strong>1 ps</strong>  查看 当前系统进程状态</h5><p>ps:process status 进程状态</p>
<h6 id="1）基本语法-10"><a href="#1）基本语法-10" class="headerlink" title="1）基本语法"></a>1）基本语法</h6><p>​	<strong>ps</strong> **-**aux | grep xxx		（功能描述：查看系统中所有进程）</p>
<p>​	<strong>ps -ef</strong> <strong>| grep xxx</strong>		（功能描述：可以查看子父进程之间的关系）</p>
<h6 id="2）选项说明-5"><a href="#2）选项说明-5" class="headerlink" title="2）选项说明"></a>2）选项说明</h6><p>表1-35</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td>选择所有进程</td>
</tr>
<tr>
<td>-u</td>
<td>显示所有用户的所有进程</td>
</tr>
<tr>
<td>-x</td>
<td>显示没有终端的进程</td>
</tr>
</tbody></table>
<h6 id="3）功能说明"><a href="#3）功能说明" class="headerlink" title="3）功能说明"></a>3）功能说明</h6><p>（1）ps -aux显示信息说明</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">USER：该进程是由哪个用户产生的</span><br><span class="line"></span><br><span class="line">​	PID：进程的ID号</span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">%<span class="selector-tag">CPU</span></span>：该进程占用CPU资源的百分比，占用越高，进程越耗费资源；</span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">%<span class="selector-tag">MEM</span></span>：该进程占用物理内存的百分比，占用越高，进程越耗费资源；</span><br><span class="line"></span><br><span class="line">VSZ：该进程占用虚拟内存的大小，单位KB；</span><br><span class="line"></span><br><span class="line">RSS：该进程占用实际物理内存的大小，单位KB；</span><br><span class="line"></span><br><span class="line">TTY：该进程是在哪个终端中运行的。其中tty1-tty7代表本地控制台终端，tty1-tty6是本地的字符界面终端，tty7是图形终端。pts/0-255代表虚拟终端。</span><br><span class="line"></span><br><span class="line">STAT：进程状态。常见的状态有：R：运行、S：睡眠、T：停止状态、s：包含子进程、+：位于后台</span><br><span class="line"></span><br><span class="line">START：该进程的启动时间</span><br><span class="line"></span><br><span class="line">TIME：该进程占用CPU的运算时间，注意不是系统时间</span><br><span class="line"></span><br><span class="line">COMMAND：产生此进程的命令名</span><br></pre></td></tr></table></figure>

<p>（2）ps -ef显示信息说明</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="variable">UID</span>：用户<span class="variable">ID</span> </span><br><span class="line"></span><br><span class="line"><span class="variable">PID</span>：进程<span class="variable">ID</span> </span><br><span class="line"></span><br><span class="line"><span class="variable">PPID</span>：父进程<span class="variable">ID</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">C</span>：<span class="variable">CPU</span>用于计算执行优先级的因子。数值越大，表明进程是<span class="variable">CPU</span>密集型运算，执行优先级会降低；数值越小，表明进程是<span class="built_in">I</span><span class="operator">/</span><span class="built_in">O</span>密集型运算，执行优先级会提高 </span><br><span class="line"></span><br><span class="line"><span class="variable">STIME</span>：进程启动的时间 </span><br><span class="line"></span><br><span class="line"><span class="variable">TTY</span>：完整的终端名称 </span><br><span class="line"></span><br><span class="line"><span class="variable">TIME</span>：<span class="variable">CPU</span>时间 </span><br><span class="line"></span><br><span class="line"><span class="variable">CMD</span>：启动进程所用的命令和参数</span><br></pre></td></tr></table></figure>

<h6 id="4）经验技巧"><a href="#4）经验技巧" class="headerlink" title="4）经验技巧"></a>4）经验技巧</h6><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">如果想查看进程的<span class="strong">**CPU**</span><span class="strong">**占用率和内存占用率**</span>，可以使用aux;</span><br><span class="line"></span><br><span class="line">如果想查看<span class="strong">**进程的父进程**</span><span class="strong">**ID**</span>可以使用ef;</span><br></pre></td></tr></table></figure>

<h6 id="5）案例实操-1"><a href="#5）案例实操-1" class="headerlink" title="5）案例实操"></a>5）案例实操</h6><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@hadoop101</span> datas]<span class="meta"># ps aux</span></span><br></pre></td></tr></table></figure>

<p>图  查看进程的CPU占用率和内存占用率</p>
<p><img src="https://blog-resources.this0.com/image/202403241458052.png?x-oss-process=style/this0-blog"></p>
<p>[root@hadoop101 datas]# ps -ef</p>
<p><img src="https://blog-resources.this0.com/image/202403241458159.png?x-oss-process=style/this0-blog"></p>
<h5 id="2-kill-终止进程"><a href="#2-kill-终止进程" class="headerlink" title="2 kill 终止进程"></a>2 kill 终止进程</h5><h6 id="1）基本语法-11"><a href="#1）基本语法-11" class="headerlink" title="1）基本语法"></a>1）基本语法</h6><p>​	kill  [选项] 进程号		（功能描述：通过进程号杀死进程）</p>
<p>​	killall 进程名称			（功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）	</p>
<h6 id="2）选项说明-6"><a href="#2）选项说明-6" class="headerlink" title="2）选项说明"></a>2）选项说明</h6><p>表1-36</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-9</td>
<td>表示强迫进程立即停止</td>
</tr>
</tbody></table>
<h6 id="3）案例实操-4"><a href="#3）案例实操-4" class="headerlink" title="3）案例实操"></a>3）案例实操</h6><h6 id="（1）杀死浏览器进程"><a href="#（1）杀死浏览器进程" class="headerlink" title="（1）杀死浏览器进程"></a>（1）杀死浏览器进程</h6><p>[root@hadoop101 桌面]# kill -9 5102</p>
<h6 id="（2）通过进程名称杀死进程"><a href="#（2）通过进程名称杀死进程" class="headerlink" title="（2）通过进程名称杀死进程"></a>（2）通过进程名称杀死进程</h6><p>[root@hadoop101 桌面]# killall firefox</p>
<p>&#x2F;&#x2F;TODO ,kill -9 与killall</p>
<h3 id="10-crond-系统定时任务"><a href="#10-crond-系统定时任务" class="headerlink" title="10 crond 系统定时任务"></a><strong>10 crond</strong> <strong>系统定时任务</strong></h3><p>&#x2F;&#x2F;TODO，springboot中也有定时任务</p>
<h4 id="10-1-crond-服务管理"><a href="#10-1-crond-服务管理" class="headerlink" title="10.1 crond 服务管理"></a><strong>10.1 crond</strong> <strong>服务管理</strong></h4><h5 id="1）重新启动crond服务"><a href="#1）重新启动crond服务" class="headerlink" title="1）重新启动crond服务"></a>1）重新启动crond服务</h5><p>[root@hadoop101 ~]# systemctl restart crond</p>
<h4 id="10-2-crontab-定时任务设置"><a href="#10-2-crontab-定时任务设置" class="headerlink" title="10.2 crontab 定时任务设置"></a><strong>10.2 crontab</strong> <strong>定时任务设置</strong></h4><h5 id="1）基本语法-12"><a href="#1）基本语法-12" class="headerlink" title="1）基本语法"></a>1）基本语法</h5><p>crontab [选项]</p>
<h5 id="2）选项说明-7"><a href="#2）选项说明-7" class="headerlink" title="2）选项说明"></a>2）选项说明</h5><p>表1-46</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-e</td>
<td>编辑crontab定时任务</td>
</tr>
<tr>
<td>-l</td>
<td>查询crontab任务</td>
</tr>
<tr>
<td>-r</td>
<td>删除当前用户所有的crontab任务</td>
</tr>
</tbody></table>
<h5 id="3）参数说明-1"><a href="#3）参数说明-1" class="headerlink" title="3）参数说明"></a>3）参数说明</h5><p>[root@hadoop101 ~]# crontab -e </p>
<h6 id="（1）进入crontab编辑界面。会打开vim编辑你的工作。"><a href="#（1）进入crontab编辑界面。会打开vim编辑你的工作。" class="headerlink" title="（1）进入crontab编辑界面。会打开vim编辑你的工作。"></a>（1）进入crontab编辑界面。会打开vim编辑你的工作。</h6><p>* * * * * 执行的任务</p>
<p>表1-47</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>含义</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>第一个“*”</td>
<td>一小时当中的第几分钟</td>
<td>0-59</td>
</tr>
<tr>
<td>第二个“*”</td>
<td>一天当中的第几小时</td>
<td>0-23</td>
</tr>
<tr>
<td>第三个“*”</td>
<td>一个月当中的第几天</td>
<td>1-31</td>
</tr>
<tr>
<td>第四个“*”</td>
<td>一年当中的第几月</td>
<td>1-12</td>
</tr>
<tr>
<td>第 五个*”</td>
<td>一周当中的星期几</td>
<td>0-7（0和7都代表星期日）</td>
</tr>
</tbody></table>
<h6 id="（2）特殊符号"><a href="#（2）特殊符号" class="headerlink" title="（2）特殊符号"></a>（2）特殊符号</h6><p>表1-48</p>
<table>
<thead>
<tr>
<th>特殊符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>代表任何时间。比如第一个“*”就代表一小时中每分钟都执行一次的意思。</td>
</tr>
<tr>
<td>，</td>
<td>代表不连续的时间。比如“0 8,12,16 * * * 命令”，就代表在每天的8点0分，12点0分，16点0分都执行一次命令</td>
</tr>
<tr>
<td>-</td>
<td>代表连续的时间范围。比如“0 5  *  *  1-6命令”，代表在周一到周六的凌晨5点0分执行命令</td>
</tr>
<tr>
<td>*&#x2F;n</td>
<td>代表每隔多久执行一次。比如“*&#x2F;10  *  *  *  *  命令”，代表每隔10分钟就执行一遍命令</td>
</tr>
</tbody></table>
<h6 id="（3）特定时间执行命令"><a href="#（3）特定时间执行命令" class="headerlink" title="（3）特定时间执行命令"></a>（3）特定时间执行命令</h6><p>表1-49</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>45 22 * * * 命令</td>
<td>在22点45分执行命令</td>
</tr>
<tr>
<td>0 17 * * 1 命令</td>
<td>每周1 的17点0分执行命令</td>
</tr>
<tr>
<td>0 5 1,15 * * 命令</td>
<td>每月1号和15号的凌晨5点0分执行命令</td>
</tr>
<tr>
<td>40 4 * * 1-5 命令</td>
<td>每周一到周五的凌晨4点40分执行命令</td>
</tr>
<tr>
<td>*&#x2F;10 4 * * * 命令</td>
<td>每天的凌晨4点，每隔10分钟执行一次命令</td>
</tr>
<tr>
<td>0 0 1,15 * 1 命令</td>
<td>每月1号和15号，每周1的0点0分都会执行命令。注意：星期几和几号最好不要同时出现，因为他们定义的都是天。非常容易让管理员混乱。</td>
</tr>
</tbody></table>
<h5 id="4）案例实操-1"><a href="#4）案例实操-1" class="headerlink" title="4）案例实操"></a>4）案例实操</h5><p>​	（1）每隔1分钟，向&#x2F;root&#x2F;bailongma.txt文件中添加一个11的数字</p>
<p>*&#x2F;1 * * * * &#x2F;bin&#x2F;echo ”11” &gt;&gt; &#x2F;root&#x2F;bailongma.txt</p>
<h2 id="第6章-软件包管理"><a href="#第6章-软件包管理" class="headerlink" title="第6章 软件包管理"></a>第6章 软件包管理</h2><p>&#x2F;&#x2F;TODO，和pacman对比</p>
<h3 id="6-1-RPM"><a href="#6-1-RPM" class="headerlink" title="6.1 RPM"></a>6.1 RPM</h3><h4 id="6-1-1-RPM概述"><a href="#6-1-1-RPM概述" class="headerlink" title="6.1.1 RPM概述"></a>6.1.1 RPM概述</h4><p>RPM（RedHat Package Manager），RedHat软件包管理工具，类似windows里面的setup.exe</p>
<h4 id="6-1-2-RPM查询命令（rpm-qa）"><a href="#6-1-2-RPM查询命令（rpm-qa）" class="headerlink" title="6.1.2 RPM查询命令（rpm -qa）"></a>6.1.2 RPM查询命令（rpm -qa）</h4><h5 id="1）基本语法-13"><a href="#1）基本语法-13" class="headerlink" title="1）基本语法"></a>1）基本语法</h5><p>rpm -qa				（功能描述：查询所安装的所有rpm软件包）</p>
<h5 id="2）经验技巧"><a href="#2）经验技巧" class="headerlink" title="2）经验技巧"></a>2）经验技巧</h5><p>由于软件包比较多，一般都会采取过滤。<strong>rpm -qa | grep rpm</strong>软件包</p>
<h5 id="3）案例实操-5"><a href="#3）案例实操-5" class="headerlink" title="3）案例实操"></a>3）案例实操</h5><p>查询firefox软件安装情况</p>
<p>[root@hadoop101 Packages]# rpm -qa |grep firefox </p>
<p>firefox-45.0.1-1.el6.centos.x86_64</p>
<h4 id="6-1-3-RPM卸载命令（rpm-e）"><a href="#6-1-3-RPM卸载命令（rpm-e）" class="headerlink" title="6.1.3 RPM卸载命令（rpm -e）"></a>6.1.3 RPM卸载命令（rpm -e）</h4><h5 id="1）基本语法-14"><a href="#1）基本语法-14" class="headerlink" title="1）基本语法"></a>1）基本语法</h5><h6 id="（1）rpm-e-RPM软件包"><a href="#（1）rpm-e-RPM软件包" class="headerlink" title="（1）rpm -e RPM软件包"></a>（1）rpm -e RPM软件包</h6><h6 id="（2）-rpm-e-–nodeps-软件包"><a href="#（2）-rpm-e-–nodeps-软件包" class="headerlink" title="（2） rpm -e –nodeps 软件包"></a>（2） <strong>rpm -e –nodeps</strong> <strong>软件包</strong></h6><h5 id="2）选项说明-8"><a href="#2）选项说明-8" class="headerlink" title="2）选项说明"></a>2）选项说明</h5><p>表1-50</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-e</td>
<td>卸载软件包</td>
</tr>
<tr>
<td>–nodeps</td>
<td>卸载软件时，不检查依赖。这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了。</td>
</tr>
</tbody></table>
<h5 id="3）案例实操-6"><a href="#3）案例实操-6" class="headerlink" title="3）案例实操"></a>3）案例实操</h5><p>​	卸载firefox软件</p>
<p>rpm -e firefox</p>
<h4 id="6-1-4-RPM安装命令（rpm-ivh）"><a href="#6-1-4-RPM安装命令（rpm-ivh）" class="headerlink" title="6.1.4 RPM安装命令（rpm -ivh）"></a>6.1.4 RPM安装命令（rpm -ivh）</h4><h5 id="1）基本语法-15"><a href="#1）基本语法-15" class="headerlink" title="1）基本语法"></a>1）基本语法</h5><p>​	<strong>rpm -ivh RPM****包全名</strong></p>
<h5 id="2）选项说明-9"><a href="#2）选项说明-9" class="headerlink" title="2）选项说明"></a>2）选项说明</h5><p>表1-51</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-i</td>
<td>-i&#x3D;install，安装</td>
</tr>
<tr>
<td>-v</td>
<td>-v&#x3D;verbose，显示详细信息</td>
</tr>
<tr>
<td>-h</td>
<td>-h&#x3D;hash，进度条</td>
</tr>
<tr>
<td>–nodeps</td>
<td>–nodeps，不检测依赖进度</td>
</tr>
</tbody></table>
<h5 id="3）案例实操-7"><a href="#3）案例实操-7" class="headerlink" title="3）案例实操"></a>3）案例实操</h5><p>​	安装firefox软件</p>
<p>[root@hadoop101 Packages]# pwd</p>
<p>&#x2F;media&#x2F;CentOS_6.8_Final&#x2F;Packages</p>
<p>[root@hadoop101 Packages]# rpm -ivh firefox-45.0.1-1.el6.centos.x86_64.rpm </p>
<h3 id="6-2-YUM仓库配置"><a href="#6-2-YUM仓库配置" class="headerlink" title="6.2 YUM仓库配置"></a>6.2 YUM仓库配置</h3><h4 id="6-2-1-YUM概述"><a href="#6-2-1-YUM概述" class="headerlink" title="6.2.1 YUM概述"></a>6.2.1 YUM概述</h4><p>YUM（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。 </p>
<p>图 YUM概述</p>
<h4 id="6-2-2-YUM的常用命令"><a href="#6-2-2-YUM的常用命令" class="headerlink" title="6.2.2 YUM的常用命令"></a>6.2.2 YUM的常用命令</h4><h5 id="1）基本语法-16"><a href="#1）基本语法-16" class="headerlink" title="1）基本语法"></a>1）基本语法</h5><p>​	yum [选项] [参数]</p>
<h5 id="2）选项说明-10"><a href="#2）选项说明-10" class="headerlink" title="2）选项说明"></a>2）选项说明</h5><p>表1-52</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-y</td>
<td>对所有提问都回答“yes”</td>
</tr>
</tbody></table>
<h5 id="3）参数说明-2"><a href="#3）参数说明-2" class="headerlink" title="3）参数说明"></a>3）参数说明</h5><p>表1-53</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>install</td>
<td>安装rpm软件包</td>
</tr>
<tr>
<td>update</td>
<td>更新rpm软件包</td>
</tr>
<tr>
<td>check-update</td>
<td>检查是否有可用的更新rpm软件包</td>
</tr>
<tr>
<td>remove</td>
<td>删除指定的rpm软件包</td>
</tr>
<tr>
<td>list</td>
<td>显示软件包信息</td>
</tr>
<tr>
<td>clean</td>
<td>清理yum过期的缓存</td>
</tr>
<tr>
<td>deplist</td>
<td>显示yum软件包的所有依赖关系</td>
</tr>
</tbody></table>
<h4 id="6-2-3-案例实操"><a href="#6-2-3-案例实操" class="headerlink" title="6.2.3 案例实操"></a>6.2.3 案例实操</h4><p>采用yum方式安装firefox</p>
<p>yum -y install firefox.x86_64</p>
<h2 id="第7章-软件安装"><a href="#第7章-软件安装" class="headerlink" title="第7章 软件安装"></a><strong>第7章 软件安装</strong></h2><p>&#x2F;&#x2F;TODO，单独提出来</p>
<h3 id="7-2-安装Tomcat"><a href="#7-2-安装Tomcat" class="headerlink" title="7.2 安装Tomcat"></a><strong>7.2 安装Tomcat</strong></h3><h4 id="7-2-1将tomcat的压缩包上传到-opt目录下"><a href="#7-2-1将tomcat的压缩包上传到-opt目录下" class="headerlink" title="7.2.1将tomcat的压缩包上传到&#x2F;opt目录下"></a>7.2.1将tomcat的压缩包上传到&#x2F;opt目录下</h4><h4 id="7-2-2解压缩tomcat的压缩包"><a href="#7-2-2解压缩tomcat的压缩包" class="headerlink" title="7.2.2解压缩tomcat的压缩包"></a>7.2.2解压缩tomcat的压缩包</h4><h4 id="7-2-3进入tomcat的bin目录执行-startup-sh启动tomcat服务器"><a href="#7-2-3进入tomcat的bin目录执行-startup-sh启动tomcat服务器" class="headerlink" title="7.2.3进入tomcat的bin目录执行.&#x2F;startup.sh启动tomcat服务器"></a>7.2.3进入tomcat的bin目录执行.&#x2F;startup.sh启动tomcat服务器</h4><h4 id="7-2-4也可以配置tomcat的环境变量，这样就可以在任意目录下执行startup-sh启动tomcat了"><a href="#7-2-4也可以配置tomcat的环境变量，这样就可以在任意目录下执行startup-sh启动tomcat了" class="headerlink" title="7.2.4也可以配置tomcat的环境变量，这样就可以在任意目录下执行startup.sh启动tomcat了"></a>7.2.4也可以配置tomcat的环境变量，这样就可以在任意目录下执行startup.sh启动tomcat了</h4><h4 id="7-2-5关闭防火墙或开放端口："><a href="#7-2-5关闭防火墙或开放端口：" class="headerlink" title="7.2.5关闭防火墙或开放端口："></a>7.2.5关闭防火墙或开放端口：</h4><h3 id="7-3-安装MySQL"><a href="#7-3-安装MySQL" class="headerlink" title="7.3 安装MySQL"></a><strong>7.3 安装MySQL</strong></h3><h4 id="7-3-1卸载自带的Mysql-libs（如果之前安装过mysql，要全都卸载掉）"><a href="#7-3-1卸载自带的Mysql-libs（如果之前安装过mysql，要全都卸载掉）" class="headerlink" title="7.3.1卸载自带的Mysql-libs（如果之前安装过mysql，要全都卸载掉）"></a>7.3.1卸载自带的Mysql-libs（如果之前安装过mysql，要全都卸载掉）</h4><h5 id="a-rpm-qa-grep-mariadb"><a href="#a-rpm-qa-grep-mariadb" class="headerlink" title="a) rpm -qa | grep mariadb"></a>a) rpm -qa | grep mariadb</h5><h5 id="b-rpm-e-–nodeps-mariadb-libs"><a href="#b-rpm-e-–nodeps-mariadb-libs" class="headerlink" title="b) rpm -e –nodeps mariadb-libs"></a>b) rpm -e –nodeps mariadb-libs</h5><h4 id="7-3-2在-opt目录下创建MySQL目录"><a href="#7-3-2在-opt目录下创建MySQL目录" class="headerlink" title="7.3.2在&#x2F;opt目录下创建MySQL目录"></a>7.3.2在&#x2F;opt目录下创建MySQL目录</h4><h4 id="7-3-3上传MySQL的rpm安装包到-opt-MySQL目录下"><a href="#7-3-3上传MySQL的rpm安装包到-opt-MySQL目录下" class="headerlink" title="7.3.3上传MySQL的rpm安装包到&#x2F;opt&#x2F;MySQL目录下"></a>7.3.3上传MySQL的rpm安装包到&#x2F;opt&#x2F;MySQL目录下</h4><h4 id="7-3-4按照标号依次安装rpm软件包"><a href="#7-3-4按照标号依次安装rpm软件包" class="headerlink" title="7.3.4按照标号依次安装rpm软件包"></a>7.3.4按照标号依次安装rpm软件包</h4><p>rpm -ivh mysql-community-common-5.7.28-1.el7.x86_64.rpm</p>
<p>rpm -ivh mysql-community-libs-5.7.28-1.el7.x86_64.rpm</p>
<p>rpm -ivh mysql-community-libs-compat-5.7.29-1.el7.x86_64.rpm</p>
<p>rpm -ivh mysql-community-client-5.7.28-1.el7.x86_64.rpm</p>
<p>rpm -ivh mysql-community-server-5.7.28-1.el7.x86_64.rpm</p>
<h4 id="7-3-5安装mysql-server时有可能出现以下异常"><a href="#7-3-5安装mysql-server时有可能出现以下异常" class="headerlink" title="7.3.5安装mysql-server时有可能出现以下异常:"></a>7.3.5安装mysql-server时有可能出现以下异常:</h4><h5 id="a-错误：依赖检测失败："><a href="#a-错误：依赖检测失败：" class="headerlink" title="a) 错误：依赖检测失败："></a>a) 错误：依赖检测失败：</h5><p>libaio.so.1()(64bit) 被 mysql-community-server-5.7.29-1.el7.x86_64 需要</p>
<h5 id="b-通过yum安装缺少的依赖：yum-install-y-libaio"><a href="#b-通过yum安装缺少的依赖：yum-install-y-libaio" class="headerlink" title="b) 通过yum安装缺少的依赖：yum install -y libaio"></a>b) 通过yum安装缺少的依赖：yum install -y libaio</h5><h4 id="7-3-6初始化MySQL：mysqld-–initialize-–user-mysql"><a href="#7-3-6初始化MySQL：mysqld-–initialize-–user-mysql" class="headerlink" title="7.3.6初始化MySQL：mysqld –initialize –user&#x3D;mysql"></a>7.3.6初始化MySQL：mysqld –initialize –user&#x3D;mysql</h4><h4 id="7-3-7查看MySQL的临时密码：cat-var-log-mysqld-log"><a href="#7-3-7查看MySQL的临时密码：cat-var-log-mysqld-log" class="headerlink" title="7.3.7查看MySQL的临时密码：cat &#x2F;var&#x2F;log&#x2F;mysqld.log"></a>7.3.7查看MySQL的临时密码：cat &#x2F;var&#x2F;log&#x2F;mysqld.log</h4><h4 id="7-3-8启动MySQL服务：systemctl-start-mysqld"><a href="#7-3-8启动MySQL服务：systemctl-start-mysqld" class="headerlink" title="7.3.8启动MySQL服务：systemctl start mysqld"></a>7.3.8启动MySQL服务：systemctl start mysqld</h4><h4 id="7-3-9连接MySQL：mysql-uroot-p’临时密码’"><a href="#7-3-9连接MySQL：mysql-uroot-p’临时密码’" class="headerlink" title="7.3.9连接MySQL：mysql -uroot -p’临时密码’"></a>7.3.9连接MySQL：mysql -uroot -p’临时密码’</h4><h4 id="7-3-10使用临时密码连接MySQL之后修改密码："><a href="#7-3-10使用临时密码连接MySQL之后修改密码：" class="headerlink" title="7.3.10使用临时密码连接MySQL之后修改密码："></a>7.3.10使用临时密码连接MySQL之后修改密码：</h4><p>set password&#x3D;password(‘你的密码’);</p>
<h4 id="7-3-11编辑-etc-my-cnf配置文件设置MySQL客户端和服务端的字符集为utf8"><a href="#7-3-11编辑-etc-my-cnf配置文件设置MySQL客户端和服务端的字符集为utf8" class="headerlink" title="7.3.11编辑&#x2F;etc&#x2F;my.cnf配置文件设置MySQL客户端和服务端的字符集为utf8"></a>7.3.11编辑&#x2F;etc&#x2F;my.cnf配置文件设置MySQL客户端和服务端的字符集为utf8</h4><p> [mysqld]</p>
<p><strong>character-set-server&#x3D;utf8</strong></p>
<ol start="12">
<li><h4 id="重启MySQL的服务"><a href="#重启MySQL的服务" class="headerlink" title="重启MySQL的服务"></a>重启MySQL的服务</h4></li>
</ol>
<p>systemctl restart mysqld</p>
<ol start="13">
<li><h4 id="设置root远程权限"><a href="#设置root远程权限" class="headerlink" title="设置root远程权限"></a>设置root远程权限</h4></li>
</ol>
<p>利用root账号本地登录，修改mysql数据库,user表的root用户的远程访问权限</p>
<p>update user set host&#x3D;’%’ where user&#x3D;’root’;</p>
<p>flush privileges;</p>
]]></content>
      <categories>
        <category>工具文档</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>工具文档</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h2 id="linux服务器安装mysql——自定义安装路径"><a href="#linux服务器安装mysql——自定义安装路径" class="headerlink" title="linux服务器安装mysql——自定义安装路径"></a>linux服务器安装mysql——自定义安装路径</h2><h3 id="1-自定义安装路径"><a href="#1-自定义安装路径" class="headerlink" title="1 自定义安装路径"></a>1 自定义安装路径</h3><p>博主安装在服务器的 &#x2F;usr&#x2F;local&#x2F;this0&#x2F;mysql 路径下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/this0/mysql</span><br><span class="line"><span class="built_in">cd</span> /usr/local/this0/mysql</span><br></pre></td></tr></table></figure>

<h3 id="2-上传安装包"><a href="#2-上传安装包" class="headerlink" title="2 上传安装包"></a>2 上传安装包</h3><p>上传安装包到安装路径，站长用的xftp上传</p>
<h3 id="3-解压安装包"><a href="#3-解压安装包" class="headerlink" title="3 解压安装包"></a>3 解压安装包</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装包名可以用tap键提示补全</span></span><br><span class="line"><span class="attribute">tar</span> -zxvf mysql-<span class="number">8</span>.<span class="number">0</span>.<span class="number">34</span>-linux-glibc2.<span class="number">28</span>-x86_64.tar.gz </span><br><span class="line"><span class="comment">#改个短点的名</span></span><br><span class="line"><span class="attribute">mv</span> mysql-<span class="number">8</span>.<span class="number">0</span>.<span class="number">34</span>-linux-glibc2.<span class="number">28</span>-x86_64 mysql-<span class="number">8</span>.<span class="number">0</span>.<span class="number">34</span></span><br></pre></td></tr></table></figure>

<h3 id="4-添加mysql用户组和用户"><a href="#4-添加mysql用户组和用户" class="headerlink" title="4 添加mysql用户组和用户"></a>4 添加mysql用户组和用户</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">groupadd mysql</span></span><br><span class="line"><span class="attribute">useradd -r -g mysql mysql</span></span><br></pre></td></tr></table></figure>

<h3 id="5-自定义数据存放目录"><a href="#5-自定义数据存放目录" class="headerlink" title="5 自定义数据存放目录"></a>5 自定义数据存放目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/this0/mysql/data</span><br></pre></td></tr></table></figure>

<h3 id="6-授权"><a href="#6-授权" class="headerlink" title="6 授权"></a>6 授权</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#授予刚创建的用户，安装路径权限</span></span><br><span class="line"><span class="built_in">chown</span> -R mysql.mysql /usr/local/this0/mysql</span><br></pre></td></tr></table></figure>

<h3 id="7-配置文件"><a href="#7-配置文件" class="headerlink" title="7 配置文件"></a>7 配置文件</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line">vim /etc/<span class="keyword">my</span>.cnf</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">## 基础位置</span></span><br><span class="line"><span class="attr">basedir</span> = /usr/local/mysql/mysql-<span class="number">8.0</span>.<span class="number">34</span></span><br><span class="line"><span class="comment">## 数据存放位置</span></span><br><span class="line"><span class="attr">datadir</span> = /usr/local/mysql/data</span><br><span class="line"><span class="comment">## 端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">10241</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">socket</span> = /tmp/mysql.sock</span><br><span class="line"><span class="comment">## 字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line">  </span><br><span class="line"><span class="attr">log-error</span> = /usr/local/mysql/data/mysqld.log</span><br><span class="line"><span class="attr">pid-file</span> = /usr/local/mysql/data/mysqld.pid</span><br></pre></td></tr></table></figure>

<h3 id="8-初始化mysql"><a href="#8-初始化mysql" class="headerlink" title="8 初始化mysql"></a>8 初始化mysql</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/this0/my</span>sql<span class="regexp">/mysql-8.0.34/</span>bin<span class="regexp">/mysqld --initialize --user=mysql --basedir=/u</span>sr<span class="regexp">/local/</span>this0<span class="regexp">/mysql/my</span>sql-<span class="number">8.0</span>.<span class="number">34</span> --datadir=<span class="regexp">/usr/</span>local<span class="regexp">/this0/my</span>sql<span class="regexp">/data/</span></span><br></pre></td></tr></table></figure>

<h3 id="9-查看mysql密码"><a href="#9-查看mysql密码" class="headerlink" title="9 查看mysql密码"></a>9 查看mysql密码</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/usr/</span>local<span class="regexp">/this0/my</span>sql<span class="regexp">/data/my</span>sqld.log</span><br></pre></td></tr></table></figure>

<h3 id="10-启动mysql"><a href="#10-启动mysql" class="headerlink" title="10 启动mysql"></a>10 启动mysql</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/this0/my</span>sql<span class="regexp">/mysql-8.0.34/</span>support-files/mysql.server start</span><br></pre></td></tr></table></figure>

<h3 id="11-将mysql的bin目录添加到系统变量"><a href="#11-将mysql的bin目录添加到系统变量" class="headerlink" title="11 将mysql的bin目录添加到系统变量"></a>11 将mysql的bin目录添加到系统变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:/usr/local/this0/mysql/mysql-8.0.34/bin&quot;&#x27;</span> &gt;&gt;  /etc/profile </span><br></pre></td></tr></table></figure>

<h3 id="12-使配置文件立即生效"><a href="#12-使配置文件立即生效" class="headerlink" title="12 使配置文件立即生效"></a>12 使配置文件立即生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#或者重启一下也能生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="13-连接测试"><a href="#13-连接测试" class="headerlink" title="13 连接测试"></a>13 连接测试</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql</span> -u root -p</span><br><span class="line"><span class="comment">#输入密码时没有提示</span></span><br></pre></td></tr></table></figure>

<h3 id="14-设置mysql开机自启"><a href="#14-设置mysql开机自启" class="headerlink" title="14.设置mysql开机自启"></a>14.设置mysql开机自启</h3><h4 id="复制服务到自启动路径下"><a href="#复制服务到自启动路径下" class="headerlink" title="复制服务到自启动路径下"></a>复制服务到自启动路径下</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>mysql<span class="operator">-</span><span class="number">8.0</span>.<span class="number">34</span><span class="regexp">/support-files/</span>mysql.server <span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>mysqld</span><br></pre></td></tr></table></figure>

<h4 id="显示服务列表"><a href="#显示服务列表" class="headerlink" title="显示服务列表"></a>显示服务列表</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">chkconfig <span class="comment">--list</span></span><br></pre></td></tr></table></figure>

<h4 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">chkconfig --<span class="built_in">add</span> mysqld</span><br></pre></td></tr></table></figure>

<h4 id="重新查看显示服务列表"><a href="#重新查看显示服务列表" class="headerlink" title="重新查看显示服务列表"></a>重新查看显示服务列表</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">chkconfig <span class="comment">--list</span></span><br></pre></td></tr></table></figure>

<h4 id="如果是关闭的话，使用下面命令将其开启"><a href="#如果是关闭的话，使用下面命令将其开启" class="headerlink" title="如果是关闭的话，使用下面命令将其开启"></a>如果是关闭的话，使用下面命令将其开启</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chkconfig</span> --level <span class="number">345</span> mysqld <span class="literal">on</span></span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202405061643510.png?x-oss-process=style/this0-blog" alt="img"></p>
<p><img src="https://blog-resources.this0.com/image/202405061643466.png?x-oss-process=style/this0-blog" alt="img"></p>
<h3 id="15-修改密码"><a href="#15-修改密码" class="headerlink" title="15 修改密码"></a>15 修改密码</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mysql -u root -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure>

<ol>
<li>修改root密码</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;your_strong_password&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建新用户：</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;abcd&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>授予用户全部权限：</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;abcd&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>刷新权限以应用更改：</li>
</ol>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h3 id="16-安全设置"><a href="#16-安全设置" class="headerlink" title="16.安全设置"></a>16.安全设置</h3><ol>
<li><p>删除测试数据库：MySQL安装后，可能会自带一些测试数据库，如<code>test</code>，<code>mysql</code>等。这些数据库对于生产环境没有必要，可以将其删除。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> test;</span><br></pre></td></tr></table></figure>
</li>
<li><p>移除匿名用户：MySQL默认创建了一个允许匿名用户访问的账户，为了安全起见，应该将其删除。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> mysql.<span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">User</span>=<span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h3 id="（1）远程连接问题"><a href="#（1）远程连接问题" class="headerlink" title="（1）远程连接问题"></a>（1）远程连接问题</h3><p>在用SQLyog或Navicat中配置远程连接MySQL数据库时遇到如下报错信息，这是由于MySQL默认不支持远</p>
<p>程连接。</p>
<p><img src="https://blog-resources.this0.com/image/image-20220625191443737.png" alt="image-20220625191443737"></p>
<p>查看系统数据库MySQL中的user表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span> Host,<span class="keyword">User</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/image-20220625231126326.png" alt="image-20220625231126326"></p>
<p>可以看到root用户的当前主机配置信息为localhost。<strong>修改Host为通配符%</strong></p>
<p>Host列指定了允许用户登录所使用的IP：</p>
<ul>
<li><p><code>Host=localhost</code>，表示只能通过本机客户端去访问。</p>
</li>
<li><p><code>Host=%</code> ，表示所有IP都有连接权限。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> Host <span class="operator">=</span> <span class="string">&#x27;%&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">User</span> <span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES; <span class="comment">-- Host修改完成后记得执行FLUSH PRIVILEGES使配置立即生效：</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，可以设置为生产环境IP。</p>
</blockquote>
<h3 id="（2）使用SQLyog连接"><a href="#（2）使用SQLyog连接" class="headerlink" title="（2）使用SQLyog连接"></a>（2）使用SQLyog连接</h3><p><img src="https://blog-resources.this0.com/image/image-20230613221609053.png" alt="image-20230613221609053"></p>
<p>出现这个原因是MySQL 8 之前的版本中加密规则是mysql_native_password，而在MySQL 8之后，加密规则是caching_sha2_password。</p>
<p>解决方案有两种，一种是升级SQLyog和Navicat（因此，新版SQLyog不会出现此问题），另一种是把MySQL用户登录密码加密规则还原成mysql_native_password。</p>
<p><strong>解决方法：</strong>Linux下 mysql -uroot -p 登录你的 MySQL 数据库，然后 执行这条SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>然后再重新配置SQLyog的连接，重新填写密码，则可连接成功了。 </p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h3 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h3><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_HOME=/home/yupengtao/SDE/apache-tomcat-8.5.69                    <span class="comment">#tomcat环境变量</span></span><br></pre></td></tr></table></figure>

<p>修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;JAVA_PATH&#125;</span>:<span class="variable">$&#123;CATALINA_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">startup.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>nginx基本使用</title>
    <url>/articles/5f70ef58.html</url>
    <content><![CDATA[<h3 id="一、nginx安装和管理"><a href="#一、nginx安装和管理" class="headerlink" title="一、nginx安装和管理"></a>一、nginx安装和管理</h3><h4 id="1-安装nginx"><a href="#1-安装nginx" class="headerlink" title="1. 安装nginx"></a>1. 安装nginx</h4><p>直接用包管理工具安装</p>
<p>我是archlinux，就</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yay -S nginx</span></span><br></pre></td></tr></table></figure>
<p>一般都是centos</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> nginx </span><br></pre></td></tr></table></figure>

<h4 id="2-启动-开机自启"><a href="#2-启动-开机自启" class="headerlink" title="2. 启动 &amp; 开机自启"></a>2. 启动 &amp; 开机自启</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">enable</span> nginx <span class="comment">--now</span></span><br></pre></td></tr></table></figure>

<h4 id="3-查看nginx启动状态"><a href="#3-查看nginx启动状态" class="headerlink" title="3. 查看nginx启动状态"></a>3. 查看nginx启动状态</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl status nginx</span></span><br></pre></td></tr></table></figure>

<h3 id="二、nginx配置和最佳实践"><a href="#二、nginx配置和最佳实践" class="headerlink" title="二、nginx配置和最佳实践"></a>二、nginx配置和最佳实践</h3><blockquote>
<p>注意事项</p>
</blockquote>
<p>如果你的服务器开启了防火墙，则需要同时打开 80（HTTP）和 443（HTTPS）端口</p>
<p>通过下面的命令来打开这两个端口：</p>
<p>&#x2F;&#x2F;TODO,service&#x3D;http</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent <span class="attribute">--zone</span>=public <span class="attribute">--add-service</span>=http</span><br><span class="line">sudo firewall-cmd --permanent <span class="attribute">--zone</span>=public <span class="attribute">--add-service</span>=https</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<ul>
<li>通过以上方式安装的 Nginx，所有相关的配置文件都在 <code>/etc/nginx/</code> 目录中。</li>
<li>Nginx 的主配置文件是 <code>/etc/nginx/nginx.conf</code>。</li>
<li>为了使 Nginx 配置更易于维护，建议为每个服务（域名）创建一个单独的配置文件。</li>
<li>每一个独立的 Nginx 服务配置文件都必须以 <code>.conf </code>结尾，并存储在 <code>/etc/nginx/conf.d</code> 目录中。您可以根据需求，创建任意多个独立的配置文件。</li>
<li>独立的配置文件，建议遵循以下命名约定，比如你的域名是 <code>this0.com</code>，那么你的配置文件的应该</li>
<li>是这样的 <code>/etc/nginx/conf.d/this0.com.conf</code>，如果你在一个服务器中部署多个服务，当然你也可以在文件名中加上 Nginx 转发的端口号，比如 <code>this0.com.3000.conf</code>，这样做看起来会更加友好。</li>
<li>如果你的配置中有很多重复的代码，那么建议你创建一个 <code>/etc/nginx/snippets</code> 文件夹，在这里面存放所有会被复用的代码块，然后在各个需要用到的 Nginx 的配置文件中引用进去，这样可以更方便管理和修改。</li>
<li>Nginx 日志文件（<code>access.log</code> 和 <code>error.log</code> ）位于 <code>/var/log/nginx/</code> 目录中。建议为每个独立的服务配置不同的访问权限和错误日志文件，这样查找错误时，会更加方便快捷。</li>
<li>你可以将要部署的代码文件，存储在任何你想的位置，但是一般推荐存放在下列位置中的其中一个：<ul>
<li><code>/home/&lt;user_name&gt;/&lt;site_name&gt;</code></li>
<li><code>/var/www/&lt;site_name&gt;</code></li>
<li><code>/var/www/html/&lt;site_name&gt;</code></li>
<li><code>/opt/&lt;site_name&gt;</code></li>
<li><code>/usr/share/nginx/html</code></li>
</ul>
</li>
</ul>
<h2 id="三、具体配置"><a href="#三、具体配置" class="headerlink" title="三、具体配置"></a>三、具体配置</h2><h4 id="第1步：配置this0-conf"><a href="#第1步：配置this0-conf" class="headerlink" title="第1步：配置this0.conf"></a>第1步：配置this0.conf</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">89</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  this0.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> blog;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复制</p>
<blockquote>
<p>说明一下，listen后面跟着的89是咱的监听端口 server_name 后填<a href="https://cloud.tencent.com/act/pro/domain-sales?from_column=20065&from=20065">域名</a> 然后就是location配置，因为我之前把blog文件夹放在外面，所以直接写blog</p>
</blockquote>
<h4 id="第2步：引入this0-conf到nginx-conf"><a href="#第2步：引入this0-conf到nginx-conf" class="headerlink" title="第2步：引入this0.conf到nginx.conf"></a>第2步：引入this0.conf到nginx.conf</h4><p>   打开<code>nginx.conf</code></p>
<p>   在这个位置添加</p>
<p><img src="https://blog-resources.this0.com/image/202405101324919.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<p>然后保存</p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>网站说明文档</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h3 id="第一步：安装gcc和g"><a href="#第一步：安装gcc和g" class="headerlink" title="第一步：安装gcc和g++"></a>第一步：安装gcc和g++</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> gcc</span><br><span class="line">yum -y <span class="keyword">install</span> gcc-c++</span><br></pre></td></tr></table></figure>

<h3 id="第二步：安装必要的一些系统工具"><a href="#第二步：安装必要的一些系统工具" class="headerlink" title="第二步：安装必要的一些系统工具"></a>第二步：安装必要的一些系统工具</h3><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">yum</span> install -y yum-utils device-mapper-persistent-<span class="class"><span class="keyword">data</span> lvm2</span></span><br></pre></td></tr></table></figure>

<h3 id="第三步：添加软件源信息"><a href="#第三步：添加软件源信息" class="headerlink" title="第三步：添加软件源信息"></a>第三步：添加软件源信息</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">yum-config-manager --<span class="built_in">add</span>-repo http://mirrors.aliyun.<span class="keyword">com</span>/docker-<span class="keyword">ce</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure>

<h3 id="第四步：更新yum软件包索引并安装Docker-CE"><a href="#第四步：更新yum软件包索引并安装Docker-CE" class="headerlink" title="第四步：更新yum软件包索引并安装Docker-CE"></a>第四步：更新yum软件包索引并安装Docker-CE</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>

<h3 id="第五步：开启Docker服务"><a href="#第五步：开启Docker服务" class="headerlink" title="第五步：开启Docker服务"></a>第五步：开启Docker服务</h3><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="params">system</span>ctl start docker</span><br><span class="line"><span class="params">system</span>ctl enable docker</span><br></pre></td></tr></table></figure>

<h3 id="第六步：测试是否安装成功"><a href="#第六步：测试是否安装成功" class="headerlink" title="第六步：测试是否安装成功"></a>第六步：测试是否安装成功</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker -v</span></span><br></pre></td></tr></table></figure>

<h3 id="第七步：配置镜像加速器"><a href="#第七步：配置镜像加速器" class="headerlink" title="第七步：配置镜像加速器"></a>第七步：配置镜像加速器</h3><p>您可以通过修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://ldu6wrsf.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>重启服务</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">sudo <span class="params">system</span>ctl daemon-reload</span><br><span class="line">sudo <span class="params">system</span>ctl restart docker</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>安装hexo并应用butterfly主题</title>
    <url>/articles/268d8d1e.html</url>
    <content><![CDATA[<h3 id="1-安装前提"><a href="#1-安装前提" class="headerlink" title="1. 安装前提"></a>1. 安装前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a> 在站内已有安装教程，<a href="http://this0.com/post/2023825a.html">点我查看</a> &#x2F;&#x2F;TODO(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li><a href="http://git-scm.com/">Git</a></li>
</ul>
<h3 id="2-Node-js-版本限制"><a href="#2-Node-js-版本限制" class="headerlink" title="2. Node.js 版本限制"></a>2. Node.js 版本限制</h3><table>
<thead>
<tr>
<th align="left">Hexo 版本</th>
<th align="left">最低版本 (Node.js 版本)</th>
<th align="left">最高版本 (Node.js 版本)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">6.2+</td>
<td align="left">12.13.0</td>
<td align="left">latest</td>
</tr>
<tr>
<td align="left">6.0+</td>
<td align="left">12.13.0</td>
<td align="left">18.5.0</td>
</tr>
<tr>
<td align="left">5.0+</td>
<td align="left">10.13.0</td>
<td align="left">12.0.0</td>
</tr>
<tr>
<td align="left">4.1 - 4.2</td>
<td align="left">8.10</td>
<td align="left">10.0.0</td>
</tr>
<tr>
<td align="left">4.0</td>
<td align="left">8.6</td>
<td align="left">8.10.0</td>
</tr>
<tr>
<td align="left">3.3 - 3.9</td>
<td align="left">6.9</td>
<td align="left">8.0.0</td>
</tr>
<tr>
<td align="left">3.2 - 3.3</td>
<td align="left">0.12</td>
<td align="left">未知</td>
</tr>
<tr>
<td align="left">3.0 - 3.1</td>
<td align="left">0.10 或 iojs</td>
<td align="left">未知</td>
</tr>
<tr>
<td align="left">0.0.1 - 2.8</td>
<td align="left">0.10</td>
<td align="left">未知</td>
</tr>
</tbody></table>
<h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br><span class="line"><span class="meta">#输入hexo -v验证是否安装成功。</span></span><br></pre></td></tr></table></figure>

<h3 id="4-安装插件"><a href="#4-安装插件" class="headerlink" title="4. 安装插件"></a>4. 安装插件</h3><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装，否则运行时不能正常显示画面：</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">renderer</span>-pug hexo-<span class="keyword">renderer</span>-stylus --save</span><br></pre></td></tr></table></figure>

<h3 id="5-初始化hexo项目"><a href="#5-初始化hexo项目" class="headerlink" title="5. 初始化hexo项目"></a>5. 初始化hexo项目</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">init</span> this0</span><br><span class="line"><span class="meta">#this0替换成你自己取的项目名</span></span><br></pre></td></tr></table></figure>

<h3 id="6-运行hexo"><a href="#6-运行hexo" class="headerlink" title="6. 运行hexo"></a>6. 运行hexo</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> cl; <span class="attribute">hexo</span> g; <span class="attribute">hexo</span> s -p <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>#分别代表：清理静态文件；生成静态文件；启动服务 (-p是以指定端口启动)</p>
<h3 id="7-访问"><a href="#7-访问" class="headerlink" title="7. 访问"></a>7. 访问</h3><p>本地访问<a href="http://localhost/">http://localhost/</a></p>
<h3 id="8-安装主题-可选"><a href="#8-安装主题-可选" class="headerlink" title="8. 安装主题(可选)"></a>8. 安装主题(可选)</h3><p>以butterfly主题为例</p>
<blockquote>
<p>可选git安装或者npm安装，建议用git安装，npm安装还需要从node_modules里把主题文件移出来。</p>
</blockquote>
<h4 id="8-1-通过git安装主题"><a href="#8-1-通过git安装主题" class="headerlink" title="8.1 通过git安装主题"></a>8.1 通过git安装主题</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">-b</span> <span class="keyword">master</span> <span class="title">https</span>://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>

<h4 id="8-2-npm安装"><a href="#8-2-npm安装" class="headerlink" title="8.2 npm安装"></a>8.2 npm安装</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-theme-butterfly</span><br></pre></td></tr></table></figure>

<h4 id="8-3-应用主题"><a href="#8-3-应用主题" class="headerlink" title="8.3. 应用主题"></a>8.3. 应用主题</h4><p>修改 Hexo 根目录下的 _config.yml，把主题改为 butterfly</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span> <span class="comment">#大概在103行</span></span><br></pre></td></tr></table></figure>

<h4 id="8-4-升级主题"><a href="#8-4-升级主题" class="headerlink" title="8.4 升级主题"></a>8.4 升级主题</h4><p>升级前将hexo-theme-butterfly文件夹备份，npm更新会直接覆盖成新的包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm update hexo-theme-butterfly</span><br></pre></td></tr></table></figure>

<h4 id="8-5-优化设置"><a href="#8-5-优化设置" class="headerlink" title="8.5 优化设置"></a>8.5 优化设置</h4><p>为了减少升级主题后带来的不便，请使用以下方法（建议，可以不做）。</p>
<p>在 hexo 的根目录创建一个文件 _config.butterfly.yml，并把主题目录的 _config.yml 内容复制到 _config.butterfly.yml 去。( 注意: 复制的是主题的 _config.yml ，而不是 hexo 的 _config.yml)</p>
<h4 id="8-6-注意事项"><a href="#8-6-注意事项" class="headerlink" title="8.6 注意事项"></a>8.6 注意事项</h4><ol>
<li><p>不要把主题目录的 _config.yml 删掉</p>
</li>
<li><p>以后只需要在 _config.butterfly.yml 进行配置就行。<br>如果使用了 _config.butterfly.yml， 配置主题的 _config.yml 将不会有效果。</p>
</li>
<li><p>Hexo会自动合并主题中的 _config.yml 和 _config.butterfly.yml 里的配置，如果存在同名配置，会使用 _config.butterfly.yml 的配置，其优先度较高。</p>
</li>
</ol>
<h4 id="8-7-使用其他主题"><a href="#8-7-使用其他主题" class="headerlink" title="8.7 使用其他主题"></a>8.7 使用其他主题</h4><p>比如使用我的项目<a href="http://www.this0.com/">this0.com</a>,直接复制源码到初始化后的项目，覆盖文件。当然，就<code>不需要初始化hexo项目</code>这一步了。</p>
<h3 id="9-部署到云服务器"><a href="#9-部署到云服务器" class="headerlink" title="9. 部署到云服务器"></a>9. 部署到云服务器</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>网站说明文档</category>
      </categories>
      <tags>
        <tag>网站说明文档</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h3><p>v2ray是一种网络传输工具，通过使用V2ray节点，我们可以科学上网（翻墙）学习国外先进科学技术，而这只是v2ray的一点点小功能，本篇也只介绍这一个主题，详细了解可以参考<a href="https://toutyrater.github.io/">V2Ray官方文档</a>。</p>
<h3 id="2-搭建前准备"><a href="#2-搭建前准备" class="headerlink" title="2 搭建前准备"></a>2 搭建前准备</h3><ul>
<li>一台国外vps</li>
</ul>
<p>如果只是单纯想科学上网，直接购买节点更省时省力，本文只分享技术,<code>不引流、不分享、不售卖节点</code>。</p>
<h3 id="3-服务器搭建v2ray节点"><a href="#3-服务器搭建v2ray节点" class="headerlink" title="3 服务器搭建v2ray节点"></a>3 服务器搭建v2ray节点</h3><h4 id="1-节点搭建"><a href="#1-节点搭建" class="headerlink" title="1 节点搭建"></a>1 节点搭建</h4><p>运行搭建脚本，脚本guithub地址：<a href="https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC">https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC</a></p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">bash &lt;(<span class="name">wget</span> -qO- -o- https<span class="symbol">://git</span>.io/v2ray.sh)</span><br></pre></td></tr></table></figure>

<p>搭建完成出现的<code>蓝色链接</code>，就是v2ray节点链接，复制下来，后面有用。</p>
<p>（输入命令 v2ray,然后按3可以再查看）</p>
<p><img src="https://blog-resources.this0.com/image/202403252254033.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240325_224820"></p>
<p>搭建完还不能访问，还要放行节点的端口</p>
<h4 id="2-端口放行"><a href="#2-端口放行" class="headerlink" title="2 端口放行"></a>2 端口放行</h4><p>外置防火墙在云服务器厂商处配置，这里只讲内置防火墙，对防火墙不了解的，请参考站内文章，《服务器防火墙配置》&#x2F;&#x2F;TODO</p>
<h5 id="1-打开节点端口"><a href="#1-打开节点端口" class="headerlink" title="1 打开节点端口"></a>1 打开节点端口</h5><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd <span class="params">--zone=public</span> <span class="params">--add-port=</span>节点端口号<span class="string">/tcp</span> <span class="params">--permanent</span></span><br></pre></td></tr></table></figure>

<h5 id="2-重启服务生效"><a href="#2-重启服务生效" class="headerlink" title="2 重启服务生效"></a>2 重启服务生效</h5><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd <span class="comment">--reload</span></span><br></pre></td></tr></table></figure>

<h5 id="3-验证"><a href="#3-验证" class="headerlink" title="3 验证"></a>3 验证</h5><p>查看开放的端口</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">--</span><span class="comment">list</span><span class="literal">-</span><span class="comment">ports</span> <span class="literal">--</span><span class="comment">zone=public</span></span><br></pre></td></tr></table></figure>

<p>41272就是我搭建的节点的端口，已经放行了</p>
<p><img src="https://blog-resources.this0.com/image/202403252259023.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240325_225833"></p>
<p>也可以通过工具网站检测</p>
<p>比如，<a href="https://tcp.ping.pe/">https://tcp.ping.pe/</a></p>
<p>或者<a href="https://ping.sx/check-port">https://ping.sx/check-port</a></p>
<p>打开网站输入ip:端口号，点击Go&#x2F;Check,出现绿色就是正常放行</p>
<h3 id="4-节点使用"><a href="#4-节点使用" class="headerlink" title="4 节点使用"></a>4 节点使用</h3><p>我使用的archlinux系统，大同小异</p>
<p>有很多客户端可供选择，我使用下来，windows下的v2rayN，安卓下的Clash体验较好,这两种图形化客户端很好上手，直接导入节点就能使用，所以不多讲了。</p>
<p>下面讲讲我在linux下用的客户端——<a href="https://v2raya.org/">v2raya</a>。</p>
<h4 id="1-安装v2ray"><a href="#1-安装v2ray" class="headerlink" title="1 安装v2ray"></a>1 安装v2ray</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yay</span> -S v2ray</span><br></pre></td></tr></table></figure>

<h4 id="2-启动-自启动v2ray"><a href="#2-启动-自启动v2ray" class="headerlink" title="2 启动&amp;自启动v2ray"></a>2 启动&amp;自启动v2ray</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">enable</span> <span class="comment">--now v2ray</span></span><br></pre></td></tr></table></figure>

<h4 id="3-安装可视化客户端v2raya"><a href="#3-安装可视化客户端v2raya" class="headerlink" title="3 安装可视化客户端v2raya"></a>3 安装可视化客户端v2raya</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">yay</span> -S v2raya</span><br></pre></td></tr></table></figure>

<h4 id="4-启动-自启动v2ray"><a href="#4-启动-自启动v2ray" class="headerlink" title="4 启动&amp;自启动v2ray"></a>4 启动&amp;自启动v2ray</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">enable</span> <span class="comment">--now v2raya</span></span><br></pre></td></tr></table></figure>

<h4 id="5-导入-使用节点"><a href="#5-导入-使用节点" class="headerlink" title="5 导入&amp;使用节点"></a>5 导入&amp;使用节点</h4><p>启动完之后，打开<a href="http://127.0.0.1:2017/">http://127.0.0.1:2017/</a></p>
<p>进入v2raya的控制台</p>
<p>第一步，点击导入输入上文保存的节点链接,导入节点</p>
<p><img src="https://blog-resources.this0.com/image/202403260238483.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240326_023606"></p>
<p>第二步，启用节点，依此点击server——勾选节点——启动（点击之后变正在运行）——设置——透明代理&#x2F;系统代理——启用大陆白名单模式</p>
<p><img src="https://blog-resources.this0.com/image/202403260248427.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240326_024247"></p>
<p><img src="https://blog-resources.this0.com/image/202403260251407.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240326_025056"></p>
<p>至此开启了浏览器代理，能正常打开<a href="http://www.google.com等网站了，更多高级功能参考[v2raya官网](https://v2raya.org/)">www.google.com等网站了，更多高级功能参考[v2raya官网](https://v2raya.org/)</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h2 id="linux服务器解压安装mysql"><a href="#linux服务器解压安装mysql" class="headerlink" title="linux服务器解压安装mysql"></a>linux服务器解压安装mysql</h2><h3 id="1-自定义安装路径"><a href="#1-自定义安装路径" class="headerlink" title="1 自定义安装路径"></a>1 自定义安装路径</h3><p>博主安装在服务器的 &#x2F;usr&#x2F;local&#x2F;this0&#x2F;mysql 路径下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/this0/mysql</span><br><span class="line"><span class="built_in">cd</span> /usr/local/this0/mysql</span><br></pre></td></tr></table></figure>

<h3 id="2-上传安装包"><a href="#2-上传安装包" class="headerlink" title="2 上传安装包"></a>2 上传安装包</h3><p>上传安装包到安装路径，站长用的xftp上传</p>
<h3 id="3-解压安装包"><a href="#3-解压安装包" class="headerlink" title="3 解压安装包"></a>3 解压安装包</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装包名可以用tap键提示补全</span></span><br><span class="line"><span class="attribute">tar</span> -zxvf mysql-<span class="number">8</span>.<span class="number">0</span>.<span class="number">34</span>-linux-glibc2.<span class="number">28</span>-x86_64.tar.gz </span><br><span class="line"><span class="comment">#改个短点的名</span></span><br><span class="line"><span class="attribute">mv</span> mysql-<span class="number">8</span>.<span class="number">0</span>.<span class="number">34</span>-linux-glibc2.<span class="number">28</span>-x86_64 mysql-<span class="number">8</span>.<span class="number">0</span>.<span class="number">34</span></span><br></pre></td></tr></table></figure>

<h3 id="4-添加mysql用户组和用户"><a href="#4-添加mysql用户组和用户" class="headerlink" title="4 添加mysql用户组和用户"></a>4 添加mysql用户组和用户</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">groupadd mysql</span></span><br><span class="line"><span class="attribute">useradd -r -g mysql mysql</span></span><br></pre></td></tr></table></figure>

<h3 id="5-自定义数据存放目录"><a href="#5-自定义数据存放目录" class="headerlink" title="5 自定义数据存放目录"></a>5 自定义数据存放目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/this0/mysql/data</span><br></pre></td></tr></table></figure>

<h3 id="6-授权"><a href="#6-授权" class="headerlink" title="6 授权"></a>6 授权</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#授予刚创建的用户，安装路径权限</span></span><br><span class="line"><span class="built_in">chown</span> -R mysql.mysql /usr/local/this0/mysql</span><br></pre></td></tr></table></figure>

<h3 id="7-配置文件"><a href="#7-配置文件" class="headerlink" title="7 配置文件"></a>7 配置文件</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line">vim /etc/<span class="keyword">my</span>.cnf</span><br></pre></td></tr></table></figure>

<h3 id="8-初始化mysql"><a href="#8-初始化mysql" class="headerlink" title="8 初始化mysql"></a>8 初始化mysql</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/this0/my</span>sql<span class="regexp">/mysql-8.0.34/</span>bin<span class="regexp">/mysqld --initialize --user=mysql --basedir=/u</span>sr<span class="regexp">/local/</span>this0<span class="regexp">/mysql/my</span>sql-<span class="number">8.0</span>.<span class="number">34</span> --datadir=<span class="regexp">/usr/</span>local<span class="regexp">/this0/my</span>sql<span class="regexp">/data/</span></span><br></pre></td></tr></table></figure>

<h3 id="9-查看mysql密码"><a href="#9-查看mysql密码" class="headerlink" title="9 查看mysql密码"></a>9 查看mysql密码</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/usr/</span>local<span class="regexp">/this0/my</span>sql<span class="regexp">/data/my</span>sqld.log</span><br></pre></td></tr></table></figure>

<h3 id="10-启动mysql"><a href="#10-启动mysql" class="headerlink" title="10 启动mysql"></a>10 启动mysql</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/this0/my</span>sql<span class="regexp">/mysql-8.0.34/</span>support-files/mysql.server start</span><br></pre></td></tr></table></figure>

<h3 id="11-将mysql的bin目录添加到系统变量"><a href="#11-将mysql的bin目录添加到系统变量" class="headerlink" title="11 将mysql的bin目录添加到系统变量"></a>11 将mysql的bin目录添加到系统变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:/usr/local/this0/mysql/mysql-8.0.34/bin&quot;&#x27;</span> &gt;&gt;  /etc/profile </span><br></pre></td></tr></table></figure>

<h3 id="12-使配置文件立即生效"><a href="#12-使配置文件立即生效" class="headerlink" title="12 使配置文件立即生效"></a>12 使配置文件立即生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#或者重启一下也能生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="13-连接测试"><a href="#13-连接测试" class="headerlink" title="13 连接测试"></a>13 连接测试</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql</span> -u root -p</span><br><span class="line"><span class="comment">#输入密码时没有提示</span></span><br></pre></td></tr></table></figure>

<h3 id="14-拷贝到开机自启服务"><a href="#14-拷贝到开机自启服务" class="headerlink" title="14 拷贝到开机自启服务"></a>14 拷贝到开机自启服务</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/this0/my</span>sql<span class="regexp">/mysql-8.0.34/</span>support-files<span class="regexp">/mysql.server /</span>etc<span class="regexp">/init.d/my</span>sqld</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<p>Huawei Cloud EulerOS 2.0服务器安装mysql8.0.34</p>
<h3 id="1-下载（519-8M那个）并上传到安装目录"><a href="#1-下载（519-8M那个）并上传到安装目录" class="headerlink" title="1.下载（519.8M那个）并上传到安装目录"></a>1.下载（519.8M那个）并上传到安装目录</h3><p>这里安装目录是 :</p>
<p>&#x2F;usr&#x2F;local&#x2F;mysql</p>
<p>官方下载地址：<a href="https://dev.mysql.com/downloads/">https://dev.mysql.com/downloads/</a></p>
<p><img src="https://yuling-1318764606.cos.ap-chengdu.myqcloud.com/blog/image-20230801221543085.png" alt="image-20230801221543085"></p>
<h3 id="2-创建目录并解压"><a href="#2-创建目录并解压" class="headerlink" title="2.创建目录并解压"></a>2.创建目录并解压</h3><p>先上传文件到目录里</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建安装目录</span></span><br><span class="line"><span class="attribute">mkdir</span> -p /usr/local/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入安装目录</span></span><br><span class="line"><span class="attribute">cd</span>  /usr/local/mysql/</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压文件（活用tap 自动补全）</span></span><br><span class="line"><span class="attribute">tar</span> -zxvf mysql-<span class="number">8</span>.<span class="number">0</span>.<span class="number">34</span>-linux-glibc2.<span class="number">28</span>-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#并重命名</span></span><br><span class="line"> <span class="attribute">mv</span> mysql-<span class="number">8</span>.<span class="number">0</span>.<span class="number">34</span>-linux-glibc2.<span class="number">28</span>-x86_64/ mysql-<span class="number">8</span>.<span class="number">0</span>.<span class="number">34</span></span><br></pre></td></tr></table></figure>

<h3 id="3-添加mysql用户及对应的组"><a href="#3-添加mysql用户及对应的组" class="headerlink" title="3.添加mysql用户及对应的组"></a>3.添加mysql用户及对应的组</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加用户组</span></span><br><span class="line">groupadd mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#useradd -r参数表示mysql用户是系统用户，不可用于登录系统</span></span><br><span class="line">useradd -r -g mysql mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建data目录</span></span><br><span class="line">mkdir <span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>data</span><br><span class="line"></span><br><span class="line"><span class="comment">#将/usr/local/mysql/的所有者及所属组改为mysql</span></span><br><span class="line">chown -R mysql.mysql <span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span></span><br></pre></td></tr></table></figure>

<h3 id="4-创建配置文件"><a href="#4-创建配置文件" class="headerlink" title="4.创建配置文件"></a>4.创建配置文件</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/my.<span class="keyword">cnf</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">## 基础位置</span><br><span class="line">basedir = /usr/local/mysql/mysql-8.0.34</span><br><span class="line">## 数据存放位置</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line">## 端口</span><br><span class="line">port = 10241</span><br><span class="line">  </span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">## 字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line">  </span><br><span class="line">log-error = /usr/local/mysql/data/mysqld.log</span><br><span class="line">pid-file = /usr/local/mysql/data/mysqld.pid</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-进行初始化"><a href="#5-进行初始化" class="headerlink" title="5.进行初始化"></a>5.进行初始化</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/mysql/my</span>sql-<span class="number">8.0</span>.<span class="number">34</span><span class="regexp">/bin/my</span>sqld --initialize --user=mysql --basedir=<span class="regexp">/usr/</span>local<span class="regexp">/mysql/my</span>sql-<span class="number">8.0</span>.<span class="number">34</span> --datadir=<span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>data/ </span><br><span class="line"><span class="comment">#在日志文件中找到密码</span></span><br><span class="line">cat <span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>data/mysqld.log</span><br></pre></td></tr></table></figure>

<h3 id="6-执行启动命令"><a href="#6-执行启动命令" class="headerlink" title="6.执行启动命令"></a>6.执行启动命令</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/mysql/my</span>sql-<span class="number">8.0</span>.<span class="number">34</span><span class="regexp">/support-files/my</span>sql.server start</span><br></pre></td></tr></table></figure>

<h3 id="7-添加全局mysql环境变量"><a href="#7-添加全局mysql环境变量" class="headerlink" title="7.添加全局mysql环境变量"></a>7.添加全局mysql环境变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PATH:/usr/local/mysql/mysql-8.0.34/bin&quot;&#x27;</span> &gt;&gt;  /etc/profile </span><br><span class="line"></span><br><span class="line"><span class="comment">#使立即生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果报错，修改/etc/profile配置文件，将</span></span><br><span class="line"><span class="built_in">export</span> TMOUT=600</span><br><span class="line"><span class="built_in">readonly</span> TMOUT</span><br><span class="line"><span class="comment">#这两行注释掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解释：export TMOUT=600 :是用户在指定秒数内没有活动（操作）时间</span></span><br><span class="line"><span class="comment">#readonly TMOUT: 是防止用户在命令行执行TMOUT=0操作</span></span><br></pre></td></tr></table></figure>

<p>　　</p>
<h3 id="8-登录并修改密码"><a href="#8-登录并修改密码" class="headerlink" title="8.登录并修改密码"></a>8.登录并修改密码</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mysql -u root -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure>

<ol>
<li>修改root密码</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;your_strong_password&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建新用户：</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;abcd&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>授予用户全部权限：</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;abcd&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>刷新权限以应用更改：</li>
</ol>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-设置mysql开机自启"><a href="#9-设置mysql开机自启" class="headerlink" title="9.设置mysql开机自启"></a>9.设置mysql开机自启</h3><p>复制服务到自启动路径下</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/mysql/</span>mysql<span class="operator">-</span><span class="number">8.0</span>.<span class="number">34</span><span class="regexp">/support-files/</span>mysql.server <span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>mysqld</span><br></pre></td></tr></table></figure>

<h4 id="显示服务列表"><a href="#显示服务列表" class="headerlink" title="显示服务列表"></a>显示服务列表</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">chkconfig <span class="comment">--list</span></span><br></pre></td></tr></table></figure>

<h4 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">chkconfig --<span class="built_in">add</span> mysqld</span><br></pre></td></tr></table></figure>

<h4 id="重新查看显示服务列表"><a href="#重新查看显示服务列表" class="headerlink" title="重新查看显示服务列表"></a>重新查看显示服务列表</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">chkconfig <span class="comment">--list</span></span><br></pre></td></tr></table></figure>

<h4 id="如果是关闭的话，使用下面命令将其开启"><a href="#如果是关闭的话，使用下面命令将其开启" class="headerlink" title="如果是关闭的话，使用下面命令将其开启"></a>如果是关闭的话，使用下面命令将其开启</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chkconfig</span> --level <span class="number">345</span> mysqld <span class="literal">on</span></span><br></pre></td></tr></table></figure>









<p><img src="https://blog-resources.this0.com/image/202405061644534.png?x-oss-process=style/this0-blog" alt="img"></p>
<p><img src="https://blog-resources.this0.com/image/202405061644112.png?x-oss-process=style/this0-blog" alt="img"></p>
<h3 id="10-安全设置"><a href="#10-安全设置" class="headerlink" title="10.安全设置"></a>10.安全设置</h3><ol>
<li><p>删除测试数据库：MySQL安装后，可能会自带一些测试数据库，如<code>test</code>，<code>mysql</code>等。这些数据库对于生产环境没有必要，可以将其删除。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> test;</span><br></pre></td></tr></table></figure>
</li>
<li><p>移除匿名用户：MySQL默认创建了一个允许匿名用户访问的账户，为了安全起见，应该将其删除。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> mysql.<span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">User</span>=<span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h2 id="前端环境搭建"><a href="#前端环境搭建" class="headerlink" title="前端环境搭建"></a>前端环境搭建</h2><h3 id="1-初始化vite项目"><a href="#1-初始化vite项目" class="headerlink" title="1 初始化vite项目"></a>1 初始化vite项目</h3><h3 id="2-安装所需依赖和插件"><a href="#2-安装所需依赖和插件" class="headerlink" title="2 安装所需依赖和插件"></a>2 安装所需依赖和插件</h3><ul>
<li>Naive UI</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D naive-ui</span><br><span class="line">npm i -D vfonts</span><br></pre></td></tr></table></figure>

<ul>
<li>路由</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> vue-router</span><br></pre></td></tr></table></figure>

<ul>
<li>sass</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> sass</span><br></pre></td></tr></table></figure>

<ul>
<li>js-cookie</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> js-cookie</span><br></pre></td></tr></table></figure>

<ul>
<li>axios</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> axios</span><br></pre></td></tr></table></figure>

<ul>
<li>pinia</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i pinia </span><br></pre></td></tr></table></figure>

<ul>
<li>开发工具</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i -D unplugin-auto-<span class="keyword">import</span></span><br><span class="line"><span class="built_in">npm</span> i -D unplugin-vue-components</span><br></pre></td></tr></table></figure>

<h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3 修改配置文件"></a>3 修改配置文件</h3><h4 id="1-vite-config-js"><a href="#1-vite-config-js" class="headerlink" title="1 vite.config.js"></a>1 vite.config.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineConfig&#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;fileURLToPath, <span class="variable constant_">URL</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NaiveUiResolver</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">base</span>: <span class="string">&quot;./&quot;</span>, <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">        <span class="attr">imports</span>: [<span class="string">&#x27;vue&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;naive-ui&#x27;</span>: [<span class="string">&#x27;useDialog&#x27;</span>, <span class="string">&#x27;useMessage&#x27;</span>, <span class="string">&#x27;useNotification&#x27;</span>, <span class="string">&#x27;useLoadingBar&#x27;</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;), <span class="title class_">Components</span>(&#123;</span><br><span class="line">        <span class="attr">resolvers</span>: [<span class="title class_">NaiveUiResolver</span>()]</span><br><span class="line">    &#125;)], <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-main-js"><a href="#2-main-js" class="headerlink" title="2 main.js"></a>2 main.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> naive <span class="keyword">from</span> <span class="string">&#x27;naive-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;router&#125; <span class="keyword">from</span> <span class="string">&#x27;./common/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端地址</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;http://localhost:8080&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(naive)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>());</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-路由文件-router-js"><a href="#4-路由文件-router-js" class="headerlink" title="4 路由文件 router.js"></a>4 路由文件 router.js</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line">let routes = [&#123;path: <span class="string">&#x27;/&#x27;</span>, component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/HomePage.vue&#x27;</span>)&#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">    history: createWebHashHistory(), routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;router, routes&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="5-封装axios-js"><a href="#5-封装axios-js" class="headerlink" title="5 封装axios.js"></a>5 封装axios.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="comment">// 使用Naive UI Message做消息提醒</span></span><br><span class="line"><span class="keyword">import</span> &#123;useMessage&#125; <span class="keyword">from</span> <span class="string">&quot;naive-ui&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cookie <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 创建新的axios实例，</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">// 公共接口 开发环境还是线上环境也可以用api</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&quot;http://localhost:8001&quot;</span>,</span><br><span class="line">    <span class="comment">// 超时时间 单位是ms，这里设置了5s的超时时间</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">50000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2.请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加</span></span><br><span class="line">        <span class="comment">//  config.data = qs.stringify(config.data); //数据转化,也可以使用qs转换</span></span><br><span class="line">        <span class="comment">//  config.headers = &#123;</span></span><br><span class="line">        <span class="comment">//    &#x27;Content-Type&#x27;:&#x27;application/x-www-form-urlencoded&#x27; //配置请求头</span></span><br><span class="line">        <span class="comment">//  &#125;</span></span><br><span class="line">        <span class="comment">//注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie</span></span><br><span class="line">        <span class="comment">//  const token = getCookie(&#x27;名称&#x27;);//这里取token之前，你肯定需要先拿到token,存一下</span></span><br><span class="line">        <span class="comment">//  if(token)&#123;</span></span><br><span class="line">        <span class="comment">//     config.params = &#123;&#x27;token&#x27;:token&#125; //如果要求携带在参数中</span></span><br><span class="line">        <span class="comment">//     config.headers.token= token; //如果要求携带在请求头中</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// config.method === &quot;post&quot;</span></span><br><span class="line">        <span class="comment">//   ? (config.data = qs.stringify(&#123; ...config.data &#125;))</span></span><br><span class="line">        <span class="comment">//   : (config.params = &#123; ...config.params &#125;);</span></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">            useMessage.<span class="title function_">error</span>(response.<span class="property">data</span>.<span class="property">message</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(error.<span class="property">response</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> response.<span class="property">data</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">/***** 接收到异常响应的处理开始 *****/</span></span><br><span class="line">        useMessage.<span class="title function_">error</span>(<span class="string">&quot;连接服务器失败&quot;</span>);</span><br><span class="line">        <span class="comment">//useMessage.error(useMessage.error)</span></span><br><span class="line">        <span class="comment">/***** 处理结束 *****/</span></span><br><span class="line">        <span class="comment">//如果不需要错误处理，以上的处理过程都可省略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(error.<span class="property">response</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//4.导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure>

<h3 id="6-App-vue"><a href="#6-App-vue" class="headerlink" title="6 App.vue"></a>6 App.vue</h3><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> </span></span><span class="template-variable">&#123;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="7-HomePage"><a href="#7-HomePage" class="headerlink" title="7 HomePage"></a>7 HomePage</h3><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">n-button</span>&gt;</span>naive-ui<span class="tag">&lt;/<span class="name">n-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> </span></span><span class="template-variable">&#123;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="至此，初始化项目前端结构完成"><a href="#至此，初始化项目前端结构完成" class="headerlink" title="至此，初始化项目前端结构完成"></a>至此，初始化项目前端结构完成</h3>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<h2 id="前端页面开发"><a href="#前端页面开发" class="headerlink" title="前端页面开发"></a>前端页面开发</h2><h3 id="1-整合编辑器md-editor-v3"><a href="#1-整合编辑器md-editor-v3" class="headerlink" title="1 整合编辑器md-editor-v3"></a>1 整合编辑器md-editor-v3</h3><p>安装</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">npm</span> i md-editor-<span class="built_in">v3</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> </span></span><span class="template-variable">&#123;MdEditor&#125;</span><span class="language-xml"><span class="language-javascript"> <span class="keyword">from</span> <span class="string">&#x27;md-editor-v3&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="string">&#x27;md-editor-v3/lib/style.css&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;# Hello Editor&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">MdEditor</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="2-首页页面"><a href="#2-首页页面" class="headerlink" title="2 首页页面"></a>2 首页页面</h3><p>HomePage.vue</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">vertical</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 顶部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 顶部导航 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topbar-nav container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;space-between&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 左侧Home键 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">RouterLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-home&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">RouterLink</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 中间菜单 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-menu</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-model:value</span>=<span class="string">&quot;activeKey&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">mode</span>=<span class="string">&quot;horizontal&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">icon-size</span>=<span class="string">&quot;26&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:options</span>=<span class="string">&quot;menuOptions&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">responsive</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 右侧搜索键 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-sousuo1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 顶部消息栏 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topbar-message container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;space-between&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 左侧即刻 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">             即刻</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 消息内容 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">            This0-开源Vitepress主题</span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 右侧展开图标 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-zhankai-jingguo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 顶部Banner --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topbar-banner container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;start&quot;</span> <span class="attr">align</span>=<span class="string">&quot;end&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 左侧站点信息 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This0<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;start&quot;</span> <span class="attr">align</span>=<span class="string">&quot;stretch&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是站点描述<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 内容区 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;space-between&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 左边文章列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-left&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 主要分类 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-category&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">              推荐</span><br><span class="line">            <span class="tag">&lt;/<span class="name">n-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-button</span> <span class="attr">type</span>=<span class="string">&quot;tertiary&quot;</span>&gt;</span></span><br><span class="line">              Archlinux</span><br><span class="line">            <span class="tag">&lt;/<span class="name">n-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-button</span> <span class="attr">type</span>=<span class="string">&quot;tertiary&quot;</span>&gt;</span></span><br><span class="line">              Java</span><br><span class="line">            <span class="tag">&lt;/<span class="name">n-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-button</span> <span class="attr">type</span>=<span class="string">&quot;tertiary&quot;</span>&gt;</span></span><br><span class="line">              Godot</span><br><span class="line">            <span class="tag">&lt;/<span class="name">n-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-button</span> <span class="attr">type</span>=<span class="string">&quot;tertiary&quot;</span>&gt;</span></span><br><span class="line">              站点</span><br><span class="line">            <span class="tag">&lt;/<span class="name">n-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 内容区文章列表——单篇文章 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 图片部分 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;articlebg&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 1.文章标题 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                    【spring MVC】</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 文章摘要 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">                Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web</span><br><span class="line">                Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC</span><br><span class="line">                模块。</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 文章发表时间 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-publish&quot;</span>&gt;</span></span><br><span class="line">                发布于 2023-06-26</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 图片部分 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;articlebg&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 1.文章标题 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                    【spring MVC】</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 2.文章摘要 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">                Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web</span><br><span class="line">                Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC</span><br><span class="line">                模块。</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 3.文章发表时间 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-publish&quot;</span>&gt;</span></span><br><span class="line">                发布于 2023-06-26</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 图片部分 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;articlebg&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 1.文章标题 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                    【spring MVC】</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 2.文章摘要 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">                Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web</span><br><span class="line">                Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC</span><br><span class="line">                模块。</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 3.文章发表时间 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-publish&quot;</span>&gt;</span></span><br><span class="line">                发布于 2023-06-26</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 图片部分 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;articlebg&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 1.文章标题 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                    【spring MVC】</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 2.文章摘要 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">                Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web</span><br><span class="line">                Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC</span><br><span class="line">                模块。</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 3.文章发表时间 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-publish&quot;</span>&gt;</span></span><br><span class="line">                发布于 2023-06-26</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 图片部分 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;articlebg&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 1.文章标题 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                    【spring MVC】</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 2.文章摘要 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">                Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web</span><br><span class="line">                Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC</span><br><span class="line">                模块。</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 3.文章发表时间 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-publish&quot;</span>&gt;</span></span><br><span class="line">                发布于 2023-06-26</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 图片部分 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;articlebg&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 1.文章标题 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                    【spring MVC】</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 2.文章摘要 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">                Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web</span><br><span class="line">                Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC</span><br><span class="line">                模块。</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 3.文章发表时间 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-publish&quot;</span>&gt;</span></span><br><span class="line">                发布于 2023-06-26</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 图片部分 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;articlebg&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 1.文章标题 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                    【spring MVC】</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 2.文章摘要 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">                Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web</span><br><span class="line">                Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC</span><br><span class="line">                模块。</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 3.文章发表时间 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-publish&quot;</span>&gt;</span></span><br><span class="line">                发布于 2023-06-26</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 图片部分 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;articlebg&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 1.文章标题 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-title&quot;</span>&gt;</span></span><br><span class="line">                    【spring MVC】</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 2.文章摘要 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-abstract&quot;</span>&gt;</span></span><br><span class="line">                Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web</span><br><span class="line">                Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC</span><br><span class="line">                模块。</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 3.文章发表时间 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article-publish&quot;</span>&gt;</span></span><br><span class="line">                发布于 2023-06-26</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-page&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">n-pagination</span> <span class="attr">v-model:page</span>=<span class="string">&quot;page&quot;</span> <span class="attr">size</span>=<span class="string">&quot;large&quot;</span> <span class="attr">:page-count</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> #<span class="attr">prev</span>&gt;</span></span><br><span class="line">                  上一页</span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> #<span class="attr">next</span>&gt;</span></span><br><span class="line">                  下一页</span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">n-pagination</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 右边侧边栏 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-right&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 站长卡片 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-author-info&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 头像 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-image</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;245&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">src</span>=<span class="string">&quot;/src/assets/images/avatar.svg&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 站长信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;author-info&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 文字和图标 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;space-between&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 左边的文字 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">vertical</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px &quot;</span>&gt;</span>This0<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 12px&quot;</span>&gt;</span>生活明朗，万物可期<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 微信 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">vertical</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 25px;margin-left: 23px&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">n-image</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">width</span>=<span class="string">&quot;25&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">src</span>=<span class="string">&quot;/src/assets/images/icon/wx.svg&quot;</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- github --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">vertical</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 25px&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">n-image</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">width</span>=<span class="string">&quot;25&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">src</span>=<span class="string">&quot;/src/assets/images/icon/github.svg&quot;</span>/&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 文章统计 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-article-count&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="comment">&lt;!-- 单个统计卡片 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 1.时间 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  2023-06-26</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 2.篇数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  3篇</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 1.时间 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  2023-06-26</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 2.篇数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  3篇</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 1.时间 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  2023-06-26</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 2.篇数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  3篇</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 1.时间 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  2023-06-26</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 2.篇数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  3篇</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 1.时间 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  2023-06-26</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 2.篇数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  3篇</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 1.时间 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  2023-06-26</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 2.篇数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  3篇</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 1.时间 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  2023-06-26</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 2.篇数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  3篇</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;count-article&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 1.时间 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  2023-06-26</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 2.篇数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                  3篇</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 文章标签 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-article-tag&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">style</span>=<span class="string">&quot;background-color: #F7F7F5; border: #D3C2A8 1px solid; padding: 5px;border-radius: 10px;margin-right: 10px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-badge</span> <span class="attr">:value</span>=<span class="string">&quot;520&quot;</span> <span class="attr">:offset</span>=<span class="string">&quot;[6, -8]&quot;</span>&gt;</span></span><br><span class="line">                  Java</span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-badge</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">&lt;!-- 全站统计 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-site-count&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-flex</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-icon</span> <span class="attr">size</span>=<span class="string">&quot;25&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-wenzhang&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-icon</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 16px;font-weight: bold&quot;</span>&gt;</span>文章总数<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 16px;font-weight: bold;margin-left: 50px&quot;</span>&gt;</span>5645<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-flex</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-icon</span> <span class="attr">size</span>=<span class="string">&quot;25&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-fengche&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-icon</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 16px;font-weight: bold&quot;</span>&gt;</span>建站天数<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 16px;font-weight: bold;margin-left: 50px&quot;</span>&gt;</span>5645<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-flex</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-icon</span> <span class="attr">size</span>=<span class="string">&quot;25&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-liuyanban&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">n-icon</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 16px;font-weight: bold&quot;</span>&gt;</span>全站字数<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 16px;font-weight: bold;margin-left: 50px&quot;</span>&gt;</span>5645<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 页脚 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;space-between&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 页脚导航 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>主题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>服务<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>协议<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>友链<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>服务<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>协议<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>友链<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>服务<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>主题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>协议<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>友链<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>协议<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>主题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>服务<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>友链<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer-group&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>友链<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>主题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>服务<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>协议<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 品牌图标 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shields&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://this0.com/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;主题采用This0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/src/assets/images/icon/Theme-This0.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shields&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://shields.io/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;框架采用vitepress&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">              <span class="attr">src</span>=<span class="string">&quot;/src/assets/images/icon/Frame-Vitepress.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shields&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/src/assets/images/icon/Copyright-BY--NC--SA_4.0.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shields&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;使用github托管代码&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/src/assets/images/icon/Source-Github.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shields&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://shields.io/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;徽标使用shields制作&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">              <span class="attr">src</span>=<span class="string">&quot;/src/assets/images/icon/Icon-Shields.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 备案号 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">n-flex</span> <span class="attr">justify</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shields&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://this0.com/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;主题采用This0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/src/assets/images/icon/蜀ICP备-2023013130号.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">n-flex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;defineComponent, h, ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;<span class="title class_">NIcon</span>&#125; <span class="keyword">from</span> <span class="string">&quot;naive-ui&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;<span class="title class_">RouterLink</span>&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">PersonOutline</span> <span class="keyword">as</span> <span class="title class_">PersonIcon</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Book</span>, <span class="title class_">BuildSharp</span>, <span class="title class_">PlanetSharp</span>, <span class="title class_">Bulb</span></span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">from</span> <span class="string">&quot;@vicons/ionicons5&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 用来渲染图标的函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">renderIcon</span>(<span class="params">icon</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="title class_">NIcon</span>, <span class="literal">null</span>, &#123;<span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="title function_">h</span>(icon)&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> menuOptions = [</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">label</span>: <span class="string">&quot;文章&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">key</span>: <span class="string">&quot;dance-dance-dance&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">icon</span>: <span class="title function_">renderIcon</span>(<span class="title class_">Book</span>),</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">children</span>: [</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">label</span>: <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="title class_">RouterLink</span>, &#123;<span class="attr">to</span>: <span class="string">&quot;/category-list&quot;</span>&#125;, &#123;<span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="string">&quot;羊男&quot;</span>&#125;),</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key</span>: <span class="string">&quot;narrator&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">icon</span>: <span class="title function_">renderIcon</span>(<span class="title class_">PersonIcon</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">label</span>: <span class="string">&quot;羊男&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key</span>: <span class="string">&quot;sheep-man&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">icon</span>: <span class="title function_">renderIcon</span>(<span class="title class_">PersonIcon</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">label</span>: <span class="string">&quot;工具&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">key</span>: <span class="string">&quot;dance-dance-dance&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">icon</span>: <span class="title function_">renderIcon</span>(<span class="title class_">BuildSharp</span>),</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">children</span>: [</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">label</span>: <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="title class_">RouterLink</span>, &#123;<span class="attr">to</span>: <span class="string">&quot;/category-list&quot;</span>&#125;, &#123;<span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="string">&quot;羊男&quot;</span>&#125;),</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key</span>: <span class="string">&quot;narrator&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">icon</span>: <span class="title function_">renderIcon</span>(<span class="title class_">PersonIcon</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">label</span>: <span class="string">&quot;羊男&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key</span>: <span class="string">&quot;sheep-man&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">icon</span>: <span class="title function_">renderIcon</span>(<span class="title class_">PersonIcon</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">label</span>: <span class="string">&quot;站点&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">key</span>: <span class="string">&quot;dance-dance-dance&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">icon</span>: <span class="title function_">renderIcon</span>(<span class="title class_">PlanetSharp</span>),</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">children</span>: [</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">label</span>: <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="title class_">RouterLink</span>, &#123;<span class="attr">to</span>: <span class="string">&quot;/category-list&quot;</span>&#125;, &#123;<span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="string">&quot;羊男&quot;</span>&#125;),</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key</span>: <span class="string">&quot;narrator&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">icon</span>: <span class="title function_">renderIcon</span>(<span class="title class_">PersonIcon</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">label</span>: <span class="string">&quot;羊男&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key</span>: <span class="string">&quot;sheep-man&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">icon</span>: <span class="title function_">renderIcon</span>(<span class="title class_">PersonIcon</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">label</span>: <span class="string">&quot;关于&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">key</span>: <span class="string">&quot;dance-dance-dance&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">icon</span>: <span class="title function_">renderIcon</span>(<span class="title class_">Bulb</span>),</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">children</span>: [</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">label</span>: <span class="function">() =&gt;</span> <span class="title function_">h</span>(<span class="title class_">RouterLink</span>, &#123;<span class="attr">to</span>: <span class="string">&quot;/category-list&quot;</span>&#125;, &#123;<span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="string">&quot;羊男&quot;</span>&#125;),</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key</span>: <span class="string">&quot;narrator&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">icon</span>: <span class="title function_">renderIcon</span>(<span class="title class_">PersonIcon</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">label</span>: <span class="string">&quot;羊男&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">key</span>: <span class="string">&quot;sheep-man&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">icon</span>: <span class="title function_">renderIcon</span>(<span class="title class_">PersonIcon</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 菜单</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">activeKey</span>: <span class="title function_">ref</span>(<span class="literal">null</span>),</span></span><br><span class="line"><span class="language-javascript">      menuOptions</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>style.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#EDECEA</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 版心 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1190px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*阿里图标库*/</span></span><br><span class="line"><span class="selector-class">.icon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">    fill: currentColor;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*顶部导航div*/</span></span><br><span class="line"><span class="selector-class">.topbar-nav</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*菜单字体*/</span></span><br><span class="line"><span class="selector-class">.n-menu-item</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.topbar-message</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1170px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F7F7F5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.topbar-banner</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1170px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">280px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;./assets/images/banner.png&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-category</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">905px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F7F7F5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n-button</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-article</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">280px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:  <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F1E5D9</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.articlebg</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;./assets/images/default-cover.jpg&#x27;</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-title</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: large;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="comment">/*background-color: aqua;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-abstract</span> &#123;</span><br><span class="line">    <span class="comment">/*background-color: antiquewhite;*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-publish</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="comment">/*background-color: beige;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-page</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">905px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="comment">/*background-color: yellowgreen;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container-left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">925px</span>;</span><br><span class="line">    <span class="comment">/*background-color: aqua;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container-right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">245px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1182px</span>;</span><br><span class="line">    <span class="comment">/*background-color: aqua;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.author-info</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container-author-info</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F7F7F5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-article-count</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">290px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">225px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F7F7F5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.count-article</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">86px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">#D3C2A8</span> <span class="number">1px</span> solid;</span><br><span class="line">    <span class="comment">/*margin-top: 0px;*/</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">background-color</span>:  <span class="number">#F7F7F5</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">9px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-article-tag</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">330px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">225px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F7F7F5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.n-badge</span> <span class="selector-class">.n-badge-sup</span>&#123;</span><br><span class="line">    <span class="attr">--n-color</span>:<span class="number">#D3C2A8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-site-count</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">98px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">205px</span>;</span><br><span class="line">    <span class="comment">/*padding: 10px;*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F7F7F5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="comment">/*height: 200px;*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">    <span class="comment">/*background-color: #b54a4a;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer-group</span> &#123;</span><br><span class="line">    <span class="comment">/*margin-top: 130px;*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="comment">/*background-color: yellow;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.shields</span>&#123;</span><br><span class="line">    <span class="comment">/*background-color: #467c6a;*/</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="comment">/*padding: 20px;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>nvm安装和使用(Linux环境)</title>
    <url>/articles/c2bdb00f.html</url>
    <content><![CDATA[<h3 id="1-nvm官网"><a href="#1-nvm官网" class="headerlink" title="1. nvm官网"></a>1. nvm官网</h3><p>nvm github地址： <a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p>
<h3 id="2-下载并解压nvm到自定义安装目录"><a href="#2-下载并解压nvm到自定义安装目录" class="headerlink" title="2. 下载并解压nvm到自定义安装目录"></a>2. 下载并解压nvm到自定义安装目录</h3><h4 id="1-创建nvm安装目录"><a href="#1-创建nvm安装目录" class="headerlink" title="1 创建nvm安装目录"></a>1 创建nvm安装目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /opt/.nvm</span><br></pre></td></tr></table></figure>

<h4 id="2-下载-以0-39-7版本为例"><a href="#2-下载-以0-39-7版本为例" class="headerlink" title="2 下载(以0.39.7版本为例)"></a>2 下载(以0.39.7版本为例)</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/nvm-sh/</span>nvm<span class="regexp">/archive/</span>refs<span class="regexp">/tags/</span>v0.<span class="number">39.7</span>.tar.gz	</span><br></pre></td></tr></table></figure>

<h4 id="3-解压文件到-opt-nvm"><a href="#3-解压文件到-opt-nvm" class="headerlink" title="3 解压文件到 &#x2F;opt&#x2F;.nvm"></a>3 解压文件到 &#x2F;opt&#x2F;.nvm</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> tar -zxvf v0.<span class="number">39</span>.<span class="number">7</span>.tar.gz -C /opt/.nvm</span><br></pre></td></tr></table></figure>

<h4 id="4-确保权限"><a href="#4-确保权限" class="headerlink" title="4 确保权限"></a>4 确保权限</h4><p>$USER是用户名，使用whomai查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /opt/.nvm</span><br></pre></td></tr></table></figure>

<h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h3><h4 id="1-创建自定义配置文件-可选"><a href="#1-创建自定义配置文件-可选" class="headerlink" title="1 创建自定义配置文件(可选)"></a>1 创建自定义配置文件(可选)</h4><p>我的环境变量配置文件，是在&#x2F;etc&#x2F;profile.d&#x2F;目录下，新建了一个配置文件my_env.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/profile.d</span><br><span class="line"><span class="built_in">touch</span> my_env.sh</span><br></pre></td></tr></table></figure>

<p>不建议直接修改配置文件来添加环境变量，这里使用将nvm配置文件my_env.sh包含到~&#x2F;.zshrc的方法实现</p>
<p>（！！我使用的zsh,不是bash！！,所以需要多这一步，如果使用bash不需要这步操作）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>在~&#x2F;.zshrc的末尾，添加如下语句：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nvm环境变量</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/profile.d/my_env.sh ]; <span class="keyword">then</span></span><br><span class="line">    . /etc/profile.d/my_env.sh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="2-nvm环境变量配置"><a href="#2-nvm环境变量配置" class="headerlink" title="2 nvm环境变量配置"></a>2 nvm环境变量配置</h4><p>如果使用的是默认终端bash，配置文件是 ~&#x2F;.bashrc，而不是上一步自己创建的my_env.sh，下同</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/<span class="keyword">profile</span>.d/my_env.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p>添加以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;/opt/.nvm/nvm-0.39.7&quot;</span>  </span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure>

<h3 id="4-使环境配置生效"><a href="#4-使环境配置生效" class="headerlink" title="4. 使环境配置生效"></a>4. 使环境配置生效</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile.d/my_env.sh    </span><br></pre></td></tr></table></figure>

<h3 id="5-验证nvm是否安装成功"><a href="#5-验证nvm是否安装成功" class="headerlink" title="5. 验证nvm是否安装成功"></a>5. 验证nvm是否安装成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm -v</span><br></pre></td></tr></table></figure>

<h3 id="6-nvm常用命令"><a href="#6-nvm常用命令" class="headerlink" title="6. nvm常用命令"></a>6. nvm常用命令</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nvm</span> install <span class="number">16</span>.<span class="number">14</span>.<span class="number">0</span>			// 安装</span><br><span class="line"><span class="attribute">nvm</span> uninstall <span class="number">16</span>.<span class="number">14</span>.<span class="number">0</span>     	// 卸载</span><br><span class="line"><span class="attribute">nvm</span> use <span class="number">16</span>.<span class="number">14</span>.<span class="number">0</span>           	// 切换 </span><br><span class="line"><span class="attribute">nvm</span> ls                   	// 查看目前已安装的 node 及当前所使用的 node</span><br><span class="line"><span class="attribute">nvm</span> ls-remote            	// 查看目前线上所能安装的所有 node 版本</span><br></pre></td></tr></table></figure>

<h3 id="7-安装node，自动安装npm包管理工具"><a href="#7-安装node，自动安装npm包管理工具" class="headerlink" title="7. 安装node，自动安装npm包管理工具"></a>7. 安装node，自动安装npm包管理工具</h3><p>略</p>
<h3 id="8-换源"><a href="#8-换源" class="headerlink" title="8. 换源"></a>8. 换源</h3><p>换成国内淘宝源</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npmmirror.com</span></span><br></pre></td></tr></table></figure>

<h3 id="9-配置全局依赖存储目录"><a href="#9-配置全局依赖存储目录" class="headerlink" title="9. 配置全局依赖存储目录"></a>9. 配置全局依赖存储目录</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> prefix /home/<span class="comment">ypt</span>/SDE/<span class="comment">GlobalNodeModules</span></span><br></pre></td></tr></table></figure>

<p>查看是否生效</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm<span class="built_in"> config </span><span class="built_in">get</span> prefix</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/articles/0.html</url>
    <content><![CDATA[<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">title: 服务器的SSH连接端口更改</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - SSH</span><br><span class="line">categories:</span><br><span class="line">  - 服务器</span><br><span class="line">description: 两步改ssh连接端口</span><br><span class="line">abbrlink: </span><br><span class="line">date: 2023<span class="string">-10</span><span class="string">-26</span> 05:36:00</span><br><span class="line">update: 2024<span class="string">-10</span><span class="string">-31</span> 05:36:00</span><br></pre></td></tr></table></figure>

<h2 id="两步改ssh连接端口"><a href="#两步改ssh连接端口" class="headerlink" title="两步改ssh连接端口"></a>两步改ssh连接端口</h2><h3 id="1-编辑ssh配置文件，自定义连接端口"><a href="#1-编辑ssh配置文件，自定义连接端口" class="headerlink" title="1 编辑ssh配置文件，自定义连接端口"></a>1 编辑ssh配置文件，自定义连接端口</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>ssh/sshd_config	</span><br></pre></td></tr></table></figure>

<p>找到port那一行，默认是22端口</p>
<p><img src="https://blog-resources.this0.com/image/202403260259388.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240326_025915"></p>
<p>比如，想改成8081端口，就取消注释，改端口数字</p>
<p><img src="https://blog-resources.this0.com/image/202403260302239.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240326_030208"></p>
<h3 id="2-重启服务生效"><a href="#2-重启服务生效" class="headerlink" title="2 重启服务生效"></a>2 重启服务生效</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">restart</span> sshd.service</span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><code>防火墙端口自行放行!!！</code></p>
<p>站内有防火墙配置文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=更改的端口/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启防火墙</span></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>服务器防火墙篇</title>
    <url>/articles/2c3f69b0.html</url>
    <content><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h3><p>首先要明白一个概念，服务器的防火墙分内置防火墙和外置防火墙。</p>
<h4 id="1-外置防火墙"><a href="#1-外置防火墙" class="headerlink" title="1 外置防火墙"></a>1 外置防火墙</h4><p>有的厂商叫它安全组，有的它叫防火墙。比如在腾讯云的控制台，叫防火墙，在华为云控制台里面就叫安全组。</p>
<p>是在云厂商层面的防火墙，<code>在云厂商的控制台进行配置</code></p>
<h4 id="2-内置防火墙"><a href="#2-内置防火墙" class="headerlink" title="2 内置防火墙"></a>2 内置防火墙</h4><p><code>是在服务器层面的防火墙，在服务器内部配置</code></p>
<h3 id="2-外置防火墙"><a href="#2-外置防火墙" class="headerlink" title="2 外置防火墙"></a>2 外置防火墙</h3><p>内置防火墙和外置防火墙默认都是关闭状态的，需要使用的端口，需要自己打开。</p>
<h4 id="1-外置防火墙简介"><a href="#1-外置防火墙简介" class="headerlink" title="1 外置防火墙简介"></a>1 外置防火墙简介</h4><p>以默认配置为例，这些被允许的端口，才会被放行到服务器，才有机会到达服务器的防火墙。</p>
<p>比如，如果外置防火墙没放行8080端口，即使在服务器内部防火墙中，开启了8080端口的访问，但是云厂商层面——外置防火墙不允许放行，外部就无法通过ip:8080访问到。</p>
<p><img src="https://blog-resources.this0.com/image/202403251550772.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240325_154805"></p>
<h4 id="2-放行外置防火墙端口"><a href="#2-放行外置防火墙端口" class="headerlink" title="2 放行外置防火墙端口"></a>2 放行外置防火墙端口</h4><p>依次点击：配置规则——添加规则（入方向）——&lt;填写端口&gt;——确定</p>
<p>即可完成添加</p>
<p><img src="https://blog-resources.this0.com/image/202403251600441.png?x-oss-process=style/this0-blog" alt="屏幕截图_20240325_155945"></p>
<p>出方向默认全部放行的，不用管</p>
<h3 id="3-内置防火墙"><a href="#3-内置防火墙" class="headerlink" title="3 内置防火墙"></a>3 内置防火墙</h3><p>配置内置防火墙当然需要先打开防火墙，也可以直接关闭内置防火墙，让所有端口都可通过，不过非常不安全，外置防火墙也可以使用关闭外置防火墙的方法实现放行，同样不推荐！</p>
<h4 id="1-安装防火墙"><a href="#1-安装防火墙" class="headerlink" title="1 安装防火墙"></a>1 安装防火墙</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> firewalld</span><br></pre></td></tr></table></figure>

<h4 id="检查防火墙状态"><a href="#检查防火墙状态" class="headerlink" title="检查防火墙状态"></a>检查防火墙状态</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd <span class="comment">--state</span></span><br></pre></td></tr></table></figure>

<p>如果防火墙处于活动状态，您将看到“running”（正在运行）的输出;</p>
<p>否则，您将看到“not running”（未运行）的输出。</p>
<h4 id="2-开启防火墙"><a href="#2-开启防火墙" class="headerlink" title="2 开启防火墙"></a>2 开启防火墙</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="literal">start</span> firewalld</span><br></pre></td></tr></table></figure>

<h4 id="3-设置防火墙开机自启"><a href="#3-设置防火墙开机自启" class="headerlink" title="3 设置防火墙开机自启"></a>3 设置防火墙开机自启</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure>

<h4 id="4-添加防火墙规则"><a href="#4-添加防火墙规则" class="headerlink" title="4.添加防火墙规则"></a>4.添加防火墙规则</h4><h5 id="1-开启某一个端口"><a href="#1-开启某一个端口" class="headerlink" title="1 开启某一个端口"></a>1 开启某一个端口</h5><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd <span class="params">--zone=public</span> <span class="params">--add-port=</span>端口号<span class="string">/tcp</span> <span class="params">--permanent</span></span><br></pre></td></tr></table></figure>

<h5 id="2-关闭某一个端口"><a href="#2-关闭某一个端口" class="headerlink" title="2 关闭某一个端口"></a>2 关闭某一个端口</h5><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd <span class="params">--zone=public</span> <span class="params">--remove-port=</span>端口号<span class="string">/tcp</span> <span class="params">--permanent</span></span><br></pre></td></tr></table></figure>

<h5 id="3-重启防火墙，使端口配置生效"><a href="#3-重启防火墙，使端口配置生效" class="headerlink" title="3 重启防火墙，使端口配置生效"></a>3 重启防火墙，使端口配置生效</h5><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd <span class="comment">--reload</span></span><br></pre></td></tr></table></figure>

<h5 id="4-查看开放的端口"><a href="#4-查看开放的端口" class="headerlink" title="4.查看开放的端口"></a>4.查看开放的端口</h5><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">--</span><span class="comment">list</span><span class="literal">-</span><span class="comment">ports</span> <span class="literal">--</span><span class="comment">zone=public</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>Java语言概述</title>
    <url>/articles/7b76819b.html</url>
    <content><![CDATA[<h3 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h3><h4 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h4><ul>
<li><input disabled="" type="checkbox"> 了解JavaSE课程体系</li>
<li><input disabled="" type="checkbox"> 了解计算机语言的发展史</li>
<li><input disabled="" type="checkbox"> Java语言的了解</li>
<li><input disabled="" type="checkbox"> 理解Java语言的跨平台实现原理</li>
<li><input disabled="" type="checkbox"> 理解JDK&#x2F;JRE&#x2F;JVM的组成和作用</li>
<li><input disabled="" type="checkbox"> 能够配置环境变量JAVA_HOME（会参照笔记配置）</li>
<li><input disabled="" type="checkbox"> 能够编写HelloWorld程序编译并执行</li>
<li><input disabled="" type="checkbox"> 掌握注释</li>
<li><input disabled="" type="checkbox"> 掌握标识符</li>
<li><input disabled="" type="checkbox"> 掌握Java数据类型的划分</li>
<li><input disabled="" type="checkbox"> 掌握常量和变量</li>
</ul>
<h4 id="1-Java的特点与跨平台原理"><a href="#1-Java的特点与跨平台原理" class="headerlink" title="1. Java的特点与跨平台原理"></a>1. Java的特点与跨平台原理</h4><h5 id="1-面向对象性："><a href="#1-面向对象性：" class="headerlink" title="1.面向对象性："></a>1.面向对象性：</h5><p>两个要素：类、对象</p>
<p>三个特征：封装、继承、多态</p>
<h5 id="2-健壮性："><a href="#2-健壮性：" class="headerlink" title="2. 健壮性："></a>2. 健壮性：</h5><p>① 去除了C语言中的指针 </p>
<p>②自动的垃圾回收机制 –&gt;仍然会出现内存溢出、内存泄漏</p>
<h5 id="3-跨平台型："><a href="#3-跨平台型：" class="headerlink" title="3. 跨平台型："></a>3. 跨平台型：</h5><p>write once,run anywhere:一次编译，到处运行</p>
<p>Java的跨平台：指的是一处编写到处运行。</p>
<p>Java如何实现的跨平台，借助JVM实现，不同的平台只要有JVM就可以运行Java程序。</p>
<h4 id="2-JVM-JRE-JDK关系"><a href="#2-JVM-JRE-JDK关系" class="headerlink" title="2. JVM-JRE-JDK关系"></a>2. JVM-JRE-JDK关系</h4><p><strong>JVM：</strong>Java Virtual Machine — Java虚拟机<br><strong>JRE：</strong>Java Runtime Environment — Java运行环境&#x3D;JVM+核心类库<br>**JDK: ** Java Development Kit— Java开发工具集&#x3D;JRE+开发小工具</p>
<h4 id="3-JDK的安装与环境变量配置"><a href="#3-JDK的安装与环境变量配置" class="headerlink" title="3. JDK的安装与环境变量配置"></a>3. JDK的安装与环境变量配置</h4><p>示例中的安装路径:D:\SDE_YPT\Java\jdk1.8.0_201<br><img src="https://blog-resources.this0.com/image/202403301600917.png?x-oss-process=style/this0-blog" alt="image-20231109141639401"></p>
<h5 id="1-配置JAVA-HOME"><a href="#1-配置JAVA-HOME" class="headerlink" title="1. 配置JAVA_HOME"></a>1. 配置JAVA_HOME</h5><blockquote>
<p>系统变量用来指向一个路径，这里用JAVA_HOME指向jdk的安装路径</p>
</blockquote>
<p><strong>变量名:</strong> JAVA_HOME<br><strong>值:</strong> D:\SDK_ypt\Oracle\Java\jdk1.8.0_201<br><img src="https://blog-resources.this0.com/image/202403301600212.png?x-oss-process=style/this0-blog" alt="image-20231109142134968"></p>
<blockquote>
<p>Path路径下的应用，在任何路径下都能调用，将jdk的命令放到Path路径下，那么在任何目录下，都能够调用jdk命令</p>
</blockquote>
<p>java命令都在安装路径的bin文件下，比如常用的java，javac</p>
<p><img src="https://blog-resources.this0.com/image/202403301600914.png?x-oss-process=style/this0-blog" alt="image-20231109142351822"></p>
<h5 id="2-配置Path"><a href="#2-配置Path" class="headerlink" title="2. 配置Path"></a>2. 配置Path</h5><p><strong>变量名：</strong>Path<br><strong>变量值：</strong>（注意，是新增！）%JAVA_HOME%\bin<br><img src="https://blog-resources.this0.com/image/202403301600907.png?x-oss-process=style/this0-blog" alt="image-20231109142455558"></p>
<h4 id="4-编写第一个Java程序"><a href="#4-编写第一个Java程序" class="headerlink" title="4. 编写第一个Java程序"></a>4. 编写第一个Java程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-Java开发步骤即代码编写相关注意问题"><a href="#5-Java开发步骤即代码编写相关注意问题" class="headerlink" title="5. Java开发步骤即代码编写相关注意问题"></a>5. Java开发步骤即代码编写相关注意问题</h4><p>编译: javac<br>C:\Users\yupen&gt;javac C:\Users\yupen\Desktop\HelloWorld.java<br>运行: java<br>C:\Users\yupen\Desktop&gt;java HelloWorld</p>
<h5 id="1-开发Java程序的步骤：3步"><a href="#1-开发Java程序的步骤：3步" class="headerlink" title="1. 开发Java程序的步骤：3步"></a>1. 开发Java程序的步骤：3步</h5><p><strong>编写：</strong>我们将编写的java代码保存在以”.java”结尾的源文件中<br><strong>编译：</strong>使用javac.exe命令编译我们的java源文件，产生后缀为.class的字节码文件。格式：javac 源文件名.java<br><strong>运行：</strong>使用java.exe命令解释运行我们的字节码文件。 格式：java 类名</p>
<h5 id="2-第一个程序总结"><a href="#2-第一个程序总结" class="headerlink" title="2. 第一个程序总结"></a>2. 第一个程序总结</h5><ul>
<li>Java源文件以“java”为扩展名。源文件的基本组成部分是类（class），如 本例中的HelloWorld类。 </li>
<li>Java应用程序的执行入口是main()方法。它有固定的书写格式：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Java语言严格区分大小写。</li>
<li>Java方法由一条条语句构成，每个语句以“;”结束。</li>
<li>大括号都是成对出现的，缺一不可。</li>
<li>一个源文件中最多只能有一个public类。其它类的个数不限，如果源文件包含 一个public类，则文件名必须按该类名命名。</li>
</ul>
<h4 id="6-注释"><a href="#6-注释" class="headerlink" title="6. 注释"></a>6. 注释</h4><blockquote>
<p>注释：一些让程序员开的说明性的文字。不会影响程序的运行。</p>
</blockquote>
<p>   单行注释：&#x2F;&#x2F;注释内容<br>   多行注释：&#x2F;<em>注释内容 <em>&#x2F;<br>   文档注释：&#x2F;</em></em> 注释内容 *&#x2F;</p>
<h4 id="7-关键词"><a href="#7-关键词" class="headerlink" title="7. 关键词"></a>7. 关键词</h4><p><strong>定义：</strong>被Java语言赋予了特殊含义，用做专门用途的字符串（单词），眼熟就好</p>
<p><strong>特点：</strong>关键字中所有字母都为小写<br>           用于定义数据类型的关键字<br><strong>class interface enum byte short int long float double char boolean void</strong><br>用于定义流程控制的关键字<br><strong>if else switch case default while do for break continue return</strong><br>用于定义访问权限修饰符的关键字<br><strong>private protected public</strong><br>用于定义类，函数，变量修饰符的关键字<br><strong>abstract final static synchronized</strong><br>用于定义类与类之间关系的关键字<br><strong>extends implements</strong><br>用于定义建立实例及引用实例，判断实例的关键字<br><strong>new this super instanceof</strong><br>用于异常处理的关键字<br><strong>try catch finally throw throws</strong><br>用于包的关键字<br><strong>package import</strong><br>其他修饰符关键字<br><strong>native strictfp transient volatile assert</strong><br>用于定义数据类型值的字面值<br><strong>true false null</strong></p>
<h4 id="8-标识符的命名规则与规范"><a href="#8-标识符的命名规则与规范" class="headerlink" title="8. 标识符的命名规则与规范"></a>8. 标识符的命名规则与规范</h4><blockquote>
<p>定义：凡是自己可以起名字的地方都叫标识符。</p>
</blockquote>
<p><strong>规则必须遵守，规范建议遵守</strong></p>
<p>涉及到的结构：</p>
<p>包名、类名、接口名、变量名、方法名、常量名</p>
<p><strong>定义合法标识符规则：</strong></p>
<p>1.由26个英文字母大小写，0-9 ，_或 $ 组成</p>
<p>2.数字不可以开头。</p>
<p>3.不可以使用关键字和保留字，但能包含关键字和保留字。</p>
<p>4.Java中严格区分大小写，长度无限制。</p>
<p><strong>标识符的命名规范</strong><br>1.包名：多单词组成时所有字母都小写：xxxyyyzzz<br>2.类名、接口名：多单词组成时，<strong>所有单词的首字母大写</strong>：XxxYyyZzz<br>3.变量名、方法名：多单词组成时，<strong>第一个单词首字母小写，第二个单词开始每个单词首字母大写</strong>：xxxYyyZzz<br>4.常量名：所有字母都大写。<strong>多单词时每个单词用下划线连接</strong>：XXX_YYY_ZZZ<br><strong>注意1</strong>：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。<br><strong>注意2</strong>：<code>java采用unicode字符集，是utf-8的一种实现方式</code>，因此标识符也可以使用汉字声明，但是不建议使用。</p>
<h4 id="9-字面常量"><a href="#9-字面常量" class="headerlink" title="9. 字面常量"></a>9. 字面常量</h4><blockquote>
<p>程序运行过程中不可改变的量</p>
</blockquote>
<ol>
<li>自定义常量，使用关键字final（后面再讲）</li>
<li>字面量，字面值（literal）</li>
</ol>
<table>
<thead>
<tr>
<th>字面量分类</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>字符串字面量</td>
<td>“HelloWorld”</td>
</tr>
<tr>
<td>整数字面量</td>
<td>12，-23</td>
</tr>
<tr>
<td>浮点字面量</td>
<td>12.34</td>
</tr>
<tr>
<td>字符字面量</td>
<td>‘a’，’A’，’0’，’好’</td>
</tr>
<tr>
<td>布尔字面量</td>
<td>true，false</td>
</tr>
<tr>
<td>空值字面量</td>
<td>null</td>
</tr>
</tbody></table>
<h4 id="10-变量"><a href="#10-变量" class="headerlink" title="10. 变量"></a>10. 变量</h4><h5 id="1-变量的理解："><a href="#1-变量的理解：" class="headerlink" title="1. 变量的理解："></a>1. 变量的理解：</h5><ul>
<li><p>内存中的一个存储区域</p>
</li>
<li><p>该区域的数据可以在同一类型范围内不断变化</p>
</li>
<li><p>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值</p>
</li>
<li><p><strong>作用:用于在内存中保存数据</strong></p>
</li>
</ul>
<h5 id="2-声明与赋值"><a href="#2-声明与赋值" class="headerlink" title="2. 声明与赋值"></a>2. 声明与赋值</h5><ol>
<li><p><strong>先声明再赋值</strong><br>数据类型 变量名；<br>变量名&#x3D; 变量值；<br>例如：int var;</p>
<p>​            var &#x3D;1109;</p>
</li>
<li><p><strong>声明变量的同时并赋值</strong><br>数据类型 变量名 &#x3D; 变量值；</p>
<p>例如：____</p>
</li>
<li><p><strong>同时声明多个同类型变量</strong><br>数据类型 变量1，变量2，变量3，…;<br>例如：____</p>
</li>
</ol>
<h5 id="3-变量的使用注意事项："><a href="#3-变量的使用注意事项：" class="headerlink" title="3.变量的使用注意事项："></a>3.变量的使用注意事项：</h5><ol>
<li>变量必须<strong>先声明才能使用</strong>,否则报错：错误: 找不到符号</li>
<li>变量必须<strong>先初始化值</strong>才能使用,否则，错误: 可能尚未初始化变量age</li>
<li>变量有作用域，其<strong>作用域为声明变量所在的大括号内</strong></li>
<li>同一个作用域内，不能声明同名的变量</li>
</ol>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制语句</title>
    <url>/articles/70591cd5.html</url>
    <content><![CDATA[<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul>
<li><input disabled="" type="checkbox"> 逻辑运算符</li>
<li><input disabled="" type="checkbox"> 三元运算符</li>
<li><input disabled="" type="checkbox"> 位运算符</li>
<li><input disabled="" type="checkbox"> 掌握键盘输入各种数据类型的值</li>
<li><input disabled="" type="checkbox"> 理解if语句的格式和执行流程</li>
<li><input disabled="" type="checkbox"> 理解if…else语句的格式和执行流程</li>
<li><input disabled="" type="checkbox"> 理解if…else if语句的格式和执行流程</li>
<li><input disabled="" type="checkbox"> 了解if语句和三元运算符互换</li>
<li><input disabled="" type="checkbox"> 了解Math.random()和Math.sqrt(x)等的使用</li>
</ul>
<p><strong>流程控制语句分类：</strong></p>
<ol>
<li>顺序结构：从上而下顺序执行每一行代码</li>
<li>分支结构：或选择结构，根据条件选择执行不同的代码</li>
<li>循环结构：重复执行某一些代码</li>
</ol>
<h3 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1. 顺序结构"></a>1. 顺序结构</h3><blockquote>
<p>任何编程语言中最常见的程序结构就是顺序结构。顺序结构就是程序从上到下逐行地执行，中间没有任何判断和跳转。如果main方法的多行代码之间没有任何流程控制，则程序总是从上向下依次执行，排在前面的代码先执行，排在后面的代码后执行。</p>
</blockquote>
<h3 id="2-if-分支结构"><a href="#2-if-分支结构" class="headerlink" title="2. if 分支结构"></a>2. if 分支结构</h3><h4 id="1-if语句结构一："><a href="#1-if语句结构一：" class="headerlink" title="1. if语句结构一："></a>1. if语句结构一：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    执行表达式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-if语句结构二："><a href="#2-if语句结构二：" class="headerlink" title="2. if语句结构二："></a>2. if语句结构二：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    执行表达式<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    执行表达式<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-if语句结构三："><a href="#3-if语句结构三：" class="headerlink" title="3. if语句结构三："></a>3. if语句结构三：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    执行表达式<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    执行表达式<span class="number">2</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    执行表达式<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        执行表达式n</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-if-else嵌套"><a href="#4-if-else嵌套" class="headerlink" title="4. if..else嵌套"></a>4. if..else嵌套</h4><p>在if的语句块中，或者是在else语句块中，又包含了另外一个条件判断（可以是单分支、双分支、多分支）</p>
<p><strong>执行的特点：</strong><br>（1）如果是嵌套在if语句块中的<br>只有当外部的if条件满足，才会去判断内部的条件<br>（2）如果是嵌套在else语句块中的<br>只有当外部的if条件不满足，进入else后，才会去判断内部的条件</p>
<p><strong>说明：</strong><br><strong>①else 结构是可选的。</strong><br>②针对于条件表达式：<br>如果多个条件表达式之间是“互斥”关系(或没有交集的关系),哪个判断和执行语句声明在上面还是下面，无所谓。<br>如果多个条件表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面。<br>如果多个条件表达式之间有包含的关系，<strong>通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了。</strong><br>③if-else结构是可以相互嵌套的。</p>
<p><code>④如果if-else结构中的执行语句只有一行时，对应的一对&#123;&#125;可以省略的。但是，不建议大家省略。</code></p>
<h3 id="3-switch-case-结构"><a href="#3-switch-case-结构" class="headerlink" title="3. switch-case 结构"></a>3. switch-case 结构</h3><h4 id="1-语法格式"><a href="#1-语法格式" class="headerlink" title="1. 语法格式"></a>1. 语法格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">        执行语句<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//break;</span></span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">        执行语句<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//break;</span></span><br><span class="line">        ...</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        执行语句n;</span><br><span class="line">        <span class="comment">//break;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-说明："><a href="#2-说明：" class="headerlink" title="2. 说明："></a><strong>2. 说明：</strong></h4><p>① 根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。</p>
<table><tr><td bgcolor=Pink>当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构末尾结束为止。</td></tr></table>

<p>② break,可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构</p>
<table><tr><td bgcolor=Pink>③ witch结构中的表达式，只能是如下的6种数据类型之一：
byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增)
    </td></tr></table>


<table><tr><td bgcolor=Pink>④ case 之后只能声明常量。不能声明范围。 </td></tr></table>

<p>⑤ break关键字是可选的。<br>⑥ default:表示一旦执行到此关键字，就跳出switch-case结构,相当于if-else结构中的else.<br>⑦ default结构是可选的，而且位置是灵活的。<br>⑧ 如果switch-case结构中的多个case的执行语句相同，则可以考虑进行合并。<br>⑨ break在switch-case中是可选的</p>
<h3 id="4-for-循环结构"><a href="#4-for-循环结构" class="headerlink" title="4. for 循环结构"></a>4. for 循环结构</h3><h4 id="1-循环结构"><a href="#1-循环结构" class="headerlink" title="1. 循环结构"></a>1. 循环结构</h4><p>根据循环条件，重复性的执行某段代码。<br>有<code>while</code>、<code>do...while</code>、<code>for</code>三种循环语句。<br>注：JDK1.5提供了foreach循环，方便的遍历集合、数组元素。  </p>
<h4 id="2-循环结构的四要素"><a href="#2-循环结构的四要素" class="headerlink" title="2. 循环结构的四要素"></a>2. 循环结构的四要素</h4><p>① 初始化条件<br>② 循环条件  —&gt;是boolean类型<br>③ 循环体<br>④ 迭代条件<br>说明：通常情况下，循环结束都是因为②中循环条件返回false了。<br>.for循环结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(①;②;④)&#123;</span><br><span class="line">    ③</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-执行过程："><a href="#3-执行过程：" class="headerlink" title="3. 执行过程："></a>3. 执行过程：</h4><p><strong>① - ② - ③ - ④ - ② - ③ - ④ - … - ②</strong></p>
<h3 id="5-while-循环结构"><a href="#5-while-循环结构" class="headerlink" title="5. while 循环结构"></a>5. while 循环结构</h3><h4 id="1-while循环结构"><a href="#1-while循环结构" class="headerlink" title="1. while循环结构"></a>1. while循环结构</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">①</span><br><span class="line">    <span class="keyword">while</span>(②)&#123;</span><br><span class="line">        ③;</span><br><span class="line">        ④;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-执行过程："><a href="#2-执行过程：" class="headerlink" title="2. 执行过程："></a>2. 执行过程：</h4><p><strong>① - ② - ③ - ④ - ② - ③ - ④ - … - ②</strong><br>说明：<br>写while循环千万小心不要丢了迭代条件。<strong>一旦丢了，就可能导致死循环！</strong></p>
<h4 id="3-for和while循环总结"><a href="#3-for和while循环总结" class="headerlink" title="3. for和while循环总结"></a>3. for和while循环总结</h4><ol>
<li>开发中，基本上我们都会从for、while中进行选择，实现循环结构。</li>
<li>for循环和while循环是可以相互转换的！<br>区别：for循环和while循环的初始化条件部分的作用范围不同。</li>
<li>我们写程序，要避免出现死循环。</li>
</ol>
<h3 id="6-do-while-循环"><a href="#6-do-while-循环" class="headerlink" title="6. do-while 循环"></a>6. do-while 循环</h3><h4 id="1-do-while循环结构"><a href="#1-do-while循环结构" class="headerlink" title="1. do-while循环结构"></a>1. do-while循环结构</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">①</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        ③;</span><br><span class="line">        ④;</span><br><span class="line">    &#125;<span class="keyword">while</span>(②);</span><br></pre></td></tr></table></figure>

<h4 id="2-执行过程：-1"><a href="#2-执行过程：-1" class="headerlink" title="2. 执行过程："></a>2. 执行过程：</h4><p>​	<strong>① - ③ - ④ - ② - ③ - ④ - … - ②</strong></p>
<h4 id="3-说明："><a href="#3-说明：" class="headerlink" title="3. 说明："></a>3. 说明：</h4><p>1.do-while循环至少会执行一次循环体！<br>2.开发中，使用for和while更多一些。较少使用do-while</p>
<h3 id="7-嵌套循环的使用"><a href="#7-嵌套循环的使用" class="headerlink" title="7. 嵌套循环的使用"></a>7. 嵌套循环的使用</h3><h4 id="1-嵌套循环"><a href="#1-嵌套循环" class="headerlink" title="1. 嵌套循环:"></a>1. 嵌套循环:</h4><p>将一个循环结构A声明在另一个循环结构B的循环体中,就构成了嵌套循环<br>内层循环：循环结构A<br>外层循环：循环结构B</p>
<h4 id="2-说明：-1"><a href="#2-说明：-1" class="headerlink" title="2. 说明："></a>2. 说明：</h4><p>① 内层循环结构遍历一遍，只相当于外层循环循环体执行了一次<br>② 假设外层循环需要执行m次，内层循环需要执行n次。此时内层循环的循环体一共执行了m * n次<br>③ 外层循环控制行数，内层循环控制列数</p>
<h4 id="3-补充"><a href="#3-补充" class="headerlink" title="3. 补充:"></a>3. 补充:</h4><p>衡量一个功能代码的优劣：<br>1.正确性<br>2.可读性<br>3.健壮性<br>4.高效率与低存储:</p>
<table><tr><td bgcolor=Pink>时间复杂度 、空间复杂度 （衡量算法的好坏）</td></tr></table>

<h3 id="8-关键字-break-和-continue-的使用"><a href="#8-关键字-break-和-continue-的使用" class="headerlink" title="8 关键字 break 和 continue 的使用"></a>8 关键字 break 和 continue 的使用</h3><p>break和continue关键字的使用</p>
<table>
<thead>
<tr>
<th></th>
<th>使用范围</th>
<th>循环中使用的作用(不同点)</th>
<th>相同点</th>
</tr>
</thead>
<tbody><tr>
<td>break</td>
<td><strong>switch-case</strong> 循环结构中</td>
<td>结束<code>当前</code>循环</td>
<td>关键字后面不能声明执行语句</td>
</tr>
<tr>
<td>continue</td>
<td>循环结构中</td>
<td>结束<code>当次</code>循环</td>
<td>关键字后面不能声明执行语句</td>
</tr>
</tbody></table>
<blockquote>
<p>补充：带标签的break和continue的使用<br>return在方法中讲。</p>
</blockquote>
<h3 id="9-循环语句的区别"><a href="#9-循环语句的区别" class="headerlink" title="9. 循环语句的区别"></a>9. 循环语句的区别</h3><ol>
<li><strong>从循环次数角度分析</strong></li>
</ol>
<ul>
<li><p>do…while循环至少执行一次循环体语句</p>
</li>
<li><p>for和while循环先循环条件语句是否成立，然后决定是否执行循环体，至少执行零次循环体语句</p>
</li>
</ul>
<ol start="2">
<li><strong>从循环变量的生命周期角度分析</strong></li>
</ol>
<ul>
<li><p>for循环的循环变量在for()中声明的，在循环语句结束后，不可以被访问；</p>
</li>
<li><p>while和do…while循环的循环变量因为在外面声明的，所以while和do…while结束后可以被继续使用的；</p>
</li>
</ul>
<ol start="3">
<li><p><strong>如何选择</strong></p>
<ul>
<li><p>遍历有明显的循环次数（范围）的需求，选择for循环</p>
</li>
<li><p>遍历没有明显的循环次数（范围）的需求，循环while循环</p>
</li>
<li><p>如果循环体语句块至少执行一次，可以考虑使用do…while循环</p>
</li>
<li><p>本质上：三种循环之间是可以互相转换的，都能实现循环的功能</p>
</li>
</ul>
</li>
<li><p><strong>三种循环结构都具有四要素：</strong></p>
</li>
</ol>
<ul>
<li><p>循环变量的初始化表达式</p>
</li>
<li><p>循环条件</p>
</li>
<li><p>循环变量的修改的迭代表达式</p>
</li>
<li><p>循环体语句块</p>
</li>
</ul>
<ol start="5">
<li><strong>死循环比较</strong></li>
</ol>
<ul>
<li>​	for(;;){循环体}	，除循环体外不需要执行其他语句，性能略高</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>数据类型与运算符</title>
    <url>/articles/64cff55c.html</url>
    <content><![CDATA[<h3 id="数据类型与运算符"><a href="#数据类型与运算符" class="headerlink" title="数据类型与运算符"></a>数据类型与运算符</h3><h4 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h4><ul>
<li><input disabled="" type="checkbox"> 了解进制</li>
<li><input disabled="" type="checkbox"> 理解基本数据类型的自动类型转换</li>
<li><input disabled="" type="checkbox"> 理解基本数据类型的强制类型转换</li>
<li><input disabled="" type="checkbox"> 了解ASCII编码表和Unicode编码表</li>
<li><input disabled="" type="checkbox"> 理解int类型和char类型的运算原理</li>
<li><input disabled="" type="checkbox"> 理解运算符++ –的运算方式</li>
<li><input disabled="" type="checkbox"> 理解+符号在字符串中的作用</li>
<li><input disabled="" type="checkbox"> 掌握算术运算符</li>
<li><input disabled="" type="checkbox"> 掌握赋值运算符</li>
<li><input disabled="" type="checkbox"> 掌握比较运算符</li>
</ul>
<h4 id="1-计算机如何存储整数和小数"><a href="#1-计算机如何存储整数和小数" class="headerlink" title="1. 计算机如何存储整数和小数"></a>1. 计算机如何存储整数和小数</h4><h5 id="1-计算机如何存储整数"><a href="#1-计算机如何存储整数" class="headerlink" title="1.计算机如何存储整数"></a>1.计算机如何存储整数</h5><p> 计算机底层存储的是整数的<strong>补码</strong>。</p>
<p> 要知道补码，必须先知道原码，和反码。</p>
<p> 用一个字节举例<br> 原码：最高位是符号位（0表示正数，1表示负数），其他位为数值位。<br> 比如：<br> 10的原码：  00001010<br> -10的原码： 10001010<br> 反码：正整数的反码与原码一致，负整数的反码是在原码基础上，符号位不变，其他位按位取反<br> 10的反码： 00001010<br> -10的反码：11110101<br> <strong>补码：正整数的补码与原码一致，负整数的补码是在反码基础上加1</strong><br> 10的补码：00001010<br> -10的补码：11110110<br> 一个字节Byte可以表示的数值范围：<br> 不考虑负数：00000000<del>11111111   ： 0</del>255<br> 考虑负数：<br>     0000 0000 ~ 0111 1111 &#x3D;&#x3D;&gt; 0~127<br>    1000 0001 ~ 1111 1111 &#x3D;&#x3D;&gt; -127 ~ -1 （补码形式存储）<br>    1000 0000  &#x3D;&#x3D;&gt; -128     特殊值，最高位既是符号位，又是数值位</p>
<h5 id="2-计算机如何存储小数"><a href="#2-计算机如何存储小数" class="headerlink" title="2.计算机如何存储小数"></a>2.计算机如何存储小数</h5><p> 使用4个字节举例<br> 最高位是符号位，后八位是指数为，最后是小数尾数位<br> 结论：<br> 计算机中浮点数，不能精确存储小数，实际存储的是一个近似值。<br> 同样位数的二进制存储的浮点数的范围远大于存储整数。</p>
<h4 id="2-计算机如何存储字符类型"><a href="#2-计算机如何存储字符类型" class="headerlink" title="2. 计算机如何存储字符类型"></a>2. 计算机如何存储字符类型</h4><p> 比如如何存储 ‘a’,’中’，计算机借助字符集实现。<br> 字符集：是一个字符与整数之间的对应表。<br> 比如ASCII码表：表中’a’-97 ‘b’-98  ‘0’-48。用一个字节范围内的整数表示字符，<br> Unicode字符集：全球统一码，万国码。用2个字节范围内的整数表示字符。<br> Java程序中，字符的表示形式：</p>
<h5 id="1-直接使用单引号表示："><a href="#1-直接使用单引号表示：" class="headerlink" title="1.直接使用单引号表示："></a>1.直接使用单引号表示：</h5><p>​	‘a’,’中’，</p>
<h5 id="2-使用转义字符："><a href="#2-使用转义字符：" class="headerlink" title="2.使用转义字符："></a>2.使用转义字符：</h5><p>​	‘&#39;‘,”&quot;“,’\r’,’\n’,’\t’</p>
<h5 id="3-使用Unicode的编码值："><a href="#3-使用Unicode的编码值：" class="headerlink" title="3.使用Unicode的编码值："></a>3.使用Unicode的编码值：</h5><p>​	‘\u5C1A’</p>
<h4 id="3-Java数据类型分类"><a href="#3-Java数据类型分类" class="headerlink" title="3. Java数据类型分类"></a>3. Java数据类型分类</h4><h5 id="1-按数据类型"><a href="#1-按数据类型" class="headerlink" title="1. 按数据类型"></a>1. 按数据类型</h5><p><img src="https://blog-resources.this0.com/image/202403301602716.png?x-oss-process=style/this0-blog" alt="image-20230121201857477.png"></p>
<h5 id="2-按声明的位置的不同"><a href="#2-按声明的位置的不同" class="headerlink" title="2. 按声明的位置的不同"></a>2. 按声明的位置的不同</h5><p>①在方法体外，类体内声明的变量称为成员变量。<br>②方法体内部声明的变量称为局部变量。<br><img src="https://blog-resources.this0.com/image/202403301602711.png?x-oss-process=style/this0-blog" alt="image-20230121203602456.png"><br>注意：二者在初始化值方面的异同: 同：都有生命周期 异：局部变量除形参外，需显式初始化。</p>
<h4 id="4-基本数据类型的存储范围"><a href="#4-基本数据类型的存储范围" class="headerlink" title="4. 基本数据类型的存储范围"></a>4. 基本数据类型的存储范围</h4><h5 id="1-整型系列"><a href="#1-整型系列" class="headerlink" title="1. 整型系列"></a>1. 整型系列</h5><p>① java的整型常量默认为 int 型<br>② java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long<br>③ 声明long型常量须后加‘l’或‘L’</p>
<p>（1） byte：字节类型</p>
<p>​	占内存：1个字节</p>
<p>​	存储范围：-128~127</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> b=<span class="number">10</span>;</span><br><span class="line"><span class="type">byte</span> b1=<span class="number">128</span><span class="comment">//编译失败: 不兼容的类型: 从int转换到byte可能会有损失</span></span><br></pre></td></tr></table></figure>


<p>（2）short：短整型类型</p>
<p>​	占内存：2个字节</p>
<p>​	存储范围：-32768~32767</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">short</span> s=<span class="number">10</span>;</span><br><span class="line"><span class="type">short</span> s1=<span class="number">32768</span><span class="comment">//编译失败: 不兼容的类型: 从int转换到short可能会有损失</span></span><br></pre></td></tr></table></figure>


<p>（3）int：整型</p>
<p>​	占内存：4个字节</p>
<p>​	存储范围：-2的31次方 ~ 2的31次方-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> i1=<span class="number">12345678900</span>;<span class="comment">//编译错误: 过大的整数: 12345678900</span></span><br></pre></td></tr></table></figure>

<p>（4）long：整型</p>
<p>​	占内存：8个字节</p>
<p>​	存储范围：-2的63次方 ~ 2的63次方-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> j=<span class="number">10</span>;</span><br><span class="line"><span class="type">long</span> j1=<span class="number">12345678900L</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果要表示某个超过int范围的常量整数它是long类型，那么需要在数字后面加L</p>
</blockquote>
<h5 id="2-浮点型系列（小数）"><a href="#2-浮点型系列（小数）" class="headerlink" title="2. 浮点型系列（小数）"></a>2. 浮点型系列（小数）</h5><p>（1）float：单精度浮点型</p>
<p>   占内存：4个字节</p>
<p>   <strong>精度：可展示小数点后七位，小数点后六位准确，第七位不准确</strong></p>
<blockquote>
<p>注意：如果要表示某个常量小数是float类型，那么需要在数字后面加F或f，否则就是double类型</p>
<p>浮点数的表示范围比整型数大是因为采用的表示形式不同。<br>整型数在计算机底层采用补码的形式表示，除去首位的符号位，剩余的位数即表示数值的范围。浮点数在计算机中则是实数由一个整数或定点数（即尾数）乘以某个基数（计算机中通常是2）的整数次幂得到，用以近似表示任意某个实数</p>
</blockquote>
<p>（2）double：双精度浮点型</p>
<p>   占内存：8个字节</p>
<p>   <strong>精度：可展示小数点后十六位，小数点后十五位准确，第十六位不准确</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">12.3F</span>;<span class="comment">//右边如果赋值小数常量值，那么必须加F或f</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">12.3</span>;		</span><br></pre></td></tr></table></figure>

<p>整数和浮点数的开发使用范围</p>
<h5 id="3-数字类型开发选择"><a href="#3-数字类型开发选择" class="headerlink" title="3 数字类型开发选择"></a>3 数字类型开发选择</h5><p>BigInteger和BigDecimal在常用类与基础API章节才学，先不用管</p>
<h6 id="1-整数"><a href="#1-整数" class="headerlink" title="1.整数"></a>1.整数</h6><ul>
<li>**<code>Byte</code>**：适用于不超过 3 位整数范围的情况。<ul>
<li>实际范围：-128 到 127。</li>
<li>最多3位数字（例如，127）。</li>
</ul>
</li>
<li>**<code>Short</code>**：适用于不超过 5 位整数范围的情况。<ul>
<li>实际范围：-32,768 到 32,767。</li>
<li>最多5位数字（例如，32,767）。</li>
</ul>
</li>
<li>**<code>Integer</code>**：适用于不超过 10 位整数范围的情况。<ul>
<li>实际范围：-2,147,483,648 到 2,147,483,647。</li>
<li>最多10位数字（例如，2,147,483,647）。</li>
</ul>
</li>
<li>**<code>Long</code>**：适用于不超过 19 位整数范围的情况。<ul>
<li>实际范围：-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807。</li>
<li>最多19位数字（例如，9,223,372,036,854,775,807）。</li>
</ul>
</li>
<li><code>BigInteger</code>：适用于超过 <code>Long</code> 类型范围的整数。</li>
</ul>
<h6 id="2-浮点数"><a href="#2-浮点数" class="headerlink" title="2.浮点数"></a>2.浮点数</h6><p><code>有效数字是指从第一个非零数字开始到最后一个非零数字结束的所有数字</code>。例如：<br>1234567.0 有7位有效数字：1, 2, 3, 4, 5, 6, 7。</p>
<ul>
<li><code>Float</code>：适用于表示 6 位有效数字的单精度浮点数，第7位不准确</li>
<li><code>Double</code>：适用于表示约 15 位有效数字的双精度浮点数，第16位不准确</li>
<li><code>BigDecimal</code>：适用于需要高精度浮点数运算的场景。</li>
</ul>
<h5 id="4-单字符类型：char"><a href="#4-单字符类型：char" class="headerlink" title="4. 单字符类型：char"></a>4. 单字符类型：char</h5><p>占内存：2个字节</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> ch=<span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>char类型：使用单引号’’</strong></p>
</blockquote>
<p>① 定义char型变量，通常使用一对’’,内部只能写一个字符<br>② 表示方式：1.声明一个字符 2.转义字符 3.直接使用 Unicode 值来表示字符型常量</p>
<h5 id="5-布尔类型"><a href="#5-布尔类型" class="headerlink" title="5. 布尔类型"></a>5. 布尔类型</h5><p>boolean：只能存储true或false</p>
<blockquote>
<p>虽然计算机底层使用0和1表示false和true，但是在代码中不能给boolean类型的变量赋值0和1，只能赋值false和true</p>
</blockquote>
<h4 id="5-基本数据类型转换-隐式自动转换"><a href="#5-基本数据类型转换-隐式自动转换" class="headerlink" title="5. 基本数据类型转换-隐式自动转换"></a>5. 基本数据类型转换-隐式自动转换</h4><p>1.涉及到的基本数据类型：除了boolean之外的其他7种<br>2.自动类型转换(只涉及7种基本数据类型）<br>结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。<br>    byte 、char 、short –&gt; int –&gt; long –&gt; float –&gt; double<br>    <strong>特别的：当byte、char、short三种类型的变量做运算时，结果为int型</strong><br>说明：此时的容量大小指的是，表示数的范围的大和小。比如：float容量要大于long的容量</p>
<h4 id="6-基本数据类型转换-强制类型转换"><a href="#6-基本数据类型转换-强制类型转换" class="headerlink" title="6. 基本数据类型转换-强制类型转换"></a>6. 基本数据类型转换-强制类型转换</h4><blockquote>
<p>自动类型提升运算的逆运算。</p>
</blockquote>
<p>1.需要使用强转符：()<br>2.注意点：强制类型转换，可能导致精度损失</p>
<p>&#x2F;&#x2F;TODO 后面再讲</p>
<h4 id="7-变量与运算符-String-类的基本使用"><a href="#7-变量与运算符-String-类的基本使用" class="headerlink" title="7. 变量与运算符-String 类的基本使用"></a>7. 变量与运算符-String 类的基本使用</h4><ol>
<li>String属于引用数据类型,翻译为：字符串</li>
<li>声明String类型变量时，使用一对””</li>
<li>String可以和8种基本数据类型变量做运算，且运算只能是<strong>连接运算：+</strong></li>
<li>运算的结果仍然是String类型</li>
</ol>
<h4 id="8-运算符分类"><a href="#8-运算符分类" class="headerlink" title="8. 运算符分类"></a>8. 运算符分类</h4><p>按照功能划分：</p>
<table>
<thead>
<tr>
<th align="center">分类</th>
<th align="center">运算符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">算术运算符</td>
<td align="center"><code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>++</code>、<code>--</code></td>
</tr>
<tr>
<td align="center">赋值运算符</td>
<td align="center"><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>等</td>
</tr>
<tr>
<td align="center">关系运算符</td>
<td align="center"><code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>==</code>、<code>!=</code></td>
</tr>
<tr>
<td align="center">逻辑运算符</td>
<td align="center"><code>&amp;</code>、&#96;</td>
</tr>
<tr>
<td align="center">条件运算符</td>
<td align="center"><code>(条件表达式)?结果1:结果2；</code></td>
</tr>
<tr>
<td align="center">位运算符（了解）</td>
<td align="center"><code>&amp;</code>、&#96;</td>
</tr>
</tbody></table>
<p>按照操作数个数划分：</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>运算符</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>一元（单目）运算符</td>
<td>++、–、！</td>
<td>i++、–i</td>
</tr>
<tr>
<td>二元（双目）运算符</td>
<td>+、-、*、&#x2F;、%、&gt;、&lt;&#x3D;等</td>
<td>a+b、10&gt;&#x3D;9</td>
</tr>
<tr>
<td>三元（三目）运算符</td>
<td>表达式1?表达式2:表达式3</td>
<td>age&gt;&#x3D;18?”成年”:”未成年”</td>
</tr>
</tbody></table>
<h4 id="9-算术运算符"><a href="#9-算术运算符" class="headerlink" title="9. 算术运算符"></a>9. 算术运算符</h4><table>
<thead>
<tr>
<th align="center">算术运算符</th>
<th align="center">符号解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加法运算，字符串连接运算，正号</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减法运算，负号</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘法运算</td>
</tr>
<tr>
<td align="center">&#x2F;</td>
<td align="center"><strong>除法运算，整数&#x2F;整数结果还是整数</strong></td>
</tr>
<tr>
<td align="center">%</td>
<td align="center"><strong>求余运算，余数的符号只看被除数</strong></td>
</tr>
<tr>
<td align="center">++  、   –</td>
<td align="center">自增自减运算</td>
</tr>
</tbody></table>
<p>算术运算符： + - + - * &#x2F; % (前)++ (后)++ (前)– (后)– +</p>
<h4 id="10-赋值运算符"><a href="#10-赋值运算符" class="headerlink" title="10. 赋值运算符"></a>10. 赋值运算符</h4><p>注意：所有的赋值运算符的&#x3D;左边一定是一个变量</p>
<table>
<thead>
<tr>
<th align="center">赋值运算符</th>
<th align="center">符号解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;</td>
<td align="center">将符号右边的值，赋值给左边的变量</td>
</tr>
<tr>
<td align="center">+&#x3D;</td>
<td align="center">将符号   左边的值 和 右边的值 进行相加操作，最后将结果 赋值给左边的变量</td>
</tr>
<tr>
<td align="center">-&#x3D;</td>
<td align="center">将符号 左边的值 和 右边的值 进行相减操作，最后将结果 赋值给左边的变量</td>
</tr>
<tr>
<td align="center">*&#x3D;</td>
<td align="center">将符号 左边的值 和 右边的值 进行相乘操作，最后将结果 赋值给左边的变量</td>
</tr>
<tr>
<td align="center">&#x2F;&#x3D;</td>
<td align="center">将符号 左边的值 和 右边的值 进行相除操作，最后将结果 赋值给左边的变量</td>
</tr>
<tr>
<td align="center">%&#x3D;</td>
<td align="center">将符号 左边的值 和 右边的值 进行取余操作，最后将结果 赋值给左边的变量</td>
</tr>
</tbody></table>
<p><strong>eg：</strong><br>short s1 &#x3D; 10;<br>&#x2F;&#x2F;s1 &#x3D; s1 + 2;&#x2F;&#x2F;<code>编译失败</code><br>s1 +&#x3D; 2;&#x2F;&#x2F;结论：<code>不会改变变量本身的数据类型</code></p>
<h4 id="11-关系运算符"><a href="#11-关系运算符" class="headerlink" title="11. 关系运算符"></a>11. 关系运算符</h4><p>比较运算符，是两个数据之间进行比较的运算，运算结果一定是boolean值<code>true</code>或者<code>false</code> 。</p>
<table>
<thead>
<tr>
<th align="center">关系运算符</th>
<th align="center">符号解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;</td>
<td align="center">比较符号左边的数据是否小于右边的数据，如果小于结果是true。</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">比较符号左边的数据是否大于右边的数据，如果大于结果是true。</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td align="center">比较符号左边的数据是否小于或者等于右边的数据，如果大于结果是false。</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td align="center">比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是false。</td>
</tr>
<tr>
<td align="center">&#x3D;&#x3D;</td>
<td align="center">比较符号两边数据是否相等，相等结果是true。</td>
</tr>
<tr>
<td align="center">!&#x3D;</td>
<td align="center">不等于符号 ，如果符号两边的数据不相等，结果是true。</td>
</tr>
</tbody></table>
<h4 id="12-逻辑运算符"><a href="#12-逻辑运算符" class="headerlink" title="12. 逻辑运算符"></a>12. 逻辑运算符</h4><p>逻辑运算符，是用来连接两个布尔类型结果的运算符（<code>!除外</code>），运算结果一定是boolean值true或者false</p>
<table>
<thead>
<tr>
<th align="center">逻辑运算符</th>
<th align="center">符号解释</th>
<th align="center">符号特点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;</td>
<td align="center">与，且</td>
<td align="center">有 false 则 false</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">或</td>
<td align="center">有 true 则 true</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">异或</td>
<td align="center">相同为 false ，不同为 true</td>
</tr>
<tr>
<td align="center">!</td>
<td align="center">非</td>
<td align="center">非 false 则 true ，非 true 则 false</td>
</tr>
<tr>
<td align="center">&amp;&amp;</td>
<td align="center">双与，短路与</td>
<td align="center">左边为false，则右边就不看</td>
</tr>
<tr>
<td align="center">||</td>
<td align="center">双或，短路或</td>
<td align="center">左边为true，则右边就不看</td>
</tr>
</tbody></table>
<p><strong>&amp;&amp;和&amp;区别，||和|区别</strong></p>
<p>短路与，短路或运算符左边表达式结果可以确定最终结果，则运算符右边表达式不再进行运算，<strong>效率高</strong></p>
<ul>
<li><p>** &amp;&amp; 和 &amp; **区别：</p>
<p>&amp;&amp; 和 &amp; 结果一样， &amp;&amp; 有短路效果，左边为false，右边不执行； &amp; 左边无论是什么，右边都会执行。</p>
</li>
<li><p>** || 和 | **区别：</p>
<p>|| 和 | 结果一样， || 有短路效果，左边为true，右边不执行； | 左边无论是什么，右边都会执行</p>
</li>
</ul>
<h4 id="13-条件运算符"><a href="#13-条件运算符" class="headerlink" title="13. 条件运算符"></a>13. 条件运算符</h4><ul>
<li>条件运算符格式：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">条件表达式？表达式<span class="number">1</span>：表达式<span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>说明<br>① 条件表达式的结果为boolean类型<br>② 根据条件表达式真或假，决定执行表达式1，还是表达式2.<br>如果表达式为true，则执行表达式1。<br>如果表达式为false，则执行表达式2。<br>③ 表达式1 和表达式2要求是一致的。<br>④ 三元运算符可以嵌套使用</li>
<li>凡是可以使用三元运算符的地方，都可以改写为if-else<br>反之，不成立。</li>
<li>如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。原因：简洁、执行效率高。</li>
</ul>
<h4 id="14-位运算符（了解）"><a href="#14-位运算符（了解）" class="headerlink" title="14. 位运算符（了解）"></a>14. 位运算符（了解）</h4><table>
<thead>
<tr>
<th align="center">位运算符</th>
<th align="center">符号解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;</td>
<td align="center">按位与，当两位相同时为1时才返回1</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">按位或，只要有一位为1即可返回1</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">按位非，将操作数的每个位（包括符号位）全部取反</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">按位异或。当两位相同时返回0，不同时返回1</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td align="center">左移运算符</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">右移运算符</td>
</tr>
<tr>
<td align="center">&gt;&gt;&gt;</td>
<td align="center">无符号右移运算符</td>
</tr>
</tbody></table>
<ul>
<li>位运算符操作的都是整型的数据</li>
<li>左移&lt;&lt; : 在一定范围内，每向左移1位，相当于 * 2</li>
<li>右移: &gt;&gt;: 在一定范围内，每向右移1位，相当于 &#x2F; 2</li>
<li><strong>位运算符的运算过程都是基于补码运算，但是看结果，我们得换成原码，再换成十进制看结果</strong></li>
<li>从二进制到十进制都是基于原码</li>
<li>byte,short,char在计算时按照int类型处理</li>
<li>位运算直接对二进制进行位移操作实现数值运算，所以运算效率高</li>
</ul>
<p><code>如何区分&amp;,|,^是逻辑运算符还是位运算符？</code></p>
<p><strong>如果操作数是boolean类型，就是逻辑运算符，如果操作数是整数，那么就是位运算符。</strong></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/articles/340249a9.html</url>
    <content><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul>
<li><input disabled="" type="checkbox"> 嵌套循环</li>
<li><input disabled="" type="checkbox"> 嵌套循环下breakcontinue</li>
<li><input disabled="" type="checkbox"> 理解数组的概念</li>
<li><input disabled="" type="checkbox"> 掌握数组的声明和初始化</li>
<li><input disabled="" type="checkbox"> 使用索引访问数组的元素</li>
<li><input disabled="" type="checkbox"> 避免空指针和越界异常</li>
<li><input disabled="" type="checkbox"> 掌握数组的遍历</li>
</ul>
<h3 id="1-数组-数组的概述"><a href="#1-数组-数组的概述" class="headerlink" title="1. 数组-数组的概述"></a>1. 数组-数组的概述</h3><h4 id="1-数组的理解："><a href="#1-数组的理解：" class="headerlink" title="1. 数组的理解："></a>1. 数组的理解：</h4><p>​	数组(Array)，是多个相同类型数据一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</p>
<h4 id="2-相关概念："><a href="#2-相关概念：" class="headerlink" title="2. 相关概念："></a>2. 相关概念：</h4><p>数组名<br>元素<br>角标、下标、索引<br>数组的长度：元素的个数</p>
<h4 id="3-数组的特点："><a href="#3-数组的特点：" class="headerlink" title="3. 数组的特点："></a>3. 数组的特点：</h4><ul>
<li>数组是有序排列的</li>
<li>数组属于引用数据类型的变量。数组的元素，<code>既可以是基本数据类型，也可以是引用数据类型</code></li>
<li><code>创建数组对象会在内存中开辟一整块连续的空间</code></li>
<li>数组的长度一旦确定，就不能修改。</li>
</ul>
<h4 id="4-数组的分类"><a href="#4-数组的分类" class="headerlink" title="4. 数组的分类"></a>4. 数组的分类</h4><p>① 照维数：一维数组、二维数组……<br>② 照数组元素的类型：基本数据类型元素的数组、引用数据类型元素的数组</p>
<h3 id="2-数组一维数组的初始化、遍历与元素默认初始化值"><a href="#2-数组一维数组的初始化、遍历与元素默认初始化值" class="headerlink" title="2. 数组一维数组的初始化、遍历与元素默认初始化值"></a>2. 数组一维数组的初始化、遍历与元素默认初始化值</h3><h4 id="1-一维数组的声明与初始化"><a href="#1-一维数组的声明与初始化" class="headerlink" title="1. 一维数组的声明与初始化"></a>1. 一维数组的声明与初始化</h4><p>正确的方式：<br>int num;&#x2F;&#x2F;声明<br>num &#x3D; 10;&#x2F;&#x2F;初始化<br>int id &#x3D; 1001;&#x2F;&#x2F;声明 + 初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] ids;<span class="comment">//声明</span></span><br><span class="line"><span class="comment">//1.1 静态初始化:数组的初始化和数组元素的赋值操作同时进行</span></span><br><span class="line">ids = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>&#125;;</span><br><span class="line"><span class="comment">//1.2动态初始化:数组的初始化和数组元素的赋值操作分开进行</span></span><br><span class="line">String[] names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] arr4 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//类型推断</span></span><br></pre></td></tr></table></figure>

<h4 id="2-一维数组元素的引用：通过角标的方式调用。"><a href="#2-一维数组元素的引用：通过角标的方式调用。" class="headerlink" title="2. 一维数组元素的引用：通过角标的方式调用。"></a>2. 一维数组元素的引用：通过角标的方式调用。</h4><p>数组的角标（或索引从0开始的，到数组的长度-1结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">names[<span class="number">0</span>] = <span class="string">&quot;王铭&quot;</span>;</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">&quot;王赫&quot;</span>;</span><br><span class="line">names[<span class="number">2</span>] = <span class="string">&quot;张学良&quot;</span>;</span><br><span class="line">names[<span class="number">3</span>] = <span class="string">&quot;孙居龙&quot;</span>;</span><br><span class="line">names[<span class="number">4</span>] = <span class="string">&quot;王宏志&quot;</span>;<span class="comment">//charAt(0)</span></span><br></pre></td></tr></table></figure>

<h4 id="3-数组的长度：length"><a href="#3-数组的长度：length" class="headerlink" title="3. 数组的长度：length"></a>3. 数组的长度：length</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(names.length);<span class="comment">//5</span></span><br><span class="line">System.out.println(ids.length);</span><br></pre></td></tr></table></figure>

<p>说明：<br>数组一旦初始化，其长度就是确定的。&#x2F;&#x2F; arr.length<br>数组长度一旦确定，就不可修改。</p>
<h4 id="4-一维数组的遍历"><a href="#4-一维数组的遍历" class="headerlink" title="4. 一维数组的遍历"></a>4. 一维数组的遍历</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; names.length;i++)&#123;</span><br><span class="line">    System.out.println(names[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-一维数组元素的默认初始化值"><a href="#5-一维数组元素的默认初始化值" class="headerlink" title="5. 一维数组元素的默认初始化值"></a>5. 一维数组元素的默认初始化值</h4><p>数组元素是整型：0<br>数组元素是浮点型：0.0</p>
<p><code>数组元素是char型：0或&#39;\u0000&#39;，而非&#39;0&#39;</code>	(unicode编码)<br>数组元素是boolean型：false<br>数组元素是引用数据类型：null</p>
<h3 id="3-一维数组的内存解析"><a href="#3-一维数组的内存解析" class="headerlink" title="3. 一维数组的内存解析"></a>3. 一维数组的内存解析</h3><p><img src="https://blog-resources.this0.com/image/202403301605040.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<p>第1次出现JVM内存结构</p>
<p><code>栈:方法内定义的变量--局部变量，存储在栈中</code></p>
<p><code>堆：开辟空间，放new出来的结构：放地址值（首地址值)、对象中的属性，</code></p>
<p><img src="https://blog-resources.this0.com/image/%E7%AC%AC1%E6%AC%A1JVM%E5%86%85%E5%AD%98%E6%9C%BA%E6%9E%84.png?x-oss-process=style/this0-blog" alt="第1次JVM内存机构"></p>
<h3 id="4-数组-二维数组的初始化、遍历与元素默认初始化值"><a href="#4-数组-二维数组的初始化、遍历与元素默认初始化值" class="headerlink" title="4. 数组-二维数组的初始化、遍历与元素默认初始化值"></a>4. 数组-二维数组的初始化、遍历与元素默认初始化值</h3><h4 id="1-如何理解二维数组？"><a href="#1-如何理解二维数组？" class="headerlink" title="1. 如何理解二维数组？"></a>1. 如何理解二维数组？</h4><p>数组属于引用数据类型<br>数组的元素也可以是引用数据类型<br>一个一维数组A的元素如果还是一个一维数组类型的，则，此数组A称为二维数组。</p>
<h4 id="2-二维数组的声明与初始化"><a href="#2-二维数组的声明与初始化" class="headerlink" title="2. 二维数组的声明与初始化"></a>2. 二维数组的声明与初始化</h4><p>正确的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//一维数组</span></span><br><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="type">int</span>[][] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//动态初始化1</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//动态初始化2</span></span><br><span class="line">String[][] arr3 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>][];</span><br><span class="line"><span class="comment">//也是正确的写法：</span></span><br><span class="line"><span class="type">int</span>[] arr4[] = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">10</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span>[] arr5[] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;<span class="comment">//类型推断</span></span><br></pre></td></tr></table></figure>

<h4 id="3-如何调用二维数组元素"><a href="#3-如何调用二维数组元素" class="headerlink" title="3. 如何调用二维数组元素:"></a>3. 如何调用二维数组元素:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(arr1[<span class="number">0</span>][<span class="number">1</span>]);<span class="comment">//2</span></span><br><span class="line">System.out.println(arr2[<span class="number">1</span>][<span class="number">1</span>]);<span class="comment">//null</span></span><br><span class="line">arr3[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">4</span>];</span><br><span class="line">System.out.println(arr3[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr3[<span class="number">0</span>]);<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<h4 id="4-二维数组的长度："><a href="#4-二维数组的长度：" class="headerlink" title="4. 二维数组的长度："></a>4. 二维数组的长度：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(arr4.length);<span class="comment">//3</span></span><br><span class="line">System.out.println(arr4[<span class="number">0</span>].length);<span class="comment">//3</span></span><br><span class="line">System.out.println(arr4[<span class="number">1</span>].length);<span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<h4 id="5-遍历二维数组元素"><a href="#5-遍历二维数组元素" class="headerlink" title="5. 遍历二维数组元素"></a>5. 遍历二维数组元素</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr4.length;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr4[i].length;j++)&#123;</span><br><span class="line">        System.out.print(arr4[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-二维数组元素的默认初始化值"><a href="#6-二维数组元素的默认初始化值" class="headerlink" title="6. 二维数组元素的默认初始化值"></a>6. 二维数组元素的默认初始化值</h4><ul>
<li>规定：二维数组分为外层数组的元素，内层数组的元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//外层元素：arr[0],arr[1]等</span></span><br><span class="line"><span class="comment">//内层元素：arr[0][0],arr[1][2]等</span></span><br></pre></td></tr></table></figure>

<ul>
<li>针对于初始化方式一：比如：int[][] arr &#x3D; new int[4][3];</li>
</ul>
<p>外层元素的初始化值为：地址值<br>内层元素的初始化值为：与一维数组初始化情况相同</p>
<ul>
<li>针对于初始化方式二：比如：int[][] arr &#x3D; new int[4][];</li>
</ul>
<p>外层元素的初始化值为：null<br>内层元素的初始化值为：不能调用，否则报错。</p>
<h3 id="5-二维数组的内存解析"><a href="#5-二维数组的内存解析" class="headerlink" title="5. 二维数组的内存解析"></a>5. 二维数组的内存解析</h3><p>类似一维数组</p>
<p><img src="https://blog-resources.this0.com/image/202403301605821.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h3 id="6-数组-Arrays-工具类的使用与数组中的常见异常"><a href="#6-数组-Arrays-工具类的使用与数组中的常见异常" class="headerlink" title="6. 数组-Arrays 工具类的使用与数组中的常见异常"></a>6. 数组-Arrays 工具类的使用与数组中的常见异常</h3><h4 id="1-理解："><a href="#1-理解：" class="headerlink" title="1. 理解："></a>1. 理解：</h4><p>① 定义在java.util包下。<br>② Arrays:提供了很多操作数组的方法。</p>
<h4 id="2-使用："><a href="#2-使用：" class="headerlink" title="2. 使用："></a>2. 使用：</h4><h5 id="2-1-判断两个数组是否相等-比内容-。"><a href="#2-1-判断两个数组是否相等-比内容-。" class="headerlink" title="2.1. 判断两个数组是否相等(比内容)。"></a>2.1. 判断两个数组是否相等(比内容)。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(<span class="type">int</span>[] a,<span class="type">int</span>[] b)</span>:</span><br><span class="line"><span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEquals</span> <span class="operator">=</span> Arrays.equals(arr1, arr2);</span><br><span class="line">System.out.println(isEquals);</span><br></pre></td></tr></table></figure>

<h5 id="2-2-输出数组信息。"><a href="#2-2-输出数组信息。" class="headerlink" title="2.2. 输出数组信息。"></a>2.2. 输出数组信息。</h5><p>​		System.out.println(Arrays.toString(arr1));</p>
<h5 id="2-3-将指定值填充到数组之中。"><a href="#2-3-将指定值填充到数组之中。" class="headerlink" title="2.3. 将指定值填充到数组之中。"></a>2.3. 将指定值填充到数组之中。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(<span class="type">int</span>[] a,<span class="type">int</span> val)</span>:</span><br><span class="line">    Arrays.fill(arr1,<span class="number">10</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr1));<span class="comment">//数组元素全替换成10了</span></span><br></pre></td></tr></table></figure>

<h5 id="2-4-对数组进行排序。"><a href="#2-4-对数组进行排序。" class="headerlink" title="2.4. 对数组进行排序。"></a>2.4. 对数组进行排序。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] a)</span>:</span><br><span class="line">Arrays.sort(arr2);</span><br><span class="line">System.out.println(Arrays.toString(arr2));</span><br></pre></td></tr></table></figure>

<h5 id="2-5-查找元素在数组中的位置"><a href="#2-5-查找元素在数组中的位置" class="headerlink" title="2.5. 查找元素在数组中的位置"></a>2.5. 查找元素在数组中的位置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr3 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">98</span>,-<span class="number">34</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">66</span>,<span class="number">79</span>,<span class="number">105</span>,<span class="number">210</span>,<span class="number">333</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr3, <span class="number">210</span>);</span><br></pre></td></tr></table></figure>

<h3 id="7-数组的常见异常"><a href="#7-数组的常见异常" class="headerlink" title="7. 数组的常见异常"></a>7. 数组的常见异常</h3><h4 id="1-数组角标越界异常"><a href="#1-数组角标越界异常" class="headerlink" title="1 数组角标越界异常"></a>1 数组角标越界异常</h4><p>ArrayIndexOutOfBoundsException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;	</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt;= arr.length;i++)&#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(arr[-<span class="number">2</span>]);	</span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-空指针异常"><a href="#2-空指针异常" class="headerlink" title="2 空指针异常"></a>2 空指针异常</h4><p>NullPointerException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//情况一：</span></span><br><span class="line"><span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">arr1 = <span class="literal">null</span>;</span><br><span class="line">System.out.println(arr1[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//情况二：</span></span><br><span class="line"><span class="type">int</span>[][] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>][];</span><br><span class="line">System.out.println(arr2[<span class="number">0</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//情况三：</span></span><br><span class="line">String[] arr3 = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;CC&quot;</span>&#125;;</span><br><span class="line">arr3[<span class="number">0</span>] = <span class="literal">null</span>;</span><br><span class="line">System.out.println(arr3[<span class="number">0</span>].toString());</span><br></pre></td></tr></table></figure>

<p><code>一旦程序出现异常，未处理时，就终止执行。</code></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象初级-(二)</title>
    <url>/articles/3d27a73d.html</url>
    <content><![CDATA[<h3 id="1-this关键字"><a href="#1-this关键字" class="headerlink" title="1.this关键字"></a>1.this关键字</h3><h4 id="1-可以调用的结构：属性、方法；构造器"><a href="#1-可以调用的结构：属性、方法；构造器" class="headerlink" title="1.可以调用的结构：属性、方法；构造器"></a>1.可以调用的结构：属性、方法；构造器</h4><h4 id="2-this调用属性、方法："><a href="#2-this调用属性、方法：" class="headerlink" title="2.this调用属性、方法："></a>2.this调用属性、方法：</h4><p>this理解为：当前对象或当前正在创建的对象<br>    2.1  在类的方法中，我们可以使用”this.属性”或”this.方法”的方式，调用当前对象属性或方法。但是，通常情况下，我们都选择省略”this.”。特殊情况下，<code>如果方法的形参和类的属性同名时，我们必须显式的使用&quot;this.变量&quot;的方式，表明此变量是属性，而非形参。</code><br>​	2.2 在类的构造器中，我们可以使用”this.属性”或”this.方法”的方式，调用当前正在创建的对象属性或方法。但是，通常情况下，我们都选择省略”this.”。特殊情况下，<code>如果构造器的形参和类的属性同名时，我们必须显式的使用&quot;this.变量&quot;的方式，表明此变量是属性，而非形参。</code></p>
<h4 id="3-this调用构造器："><a href="#3-this调用构造器：" class="headerlink" title="3.this调用构造器："></a>3.this调用构造器：</h4><p>① 我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器<br>② 构造器中不能通过”this(形参列表)”方式调用自己<br>③ 如果一个类中有n个构造器，则最多有 n - 1构造器中使用了”this(形参列表)”（因为有默认的无参构造器）<br>④ <code>规定：&quot;this(形参列表)&quot;必须声明在当前构造器的首行</code><br>⑤ 构造器内部，最多只能声明一个”this(形参列表)”，用来调用其他的构造器</p>
<h3 id="2-package-与-import-关键字的使用"><a href="#2-package-与-import-关键字的使用" class="headerlink" title="2. package 与 import 关键字的使用"></a>2. package 与 import 关键字的使用</h3><h4 id="1-package的使用"><a href="#1-package的使用" class="headerlink" title="1. package的使用"></a>1. package的使用</h4><h5 id="1-package的使用-1"><a href="#1-package的使用-1" class="headerlink" title="1 package的使用"></a>1 package的使用</h5><ul>
<li>为了更好的实现项目中类的管理，提供包的概念</li>
<li>使用package声明类或接口所属的包，声明在源文件的首行</li>
<li>包，属于标识符，遵循标识符的命名规则、规范(xxxyyyzzz)、“见名知意”</li>
<li>每”.”一次，就代表一层文件目录。</li>
</ul>
<h5 id="2-JDK中的主要包介绍："><a href="#2-JDK中的主要包介绍：" class="headerlink" title="2 JDK中的主要包介绍："></a>2 JDK中的主要包介绍：</h5><p><img src="https://blog-resources.this0.com/image/202403301609872.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="2-import的使用"><a href="#2-import的使用" class="headerlink" title="2. import的使用"></a>2. import的使用</h4><p>import:导入<br>2.1. 在源文件中显式的使用import结构导入指定包下的类、接口<br>2.2. 声明在包的声明和类的声明之间<br>2.3. 如果需要导入多个结构，则并列写出即可<br>2.4. <code>导入&quot;xxx.yy&quot;，表示可以导入 yy 包下的所有结构,但是如果使用的是xxx子包下的结构，则仍需要显式导入(yy表示类或接口)。 </code></p>
<p>2.5 <code>如果使用的类或接口是java.lang包下定义的，则可以省略import结构。</code></p>
<p>2.6  如果使用的类或接口是本包下定义的，则可以省略import结构。 </p>
<p>2.7 <code>如果在源文件中，使用了不同包下的同名的类，则必须至少一个类需要以全类名的方式示。</code></p>
<p>2.8<code>import static:导入指定类或接口中的静态结构:属性或方法。</code></p>
<h3 id="3-super关键字调用父类属性、方法、构造器"><a href="#3-super关键字调用父类属性、方法、构造器" class="headerlink" title="3.super关键字调用父类属性、方法、构造器"></a>3.super关键字调用父类属性、方法、构造器</h3><h4 id="1-super-关键字可以理解为：父类的"><a href="#1-super-关键字可以理解为：父类的" class="headerlink" title="1.super 关键字可以理解为：父类的"></a>1.super 关键字可以理解为：父类的</h4><h4 id="2-可以用来调用的结构："><a href="#2-可以用来调用的结构：" class="headerlink" title="2.可以用来调用的结构："></a>2.可以用来调用的结构：</h4><p>属性、方法、构造器</p>
<h4 id="3-super调用属性、方法："><a href="#3-super调用属性、方法：" class="headerlink" title="3.super调用属性、方法："></a>3.super调用属性、方法：</h4><p>​	3.1 我们可以在子类的方法或构造器中。通过使用”super.属性”或”super.方法”的方式，显式的调用父类中声明的属性或方法。但是，<code>通常情况下，我们习惯省略&quot;super.&quot;</code><br>​	3.2 特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性。<br>​	3.3 特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.方法”的方式，表明调用的是父类中被重写的方法。</p>
<h4 id="4-super调用构造器："><a href="#4-super调用构造器：" class="headerlink" title="4.super调用构造器："></a>4.super调用构造器：</h4><p>​	4.1  我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器<br>​	4.2 “super(形参列表)”的使用，必须声明在子类构造器的首行！<br>​	4.3 我们在类的构造器中，<code>针对于&quot;this(形参列表)&quot;或&quot;super(形参列表)&quot;只能二选一，不能同时出现</code><br>​	4.4 在构造器的首行，没显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器：super()<br>​	4.5 在类的多个构造器中，至少一个类的构造器中使用了”super(形参列表)”，调用父类中的构造器 </p>
<h3 id="4-关键字-static-修饰属性、方法"><a href="#4-关键字-static-修饰属性、方法" class="headerlink" title="4.关键字 static 修饰属性、方法"></a>4.关键字 static 修饰属性、方法</h3><p>static:静态的</p>
<h4 id="1-可以用来修饰的结构：主要用来修饰类的内部结构"><a href="#1-可以用来修饰的结构：主要用来修饰类的内部结构" class="headerlink" title="1.可以用来修饰的结构：主要用来修饰类的内部结构"></a>1.可以用来修饰的结构：主要用来修饰类的内部结构</h4><p>属性、方法、代码块、内部类</p>
<h4 id="2-static修饰属性：静态变量（或类变量）"><a href="#2-static修饰属性：静态变量（或类变量）" class="headerlink" title="2.static修饰属性：静态变量（或类变量）"></a>2.static修饰属性：静态变量（或类变量）</h4><p>​	2.1 属性，是否使用static修饰，又分为：静态属性  vs 非静态属性(实例变量)<br>实例变量：我们创建了类的多个对象，每个对象都独立的拥一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。<br>静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。<br>​	2.2 static修饰属性的其他说明：<br>              ① 静态变量随着类的加载而加载。可以通过”类.静态变量”的方式进行调用<br>​              ② 静态变量的加载要早于对象的创建。<br>​              ③ 由于类只会加载一次，则<code>静态变量在内存中也只会存在一份：存在方法区的静态域中。 </code>              </p>
<p>​	        ④		类变量	实例变量<br>​             类		yes		no<br>​             对象	yes		yes       </p>
<p>​	第4次出现JVM内存结构</p>
<p><img src="https://blog-resources.this0.com/image/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%844.png?x-oss-process=style/this0-blog" alt="JVM内存结构4"></p>
<p>​	2.3 静态属性举例：System.out; Math.PI;</p>
<h4 id="3-静态变量内存解析："><a href="#3-静态变量内存解析：" class="headerlink" title="3.静态变量内存解析："></a>3.静态变量内存解析：</h4><p><code>jdk6及之前，存放在方法区。jdk7及之后，存放在堆空间</code><br>以修饰属性为例<br><img src="https://blog-resources.this0.com/image/202403301609669.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="4-static修饰方法：静态方法、类方法"><a href="#4-static修饰方法：静态方法、类方法" class="headerlink" title="4.static修饰方法：静态方法、类方法"></a>4.static修饰方法：静态方法、类方法</h4><p>​	① 随着类的加载而加载，可以通过”类.静态方法”的方式进行调用</p>
<p>​	②</p>
<table>
<thead>
<tr>
<th>能否调用</th>
<th>静态方法</th>
<th>非静态方法</th>
</tr>
</thead>
<tbody><tr>
<td>类</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td>对象</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>​</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>③ 静态方法中，只能调用静态的方法或属性<br>   非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性</p>
<h4 id="5-static的注意点："><a href="#5-static的注意点：" class="headerlink" title="5.static的注意点："></a>5.static的注意点：</h4><h5 id="1-在静态的方法内，不能使用this关键字、super关键字"><a href="#1-在静态的方法内，不能使用this关键字、super关键字" class="headerlink" title="1 在静态的方法内，不能使用this关键字、super关键字"></a>1 在静态的方法内，不能使用this关键字、super关键字</h5><h5 id="2-关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。"><a href="#2-关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。" class="headerlink" title="2 关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。"></a>2 关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。</h5><h4 id="6-如何判定属性和方法应该使用static关键字："><a href="#6-如何判定属性和方法应该使用static关键字：" class="headerlink" title="6.如何判定属性和方法应该使用static关键字："></a>6.如何判定属性和方法应该使用static关键字：</h4><h5 id="1-关于属性"><a href="#1-关于属性" class="headerlink" title="1 关于属性"></a>1 关于属性</h5><p>属性是可以被多个对象所共享的，不会随着对象的不同而不同的。<br>类中的常量也常常声明为static。</p>
<h5 id="2-关于方法"><a href="#2-关于方法" class="headerlink" title="2 关于方法"></a>2 关于方法</h5><p>操作静态属性的方法，通常设置为static的<br>工具类中的方法，习惯上声明为static的。 比如：Math、Arrays、Collections</p>
<h4 id="7-使用举例："><a href="#7-使用举例：" class="headerlink" title="7.使用举例："></a>7.使用举例：</h4><p>举例一：Arrays、Math、Collections等工具类<br>举例二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;<span class="comment">//自动赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span>&#123;</span><br><span class="line">        id = init++;</span><br><span class="line">        total++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(<span class="type">double</span> radius)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//		id = init++;</span></span><br><span class="line">        <span class="comment">//		total++;</span></span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> total;<span class="comment">//记录创建的圆的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">init</span> <span class="operator">=</span> <span class="number">1001</span>;<span class="comment">//static声明的属性被所对象所共享</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-关键字-final"><a href="#5-关键字-final" class="headerlink" title="5. 关键字 final"></a>5. 关键字 final</h3><p>final：最终的</p>
<h4 id="1-可以用来修饰：类、方法、变量"><a href="#1-可以用来修饰：类、方法、变量" class="headerlink" title="1.可以用来修饰：类、方法、变量"></a>1.可以用来修饰：类、方法、变量</h4><h4 id="2-具体的"><a href="#2-具体的" class="headerlink" title="2.具体的"></a>2.具体的</h4><p>​	2.1 final 用来修饰一个类:此类不能被其他类所继承。<br>​         比如：String类、System类、StringBuffer类</p>
<p>​	2.2 final 用来修饰方法：表明此方法不可以被重写<br>             比如：Object类中getClass();</p>
<p>​	2.3 final 用来修饰变量：此时的”变量”就称为是一个常量<br>          2.3.1 final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化<br>          2.3.2 final修饰局部变量：<br>​         尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</p>
<ul>
<li><pre><code>      static final 用来修饰属性：全局常量
</code></pre>
</li>
</ul>
<h3 id="6-子类对象实例化的全过程"><a href="#6-子类对象实例化的全过程" class="headerlink" title="6. 子类对象实例化的全过程"></a>6. 子类对象实例化的全过程</h3><h4 id="1-从结果上看：继承性"><a href="#1-从结果上看：继承性" class="headerlink" title="1.从结果上看：继承性"></a>1.从结果上看：继承性</h4><p>   子类继承父类以后，就获取了父类中声明的属性或方法。<br>   创建子类的对象，<code>在堆空间中，就会加载所有父类中声明的属性。</code></p>
<h4 id="2-从过程上看："><a href="#2-从过程上看：" class="headerlink" title="2.从过程上看："></a>2.从过程上看：</h4><p><code>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，...直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中父类中的结构</code>，子类对象才可以考虑进行调用。<br>图示：<br><img src="https://blog-resources.this0.com/image/202403301609904.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="3-强调说明："><a href="#3-强调说明：" class="headerlink" title="3.强调说明："></a>3.强调说明：</h4><p><code>虽然创建子类对象时，也调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象(没new不算创建对象)。</code></p>
<p><img src="https://blog-resources.this0.com/image/202403301609666.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h3 id="7-Object-类及-clone-、finalize-的理解"><a href="#7-Object-类及-clone-、finalize-的理解" class="headerlink" title="7. Object 类及 clone()、finalize()的理解"></a>7. Object 类及 clone()、finalize()的理解</h3><p>java.lang.Object类的说明：</p>
<h4 id="1-Object类是所有Java类的根父类"><a href="#1-Object类是所有Java类的根父类" class="headerlink" title="1.Object类是所有Java类的根父类"></a>1.Object类是所有Java类的根父类</h4><h4 id="2-如果在类的声明中未使用extends关键字指明其父类，则默认父类为java-lang-Object类"><a href="#2-如果在类的声明中未使用extends关键字指明其父类，则默认父类为java-lang-Object类" class="headerlink" title="2.如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类"></a>2.如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类</h4><h4 id="3-Object类中的功能-属性、方法-具有通用性。"><a href="#3-Object类中的功能-属性、方法-具有通用性。" class="headerlink" title="3.Object类中的功能(属性、方法)具有通用性。"></a>3.Object类中的功能(属性、方法)具有通用性。</h4><p>​	属性：无<br>​    方法：equals() &#x2F; toString() &#x2F; getClass() &#x2F;hashCode() &#x2F; clone() &#x2F; <code>finalize()</code><br>​    finalize():当垃圾收集器准备回收一个对象时，它会首先调用该对象的 finalize() 方法。这个方法的默认实现是空的，但你可以在你自己的类中覆盖这个方法，以便在对象被销毁前执行一些必要的清理工作，比如关闭文件、释放资源等。</p>
<p>​	与线程相关的方法：<code> wait() 、 notify()、notifyAll()</code>后面会详细讲</p>
<h4 id="4-Object类只声明了一个空参的构造器"><a href="#4-Object类只声明了一个空参的构造器" class="headerlink" title="4.Object类只声明了一个空参的构造器"></a>4.Object类只声明了一个空参的构造器</h4><p>它存在的目的是为了让所有的子类在创建对象时都能够通过默认构造器进行初始化。</p>
<h3 id="8-equals-方法的使用"><a href="#8-equals-方法的使用" class="headerlink" title="8. equals()方法的使用"></a>8. equals()方法的使用</h3><p>equals()方法</p>
<h4 id="1-equals-的使用："><a href="#1-equals-的使用：" class="headerlink" title="1 .equals()的使用："></a>1 .equals()的使用：</h4><p>   1.1是一个方法，而非运算符<br>   1.2. <code>只能适用于引用数据类型</code><br>   1.3. Object类中equals()的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//就是调用==与自己比较，因为是引用数据类型，所以就是比较地址值</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>     说明：Object类中定义的equals()和==的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</code></p>
<p>​    1.4. <code>像String、Date、File、包装类等都重写了Object类中的equals()方法。</code>重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的”实体内容”是否相同。(有兴趣自己看源码)<br>​    1.5. <code>通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的&quot;实体内容&quot;是否相同。那么，我们就需要对Object类中的equals()进行重写</code>。<br>​  <code>   重写的原则：比较两个对象的实体内容是否相同.</code></p>
<h4 id="2-如何重写equals"><a href="#2-如何重写equals" class="headerlink" title="2 .如何重写equals()"></a>2 .如何重写equals()</h4><p>2.1 手动重写举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//重写其equals()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj == <span class="built_in">this</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> (User)obj;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.age == u.age &amp;&amp; <span class="built_in">this</span>.name.equals(u.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.2 开发中如何实现：自动生成的<br>2.3 补充</p>
<p> &#x3D;&#x3D; 符号使用时，必须保证符号左右两边的变量类型一致。</p>
<h3 id="9-toString-方法的使用"><a href="#9-toString-方法的使用" class="headerlink" title="9.toString()方法的使用"></a>9.toString()方法的使用</h3><p>toString()方法</p>
<h4 id="1-toString-的使用："><a href="#1-toString-的使用：" class="headerlink" title="1.toString()的使用："></a>1.toString()的使用：</h4><p> 1.1当我们输出一个对象的引用时，实际上就是调用当前对象的toString()</p>
<p> 1.2. Object类中toString()的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  1.3. <code>像String、Date、File、包装类等都重写了Object类中的toString()方法。使得在调用对象的toString()时，返回&quot;实体内容&quot;信息</code></p>
<p>  1.4. 自定义类也可以重写toString()方法，当调用此方法时，返回对象的”实体内容”</p>
<h4 id="2-如何重写toString"><a href="#2-如何重写toString" class="headerlink" title="2.如何重写toString()"></a>2.如何重写toString()</h4><p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动实现</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Customer [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象初级-(一)</title>
    <url>/articles/dac02142.html</url>
    <content><![CDATA[<h3 id="1-面向对象与面向过程（理解）"><a href="#1-面向对象与面向过程（理解）" class="headerlink" title="1. 面向对象与面向过程（理解）"></a>1. 面向对象与面向过程（理解）</h3><ul>
<li>面向过程：</li>
</ul>
<p>​	强调的是功能行为，以函数为最小单位，考虑怎么做。</p>
<ul>
<li>面向对象：</li>
</ul>
<p>​		强调具备了功能的对象，以类&#x2F;对象为最小单位，考虑谁来做。<br>举例对比：人把大象装进冰箱。</p>
<h3 id="2-面向对象中两个重要的概念："><a href="#2-面向对象中两个重要的概念：" class="headerlink" title="2. 面向对象中两个重要的概念："></a>2. 面向对象中两个重要的概念：</h3><p>​		<strong>类：</strong>对一类事物的描述，是抽象的、概念上的定义<br>​		<strong>对象：</strong>是实际存在的该类事物的每个个体，因而也称为实例(instance)</p>
<h3 id="3-类和对象的使用–面向对象思想落地实现"><a href="#3-类和对象的使用–面向对象思想落地实现" class="headerlink" title="3. 类和对象的使用–面向对象思想落地实现"></a>3. 类和对象的使用–面向对象思想落地实现</h3><p>面向对象程序设计的<strong>重点是类的设计</strong><br><strong>设计类，就是设计类的成员。</strong><br>创建类的对象 &#x3D; 类的实例化 &#x3D; 实例化类</p>
<ul>
<li><p>创建类、设计类的成员</p>
</li>
<li><p>创建类的对象</p>
</li>
<li><p>通过“对象.属性”或“对象.方法”调用对象的结构</p>
</li>
<li><p>几个概念的使用说明<br>属性 &#x3D; 成员变量 &#x3D; field &#x3D; 域、字段<br>方法 &#x3D; 成员方法 &#x3D; 函数 &#x3D; method</p>
</li>
<li><p>二者的关系：<br>对象，是由类new出来的，派生出来的。</p>
</li>
<li><p>理解”万事万物皆对象”</p>
<ul>
<li><p>在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构</p>
<ul>
<li><blockquote>
<p>Scanner,String等</p>
</blockquote>
</li>
<li><blockquote>
<p>文件：File</p>
</blockquote>
</li>
<li><blockquote>
<p>网络资源：URL</p>
</blockquote>
</li>
</ul>
</li>
<li><p>涉及到Java语言与前端Html、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</p>
</li>
</ul>
</li>
</ul>
<h3 id="4-类的实例化与对象的内存解析"><a href="#4-类的实例化与对象的内存解析" class="headerlink" title="4. 类的实例化与对象的内存解析"></a>4. 类的实例化与对象的内存解析</h3><p><img src="https://blog-resources.this0.com/image/202403301607878.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<p>图略看，现在只需要记住：栈，堆，方法区就够了</p>
<p>栈（复习）：方法内定义的变量，存储在栈中。</p>
<p>堆（复习）：new出来的结构。包括对象中的属性</p>
<p>方法区（新增）：存放类的模板，比如：Person类的模板</p>
<p>内存解析：<br>编译完源程序以后，生成一个或多个字节码文件。<br>我们使用<code> JVM中的类的加载器和解释器对生成的字节码文件进行解释运行。</code></p>
<p>意味着，需要&#96; 将字节码文件对应的类加载到内存中，涉及到内存解析，图如下。</p>
<p><img src="https://blog-resources.this0.com/image/%E5%AF%B9%E8%B1%A1%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE.png?x-oss-process=style/this0-blog" alt="对象存放位置"></p>
<p>典型代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> p1;<span class="comment">//没有新创建一个对象，共用一个堆空间中的对象实体。</span></span><br></pre></td></tr></table></figure>

<p>说明：<br>如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性。<code> （非static的)</code><br>意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值。</p>
<p>第2次出现JVM内存结构</p>
<p><code> 对象的属性（非static的)加载在堆空间中。</code></p>
<p><code>方法区：存放类的模板</code></p>
<p><img src="https://blog-resources.this0.com/image/%E6%97%A0%E6%A0%87%E9%A2%982.png?x-oss-process=style/this0-blog" alt="无标题2"></p>
<h3 id="5-成员变量与局部变量的对比"><a href="#5-成员变量与局部变量的对比" class="headerlink" title="5. 成员变量与局部变量的对比"></a>5. 成员变量与局部变量的对比</h3><p>对比：属性  vs  局部变量</p>
<h4 id="1-相同点："><a href="#1-相同点：" class="headerlink" title="1.相同点："></a>1.相同点：</h4><pre><code> 1.1 定义变量的格式：数据类型  变量名 = 变量值
 1.2 先声明，后使用
 1.3 变量都有其对应的作用域
</code></pre>
<h4 id="2-不同点："><a href="#2-不同点：" class="headerlink" title="2.不同点："></a>2.不同点：</h4><h5 id="2-1-在类中声明的位置的不同"><a href="#2-1-在类中声明的位置的不同" class="headerlink" title="2.1 在类中声明的位置的不同"></a>2.1 在类中声明的位置的不同</h5><pre><code> 属性：直接定义在类的一对&#123;&#125;内
 局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量
</code></pre>
<h5 id="2-2-关于权限修饰符的不同"><a href="#2-2-关于权限修饰符的不同" class="headerlink" title="2.2 关于权限修饰符的不同"></a>2.2 关于权限修饰符的不同</h5><p>属性：可以在声明属性时，指明其权限，使用权限修饰符。<br>常用的权限修饰符：private、public、缺省、protected  —&gt;封装性<br>目前，大家声明属性时，都使用缺省就可以了。<br>局部变量：不可以使用权限修饰符。</p>
<h5 id="2-3-默认初始化值的不同："><a href="#2-3-默认初始化值的不同：" class="headerlink" title="2.3 默认初始化值的不同："></a>2.3 默认初始化值的不同：</h5><p>属性：类的属性，根据其类型，都有默认初始化值。<br>整型（byte、short、int、long：0）<br>浮点型（float、double：0.0）<br>字符型（char：0  （或’\u0000’））<br>布尔型（boolean：false）<br>引用数据类型（类、数组、接口：null）</p>
<p><code> 局部变量：没默认初始化值。</code><br>意味着，我们在调用局部变量之前，一定要显式赋值。<br>特别地：形参在调用时，我们赋值即可。</p>
<h5 id="2-4-在内存中加载的位置："><a href="#2-4-在内存中加载的位置：" class="headerlink" title="2.4 在内存中加载的位置："></a>2.4 在内存中加载的位置：</h5><p><code>  属性：加载到堆空间中（非static）</code></p>
<p><code> 局部变量：加载到栈空间</code></p>
<h3 id="6-方法的作用与方法的声明"><a href="#6-方法的作用与方法的声明" class="headerlink" title="6. 方法的作用与方法的声明"></a>6. 方法的作用与方法的声明</h3><p>方法：描述类应该具的功能。</p>
<ul>
<li>比如：Math类：sqrt()\random() …</li>
</ul>
<p>Scanner类：nextXxx() …<br>Arrays类：sort() \ binarySearch() \ toString() \ equals() \ …</p>
<h4 id="1-举例："><a href="#1-举例：" class="headerlink" title="1. 举例："></a>1. 举例：</h4><ul>
<li>public void eat(){}</li>
<li>public void sleep(int hour){}</li>
<li>public String getName(){}</li>
<li>public String getNation(String nation){}</li>
</ul>
<h4 id="2-方法的声明："><a href="#2-方法的声明：" class="headerlink" title="2. 方法的声明："></a>2. 方法的声明：</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">权限修饰符  返回值类型  方法名(形参列表)</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">方法体</span></span><br><span class="line"><span class="template-variable">&#125;</span></span><br></pre></td></tr></table></figure>

<p>注意：<code> static、final、abstract来修饰的方法,后面再讲</code></p>
<h4 id="3-说明："><a href="#3-说明：" class="headerlink" title="3. 说明："></a>3. 说明：</h4><h5 id="3-1-关于权限修饰符："><a href="#3-1-关于权限修饰符：" class="headerlink" title="3.1. 关于权限修饰符："></a>3.1. 关于权限修饰符：</h5><p>默认方法的权限修饰符先都使用public<br>Java规定的4种权限修饰符：private、public、缺省、protected  等讲封装性再细说</p>
<h5 id="3-2-返回值类型："><a href="#3-2-返回值类型：" class="headerlink" title="3.2. 返回值类型："></a>3.2. 返回值类型：</h5><p> 返回值  vs 没返回值</p>
<ul>
<li><p>如果方法返回值，则必须在方法声明时，指定返回值的类型。同时，方法中，需要使用 return 关键字来返回指定类型的变量或常量：“return 数据”。</p>
</li>
<li><p>如果方法没返回值，则方法声明时，使用void来表示。通常，没返回值的方法中，就不需要使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思。</p>
</li>
<li><p>我们定义方法该不该返回值？<br>① 按要求<br>② 凭经验：具体问题具体分析</p>
</li>
</ul>
<h5 id="3-3-方法名："><a href="#3-3-方法名：" class="headerlink" title="3.3. 方法名："></a>3.3. 方法名：</h5><p>属于标识符，遵循标识符的规则和规范，“见名知意”</p>
<h5 id="3-4-形参列表"><a href="#3-4-形参列表" class="headerlink" title="3.4. 形参列表:"></a>3.4. 形参列表:</h5><p>方法可以声明0个，1个，或多个形参。</p>
<ul>
<li>格式：数据类型1 形参1,数据类型2 形参2,…</li>
<li>我们定义方法时，该不该定义形参？<br>① 题目要求<br>② 凭经验：具体问题具体分析</li>
</ul>
<h5 id="3-5-方法体："><a href="#3-5-方法体：" class="headerlink" title="3.5. 方法体："></a>3.5. 方法体：</h5><p>方法功能的体现。</p>
<h5 id="3-6-return关键字"><a href="#3-6-return关键字" class="headerlink" title="3.6. return关键字"></a>3.6. return关键字</h5><p>1.使用范围：使用在方法体中<br>2.作用：<br>① 结束方法<br>② 针对于返回值类型的方法，使用”return 数据”方法返回所要的数据。<br>3.注意点<br><code> return关键字后面不可以声明执行语句。</code></p>
<ul>
<li>方法的使用中，可以调用当前类的属性或方法</li>
<li>方法A中又调用了方法A:递归方法。</li>
<li>方法中，不可以定义方法。</li>
</ul>
<h3 id="7-方法的内存解析"><a href="#7-方法的内存解析" class="headerlink" title="7. 方法的内存解析"></a>7. 方法的内存解析</h3><p>第3次出现JVM内存结构</p>
<p>每个方法对应一个栈帧</p>
<p><img src="https://blog-resources.this0.com/image/%E6%97%A0%E6%A0%87%E9%A2%983.png?x-oss-process=style/this0-blog" alt="无标题3"></p>
<h3 id="8-对象数组的使用及内存解析"><a href="#8-对象数组的使用及内存解析" class="headerlink" title="8. 对象数组的使用及内存解析"></a>8. 对象数组的使用及内存解析</h3><p>略过</p>
<h3 id="9-方法应用-1：方法的重载"><a href="#9-方法应用-1：方法的重载" class="headerlink" title="9. 方法应用 1：方法的重载"></a>9. 方法应用 1：方法的重载</h3><h4 id="1-方法的重载的概念"><a href="#1-方法的重载的概念" class="headerlink" title="1. 方法的重载的概念"></a>1. 方法的重载的概念</h4><p>定义：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</p>
<p><code>  &quot;两同一不同&quot;:同一个类、相同方法名;参数列表不同：参数个数不同，参数类型不同</code></p>
<h4 id="2-构成重载的举例："><a href="#2-构成重载的举例：" class="headerlink" title="2. 构成重载的举例："></a>2. 构成重载的举例：</h4><p>举例一：</p>
<p>Arrays类中重载的sort() &#x2F; binarySearch()；PrintStream中的println()<br>举例二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如下的4个方法构成了重载</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">double</span> d1,<span class="type">double</span> d2)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(String s ,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> i,String s)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;4&quot;</span>);	&#125;</span><br></pre></td></tr></table></figure>

<p>不构成重载的举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如下的3个方法不能与上述4个方法构成重载</span></span><br><span class="line"><span class="comment">//	public int getSum(int i,int j)&#123;</span></span><br><span class="line"><span class="comment">//		return 0;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//	public void getSum(int m,int n)&#123;</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//	private void getSum(int i,int j)&#123;</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-如何判断是否构成方法的重载？"><a href="#3-如何判断是否构成方法的重载？" class="headerlink" title="3. 如何判断是否构成方法的重载？"></a>3. 如何判断是否构成方法的重载？</h4><p>严格按照定义判断：两同一不同。<br>跟方法的权限修饰符、返回值类型、形参变量名、方法体都没关系！</p>
<h4 id="4-如何确定类中某一个方法的调用："><a href="#4-如何确定类中某一个方法的调用：" class="headerlink" title="4. 如何确定类中某一个方法的调用："></a>4. 如何确定类中某一个方法的调用：</h4><p>   方法名 —&gt; 参数列表</p>
<h3 id="10-方法应用-2：可变个数形参的方法"><a href="#10-方法应用-2：可变个数形参的方法" class="headerlink" title="10. 方法应用 2：可变个数形参的方法"></a>10. 方法应用 2：可变个数形参的方法</h3><p>可变个数形参的区别</p>
<h4 id="1-使用说明："><a href="#1-使用说明：" class="headerlink" title="1. 使用说明："></a>1. 使用说明：</h4><p>jdk 5.0新增的内容</p>
<h4 id="2-具体使用："><a href="#2-具体使用：" class="headerlink" title="2. 具体使用："></a>2. 具体使用：</h4><p>1 可变个数形参的格式：</p>
<p>​	数据类型 … 变量名<br>​	当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个,2个，。。。<br>2 可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载<br><code>3 可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存。</code><br>4 可变个数形参在方法的形参中，<code>必须声明在末尾</code><br>5 可变个数形参在方法的形参中,<code>最多只能声明一个可变形参。</code></p>
<h4 id="3-举例："><a href="#3-举例：" class="headerlink" title="3. 举例："></a>3. 举例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String s)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show(String)&quot;</span>);</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String ... strs)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show(String ... strs)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; strs.length;i++)&#123;</span><br><span class="line">        System.out.println(strs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不能与上一个方法同时存在</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	public void show(String[] strs)&#123;</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br></pre></td></tr></table></figure>

<p>调用时：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">test.show(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">test.show(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">test.show();</span><br><span class="line">test.show(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>,<span class="string">&quot;BB&quot;</span>,<span class="string">&quot;CC&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="11-方法应用-3：方法值传递机制的剖析"><a href="#11-方法应用-3：方法值传递机制的剖析" class="headerlink" title="11. 方法应用 3：方法值传递机制的剖析"></a>11. 方法应用 3：方法值传递机制的剖析</h3><h4 id="1-针对于方法内变量的赋值举例："><a href="#1-针对于方法内变量的赋值举例：" class="headerlink" title="1. 针对于方法内变量的赋值举例："></a>1. 针对于方法内变量的赋值举例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;***********基本数据类型：****************&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> m;	</span><br><span class="line">System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line"></span><br><span class="line">n = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;m = &quot;</span> + m + <span class="string">&quot;, n = &quot;</span> + n);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;***********引用数据类型：****************&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Order</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">o1.orderId = <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Order</span> <span class="variable">o2</span> <span class="operator">=</span> o1;<span class="comment">//赋值以后，o1和o2的地址值相同，都指向了堆空间中同一个对象实体。</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;o1.orderId = &quot;</span> + o1.orderId + <span class="string">&quot;,o2.orderId = &quot;</span> +o2.orderId);</span><br><span class="line"></span><br><span class="line">o2.orderId = <span class="number">1002</span>;			<span class="comment">//传的地址值</span></span><br><span class="line">System.out.println(<span class="string">&quot;o1.orderId = &quot;</span> + o1.orderId + <span class="string">&quot;,o2.orderId = &quot;</span> +o2.orderId);</span><br><span class="line"><span class="comment">//1002           1002</span></span><br></pre></td></tr></table></figure>

<p>注意理解这段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">o2.orderId = <span class="number">1002</span>;			<span class="comment">//传的地址值==</span></span><br><span class="line">System.out.println(<span class="string">&quot;o1.orderId = &quot;</span> + o1.orderId + <span class="string">&quot;,o2.orderId = &quot;</span> +o2.orderId);</span><br><span class="line"><span class="comment">//1002           1002 (同一个实体)</span></span><br></pre></td></tr></table></figure>

<p>规则：<br>如果变量是基本数据类型，此时赋值的是变量所保存的数据值。<br>如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。</p>
<h4 id="2-针对于方法的参数概念"><a href="#2-针对于方法的参数概念" class="headerlink" title="2. 针对于方法的参数概念"></a>2. 针对于方法的参数概念</h4><p><code> 形参：方法定义时，声明的小括号内的参数。实参：方法调用时，实际传递给形参的数据</code></p>
<h4 id="3-参数传递机制：值传递"><a href="#3-参数传递机制：值传递" class="headerlink" title="3. 参数传递机制：值传递"></a>3. 参数传递机制：值传递</h4><p>规则：<br>如果参数是基本数据类型，此时实参赋给形参的是实参真实存储的数据值。<br>如果参数是引用数据类型，此时实参赋给形参的是实参存储数据的地址值。</p>
<p>推广：<br>如果变量是基本数据类型，此时赋值的是变量所保存的数据值。<br>如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。</p>
<h3 id="12-方法应用4：递归方法"><a href="#12-方法应用4：递归方法" class="headerlink" title="12. 方法应用4：递归方法"></a>12. 方法应用4：递归方法</h3><h4 id="1-定义："><a href="#1-定义：" class="headerlink" title="1. 定义："></a>1. 定义：</h4><p>递归方法：一个方法体内调用它自身。</p>
<h4 id="2-如何理解递归方法？"><a href="#2-如何理解递归方法？" class="headerlink" title="2. 如何理解递归方法？"></a>2. 如何理解递归方法？</h4><p>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象初级-(三)</title>
    <url>/articles/ef2a22c0.html</url>
    <content><![CDATA[<h3 id="1-面向对象的特征一：封装性"><a href="#1-面向对象的特征一：封装性" class="headerlink" title="1 面向对象的特征一：封装性"></a>1 面向对象的特征一：封装性</h3><h4 id="1-为什么要引入封装性？"><a href="#1-为什么要引入封装性？" class="headerlink" title="1.为什么要引入封装性？"></a>1.为什么要引入封装性？</h4><p>我们程序设计追求“高内聚，低耦合”。<br>高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；<br>低耦合 ：仅对外暴露少量的方法用于使用。</p>
<p>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</p>
<h4 id="2-问题引入："><a href="#2-问题引入：" class="headerlink" title="2.问题引入："></a>2.问题引入：</h4><p>当我们创建一个类的对象以后，我们可以通过”对象.属性”的方式，对对象的属性进行赋值。这里，赋值操作要受到属性的数据类型和存储范围的制约。除此之外，没其他制约条件。但是，在实际问题中，<code>我们往往需要给属性赋值加入额外的限制条件。这个条件就不能在属性声明时体现，我们只能通过方法进行限制条件的添加。</code>（比如：setLegs()同时，我们需要避免用户再使用”对象.属性”的方式对属性进行赋值。<code>则需要将属性声明为私有的(private).</code><br>  –&gt;此时，针对于属性就体现了封装性。</p>
<h4 id="3-封装性思想具体的代码体现："><a href="#3-封装性思想具体的代码体现：" class="headerlink" title="3.封装性思想具体的代码体现："></a>3.封装性思想具体的代码体现：</h4><p>体现一：将类的属性xxx私化(private),同时，提供公共的(public)方法来获取(getXxx)和设置(setXxx)此属性的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>体现二：不对外暴露的私有的方法<br><code>体现三：单例模式（将构造器私有化）</code></p>
<blockquote>
<p>有个概念，设计模式会专门讲</p>
</blockquote>
<h3 id="2-单例设计模式与-main-的理解"><a href="#2-单例设计模式与-main-的理解" class="headerlink" title="2 单例设计模式与 main()的理解"></a>2 单例设计模式与 main()的理解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">singleton</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式，线程安全</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BankTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BankTest</span> <span class="variable">bank1</span> <span class="operator">=</span> BankTest.getinstance();</span><br><span class="line">        <span class="type">BankTest</span> <span class="variable">bank2</span> <span class="operator">=</span> BankTest.getinstance();</span><br><span class="line">        System.out.println(bank2 == bank1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BankTest</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.通过动态方法使全局获得唯一的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">BankTest</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankTest</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.调用方法返回单例对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BankTest <span class="title function_">getinstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉式,线程不安全，//TODO在后面线程章节会解决</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">instance1</span> <span class="operator">=</span> GirlFriend.getInstance();</span><br><span class="line">        <span class="type">GirlFriend</span> <span class="variable">instance2</span> <span class="operator">=</span> GirlFriend.getInstance();</span><br><span class="line">        System.out.println(instance2 == instance1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2,声明当前类的实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3，获取当前类的示例，如果未创建对象，则创建对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GirlFriend <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">GirlFriend</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>main()方法作为程序的入口</li>
<li>main()方法也是一个普通的静态方法</li>
<li>main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner）</li>
</ol>
<p>如何将控制台获取的数据传给形参：String[] args?<br>  运行时：java 类名 “Tom” “Jerry” “123” “true”<br>sysout(args[0]);&#x2F;&#x2F;“Tom”<br>sysout(args[3]);&#x2F;&#x2F;“true”  –&gt;Boolean.parseBoolean(args[3]);<br>sysout(args[4]);&#x2F;&#x2F;报异常<br>public static void main(String[] args){&#x2F;&#x2F;方法体}</p>
<p>修饰符：<code>static \ final \ abstract \native 可以用来修饰方法</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">main()&#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">    p.eat();</span><br><span class="line">    <span class="comment">//p.earnMoney();</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Man</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">    man.eat();</span><br><span class="line">    man.earnMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>体现四：如果不希望类在包外被调用，可以将类设置为缺省的。</p>
<h3 id="3-几种不同权限修饰符的测试"><a href="#3-几种不同权限修饰符的测试" class="headerlink" title="3 几种不同权限修饰符的测试"></a>3 几种不同权限修饰符的测试</h3><p>Java规定的四种权限修饰符</p>
<h4 id="1-权限从小到大顺序为：private-缺省-protected-public"><a href="#1-权限从小到大顺序为：private-缺省-protected-public" class="headerlink" title="1.权限从小到大顺序为：private &lt;  缺省 &lt; protected &lt; public"></a>1.权限从小到大顺序为：private &lt;  缺省 &lt; protected &lt; public</h4><h4 id="2-具体的修饰范围："><a href="#2-具体的修饰范围：" class="headerlink" title="2.具体的修饰范围："></a>2.具体的修饰范围：</h4><p><img src="https://blog-resources.this0.com/image/202403301611854.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="3-权限修饰符可用来修饰的结构说明："><a href="#3-权限修饰符可用来修饰的结构说明：" class="headerlink" title="3 .权限修饰符可用来修饰的结构说明："></a>3 .权限修饰符可用来修饰的结构说明：</h4><p>四种权限都可以用来修饰类的内部结构：属性、方法、<code>构造器、内部类</code><br><code>修饰类的话，只能使用：缺省、public</code></p>
<h3 id="4-面向对象的特征二：继承性"><a href="#4-面向对象的特征二：继承性" class="headerlink" title="4 面向对象的特征二：继承性"></a>4 面向对象的特征二：继承性</h3><h4 id="1-继承性的理解"><a href="#1-继承性的理解" class="headerlink" title="1.继承性的理解"></a>1.继承性的理解</h4><p>为什么要有类的继承性？(继承性的好处）<br> ① 减少了代码的冗余，提高了代码的复用性<br> ② 便于功能的扩展<br> ③ 为之后多态性的使用，提供了前提<br>图示：<br><img src="https://blog-resources.this0.com/image/202403301611852.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="2-继承的使用"><a href="#2-继承的使用" class="headerlink" title="2.继承的使用"></a>2.继承的使用</h4><p>继承性的格式：<br>class A extends B{}<br>  A:子类、派生类、subclass<br> B:父类、超类、基类、superclass</p>
<h4 id="3-子类继承父类以后有哪些不同？"><a href="#3-子类继承父类以后有哪些不同？" class="headerlink" title="3.子类继承父类以后有哪些不同？"></a>3.子类继承父类以后有哪些不同？</h4><p>​	3.1体现：一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。<br>​       特别的，父类中声明为private的属性或方法，<code>子类继承父类以后，仍然认为获取了父类中私的结构。只因为封装性的影响，使得子类不能直接调用父类的结构而已。</code><br>​	3.2 子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。<br>​       子类和父类的关系，不同于子集和集合的关系。<br>​        extends：延展、扩展</p>
<h4 id="4-Java中继承性的说明"><a href="#4-Java中继承性的说明" class="headerlink" title="4.Java中继承性的说明"></a>4.Java中继承性的说明</h4><p>​	4.1一个类可以被多个子类继承。<br>​	4.2Java中类的单继承性：一个类只能有一个父类<br>​	4.3子父类是相对的概念。<br>​	4.4子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类<br>​	4.5子类继承父类以后，就获取了直接父类以及所间接父类中声明的属性和方法<br>图示：<br><img src="https://blog-resources.this0.com/image/202403301611118.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h3 id="5-面向对象的特征三：多态性"><a href="#5-面向对象的特征三：多态性" class="headerlink" title="5 面向对象的特征三：多态性"></a>5 面向对象的特征三：多态性</h3><h4 id="1-何为多态性："><a href="#1-何为多态性：" class="headerlink" title="1.何为多态性："></a>1.何为多态性：</h4><p>对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）<br>举例：<br>Person p &#x3D; new Man();<br>Object obj &#x3D; new Date();<br>3.多态性的使用：<code>虚拟方法调用</code></p>
<p>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。<br>总结：编译，看左边；运行，看右边。</p>
<h4 id="2-多态性的使用前提："><a href="#2-多态性的使用前提：" class="headerlink" title="2.多态性的使用前提："></a>2.多态性的使用前提：</h4><p>① 类的继承关系<br>② 方法的重写</p>
<h4 id="3-多态性的应用举例："><a href="#3-多态性的应用举例：" class="headerlink" title="3.多态性的应用举例："></a>3.多态性的应用举例：</h4><p>举例一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(Animal animal)</span>&#123;<span class="comment">//Animal animal = new Dog();</span></span><br><span class="line">    animal.eat();</span><br><span class="line">    animal.shout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Object obj)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>举例三：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Driver</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doData</span><span class="params">(Connection conn)</span>&#123;<span class="comment">//conn = new MySQlConnection(); / conn = new OracleConnection();</span></span><br><span class="line">        <span class="comment">//规范的步骤去操作数据</span></span><br><span class="line">        <span class="comment">//		conn.method1();</span></span><br><span class="line">        <span class="comment">//		conn.method2();</span></span><br><span class="line">        <span class="comment">//		conn.method3();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多态性使用的注意点：<br><code>对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</code></p>
<h4 id="4-虚拟方法调用的再理解"><a href="#4-虚拟方法调用的再理解" class="headerlink" title="4.虚拟方法调用的再理解"></a>4.虚拟方法调用的再理解</h4><p>子类中定义了与父类同名同参数的方法，<code>在多态情况下，将此时父类的方法称为虚拟方法，</code>父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。</p>
<h4 id="5-面试题"><a href="#5-面试题" class="headerlink" title="5.面试题"></a>5.面试题</h4><p>区分方法的重写和重载？<br>答：<br>① 二者的概念：<br>② 重载和重写的具体规则<br>③ 重载：不表现为多态性。<br>重写：表现为多态性。<br>重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。<br>所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；<br>而对于多态，只等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。 <br>引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚绑定，它就不是多态。” </p>
<h3 id="6-面向对象-进阶-向下转型与多态性"><a href="#6-面向对象-进阶-向下转型与多态性" class="headerlink" title="6.面向对象(进阶)-向下转型与多态性"></a>6.面向对象(进阶)-向下转型与多态性</h3><h4 id="1-关于向上转型与向下转型："><a href="#1-关于向上转型与向下转型：" class="headerlink" title="1.关于向上转型与向下转型："></a>1.关于向上转型与向下转型：</h4><p>向上转型：多态(<code>调用父类的方法</code>)</p>
<h4 id="2-向下转型-调用子类的方法"><a href="#2-向下转型-调用子类的方法" class="headerlink" title="2.向下转型(调用子类的方法)"></a>2.向下转型(<code>调用子类的方法</code>)</h4><h5 id="2-1-为什么使用向下转型："><a href="#2-1-为什么使用向下转型：" class="headerlink" title="2.1 为什么使用向下转型："></a>2.1 为什么使用向下转型：</h5><p>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。<code>如何才能调用子类特的属性和方法？使用向下转型。</code></p>
<h5 id="2-2-如何实现向下转型："><a href="#2-2-如何实现向下转型：" class="headerlink" title="2.2 如何实现向下转型："></a>2.2 如何实现向下转型：</h5><p>使用强制类型转换符：()</p>
<h5 id="2-3-使用时的注意点："><a href="#2-3-使用时的注意点：" class="headerlink" title="2.3 使用时的注意点："></a>2.3 使用时的注意点：</h5><p>​	① 使用强转时，可能出现ClassCastException的异常。<br>​	② 为了避免在向下转型时出现ClassCastException的异常，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。</p>
<h5 id="2-4-instanceof的使用："><a href="#2-4-instanceof的使用：" class="headerlink" title="2.4 instanceof的使用："></a>2.4 instanceof的使用：</h5><p>​	① a instanceof A:判断对象a是否是类A的实例。如果是，返回true；如果不是，返回false。<br>​	② 如果 a instanceof A返回true,则 a instanceof B也返回true.其中，类B是类A的父类。<br>​	③ 要求a所属的类与类A必须是子类和父类的关系，否则编译错误。</p>
<h5 id="2-5-图示："><a href="#2-5-图示：" class="headerlink" title="2.5 图示："></a>2.5 图示：</h5><p><img src="https://blog-resources.this0.com/image/202403301611853.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="3-多态性的理解："><a href="#3-多态性的理解：" class="headerlink" title="3.多态性的理解："></a>3.多态性的理解：</h4><p>   <code>① 实现代码的通用性。</code><br>   ② Object类中定义的public boolean equals(Object obj){  }<br>       JDBC:使用java程序操作(获取数据库连接、CRUD)数据库(MySQL、Oracle、DB2、SQL Server)<br>   <code>③ 抽象类、接口的使用肯定体现了多态性。（抽象类、接口不能实例化）</code></p>
<p>④<code>作用总结：由于虚拟方法调用，能增加程序拓展性。</code></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象高级</title>
    <url>/articles/10086157.html</url>
    <content><![CDATA[<h3 id="1-面向对象-高级-抽象类与抽象方法的使用"><a href="#1-面向对象-高级-抽象类与抽象方法的使用" class="headerlink" title="1.面向对象(高级)-抽象类与抽象方法的使用"></a>1.面向对象(高级)-抽象类与抽象方法的使用</h3><p>abstract: 抽象的</p>
<h4 id="1-可以用来修饰：类、方法"><a href="#1-可以用来修饰：类、方法" class="headerlink" title="1.可以用来修饰：类、方法"></a>1.可以用来修饰：类、方法</h4><h4 id="2-具体的："><a href="#2-具体的：" class="headerlink" title="2.具体的："></a>2.具体的：</h4><p>abstract修饰类：抽象类</p>
<ul>
<li>此类不能实例化</li>
<li><code>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）</code></li>
<li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作</li>
<li>抽象的使用前提：继承性</li>
</ul>
<p>abstract修饰方法：抽象方法</p>
<ul>
<li>抽象方法只有方法的声明，没方法体</li>
<li>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。</li>
<li>若子类重写了父类中的所的抽象方法后，此子类方可实例化</li>
<li>若子类没重写父类中的所的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰</li>
</ul>
<h4 id="3-注意点："><a href="#3-注意点：" class="headerlink" title="3.注意点："></a>3.注意点：</h4><h5 id="3-1-abstract不能用来修饰：属性、构造器等结构"><a href="#3-1-abstract不能用来修饰：属性、构造器等结构" class="headerlink" title="3.1.abstract不能用来修饰：属性、构造器等结构"></a>3.1.<code>abstract不能用来修饰：属性、构造器等结构</code></h5><h5 id="3-2-abstract不能用来修饰私有方法、静态方法、final的方法、final的类"><a href="#3-2-abstract不能用来修饰私有方法、静态方法、final的方法、final的类" class="headerlink" title="3.2.abstract不能用来修饰私有方法、静态方法、final的方法、final的类"></a>3.2.<code>abstract不能用来修饰私有方法、静态方法、final的方法、final的类</code></h5><h4 id="4-abstract的应用举例："><a href="#4-abstract的应用举例：" class="headerlink" title="4.abstract的应用举例："></a>4.abstract的应用举例：</h4><p>举例一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">GeometricObject</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">GeometricObject</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例二：IO流中设计到的抽象类：InputStream&#x2F;OutputStream &#x2F; Reader &#x2F;Writer。在其内部定义了抽象的read()、write()方法。</p>
<h3 id="2-面向对象-高级-模板方法设计模式"><a href="#2-面向对象-高级-模板方法设计模式" class="headerlink" title="2.面向对象(高级)-模板方法设计模式"></a>2.面向对象(高级)-模板方法设计模式</h3><h4 id="1-解决的问题"><a href="#1-解决的问题" class="headerlink" title="1 解决的问题"></a>1 解决的问题</h4><p>在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。</p>
<h4 id="2-举例"><a href="#2-举例" class="headerlink" title="2 举例"></a>2 举例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Template</span>&#123;</span><br><span class="line">    <span class="comment">//计算某段代码执行所需要花费的时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spendTime</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.code();<span class="comment">//不确定的部分、易变的部分</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubTemplate</span> <span class="keyword">extends</span> <span class="title class_">Template</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;i &lt;= <span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;j &lt;= Math.sqrt(i);j++)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                    isFlag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isFlag)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-面向对象-高级-接口的使用"><a href="#3-面向对象-高级-接口的使用" class="headerlink" title="3.面向对象(高级)-接口的使用"></a>3.面向对象(高级)-接口的使用</h3><h4 id="1-接口的定义"><a href="#1-接口的定义" class="headerlink" title="1.接口的定义"></a>1.接口的定义</h4><h5 id="1-接口概述"><a href="#1-接口概述" class="headerlink" title="1 接口概述"></a>1 接口概述</h5><p>接口使用interface来定义</p>
<p>Java中，接口和类是并列的两个结构</p>
<h5 id="2-接口的定义"><a href="#2-接口的定义" class="headerlink" title="2 接口的定义"></a>2 接口的定义</h5><p>如何定义接口：定义接口中的成员</p>
<h6 id="1-JDK7及以前：只能定义全局常量和抽象方法"><a href="#1-JDK7及以前：只能定义全局常量和抽象方法" class="headerlink" title="1 JDK7及以前：只能定义全局常量和抽象方法"></a>1 JDK7及以前：只能定义全局常量和抽象方法</h6><pre><code>         &gt;全局常量：public static final的.但是书写时，可以省略不写
         &gt;抽象方法：public abstract的
</code></pre>
<h6 id="2-JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法"><a href="#2-JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法" class="headerlink" title="2 JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法"></a>2 JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法</h6><h5 id="3-接口中不能定义构造器！意味着接口不可以实例化"><a href="#3-接口中不能定义构造器！意味着接口不可以实例化" class="headerlink" title="3 接口中不能定义构造器！意味着接口不可以实例化"></a>3 接口中不能定义构造器！意味着接口不可以实例化</h5><h5 id="4-Java开发中，接口通过让类去实现-implements-的方式来使用"><a href="#4-Java开发中，接口通过让类去实现-implements-的方式来使用" class="headerlink" title="4. Java开发中，接口通过让类去实现(implements)的方式来使用."></a>4. Java开发中，接口通过让类去实现(implements)的方式来使用.</h5><p>​     如果实现类覆盖了接口中所有的抽象方法，则此实现类就可以实例化<br>​     如果实现类没覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</p>
<h5 id="5-Java类可以实现多个接口-—-弥补了Java单继承性的局限性"><a href="#5-Java类可以实现多个接口-—-弥补了Java单继承性的局限性" class="headerlink" title="5. Java类可以实现多个接口   —&gt;弥补了Java单继承性的局限性"></a>5. Java类可以实现多个接口   —&gt;弥补了Java单继承性的局限性</h5><p>​    格式：class AA extends BB implements CC,DD,EE</p>
<h5 id="6-接口与接口之间可以继承，而且可以多继承"><a href="#6-接口与接口之间可以继承，而且可以多继承" class="headerlink" title="6. 接口与接口之间可以继承，而且可以多继承"></a>6. 接口与接口之间可以继承，而且可以多继承</h5><h5 id="7-接口的具体使用体现了多态性"><a href="#7-接口的具体使用体现了多态性" class="headerlink" title="7. 接口的具体使用体现了多态性"></a>7. 接口的具体使用体现了多态性</h5><h5 id="8-接口，实际上可以看做是一种规范"><a href="#8-接口，实际上可以看做是一种规范" class="headerlink" title="8. 接口，实际上可以看做是一种规范"></a>8. 接口，实际上可以看做是一种规范</h5><h4 id="2-举例："><a href="#2-举例：" class="headerlink" title="2.举例："></a>2.举例：</h4><p><img src="https://blog-resources.this0.com/image/202403301613719.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<p>​	</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferData</span><span class="params">(USB usb)</span>&#123;<span class="comment">//USB usb = new Flash();</span></span><br><span class="line">        usb.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;具体传输数据的细节&quot;</span>);</span><br><span class="line"></span><br><span class="line">        usb.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">USB</span>&#123;</span><br><span class="line">    <span class="comment">//常量：定义了长、宽、最大最小的传输速度等</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Flash</span> <span class="keyword">implements</span> <span class="title class_">USB</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;U盘开启工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;U盘结束工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Printer</span> <span class="keyword">implements</span> <span class="title class_">USB</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印机开启工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印机结束工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>体会：<br> ①接口使用上也满足多态性<br> ②接口，实际上就是定义了一种规范<br> ③开发中，体会面向接口编程！	</p>
<h4 id="3-体会面向接口编程的思想"><a href="#3-体会面向接口编程的思想" class="headerlink" title="3.体会面向接口编程的思想"></a>3.体会面向接口编程的思想</h4><p><img src="https://blog-resources.this0.com/image/202403301616449.png?x-oss-process=style/this0-blog" alt="image.png"><br>面向接口编程：我们在应用程序中，调用的结构都是JDBC中定义的接口，不会出现具体某一个数据库厂商的API。</p>
<h4 id="4-面试题："><a href="#4-面试题：" class="headerlink" title="4.面试题："></a>4.面试题：</h4><p>抽象类和接口的异同？<br>相同点：不能实例化；都可以包含抽象方法的。<br>不同点：<br>①把抽象类和接口(java7,java8,java9)的定义、内部结构解释说明<br>②类：   单继承     接口：多继承<br>   类与接口：		多实现</p>
<h3 id="4-面向对象-高级-JDK8-和-JDK9-中接口的新特性"><a href="#4-面向对象-高级-JDK8-和-JDK9-中接口的新特性" class="headerlink" title="4.面向对象(高级)-JDK8 和 JDK9 中接口的新特性"></a>4.面向对象(高级)-JDK8 和 JDK9 中接口的新特性</h3><h4 id="1-Java8中关于接口的新规范"><a href="#1-Java8中关于接口的新规范" class="headerlink" title="1.Java8中关于接口的新规范"></a>1.Java8中关于接口的新规范</h4><p><code>知识点1：接口中定义的静态方法，只能通过接口来调用。</code><br><code>知识点2：通过实现类的对象，可以调用接口中的默认方法。</code><br>如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法<br>知识点3：<code>如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没重写此方法的情况下，默认调用的是父类中的同名同参数的方法。--&gt;类优先原则</code><br>知识点4：如果<code>实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没重写此方法的情况下，报错。</code>–&gt;接口冲突。这就需要我们必须在实现类中重写此方法。<br>知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    method3();<span class="comment">//调用自己定义的重写的方法</span></span><br><span class="line">    <span class="built_in">super</span>.method3();<span class="comment">//调用的是父类中声明的</span></span><br><span class="line">    <span class="comment">//调用接口中的默认方法</span></span><br><span class="line">    CompareA.<span class="built_in">super</span>.method3();</span><br><span class="line">    CompareB.<span class="built_in">super</span>.method3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-面向对象-高级-枚举类的两种定义方式"><a href="#5-面向对象-高级-枚举类的两种定义方式" class="headerlink" title="5.面向对象(高级)-枚举类的两种定义方式"></a>5.面向对象(高级)-枚举类的两种定义方式</h3><h4 id="1-枚举类的说明："><a href="#1-枚举类的说明：" class="headerlink" title="1.枚举类的说明："></a>1.枚举类的说明：</h4><p>1.1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类<br>1.2当需要定义一组常量时，强烈建议使用枚举类<br><code>1.3如果枚举类中只有一个对象，则可以作为单例模式的实现方式。</code></p>
<h4 id="2-如何自定义枚举类？步骤："><a href="#2-如何自定义枚举类？步骤：" class="headerlink" title="2.如何自定义枚举类？步骤："></a>2.如何自定义枚举类？步骤：</h4><p>自定义枚举类<br>class Season{</p>
<h5 id="2-1声明Season对象的属性-private-final修饰"><a href="#2-1声明Season对象的属性-private-final修饰" class="headerlink" title="2.1声明Season对象的属性:private final修饰"></a>2.1声明Season对象的属性:private final修饰</h5><p> private final String seasonName;<br> private final String seasonDesc;</p>
<h5 id="2-2私化类的构造器-并给对象属性赋值"><a href="#2-2私化类的构造器-并给对象属性赋值" class="headerlink" title="2.2私化类的构造器,并给对象属性赋值"></a>2.2私化类的构造器,并给对象属性赋值</h5><p> private Season(String seasonName,String seasonDesc){<br>     this.seasonName &#x3D; seasonName;<br>     this.seasonDesc &#x3D; seasonDesc;<br> }</p>
<h5 id="2-3提供当前枚举类的多个对象：public-static-final的"><a href="#2-3提供当前枚举类的多个对象：public-static-final的" class="headerlink" title="2.3提供当前枚举类的多个对象：public static final的"></a>2.3提供当前枚举类的多个对象：public static final的</h5><p> public static final Season SPRING &#x3D; new Season(“春天”,”春暖花开”);<br> public static final Season SUMMER &#x3D; new Season(“夏天”,”夏日炎炎”);<br> public static final Season AUTUMN &#x3D; new Season(“秋天”,”秋高气爽”);<br> public static final Season WINTER &#x3D; new Season(“冬天”,”冰天雪地”);</p>
<h5 id="2-4-其他诉求1：获取枚举类对象的属性"><a href="#2-4-其他诉求1：获取枚举类对象的属性" class="headerlink" title="2.4.其他诉求1：获取枚举类对象的属性"></a>2.4.其他诉求1：获取枚举类对象的属性</h5><p> public String getSeasonName() {<br>     return seasonName;<br> }</p>
<p> public String getSeasonDesc() {<br>     return seasonDesc;<br> }</p>
<h5 id="2-5其他诉求1：提供toString"><a href="#2-5其他诉求1：提供toString" class="headerlink" title="2.5其他诉求1：提供toString()"></a>2.5其他诉求1：提供toString()</h5><p> @Override<br> public String toString() {<br>     return “Season{“ +<br>             “seasonName&#x3D;’” + seasonName + ‘&#39;‘ +<br>             “, seasonDesc&#x3D;’” + seasonDesc + ‘&#39;‘ +<br>             ‘}’;<br>     }<br>}</p>
<h4 id="3-jdk-5-0-新增使用enum定义枚举类。步骤："><a href="#3-jdk-5-0-新增使用enum定义枚举类。步骤：" class="headerlink" title="3.jdk 5.0 新增使用enum定义枚举类。步骤："></a>3.jdk 5.0 新增使用enum定义枚举类。步骤：</h4><p>使用enum关键字枚举类<br>enum Season1 {</p>
<h5 id="3-1提供当前枚举类的对象，多个对象之间用”-”隔开，末尾对象”-”结束"><a href="#3-1提供当前枚举类的对象，多个对象之间用”-”隔开，末尾对象”-”结束" class="headerlink" title="3.1提供当前枚举类的对象，多个对象之间用”,”隔开，末尾对象”;”结束"></a>3.1提供当前枚举类的对象，多个对象之间用”,”隔开，末尾对象”;”结束</h5><p> SPRING(“春天”,”春暖花开”),<br> SUMMER(“夏天”,”夏日炎炎”),<br> AUTUMN(“秋天”,”秋高气爽”),<br> WINTER(“冬天”,”冰天雪地”);</p>
<h5 id="3-2声明Season对象的属性-private-final修饰"><a href="#3-2声明Season对象的属性-private-final修饰" class="headerlink" title="3.2声明Season对象的属性:private final修饰"></a>3.2声明Season对象的属性:private final修饰</h5><p> private final String seasonName;<br> private final String seasonDesc;</p>
<h5 id="3-3私化类的构造器-并给对象属性赋值"><a href="#3-3私化类的构造器-并给对象属性赋值" class="headerlink" title="3.3私化类的构造器,并给对象属性赋值"></a>3.3私化类的构造器,并给对象属性赋值</h5><p> private Season1(String seasonName,String seasonDesc){<br>     this.seasonName &#x3D; seasonName;<br>     this.seasonDesc &#x3D; seasonDesc;<br> }</p>
<h5 id="3-4其他诉求1：获取枚举类对象的属性"><a href="#3-4其他诉求1：获取枚举类对象的属性" class="headerlink" title="3.4其他诉求1：获取枚举类对象的属性"></a>3.4其他诉求1：获取枚举类对象的属性</h5><p> public String getSeasonName() {<br>     return seasonName;<br> }</p>
<p> public String getSeasonDesc() {<br>     return seasonDesc;<br> }</p>
<p>}</p>
<h5 id="3-5开发使用实例，了解（每个项目都要用到）"><a href="#3-5开发使用实例，了解（每个项目都要用到）" class="headerlink" title="3.5开发使用实例，了解（每个项目都要用到）"></a>3.5开发使用实例，了解（每个项目都要用到）</h5><p>使用lombok注解简化了开发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    FAIL(<span class="number">201</span>, <span class="string">&quot;失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-使用enum定义枚举类之后，枚举类常用方法：（继承于java-lang-Enum类）"><a href="#4-使用enum定义枚举类之后，枚举类常用方法：（继承于java-lang-Enum类）" class="headerlink" title="4.使用enum定义枚举类之后，枚举类常用方法：（继承于java.lang.Enum类）"></a>4.使用enum定义枚举类之后，枚举类常用方法：（继承于java.lang.Enum类）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Season1</span> <span class="variable">summer</span> <span class="operator">=</span> Season1.SUMMER;</span><br><span class="line"><span class="comment">//toString():返回枚举类对象的名称</span></span><br><span class="line">System.out.println(summer.toString());</span><br><span class="line">System.out.println(Season1.class.getSuperclass());</span><br><span class="line">System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"><span class="comment">//values():返回所有的枚举类对象构成的数组</span></span><br><span class="line">Season1[] values = Season1.values();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; values.length;i++)&#123;</span><br><span class="line">    System.out.println(values[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">Thread.State[] values1 = Thread.State.values();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values1.length; i++) &#123;</span><br><span class="line">    System.out.println(values1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span></span><br><span class="line"></span><br><span class="line"><span class="type">Season1</span> <span class="variable">winter</span> <span class="operator">=</span> Season1.valueOf(<span class="string">&quot;WINTER&quot;</span>);</span><br><span class="line"><span class="comment">//如果没objName的枚举类对象，则抛异常：IllegalArgumentException</span></span><br><span class="line"><span class="type">Season1</span> <span class="variable">winter</span> <span class="operator">=</span> Season1.valueOf(<span class="string">&quot;WINTER1&quot;</span>);</span><br><span class="line">System.out.println(winter);</span><br></pre></td></tr></table></figure>

<h4 id="5-使用enum定义枚举类之后，如何让枚举类对象分别实现接口："><a href="#5-使用enum定义枚举类之后，如何让枚举类对象分别实现接口：" class="headerlink" title="5.使用enum定义枚举类之后，如何让枚举类对象分别实现接口："></a>5.使用enum定义枚举类之后，如何让枚举类对象分别实现接口：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用enum关键字枚举类</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season1</span> <span class="keyword">implements</span> <span class="title class_">Info</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line"></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;春天在哪里？&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;宁夏&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秋天不回来&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大约在冬季&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-面向对象-高级-Annotation-注解、单元测试的使用"><a href="#6-面向对象-高级-Annotation-注解、单元测试的使用" class="headerlink" title="6.面向对象(高级)-Annotation 注解、单元测试的使用"></a>6.面向对象(高级)-Annotation 注解、单元测试的使用</h3><h4 id="1-注解的理解"><a href="#1-注解的理解" class="headerlink" title="1.注解的理解"></a>1.注解的理解</h4><p><code>①Jdk5.0 新增的功能</code></p>
<p>② Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation,<br>程序员可以在不改变原逻辑的情况下, 在源文件中嵌入一些补充信息。<br>③在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE&#x2F;Android中注解占据了更重要的角色，例如用来配置应用程序的任何<code>切面</code>，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。<br>框架 &#x3D; 注解 + 反射机制 + 设计模式</p>
<h5 id="1-1注解的使用示例"><a href="#1-1注解的使用示例" class="headerlink" title="1.1注解的使用示例"></a>1.1注解的使用示例</h5><p>示例一：生成文档相关的注解<br>示例二：在编译时进行格式检查(JDK内置的个基本注解)<br> @Override: 限定重写父类方法, 该注解只能用于方法<br><code> @Deprecated: 用于表示所修饰的元素(类, 方法等)已过时。</code>通常是因为所修饰的结构危险或存在更好的选择<br> @SuppressWarnings: 抑制编译器警告</p>
<ul>
<li>示例：跟踪代码依赖性，实现替代配置文件功能</li>
</ul>
<h4 id="2-如何自定义注解：参照-SuppressWarnings定义"><a href="#2-如何自定义注解：参照-SuppressWarnings定义" class="headerlink" title="2.如何自定义注解：参照@SuppressWarnings定义"></a>2.<code>如何自定义注解</code>：参照@SuppressWarnings定义</h4><p>​	 ① 注解声明为：@interface<br>     ② 内部定义成员，通常使用value表示<br>     ③ 可以指定成员的默认值，使用default定义<br>​     ④ 如果自定义注解没成员，表明是一个标识作用。<br>​      <code>//要结合反射，先感受一下</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnototaion &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnototaion(name = &quot;yupengtao&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myannototionTest</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：<br><code>如果注解有成员，在使用注解时，需要指明成员的值。</code><br><code>自定义注解必须配上注解的信息处理流程(使用反射)才意义。</code><br>自定义注解通常都会<code>指明两个元注解：Retention、Target</code></p>
<p>代码举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Repeatable(MyAnnotations.class)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-元注解-：对现有的注解进行解释说明的注解。"><a href="#3-元注解-：对现有的注解进行解释说明的注解。" class="headerlink" title="3.元注解 ：对现有的注解进行解释说明的注解。"></a>3.元注解 ：对现有的注解进行解释说明的注解。</h4><p>jdk 提供的4种元注解：<br>  <code>Retention：指定所修饰的 Annotation 的生命周期：</code><br>  SOURCE\CLASS<code>（默认行为\RUNTIME)</code><br>只有声明为RUNTIME生命周期的注解，才能通过反射获取。<br>  <code>Target:用于指定被修饰的 Annotation 能用于修饰哪些程序元素</code><br>  @Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR,LOCAL_VARIABLE})<br>  下面注解出现的频率较低:<br>  Documented:表示所修饰的注解在被javadoc解析时，保留下来。<br>  Inherited:被它修饰的 Annotation 将具继承性。<br>  —&gt;类比：<code>元数据</code>的概念：String name &#x3D; “Tom”;</p>
<h4 id="4-如何获取注解信息-通过反射来进行获取、调用。"><a href="#4-如何获取注解信息-通过反射来进行获取、调用。" class="headerlink" title="4.如何获取注解信息:通过反射来进行获取、调用。"></a>4.如何获取注解信息:通过反射来进行获取、调用。</h4><p>前提：要求此注解的元注解Retention中声明的生命周期状态为：RUNTIME.</p>
<h4 id="5-JDK8中注解的新特性：可重复注解、类型注解"><a href="#5-JDK8中注解的新特性：可重复注解、类型注解" class="headerlink" title="5.JDK8中注解的新特性：可重复注解、类型注解"></a>5.JDK8中注解的新特性：可重复注解、类型注解</h4><h5 id="5-1-可重复注解："><a href="#5-1-可重复注解：" class="headerlink" title="5.1 可重复注解："></a>5.1 <code>可重复注解：</code></h5><p><strong>从 Java 8 开始，所有包含 <code>value()</code> 方法且返回值类型为数组的注解，都被隐式地视为可重复注解。 而不用显示的使用@Repeatable注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Authors &#123;</span><br><span class="line">    Author[] value();</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Author(name = &quot;Alice&quot;)</span></span><br><span class="line">    <span class="meta">@Author(name = &quot;Bob&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-类型注解："><a href="#5-2-类型注解：" class="headerlink" title="5.2 类型注解："></a>5.2 <code>类型注解：</code></h5><p>ElementType.TYPE_PARAMETER 表示该注解能写在什么类型变量的声明语句中（如：泛型声明。</p>
<p>ElementType.TYPE_USE 表示该注解能写在任何使用类型的语句中。</p>
<h4 id="6-Java中的JUnit单元测试"><a href="#6-Java中的JUnit单元测试" class="headerlink" title="6.Java中的JUnit单元测试"></a>6.Java中的JUnit单元测试</h4><p>步骤：<br>     6.1中当前工程 - 右键择：build path - add libraries - JUnit 4 - 下一步<br>     6.2.创建Java类，进行单元测试。<br>此时的Java类要求：① 此类是public的  ②此类提供公共的无参的构造器<br><code>如果测试类需要进行依赖注入等复杂操作，则可以使用带参数的构造函数，并在测试方法上使用注解来指定运行器应该使用哪个构造函数进行实例化。例如，使用JUnit 4框架时，可以使用@RunWith(Parameterized.class)注解来指定带参数的构造函数。</code><br>    6.3.此类中声明单元测试方法。<br>此时的单元测试方法：<code>方法的权限是public,没返回值，没形参</code></p>
<p>​	6.4.此单元测试方法上需要声明注解：@Test,并在单元测试类中导入：import org.junit.Test;<br>​	6.5.声明好单元测试方法以后，就可以在方法体内测试相关的代码。<br>比如带参数的方法，放单元测试里面<br>​	6.6.写完代码以后，左键双击单元测试方法名，右键：run as - JUnit Test<br>​	6.7.自定义单元测试模板 test<br><img src="https://blog-resources.this0.com/image/202403301617016.png?x-oss-process=style/this0-blog" alt="image.png"><br>  说明：<br> ①如果执行结果没任何异常：绿条<br> ②如果执行结果出现异常：红条</p>
<h3 id="7-面向对象-高级-包装类的理解-基本数据类型与包装类间的转换"><a href="#7-面向对象-高级-包装类的理解-基本数据类型与包装类间的转换" class="headerlink" title="7.面向对象(高级)-包装类的理解_基本数据类型与包装类间的转换"></a>7.面向对象(高级)-包装类的理解_基本数据类型与包装类间的转换</h3><h4 id="1-为什么要有包装类-或封装类）"><a href="#1-为什么要有包装类-或封装类）" class="headerlink" title="1.为什么要有包装类(或封装类）"></a>1.为什么要有包装类(或封装类）</h4><p>为了使基本数据类型的变量具有类的特征，引入包装类。</p>
<h4 id="2-基本数据类型与对应的包装类："><a href="#2-基本数据类型与对应的包装类：" class="headerlink" title="2.基本数据类型与对应的包装类："></a>2.基本数据类型与对应的包装类：</h4><p><img src="https://blog-resources.this0.com/image/202403301617311.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="3-需要掌握的类型间的转换：（基本数据类型、包装类）"><a href="#3-需要掌握的类型间的转换：（基本数据类型、包装类）" class="headerlink" title="3.需要掌握的类型间的转换：（基本数据类型、包装类）"></a>3.需要掌握的类型间的转换：（基本数据类型、包装类）</h4><p>基本数据类型&lt;—&gt;包装类。JDK 5.0 新特性：自动装箱与自动拆箱</p>
<h5 id="1-装箱"><a href="#1-装箱" class="headerlink" title="1 装箱"></a>1 装箱</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> i; <span class="comment">// 自动装箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);<span class="comment">//手动装箱法1</span></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(<span class="number">10</span>);<span class="comment">//手动装箱法2</span></span><br></pre></td></tr></table></figure>

<h5 id="2-拆箱"><a href="#2-拆箱" class="headerlink" title="2 拆箱"></a>2 拆箱</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; <span class="comment">// 自动拆箱</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integerValue</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">intValue</span> <span class="operator">=</span> integerValue.intValue();	<span class="comment">//手动拆箱</span></span><br></pre></td></tr></table></figure>

<h3 id="8-面向对象-高级-String-与基本数据类型、包装类间的转换"><a href="#8-面向对象-高级-String-与基本数据类型、包装类间的转换" class="headerlink" title="8.面向对象(高级)-String 与基本数据类型、包装类间的转换"></a>8.面向对象(高级)-String 与基本数据类型、包装类间的转换</h3><h4 id="1-基本数据类型、包装类—-String-调用String重载的valueOf-Xxx-xxx"><a href="#1-基本数据类型、包装类—-String-调用String重载的valueOf-Xxx-xxx" class="headerlink" title="1.基本数据类型、包装类—&gt;String:调用String重载的valueOf(Xxx xxx)"></a>1.基本数据类型、包装类—&gt;String:调用String重载的valueOf(Xxx xxx)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基本数据类型、包装类--&gt;String</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(a);</span><br></pre></td></tr></table></figure>

<h4 id="2-String—-基本数据类型、包装类-调用包装类的parseXxx-String-s"><a href="#2-String—-基本数据类型、包装类-调用包装类的parseXxx-String-s" class="headerlink" title="2.String—&gt;基本数据类型、包装类:调用包装类的parseXxx(String s)"></a>2.String—&gt;基本数据类型、包装类:调用包装类的parseXxx(String s)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        String--&gt;基本数据类型</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> Byte.parseByte(s);</span><br><span class="line"><span class="comment">//        String--&gt;包装类</span></span><br><span class="line"><span class="type">Byte</span> <span class="variable">aByte</span> <span class="operator">=</span> Byte.valueOf(s);</span><br></pre></td></tr></table></figure>

<p> 注意：转换时，可能会报NumberFormatException</p>
<p><img src="https://blog-resources.this0.com/image/202403301618026.png?x-oss-process=style/this0-blog" alt="image.png"><br>应用场景举例：<br><code>① Vector类中关于添加元素，只定义了形参为Object类型的方法：</code><br><code>v.addElement(Object obj);   //基本数据类型 ---&gt;包装类 ---&gt;使用多态</code></p>
<h3 id="9-128陷阱"><a href="#9-128陷阱" class="headerlink" title="9 128陷阱"></a>9 128陷阱</h3><blockquote>
<p>原文链接：<a href="https://blog.csdn.net/qq_62636650/article/details/137029063">https://blog.csdn.net/qq_62636650/article/details/137029063</a></p>
</blockquote>
<p>​        128陷阱 是指在 Java 中，当比较 Integer 类型的数据时，有时候会发现两个明明相同的值，最后比较的结果为 false 。这是因为在 Java 中， Integer 是数据类型 int 的封装类。Java 设计者认为大家对数的使用大多在100以内，因此规定在-128至127之间的 Integer 类型的变量，直接指向常量池中的缓存地址，不会 new 开辟出新的空间。</p>
<p>下面提供一个示例，展示 128陷阱 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerComparisonExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">cc</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">dd</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        System.out.println((a == b));</span><br><span class="line">        System.out.println((c == d));</span><br><span class="line">        System.out.println((cc == dd));</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        System.out.println((a.equals(b)));</span><br><span class="line">        System.out.println((c.equals(d)));</span><br><span class="line">        System.out.println((cc.equals(dd)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>​        在上述代码中，定义了六个 Integer 类型的对象，分别是 a 、 b 、 c 、 d 、 cc 和 dd 。通过 &#x3D;&#x3D; 运算符比较它们的值，可以发现 a 和 b 的值相等，返回 true 。而 c 和 d 的值相等，返回 false 。这是因为 c 和 d 的值为128，自动装箱时超出了常量池的范围，创建了新的对象，因此它们的地址不同。使用 equals() 方法比较它们的值，结果都是 true ，因为 equals() 方法比较的是对象的值，而不是对象的地址。</p>
<pre><code>    这是因为，在Integer的valueOf()方中，当数值在-128-127之间时，数值都存储在有一个catch数组当中，该数组相当于一个缓存，当我们在-128-127之间进行自动装箱的时候，我们就直接返回该值在内存当中的地址，所以在-128-127之间的数值用==进行比较是相等的。
</code></pre>
<p>如何避免128陷阱<br>       为了避免 Integer 128陷阱 ，推荐使用 equals 方法进行比较，因为 equals 方法比较的是对象的内容，而不是引用。</p>
<h3 id="10-面向对象-高级-IDEA-中快捷键的使用和修改-TODO"><a href="#10-面向对象-高级-IDEA-中快捷键的使用和修改-TODO" class="headerlink" title="10.面向对象(高级)-IDEA 中快捷键的使用和修改&#x2F;&#x2F;TODO"></a>10.面向对象(高级)-IDEA 中快捷键的使用和修改&#x2F;&#x2F;TODO</h3><h3 id="11-面向对象-高级-IDEA-中如何调试程序-TODO"><a href="#11-面向对象-高级-IDEA-中如何调试程序-TODO" class="headerlink" title="11.面向对象(高级)-IDEA 中如何调试程序&#x2F;&#x2F;TODO"></a>11.面向对象(高级)-IDEA 中如何调试程序&#x2F;&#x2F;TODO</h3>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>集合框架</title>
    <url>/articles/7edb9ee1.html</url>
    <content><![CDATA[<h3 id="1-集合框架-数组的特点、弊端与集合框架体系介绍"><a href="#1-集合框架-数组的特点、弊端与集合框架体系介绍" class="headerlink" title="1.集合框架-数组的特点、弊端与集合框架体系介绍"></a><code>1.集合框架-数组的特点、弊端与集合框架体系介绍</code></h3><h4 id="1-集合与数组存储数据概述："><a href="#1-集合与数组存储数据概述：" class="headerlink" title="1.集合与数组存储数据概述："></a>1.集合与数组存储数据概述：</h4><p>集合、数组都是对多个数据进行存储操作的结构，简称Java容器。<br>说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt,.jpg,.avi，数据库中)</p>
<h4 id="2-数组存储的特点："><a href="#2-数组存储的特点：" class="headerlink" title="2.数组存储的特点："></a>2.数组存储的特点：</h4><p>一旦初始化以后，其长度就确定了。<br>数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。<br>  比如：String[] arr;int[] arr1;Object[] arr2;</p>
<h4 id="3-数组存储的弊端："><a href="#3-数组存储的弊端：" class="headerlink" title="3.数组存储的弊端："></a>3.数组存储的弊端：</h4><h5 id="3-1-一旦初始化以后，其长度就不可修改。"><a href="#3-1-一旦初始化以后，其长度就不可修改。" class="headerlink" title="3.1 一旦初始化以后，其长度就不可修改。"></a>3.1 一旦初始化以后，其长度就不可修改。</h5><h5 id="3-2-数组中提供的方法非常限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。"><a href="#3-2-数组中提供的方法非常限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。" class="headerlink" title="3.2 数组中提供的方法非常限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。"></a>3.2 数组中提供的方法非常限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。</h5><h5 id="3-3获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用"><a href="#3-3获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用" class="headerlink" title="3.3获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用"></a>3.3获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</h5><h5 id="3-4数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。"><a href="#3-4数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。" class="headerlink" title="3.4数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。"></a>3.4数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。</h5><h4 id="4-集合存储的优点："><a href="#4-集合存储的优点：" class="headerlink" title="4.集合存储的优点："></a>4.集合存储的优点：</h4><p>解决数组存储数据方面的弊端。</p>
<h4 id="5-概览"><a href="#5-概览" class="headerlink" title="5.概览"></a>5.概览</h4><p>|—-Collection接口：单列集合，用来存储一个一个的对象<br>   |—-List接口：存储有序的、可重复的数据。  –&gt;“动态”数组<br>        <code>|----ArrayList、LinkedList、Vector</code><br>   |—-Set接口：存储无序的、不可重复的数据   –&gt;一般意义的“集合”<br>       |—-HashSet、LinkedHashSet、TreeSet<br>  java.util.Map:存储一对一对的数据<br>|—-Ｍａｐ接口：存储无序的、不可重复的数据<br>         |—-HashMap、LinkedHashMap、TreeMap,Hashtable,Properties</p>
<h3 id="2-集合框架-Collection-接口中的方法测试"><a href="#2-集合框架-Collection-接口中的方法测试" class="headerlink" title="2.集合框架-Collection 接口中的方法测试"></a><code>2.集合框架-Collection 接口中的方法测试</code></h3><h4 id="1-单列集合框架结构"><a href="#1-单列集合框架结构" class="headerlink" title="1.单列集合框架结构"></a>1.单列集合框架结构</h4><p>  |—-Collection接口：单列集合，用来存储一个一个的对象<br>         |—-List接口：存储有序的、可重复的数据。  –&gt;“动态”数组<br>             |—-ArrayList、LinkedList、Vector<br>         |—-Set接口：存储无序的、不可重复的数据   –&gt;高中讲的“集合”<br>             |—-HashSet、LinkedHashSet、TreeSet<br>  对应图示：</p>
<p><img src="https://blog-resources.this0.com/image/202403301623507.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="2-Collection接口常用方法："><a href="#2-Collection接口常用方法：" class="headerlink" title="2.Collection接口常用方法："></a>2.Collection接口常用方法：</h4><p>add(Object obj),<br><code>addAll(Collection coll),</code><br>size(),<br>isEmpty(),<br>clear();<br>contains(Object obj),<br>containsAll(Collection coll),<br>remove(Object obj),<br>removeAll(Collection coll),<br><code>retainsAll(Collection coll),	//求两个集合的交集</code><br>equals(Object obj);<br>hasCode(),<br>toArray(),<br>iterator();</p>
<h4 id="3-Collection集合与数组间的转换"><a href="#3-Collection集合与数组间的转换" class="headerlink" title="3.Collection集合与数组间的转换"></a>3.Collection集合与数组间的转换</h4><p>&#x2F;&#x2F;集合 —&gt;数组：toArray()<br>Object[] arr &#x3D; <code>coll.toArray();</code><br>for(int i &#x3D; 0;i &lt; arr.length;i++){<br>    System.out.println(arr[i]);<br>}</p>
<p>&#x2F;&#x2F;拓展：数组 —&gt;集合:调用Arrays类的静态方法asList(T … t)<br>List<String> list &#x3D; Arrays.<code>asList(new String[]&#123;&quot;AA&quot;, &quot;BB&quot;, &quot;CC&quot;&#125;);</code></p>
<p><code>Arrays.asList(new int[]&#123;123, 456&#125;)``返回的是一个固定大小的列表，不能进行添加操作</code>。System.out.println(list);</p>
<p>List arr1 &#x3D; Arrays.asList(new int[]{123, 456});<br>System.out.println(arr1.size());&#x2F;&#x2F;1	，当里面只有一个一维数组	&#x2F;&#x2F;TODO不懂</p>
<p>List arr2 &#x3D; Arrays.asList(new Integer[]{123, 456});<br>System.out.println(arr2.size());&#x2F;&#x2F;2</p>
<h4 id="4-使用Collection集合存储对象，要求对象所属的类满足："><a href="#4-使用Collection集合存储对象，要求对象所属的类满足：" class="headerlink" title="4.使用Collection集合存储对象，要求对象所属的类满足："></a>4.使用Collection集合存储对象，要求对象所属的类满足：</h4><p><code>向Collection接口的实现类的对象中添加数据obj时，要求obj所在类要重写equals().   （ 因为collection中的相关方法contains（）/remove()需要重写）</code></p>
<h4 id="5-增强for循环"><a href="#5-增强for循环" class="headerlink" title="5.增强for循环"></a><code>5.增强for循环</code></h4><h5 id="5-1-底层使用迭代器"><a href="#5-1-底层使用迭代器" class="headerlink" title="5.1.底层使用迭代器"></a>5.1.底层使用迭代器</h5><h5 id="5-2-是将集合或数组中的元素依次赋给临时变量（可能不会导致原有集合中元素被修改）"><a href="#5-2-是将集合或数组中的元素依次赋给临时变量（可能不会导致原有集合中元素被修改）" class="headerlink" title="5.2.是将集合或数组中的元素依次赋给临时变量（可能不会导致原有集合中元素被修改）"></a>5.2.是将集合或数组中的元素依次赋给临时变量（可能不会导致原有集合中元素被修改）</h5><h4 id="6-本章节对大家的要求："><a href="#6-本章节对大家的要求：" class="headerlink" title="6.本章节对大家的要求："></a>6.本章节对大家的要求：</h4><p>①选择合适的集合类去实现数据的保存，调用其内部的相关方法。</p>
<p>下面内容<code>暂不要求</code>：</p>
<p><code>②不同的集合类底层的数据结构为何？</code><br>③如何实现数据的操作的：增删改查等。（</p>
<h3 id="3-集合框架-List-接口常用方法的测试"><a href="#3-集合框架-List-接口常用方法的测试" class="headerlink" title="3.集合框架-List 接口常用方法的测试"></a><code>3.集合框架-List 接口常用方法的测试</code></h3><p>常用方法：(记住)<br>增：add(Object obj)<br>删：remove(int index) &#x2F; remove(Object obj)<br><code>改：set(int index, Object ele) 查：get(int index)</code><br><code>插：add(int index, Object ele)</code><br>长度：size()<br>遍历：</p>
<p>① Iterator迭代器方式-Collection集合的专用遍历方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;javaee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Iterator&lt;E&gt; iterator()：返回此集合中元素的迭代器，通过集合的iterator()方法得到</span></span><br><span class="line">        Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用while循环改进元素的判断和获取</span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>② 增强for循环-JDK5之后出现的,其内部原理是一个Iterator迭代器,实现Iterable接口的类才可以使用迭代器和增强for</p>
<p>注意：<code>增强for循环内部不能直接操作集合的元素,只推荐做遍历使用</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list =  <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;f&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1,数据类型一定是集合或者数组中元素的类型</span></span><br><span class="line">        <span class="comment">//2,str仅仅是一个变量名而已,在循环的过程中,依次表示集合或者数组中的每一个元素</span></span><br><span class="line">        <span class="comment">//3,list就是要遍历的集合或者数组</span></span><br><span class="line">        <span class="keyword">for</span>(String str : list)&#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>③ 普通的循环</p>
<h3 id="4-集合框架-List-不同实现类的对比及课后练习"><a href="#4-集合框架-List-不同实现类的对比及课后练习" class="headerlink" title="4.集合框架-List 不同实现类的对比及课后练习"></a><code>4.集合框架-List 不同实现类的对比及课后练习</code></h3><p>​      |—-ArrayList：作为List接口的主要实现类；线程不安全的，效率高,<code>遇到线程安全问题用collections自己包一下</code><br>​      |—-<code>LinkedList：对于频繁的插入、删除操作</code>，使用此类效率比ArrayList高；底层使用双向链表存储<br>​      |—-Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储  <code>彻底失宠，已经不用了</code></p>
<h3 id="5-集合的线程安全问题"><a href="#5-集合的线程安全问题" class="headerlink" title="5.集合的线程安全问题"></a>5.集合的线程安全问题</h3><p>使用Collections.synchronizedList方法包装成线程安全的ArrayList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSafeCollectionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个非线程安全的ArrayList</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用Collections.synchronizedList方法包装成线程安全的ArrayList</span></span><br><span class="line">        List&lt;Integer&gt; synchronizedList = Collections.synchronizedList(list);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建多个线程，并发地向synchronizedList中添加元素</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                synchronizedList.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建多个线程，并发地执行任务</span></span><br><span class="line">        List&lt;Thread&gt; threads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task);</span><br><span class="line">            threads.add(thread);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 等待所有线程执行完毕</span></span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 打印线程安全的ArrayList的大小</span></span><br><span class="line">        System.out.println(synchronizedList.size());  <span class="comment">// 应该为10000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> [面试题]<br> 面试题：ArrayList、LinkedList、Vector者的异同？<br> 同：三个类都是实现了List接口，存储数据的特点相同：存储序的、可重复的数据<br> 不同：<code>上面说过，自行回忆</code></p>
<h3 id="6-集合框架-Set-不同实现类的对比及-Set-无序性、不可重复性的剖析"><a href="#6-集合框架-Set-不同实现类的对比及-Set-无序性、不可重复性的剖析" class="headerlink" title="6.集合框架-Set 不同实现类的对比及 Set 无序性、不可重复性的剖析"></a><code>6.集合框架-Set 不同实现类的对比及 Set 无序性、不可重复性的剖析</code></h3><h4 id="1-存储的数据特点：无序的、不可重复的元素"><a href="#1-存储的数据特点：无序的、不可重复的元素" class="headerlink" title="1.存储的数据特点：无序的、不可重复的元素"></a>1.存储的数据特点：无序的、不可重复的元素</h4><p>​     以HashSet为例说明：</p>
<h5 id="1-1无序性：不等于随机性。存储的数据在底层数组中并非照数组索引的顺序添加，而是根据数据的哈希值决定的。"><a href="#1-1无序性：不等于随机性。存储的数据在底层数组中并非照数组索引的顺序添加，而是根据数据的哈希值决定的。" class="headerlink" title="1.1无序性：不等于随机性。存储的数据在底层数组中并非照数组索引的顺序添加，而是根据数据的哈希值决定的。"></a>1.1<code>无序性：不等于随机性。存储的数据在底层数组中并非照数组索引的顺序添加，而是根据数据的哈希值决定的。</code></h5><h5 id="1-2不可重复性：保证添加的元素按照equals-判断时，不能返回true-即：相同的元素只能添加一个。"><a href="#1-2不可重复性：保证添加的元素按照equals-判断时，不能返回true-即：相同的元素只能添加一个。" class="headerlink" title="1.2不可重复性：保证添加的元素按照equals()判断时，不能返回true.即：相同的元素只能添加一个。"></a>1.2不可重复性：保证添加的元素按照equals()判断时，不能返回true.即：相同的元素只能添加一个。</h5><h4 id="2-元素添加过程：-以HashSet为例-面试高频"><a href="#2-元素添加过程：-以HashSet为例-面试高频" class="headerlink" title="2.元素添加过程：(以HashSet为例)(面试高频)"></a>2.元素添加过程：(以HashSet为例)(面试高频)</h4><p>   我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值<br>     此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置</p>
<p>判断数组此位置上是否已经有元素：<br>   如果此位置上没其他元素，则元素a添加成功。 —&gt;情况1<br>   如果此位置上有其他元素b(或以链表形式存在的多个元素，则比较元素a与元素b的hash值：<br>   如果hash值不相同，则元素a添加成功。—&gt;情况2<br>   如果hash值相同，进而需要调用元素a所在类的equals()方法：<br>              equals()返回true,元素a添加失败<br>              equals()返回false,则元素a添加成功。—&gt;情况3</p>
<p>对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储。<br><code>jdk 7 :元素a放到数组中，指向原来的元素。 jdk 8 :原来的元素在数组中，指向元素a</code><br>总结：七上八下<br>HashSet底层：数组+链表的结构。（前提：jdk7)</p>
<h4 id="3-常用实现类："><a href="#3-常用实现类：" class="headerlink" title="3.常用实现类："></a>3.常用实现类：</h4><p>​       |—-Set接口：存储无序的、不可重复的数据   –&gt;高中讲的“集合”<br>​         |—-HashSet：作为Set接口的主要实现类；底层用HashMap，即使用<code>数组+单向链表+红黑树结构进行存储，</code>		<br>​               |—-LinkedHashSet：作为HashSet的子类；在现有基础上，又添加了一组双向链表，用于记录添加元素的先后顺序<br>​          <code>|----TreeSet：底层用红黑树存储，可以按照添加的元素的指定的属性的大小顺序进行遍历</code></p>
<h4 id="4-常用方法"><a href="#4-常用方法" class="headerlink" title="4.常用方法"></a>4.常用方法</h4><p> <code>  Set接口中没额外定义新的方法，使用的都是Collection中声明过的方法。</code></p>
<h4 id="5-set中无序性，不可重复性的理解的要求："><a href="#5-set中无序性，不可重复性的理解的要求：" class="headerlink" title="5.set中无序性，不可重复性的理解的要求："></a>5.set中无序性，不可重复性的理解的要求：</h4><p>   5.1.无序性：！&#x3D;随机性<br>     添加元素的顺序和遍历元素的顺序不一致，是不是就是无序性呢？no！<br>     什么是无序性？与添加的元素的位置有关，不像ArrayList一样是一次<code>紧密排列</code>的。<br>     这里是根据添加的元素的哈希值，计算的其在数组中的存储位置。此位置不是依次排列的，表现为无序性<code>（LinkedHashSet也是无序，不过用了链表指向顺序）</code><br>     5.2.不可重复性：添加到Set的元素是不能相同的，比较的标准，需要判断hashCode()得到的哈希值、equals()得到的boolean型结果，<code>哈希值相同且equals()返回true，则认为元素是相同的。</code></p>
<h4 id="6-添加到hashset-linkedhashset中元素的要求："><a href="#6-添加到hashset-linkedhashset中元素的要求：" class="headerlink" title="6.添加到hashset/linkedhashset中元素的要求："></a>6.添加到<code>hashset/linkedhashset</code>中元素的要求：</h4><p>​     要求元素所在的类<code>要重写两个方法: equals()和hashCode()。</code><br>​     同时，<code>要求equals()和 hashCode()要保持一致性!</code>我们只需要在IDEA中自动生成两个方法的重写即可，即能保证</p>
<h3 id="7-集合框架-TreeSet-的使用与-Set-接口课后练习"><a href="#7-集合框架-TreeSet-的使用与-Set-接口课后练习" class="headerlink" title="7.集合框架-TreeSet 的使用与 Set 接口课后练习"></a><code>7.集合框架-TreeSet 的使用与 Set 接口课后练习</code></h3><h4 id="1-向TreeSet中添加的元素的要求"><a href="#1-向TreeSet中添加的元素的要求" class="headerlink" title="1.向TreeSet中添加的元素的要求"></a>1.向TreeSet中添加的元素的要求</h4><p>​       <code>要求是相同类型的对象，否则报异常。</code></p>
<h4 id="2-判断数据是否相同的标准"><a href="#2-判断数据是否相同的标准" class="headerlink" title="2.判断数据是否相同的标准"></a>2.判断数据是否相同的标准</h4><p>​      2.1.TreeSet中的元素所在的内不需要重写hashCode（）和equal方法<br>​      2.2.替换成看Comparable和Comparator返回的结果&#x2F;&#x2F;TODO，为什么，忘了</p>
<h3 id="8-集合框架-Map不同实现类的对比与-HashMap-中元素的特点"><a href="#8-集合框架-Map不同实现类的对比与-HashMap-中元素的特点" class="headerlink" title="8.集合框架-Map不同实现类的对比与 HashMap 中元素的特点"></a><code>8.集合框架-Map不同实现类的对比与 HashMap 中元素的特点</code></h3><p>双列集合框架：Map</p>
<h4 id="1-常用实现类结构"><a href="#1-常用实现类结构" class="headerlink" title="1.常用实现类结构"></a>1.常用实现类结构</h4><p>|—-Map:双列数据，存储key-value对的数据   —类似于高中的函数：y &#x3D; f(x)<br>       |—-HashMap:作为Map的主要实现类；<code>线程不安全的</code>，效率高；<code>能存储null的key和value</code><br>              |—-LinkedHashMap:保证在遍历map元素时，可以照添加的顺序实现遍历。<br>         |—-Hashtable:<code>作为古老的实现类；线程安全的，效率低；不能存储null的key和value</code><br>       |—-TreeMap:保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序，底层使用红黑树<br>              |—-Properties:常用来处理配置文件。key和value都是String类型<br>      <code>HashMap的底层：数组+链表  （jdk7及之前)                   数组+链表+红黑树 （jdk 8)</code></p>
<h4 id="2-存储结构的理解："><a href="#2-存储结构的理解：" class="headerlink" title="2.存储结构的理解："></a>2.存储结构的理解：</h4><p>Map中的key:<code>无序的、不可重复的</code>，使用Set存储所有的key  —&gt; <code>key所在的类要重写equals()和hashCode() （以HashMap为例)</code><br>Map中的value:无序的、可重复的，使用Collection存储所的value —&gt;<code>value所在的类要重写equals()</code>&#x2F;&#x2F;TODO为什么啊<br>一个键值对：key-value构成了一个Entry对象。<br>Map中的entry:无序的、不可重复的，使用Set存储所有的entry</p>
<h3 id="9-集合框架-Map-接口常用方法的测试"><a href="#9-集合框架-Map-接口常用方法的测试" class="headerlink" title="9.集合框架-Map 接口常用方法的测试"></a><code>9.集合框架-Map 接口常用方法的测试</code></h3><p><code> 添加：put(Object key,Object value)</code><br> 删除：remove(Object key)<br> 修改：put(Object key,Object value)<br> 查询：get(Object key)<br> 长度：size()<br> 遍历：keySet() &#x2F; values() &#x2F; entrySet()</p>
<h3 id="10-集合框架-TreeMap、Properties-的使用及-Map-练习"><a href="#10-集合框架-TreeMap、Properties-的使用及-Map-练习" class="headerlink" title="10.集合框架-TreeMap、Properties 的使用及 Map 练习"></a><code>10.集合框架-TreeMap、Properties 的使用及 Map 练习</code></h3><h4 id="1-TreeMap的使用"><a href="#1-TreeMap的使用" class="headerlink" title="1.TreeMap的使用"></a>1.TreeMap的使用</h4><p>向TreeMap中添加key-value，要求<code>key必须是由同一个类创建的对象,因为要按照key进行排序：自然排序 、定制排序</code></p>
<h4 id="2-使用Properties读取配置文件"><a href="#2-使用Properties读取配置文件" class="headerlink" title="2.使用Properties读取配置文件"></a>2.使用Properties读取配置文件</h4><p>Properties:常用来处理配置文件。key和value都是String类型</p>
<p><code>Properties常用作配置文件</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        pros.load(fis);<span class="comment">//加载流对应的文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, password = &quot;</span> + password);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fis != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="11-集合框架-Collections-工具类的使用"><a href="#11-集合框架-Collections-工具类的使用" class="headerlink" title="11.集合框架-Collections 工具类的使用"></a><code>11.集合框架-Collections 工具类的使用</code></h3><p>   Collections工具类</p>
<h4 id="1-作用：操作Collection和Map的工具类"><a href="#1-作用：操作Collection和Map的工具类" class="headerlink" title="1.作用：操作Collection和Map的工具类"></a>1.作用：操作Collection和Map的工具类</h4><p>   区分collection 和collections</p>
<h4 id="2-常用方法："><a href="#2-常用方法：" class="headerlink" title="2.常用方法："></a>2.常用方法：</h4><p>   reverse(List)：反转 List 中元素的顺序<br>   shuffle(List)：对 List 集合元素进行随机排序<br>   sort(List)：根据元素的自然顺序对指定 List 集合元素升序排序<br>   sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序<br>   swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换<br>   Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素<br>   <code>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</code><br>   Object min(Collection)<br>   <code>Object min(Collection，Comparator)</code><br>   <code>int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</code><br>   void copy(List dest,List src)：将src中的内容复制到dest中<br>   boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所旧值</p>
<p>说明：ArrayList和HashMap都是线程不安全的，如果程序要求线程安全，我们可以将ArrayList、HashMap转换为线程安全的。<br><code>使用synchronizedList(List list） 和 synchronizedMap(Map map）</code></p>
<h4 id="3-面试题："><a href="#3-面试题：" class="headerlink" title="3.面试题："></a>3.面试题：</h4><p><code>面试题：Collection 和 Collections的区别？</code></p>
<p>Collections是工具类</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/articles/5729df21.html</url>
    <content><![CDATA[<h3 id="1-多线程-程序、进程、线程与并行、并发的概念"><a href="#1-多线程-程序、进程、线程与并行、并发的概念" class="headerlink" title="1.多线程-程序、进程、线程与并行、并发的概念"></a>1.多线程-程序、进程、线程与并行、并发的概念</h3><h4 id="1-程序-programm"><a href="#1-程序-programm" class="headerlink" title="1.程序(programm)"></a>1.程序(programm)</h4><p>概念：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码。</p>
<h4 id="2-进程-process"><a href="#2-进程-process" class="headerlink" title="2.进程(process)"></a>2.进程(process)</h4><p>概念：程序的一次执行过程，或是正在运行的一个程序。<br>说明：<code>进程作为资源分配的单位</code>，系统在运行时会为每个进程分配不同的内存区域</p>
<h4 id="3-线程-thread"><a href="#3-线程-thread" class="headerlink" title="3.线程(thread)"></a>3.线程(thread)</h4><p>概念：进程可进一步细化为线程，是一个程序内部的一条执行路径。<br>说明：<code>线程作为调度和执行的单位，每个线程拥独立的运行栈和程序计数器(pc)</code>，线程切换的开销小。<br>  <img src="https://blog-resources.this0.com/image/202403301620512.png?x-oss-process=style/this0-blog" alt="image.png"><br><code>回顾内存结构：</code><br><img src="https://blog-resources.this0.com/image/202403301620777.png?x-oss-process=style/this0-blog" alt="image.png"><br>进程可以细化为多个线程。<br>每个线程，拥有自己<code>独立的栈、程序计数器</code><br>多个线程，<code>共享同一个进程中的结构：方法区、堆。</code></p>
<h4 id="4-单核CPU与多核CPU的理解"><a href="#4-单核CPU与多核CPU的理解" class="headerlink" title="4.单核CPU与多核CPU的理解"></a>4.单核CPU与多核CPU的理解</h4><p>​		单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费。）但是因为CPU时间单元特别短，因此感觉不出来。</p>
<p>​		如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）<code>一个Java应用程序java.exe，其实至少三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。</code>当然如果发生异常，会影响主线程。</p>
<h4 id="5-并行与并发的理解"><a href="#5-并行与并发的理解" class="headerlink" title="5.并行与并发的理解"></a>5.并行与并发的理解</h4><p>并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。<br>并发：一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事</p>
<h3 id="2-多线程-线程创建方式-1：继承-Thread-类"><a href="#2-多线程-线程创建方式-1：继承-Thread-类" class="headerlink" title="2.多线程-线程创建方式 1：继承 Thread 类"></a>2.多线程-线程创建方式 1：继承 Thread 类</h3><p>继承Thread类的方式：</p>
<h4 id="1-创建一个继承于Thread类的子类"><a href="#1-创建一个继承于Thread类的子类" class="headerlink" title="1.创建一个继承于Thread类的子类"></a>1.创建一个继承于Thread类的子类</h4><h4 id="2-重写Thread类中的run-方法-–-将此线程执行的操作声明在run-中"><a href="#2-重写Thread类中的run-方法-–-将此线程执行的操作声明在run-中" class="headerlink" title="2.重写Thread类中的run()方法 –&gt; 将此线程执行的操作声明在run()中"></a>2.重写Thread类中的run()方法 –&gt; 将此线程执行的操作声明在run()中</h4><h4 id="3-创建Thread类的子类的对象"><a href="#3-创建Thread类的子类的对象" class="headerlink" title="3.创建Thread类的子类的对象"></a>3.创建Thread类的子类的对象</h4><h4 id="4-通过此对象调用start-："><a href="#4-通过此对象调用start-：" class="headerlink" title="4.通过此对象调用start()："></a>4.通过此对象调用start()：</h4><p>​	start()的作用：</p>
<p>​		①启动当前线程 </p>
<p>​		②调用当前线程的run()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Thread1Test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">A</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明两个问题：<br>问题一：我们启动一个线程，必须调用start()，不能调用run()的方式启动线程。<code>为什么？</code></p>
<p>使用<code>start()</code>方法才会启动一个新的线程并在后台运行，使得线程能够并发执行。</p>
<p>问题二：如果再启动一个线程，必须重新创建一个Thread子类的对象，调用此对象的start().</p>
<h3 id="3-多线程-线程创建方式-2：实现-Runnable-接口"><a href="#3-多线程-线程创建方式-2：实现-Runnable-接口" class="headerlink" title="3.多线程-线程创建方式 2：实现 Runnable 接口"></a>3.多线程-线程创建方式 2：实现 Runnable 接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是方法2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Thread2test</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将实现类传入构造器</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(b).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种方式的对比：<br>开发中,优先选择：实现Runnable接口的方式<br>原因：</p>
<ol>
<li><p>实现的方式没类的单继承性的局限性(无法继承其他的)</p>
</li>
<li><p>实现的方式更适合来处理<code>多个线程共享数据</code>的情况<code>（接口实现类天然能共享对象,比如适合用this当锁）</code>。</p>
</li>
</ol>
<p>联系：<br>两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。目前两种方式，要想启动线程，都是调用的Thread类中的start()。</p>
<h3 id="4-多线程-Thread-类的常用方法和生命周期"><a href="#4-多线程-Thread-类的常用方法和生命周期" class="headerlink" title="4.多线程-Thread 类的常用方法和生命周期"></a>4.多线程-Thread 类的常用方法和生命周期</h3><h4 id="1-Thread类中的常用方法"><a href="#1-Thread类中的常用方法" class="headerlink" title="1.Thread类中的常用方法:"></a>1.Thread类中的常用方法:</h4><p>1 start():启动当前线程，调用当前线程的run()方法。</p>
<p>2 run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中。</p>
<p>3 currentThread():静态方法，返回执行当前代码的线程</p>
<p>4 getName():获取当前线程的名字</p>
<p>5 setName():设置当前线程的名字 </p>
<p>6 <code>yield():释放当前cpu的执行权</code></p>
<p>7 <code>join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</code></p>
<p>8 <code>stop():已过时。</code>当执行此方法时，强制结束当前线程。替换为<code>interrupt()</code></p>
<p>9 sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</p>
<p>10 isAlive():判断当前线程是否存活</p>
<p>11 <code>线程通信相关方法</code>：wait() &#x2F; notify() &#x2F; notifyAll() :此三个方法定义在Object类中的。</p>
<p>1 介绍</p>
<ul>
<li>wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</li>
<li>notify():一旦执行此方法，就会<code>唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个，线程优先级的作用就出来了。</code></li>
<li>notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。</li>
</ul>
<p>2 说明</p>
<p>2.1.wait()，notify()，notifyAll()三个方法必须使用<code>在同步代码块或同步方法中。</code><br>2.2.wait()，notify()，notifyAll()<code>三个方法的调用者必须是同步代码块或同步方法中的同步监视器。</code>否则，会出现IllegalMonitorStateException异常<br>2.3.wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</p>
<p>3 <code>sleep() 和 wait()的异同？</code><br>3.1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。<br>3.2.不同点：<br>①两个方法声明的位置不同：<code>Thread类中声明sleep() （静态的） , Object类中声明wait()</code><br>②调用的要求不同：</p>
<p><code>sleep()可以在任何需要的场景下调用。 </code></p>
<p><code>wait()必须使用在同步代码块或同步方法中</code></p>
<p>③关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，<code>sleep()不会释放锁，wait()会释放锁。</code></p>
<h4 id="2-线程的优先级"><a href="#2-线程的优先级" class="headerlink" title="2.线程的优先级"></a>2.线程的优先级</h4><h5 id="1-常见线程优先级"><a href="#1-常见线程优先级" class="headerlink" title="1.常见线程优先级"></a>1.常见线程优先级</h5><p>​		MAX_PRIORITY：10</p>
<p>​		MIN _PRIORITY：1</p>
<p>​		NORM_PRIORITY：5  –&gt;默认优先级</p>
<h5 id="2-如何获取和设置当前线程的优先级"><a href="#2-如何获取和设置当前线程的优先级" class="headerlink" title="2.如何获取和设置当前线程的优先级"></a>2.<code>如何获取和设置当前线程的优先级</code></h5><p>​    getPriority():获取线程的优先级<br>​    setPriority(int p):设置线程的优先级<br>​    <code>notify() / notifyAll()唤醒</code><br>​    suspend()挂起			&#x2F;&#x2F;过时了<br>​    resume()结束挂起</p>
<h5 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3.使用场景"></a>3.使用场景</h5><p>​	搭配notify()</p>
<p>​    说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是<code>只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。</code></p>
<h4 id="3-线程的生命周期"><a href="#3-线程的生命周期" class="headerlink" title="3.线程的生命周期"></a>3.线程的生命周期</h4><p><img src="https://blog-resources.this0.com/image/202403301620544.png?x-oss-process=style/this0-blog" alt="image.png"><br><code>新建状态（new）、就绪状态（runnable）、运行状态（running）、阻塞状态（blocked）、死亡状态（dead）。</code><br><code>阻塞又可以分为3种，无限等待（waiting），有限等待（time waiting），锁阻塞</code></p>
<p>锁阻塞:对象锁被其他对象占用</p>
<p>无限等待：休眠状态，等待另一个线程执行唤醒操作</p>
<p>有限等待：有限时间的休眠状态</p>
<p>说明：<br>      3.1.生命周期关注两个概念：状态、相应的方法<br>      3.2.关注：状态a–&gt;状态b:哪些方法执行了（回调方法)<br>                          某个方法主动调用：状态a–&gt;状态b<br>      3.3.阻塞：临时状态，不可以作为最终状态<br>      死亡：最终状态。</p>
<h3 id="5-线程同步机制1——synchronized"><a href="#5-线程同步机制1——synchronized" class="headerlink" title="5.线程同步机制1——synchronized"></a>5.线程同步机制1——synchronized</h3><h4 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h4><p>例子：创建个窗口卖票，总票数为100张.使用实现Runnable接口的方式实现多线程。</p>
<h5 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h5><p>卖票过程中，出现了重票、错票 –&gt;出现了线程的安全问题</p>
<h5 id="2-原因"><a href="#2-原因" class="headerlink" title="2.原因"></a>2.原因</h5><p>当某个线程操作车票的过程中，尚未操作完成时，有其它线程参与进来，也操作车票。</p>
<h5 id="3-如何解决"><a href="#3-如何解决" class="headerlink" title="3.如何解决"></a>3.如何解决</h5><p>当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。</p>
<h4 id="2-方案"><a href="#2-方案" class="headerlink" title="2.方案"></a>2.方案</h4><p>在Java中，我们通过同步机制，来解决线程的安全问题。</p>
<h5 id="1-方式一：同步代码块"><a href="#1-方式一：同步代码块" class="headerlink" title="1.方式一：同步代码块"></a>1.方式一：同步代码块</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line">    <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>​	①操作共享数据的代码，即为需要被同步的代码。  不能包含代码多了，也不能包含代码少了。<br>​	②共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。<br>​	③同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。</p>
<p>要求：</p>
<p>​	<code>多个线程必须要共用同一把锁。</code></p>
<p><strong>为什么锁用对象而不是其他方式呢？</strong></p>
<p>​	<strong>对象的唯一性:</strong> 每个对象在内存中都有唯一的地址，这使得对象可以作为锁的标识符，保证同一时间只有一个线程能够获取到该锁。补充：</p>
<p><code>在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。(这样创建的线程类，this是指向同一个对象，相同)</code></p>
<p><code>在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。(这样创建的线程类，this是指向各个新创建的对象，不同)</code></p>
<h5 id="2-方式二：同步方法"><a href="#2-方式二：同步方法" class="headerlink" title="2 方式二：同步方法"></a>2 方式二：同步方法</h5><p> 如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。<br>关于同步方法的总结：<br> ①<code>同步方法仍然涉及到同步监视器，只是不需要我们显式的声明</code><br> ②非静态的同步方法，同步监视器是：this<br> ③静态的同步方法，同步监视器是：当前类本身</p>
<h4 id="3-利弊"><a href="#3-利弊" class="headerlink" title="3.利弊"></a>3.利弊</h4><p>同步的方式，解决了线程的安全问题。—好处<br><code>操作同步代码时，只能一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。</code></p>
<h3 id="6-多线程-线程安全的单例模式"><a href="#6-多线程-线程安全的单例模式" class="headerlink" title="6.多线程-线程安全的单例模式"></a>6.多线程-线程安全的单例模式</h3><h4 id="方式一：效率稍差"><a href="#方式一：效率稍差" class="headerlink" title="方式一：效率稍差"></a>方式一：效率稍差</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (Bank.class) &#123;</span><br><span class="line">    <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方式二：效率更高"><a href="#方式二：效率更高" class="headerlink" title="方式二：效率更高"></a>方式二：效率更高</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Bank.class) &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br></pre></td></tr></table></figure>

<p>面试题：写一个线程安全的单例模式。<br>饿汉式。<br>懒汉式：上面提供的。</p>
<h3 id="7-死锁问题"><a href="#7-死锁问题" class="headerlink" title="7.死锁问题"></a>7.死锁问题</h3><h4 id="1-死锁的理解："><a href="#1-死锁的理解：" class="headerlink" title="1.死锁的理解："></a>1.死锁的理解：</h4><p>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</p>
<h4 id="2-说明："><a href="#2-说明：" class="headerlink" title="2.说明："></a>2.说明：</h4><p>2.1出现死锁后，不会出现异常，不会出现提示，只是所的线程都处于阻塞状态，无法继续<br>2.2我们使用同步时，要避免出现死锁。<br>2.3.举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                s1.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                s2.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                    System.out.println(s1);</span><br><span class="line">                    System.out.println(s2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (s2)&#123;</span><br><span class="line">                s1.append(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">                s2.append(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (s1)&#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">                    System.out.println(s1);</span><br><span class="line">                    System.out.println(s2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-线程同步机制2——ReentrantLock锁"><a href="#8-线程同步机制2——ReentrantLock锁" class="headerlink" title="8. 线程同步机制2——ReentrantLock锁"></a>8. 线程同步机制2——ReentrantLock锁</h3><p>JDK5.0新增</p>
<h4 id="1-使用举例"><a href="#1-使用举例" class="headerlink" title="1. 使用举例"></a>1. 使用举例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建Lock对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取锁</span></span><br><span class="line">            lock.lock();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;买了第&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-对比"><a href="#2-对比" class="headerlink" title="2. 对比"></a>2. 对比</h4><h5 id="1-synchronized-与-Lock的异同"><a href="#1-synchronized-与-Lock的异同" class="headerlink" title="1. synchronized 与 Lock的异同"></a>1. synchronized 与 Lock的异同</h5><p>相同：二者都可以解决线程安全问题<br>不同：<code>synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器 Lock需要手动的启动同步（lock(),同时结束同步也需要手动的实现（unlock()）</code></p>
<h5 id="2-Lock小结"><a href="#2-Lock小结" class="headerlink" title="2. Lock小结"></a>2. Lock小结</h5><p>Java是如何解决线程安全问题的，有几种方式？并对比几种方式的不同，使用的优先顺序：</p>
<p>Lock —&gt; 同步代码块（已经进入了方法体，分配了相应资源 ) —&gt;同步方法（在方法体之外)</p>
<h5 id="3-Lock和synchronized区别-悲观锁和乐观锁的区别"><a href="#3-Lock和synchronized区别-悲观锁和乐观锁的区别" class="headerlink" title="3. Lock和synchronized区别(悲观锁和乐观锁的区别)"></a>3. Lock和synchronized区别(悲观锁和乐观锁的区别)</h5><p>a. Lock属于乐观锁, 使用多个线程操作的是同一个<code>变量</code><br>   synchronized属于悲观锁,使用多个线程操作<code>一段代码</code><br>b.乐观锁:<code>线程A在操作变量时,允许线程B操作</code>,只是会先判断,如果有问题,就放弃本次操作.判断如果没有问题,就会正常操作<br>   悲观锁:<code>当线程A正在操作的时候,不允许线程B执行</code>,要等A出来之后B才有可能进入执行</p>
<p>c.相对来说,悲观锁效率比较低,乐观锁效率比较高</p>
<h4 id="3-小结释放锁的操作："><a href="#3-小结释放锁的操作：" class="headerlink" title="3.小结释放锁的操作："></a>3.小结释放锁的操作：</h4><p><img src="https://blog-resources.this0.com/image/202403301620787.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="4-小结不会释放锁的操作："><a href="#4-小结不会释放锁的操作：" class="headerlink" title="4.小结不会释放锁的操作："></a>4.小结不会释放锁的操作：</h4><p><img src="https://blog-resources.this0.com/image/202403301620785.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h3 id="9-多线程-线程的创建方式-3、4：实现-Callable-与线程池"><a href="#9-多线程-线程的创建方式-3、4：实现-Callable-与线程池" class="headerlink" title="9. 多线程-线程的创建方式 3、4：实现 Callable 与线程池"></a>9. 多线程-线程的创建方式 3、4：实现 Callable 与线程池</h3><h4 id="1-新增方式一：实现Callable接口。-JDK-5-0新增"><a href="#1-新增方式一：实现Callable接口。-JDK-5-0新增" class="headerlink" title="1.新增方式一：实现Callable接口。 --- JDK 5.0新增"></a>1.<code>新增方式一：实现Callable接口。 --- JDK 5.0新增</code></h4><p>​      1.1.创建一个实现Callable的实现类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">NumThread</span> <span class="symbol">implements</span> <span class="symbol">Callable</span>&#123;</span><br></pre></td></tr></table></figure>

<p>​     1.2.实现call方法，将此线程需要执行的操作声明在call()中</p>
<p>&#x2F;&#x2F;这时没学泛型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	 <span class="meta">@Override</span></span><br><span class="line">​    <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">​        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">​        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">​            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">​                System.out.println(i);</span><br><span class="line">​                sum += i;</span><br><span class="line">​            &#125;</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">return</span> sum;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadNew</span> &#123;</span><br><span class="line">​    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br></pre></td></tr></table></figure>

<p>​        1.3.创建Callable接口实现类的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">NumThread</span> <span class="variable">numThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumThread</span>();</span><br></pre></td></tr></table></figure>

<p>​        1.4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(numThread);</span><br></pre></td></tr></table></figure>

<p>​        1.5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line">​        <span class="keyword">try</span> &#123;</span><br></pre></td></tr></table></figure>

<p>​         1.6.获取Callable中call方法的返回值</p>
<p>​           <code> //get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">         <span class="type">Object</span> <span class="variable">sum</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">​            System.out.println(<span class="string">&quot;总和为：&quot;</span> + sum);</span><br><span class="line">​        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">​            e.printStackTrace();</span><br><span class="line">​        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">​            e.printStackTrace();</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：<code>如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</code><br><code>①call()可以返回值的。</code><br><code>②call()可以抛出异常，被外面的操作捕获，获取异常的信息</code><br><code>③Callable是支持泛型的</code></p>
<h4 id="2-新增方式二：使用线程池"><a href="#2-新增方式二：使用线程池" class="headerlink" title="2.新增方式二：使用线程池"></a>2.新增方式二：<code>使用线程池</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumberThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberThread1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>public class ThreadPool {<br>    public static void main(String[] args) {</p>
<p>1.提供指定线程数量的线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>2.设置线程池的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(service.getClass());</span><br><span class="line">((ThreadPoolExecutor) service).setCorePoolSize(<span class="number">15</span>);</span><br><span class="line">((ThreadPoolExecutor) service).setKeepAliveTime(<span class="number">3600</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<p>3.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</p>
<p>​        service.execute(new NumberThread());&#x2F;&#x2F;适合使用于Runnable<br>​        service.execute(new NumberThread1());&#x2F;&#x2F;适合使用于Runnable        </p>
<p>&#x2F;&#x2F;service.submit(Callable callable);&#x2F;&#x2F;适合使用于Callable<br> 3.关闭连接池<br>        service.shutdown();<br>    }<br>}<br>好处：<br>①提高响应速度（减少了创建新线程的时间）<br>②降低资源消耗（重复利用线程池中线程，不需要每次都创建)<br>③便于线程管理<br>      corePoolSize：核心池的大小<br>      maximumPoolSize：最大线程数<br>      keepAliveTime：线程没任务时最多保持多长时间后会终止</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>异常处理</title>
    <url>/articles/28877bf.html</url>
    <content><![CDATA[<h3 id="1-异常处理-异常的概述与常见异常的举例"><a href="#1-异常处理-异常的概述与常见异常的举例" class="headerlink" title="1.异常处理-异常的概述与常见异常的举例"></a>1.异常处理-异常的概述与常见异常的举例</h3><h4 id="1-异常的体系结构"><a href="#1-异常的体系结构" class="headerlink" title="1.异常的体系结构"></a>1.异常的体系结构</h4><p>java.lang.Throwable<br>         |—–java.lang.Error:一般不编写针对性的代码进行处理。<br>         |—–java.lang.Exception:可以进行异常的处理<br>             |——编译时异常(checked)<br>                     |—–IOException<br>                        |—–FileNotFoundException<br>                     |—–ClassNotFoundException<br>             |——运行时异常(unchecked,RuntimeException)<br>                     |—–NullPointerException<br>                     |—–ArrayIndexOutOfBoundsException<br>                     |—–ClassCastException<br>                     |—–NumberFormatException<br>                     |—–InputMismatchException<br>                     |—–ArithmeticException</p>
<h4 id="2-从程序执行过程，看编译时异常和运行时异常"><a href="#2-从程序执行过程，看编译时异常和运行时异常" class="headerlink" title="2.从程序执行过程，看编译时异常和运行时异常"></a>2.从程序执行过程，看编译时异常和运行时异常</h4><p><img src="https://blog-resources.this0.com/image/202403301619723.png?x-oss-process=style/this0-blog" alt="image.png"><br>编译时异常：执行javac.exe命名时，可能出现的异常<br>运行时异常：执行java.exe命名时，出现的异常</p>
<h4 id="3-常见的异常类型"><a href="#3-常见的异常类型" class="headerlink" title="3.常见的异常类型"></a>3.常见的异常类型</h4><p>以下是运行时异常：</p>
<hr>
<p>​	<code>ArithmeticException</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    System.out.println(a / b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	<code>InputMismatchException</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">    System.out.println(score);</span><br><span class="line">    scanner.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	<code>NumberFormatException</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	<code>ClassCastException</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	<code>IndexOutOfBoundsException</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//		int[] arr = new int[10];</span></span><br><span class="line">    <span class="comment">//		System.out.println(arr[10]);</span></span><br><span class="line">    <span class="comment">//StringIndexOutOfBoundsException</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    System.out.println(str.charAt(<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	<code>NullPointerException</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="literal">null</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    str = <span class="literal">null</span>;</span><br><span class="line">    System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是编译时异常</p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//		File file = new File(&quot;hello.txt&quot;);</span></span><br><span class="line">    <span class="comment">//		FileInputStream fis = new FileInputStream(file);</span></span><br><span class="line">    <span class="comment">//		</span></span><br><span class="line">    <span class="comment">//		int data = fis.read();</span></span><br><span class="line">    <span class="comment">//		while(data != -1)&#123;</span></span><br><span class="line">    <span class="comment">//			System.out.print((char)data);</span></span><br><span class="line">    <span class="comment">//			data = fis.read();</span></span><br><span class="line">    <span class="comment">//		&#125;</span></span><br><span class="line">    <span class="comment">//		</span></span><br><span class="line">    <span class="comment">//		fis.close();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-异常处理-异常处理方式一：try-catch-的使用"><a href="#2-异常处理-异常处理方式一：try-catch-的使用" class="headerlink" title="2.异常处理-异常处理方式一：try-catch 的使用"></a>2.异常处理-异常处理方式一：try-catch 的使用</h3><h4 id="1-java异常处理的抓抛模型"><a href="#1-java异常处理的抓抛模型" class="headerlink" title="1.java异常处理的抓抛模型"></a>1.java异常处理的抓抛模型</h4><p>过程一：</p>
<p>​	“抛”：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。并将此对象抛出。一旦抛出对象以后，其后的代码就不再执行。<br>​	关于异常对象的产生：</p>
<p>​		① 系统自动生成的异常对象<br>        ② 手动的生成一个异常对象，并抛出（throw）</p>
<p>过程二：”抓”：可以理解为异常的2种处理方式之一：</p>
<p>​		① try-catch-finally<br>​        ② throws</p>
<h4 id="2-使用说明："><a href="#2-使用说明：" class="headerlink" title="2.使用说明："></a>2.使用说明：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 变量名<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 变量名<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式2</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span> 变量名<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式3</span></span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line">    <span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//一定会执行的代码</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-说明："><a href="#3-说明：" class="headerlink" title="3.说明："></a>3.说明：</h4><pre><code> 3.1. finally是可选的。
 3.2. 使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配。
 3.3. 一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没写finally的情况。继续执行其后的代码
 3.4. catch中的异常类型如果没子父类关系，则谁声明在上，谁声明在下无所谓。catch中的异常类型`如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错`
 3.5. `常用的异常对象处理的方式` 
</code></pre>
<p>​		① String  getMessage()    </p>
<p>​		② printStackTrace()<br>     3.6. 在try结构中声明的变量，在出了try结构以后，就不能再被调用。<br>     3.7. try-catch-finally结构可以嵌套。</p>
<p>总结：如何看待代码中的编译时异常和运行时异常？<br>     体会1：使用try-catch-finally处理编译时异常，使得程序在编译时就不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。<br>     体会2：开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。针对于编译时异常，我们一定要考虑异常的处理。</p>
<h4 id="4-finally的再说明："><a href="#4-finally的再说明：" class="headerlink" title="4.finally的再说明："></a>4.finally的再说明：</h4><p> 1.finally是可选的<br> 2.finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中return语句，catch中return语句等情况。<br> 3.<code>像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。</code></p>
<h4 id="5-面试题"><a href="#5-面试题" class="headerlink" title="5.[面试题]"></a>5.[面试题]</h4><p><code>final、finally、finalize三者的区别？</code></p>
<p>类似：</p>
<p><code>throw 和 throws</code><br><code>Collection 和 Collections</code><br><code>String 、StringBuffer、StringBuilder ArrayList 、 LinkedList HashMap 、LinkedHashMap</code><br>重写、重载</p>
<p>结构不相似的：<br>抽象类、接口<br>&#x3D;&#x3D; 、 equals()<br>sleep()、wait()</p>
<h3 id="3-异常处理-异常处理方式二：throws"><a href="#3-异常处理-异常处理方式二：throws" class="headerlink" title="3.异常处理-异常处理方式二：throws"></a>3.异常处理-异常处理方式二：throws</h3><h4 id="1-使用说明"><a href="#1-使用说明" class="headerlink" title="1.使用说明"></a>1.使用说明</h4><p>“throws + 异常类型”写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。<br>一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！</p>
<h4 id="2-对比两种处理方式"><a href="#2-对比两种处理方式" class="headerlink" title="2.对比两种处理方式"></a>2.对比两种处理方式</h4><p>try-catch-finally:真正的将异常给处理掉了。<br><code>throws的方式只是将异常抛给了方法的调用者。并没真正将异常处理掉。  </code></p>
<h4 id="3-体会开发中应该如何选择两种处理方式？"><a href="#3-体会开发中应该如何选择两种处理方式？" class="headerlink" title="3.体会开发中应该如何选择两种处理方式？"></a>3.体会开发中应该如何选择两种处理方式？</h4><p><code>3.1 如果父类中被重写的方法没throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中异常，必须使用try-catch-finally方式处理。</code><br> 3.2 执行的方法a中，先后又调用了另外的几个方法，<code>这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。</code></p>
<p>补充：<br>方法重写的规则之一：<br>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</p>
<h3 id="4-异常处理-使用-throw-手动抛出异常对象"><a href="#4-异常处理-使用-throw-手动抛出异常对象" class="headerlink" title="4.异常处理-使用 throw 手动抛出异常对象"></a>4.异常处理-使用 throw 手动抛出异常对象</h3><h4 id="1-使用说明-1"><a href="#1-使用说明-1" class="headerlink" title="1.使用说明"></a>1.使用说明</h4><p>在程序执行中，除了自动抛出异常对象的情况之外，我们还可以手动的throw一个异常类的对象。</p>
<h4 id="2-面试题"><a href="#2-面试题" class="headerlink" title="2.[面试题]"></a>2.[面试题]</h4><p>throw 和  throws区别：<br>throw <code>表示抛出一个异常类的对象，生成异常对象的过程。声明在方法体内。</code><br>throws 属于异常处理的一种方式，<code>声明在方法的声明处。</code></p>
<h4 id="3-典型例题"><a href="#3-典型例题" class="headerlink" title="3.典型例题"></a>3.典型例题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">regist</span><span class="params">(<span class="type">int</span> id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(id &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//手动抛出异常对象</span></span><br><span class="line">            <span class="comment">//			throw new RuntimeException(&quot;您输入的数据非法！&quot;);</span></span><br><span class="line">            <span class="comment">//			throw new Exception(&quot;您输入的数据非法！&quot;);</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;不能输入负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student [id=&quot;</span> + id + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-异常处理-如何自定义异常类"><a href="#5-异常处理-如何自定义异常类" class="headerlink" title="5.异常处理-如何自定义异常类"></a>5.异常处理-如何自定义异常类</h3><p>步骤</p>
<h4 id="1-继承于现的异常结构：RuntimeException-、Exception"><a href="#1-继承于现的异常结构：RuntimeException-、Exception" class="headerlink" title="1.继承于现的异常结构：RuntimeException 、Exception"></a>1.继承于现的异常结构：RuntimeException 、Exception</h4><h4 id="2-提供全局常量：serialVersionUID-TODO-等IO流的时候再说"><a href="#2-提供全局常量：serialVersionUID-TODO-等IO流的时候再说" class="headerlink" title="2.提供全局常量：serialVersionUID (//TODO,等IO流的时候再说)"></a>2.<code>提供全局常量：serialVersionUID (//TODO,等IO流的时候再说)</code></h4><h4 id="3-通常会提供几个重载的构造器"><a href="#3-通常会提供几个重载的构造器" class="headerlink" title="3.通常会提供几个重载的构造器"></a>3.<code>通常会提供几个重载的构造器</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">7034897193246939L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-附加-项目中的异常处理"><a href="#6-附加-项目中的异常处理" class="headerlink" title="6 附加-项目中的异常处理"></a>6 附加-项目中的异常处理</h3><p>项目中通常使用全局异常处理，不是现阶段的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理运行时异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">exceptionError</span><span class="params">(RuntimeException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;全局异常RuntimeException处理:&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail().message(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理各种类型异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">exceptionError</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;全局异常Exception处理:&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail().message(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型</title>
    <url>/articles/7678a22a.html</url>
    <content><![CDATA[<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够理解泛型的好处和意义</li>
<li><input disabled="" type="checkbox"> 能够在使用集合相关API时正确指定泛型</li>
<li><input disabled="" type="checkbox"> 能够使用其他泛型类、泛型接口</li>
<li><input disabled="" type="checkbox"> 能够认识泛型方法</li>
<li><input disabled="" type="checkbox"> 能够使用泛型定义类、接口、方法</li>
<li><input disabled="" type="checkbox"> 能够理解泛型上限</li>
<li><input disabled="" type="checkbox"> 能够阐述泛型通配符的作用</li>
<li><input disabled="" type="checkbox"> 能够识别通配符的上下限</li>
</ul>
<h2 id="1-泛型的概念"><a href="#1-泛型的概念" class="headerlink" title="1 泛型的概念"></a>1 泛型的概念</h2><h3 id="1-1-泛型的概述"><a href="#1-1-泛型的概述" class="headerlink" title="1.1 泛型的概述"></a>1.1 泛型的概述</h3><ul>
<li><p>泛型的介绍</p>
<p>​	泛型是JDK5中引入的特性，它提供了<strong>编译时</strong>类型安全检测机制</p>
</li>
<li><p>泛型的好处</p>
<ol>
<li>把运行时期的问题提前到了编译期间</li>
<li>避免了强制类型转换</li>
</ol>
</li>
<li><p>泛型的定义格式</p>
<ul>
<li>&lt;类型&gt;: 指定一种类型的格式.尖括号里面可以任意书写,一般只写一个字母.例如: <E> <T></li>
<li>&lt;类型1,类型2…&gt;: 指定多种类型的格式,多种类型之间用逗号隔开.例如: &lt;E,T&gt; &lt;K,V&gt;</li>
</ul>
</li>
</ul>
<h5 id="举例"><a href="#举例" class="headerlink" title="举例:"></a>举例:</h5><p>java.lang.Comparable接口和java.util.Comparator接口，是用于对象比较大小的规范接口，这两个接口只是限定了当一个对象大于另一个对象时返回正整数，小于返回负整数，等于返回0。但是并不确定是什么类型的对象比较大小，之前的时候只能用Object类型表示，使用时既麻烦又不安全，因此JDK1.5就给它们增加了泛型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparable</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(T o)</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparator</span>&lt;T&gt;&#123;</span><br><span class="line">     <span class="type">int</span> <span class="title function_">compare</span><span class="params">(T o1, T o2)</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<T>就是类型参数，即泛型。</p>
<h3 id="1-2-泛型的好处"><a href="#1-2-泛型的好处" class="headerlink" title="1.2 泛型的好处"></a>1.2 泛型的好处</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">引入泛型的好处</span><br><span class="line">        既能保证安全，又能简化代码。</span><br><span class="line">        因为把不安全的因素在编译期间就排除了；既然通过了编译，那么类型一定是符合要求的，就避免了类型转换</span><br></pre></td></tr></table></figure>

<h5 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        引入泛型的好处</span></span><br><span class="line"><span class="comment">        既能保证安全，又能简化代码。</span></span><br><span class="line"><span class="comment">        因为把不安全的因素在编译期间就排除了；既然通过了编译，那么类型一定是符合要求的，就避免了类型转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        c.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>));		<span class="comment">//Object obj = new Student(&quot;张三&quot;,23);</span></span><br><span class="line">        c.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">24</span>));</span><br><span class="line">        c.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">25</span>));</span><br><span class="line">        c.add(<span class="string">&quot;aab&quot;</span>);</span><br><span class="line">        c.add(<span class="number">33</span>);</span><br><span class="line">        c.add(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> c.iterator();<span class="comment">// 由于在定义Collection中没有定义泛型,所以存入的内容默认为Object</span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> it.next();</span><br><span class="line">            <span class="comment">// System.out.println(obj.getName()); //报错 object 不能访问子类特有的成员</span></span><br><span class="line"></span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student)obj;             <span class="comment">// 需要 向下强转</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 下面代码报错 ClassCastException String cannot be cast to com.atguigu.Student</span></span><br><span class="line">            <span class="comment">// System.out.println(s.getName() + &quot;...&quot; + s.getAge());</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Student类"><a href="#Student类" class="headerlink" title="Student类"></a>Student类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-泛型的应用-理解"><a href="#2-泛型的应用-理解" class="headerlink" title="2 泛型的应用(理解)"></a>2 泛型的应用(理解)</h2><p><img src="https://blog-resources.this0.com/image/202403301624392.png?x-oss-process=style/this0-blog" alt="1662471750600"></p>
<h3 id="2-1-泛型类"><a href="#2-1-泛型类" class="headerlink" title="2.1 泛型类"></a>2.1 泛型类</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">声明类或接口时，在类名或接口名后面声明类型变量，我们把这样的类或接口称为泛型类或泛型接口</span><br><span class="line"></span><br><span class="line">修饰符 class 类名&lt;类型&gt; &#123;  &#125;</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">public class ArrayList&lt;E&gt;    </span><br><span class="line"></span><br><span class="line">泛型类的类型在创建对象时被确认</span><br></pre></td></tr></table></figure>

<h4 id="1、使用核心类库中的泛型类"><a href="#1、使用核心类库中的泛型类" class="headerlink" title="1、使用核心类库中的泛型类"></a>1、使用核心类库中的泛型类</h4><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">自从JDK1.5引入泛型的概念之后，对之前核心类库中的API做了很大的修改，例如：集合框架集中的相关接口和类、java.lang.Comparable接口、java.util.Comparator接口、Class类等等。</span><br><span class="line"></span><br><span class="line">下面以ArrayList集合为例演示泛型的使用。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.stringdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list =  <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;f&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403301624342.png?x-oss-process=style/this0-blog" alt="1662472062951"></p>
<h4 id="2、自定义泛型类"><a href="#2、自定义泛型类" class="headerlink" title="2、自定义泛型类"></a>2、自定义泛型类</h4><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">格式:修饰符 class 类名&lt;类型&gt;&#123;&#125;</span><br><span class="line">	&lt;类型&gt;:指定一种类型的格式,里面可以任意书写,按变量定义规则即可,一般只写一个字母</span><br><span class="line">示例:public class Box&lt;T&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line">	此处的T可以随意写任意的大写标识,常见的有T、E、K、v等标识泛型</span><br></pre></td></tr></table></figure>

<h5 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.stringdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> E element;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getElement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setElement</span><span class="params">(E element)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.element = element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">测试类:</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.atguigu.stringdemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Box&lt;String&gt; box1 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">        box1.setElement(<span class="string">&quot;革命尚未成功,同志还需努力&quot;</span>);<span class="comment">// 如果不写泛型,此时参数类型为Object</span></span><br><span class="line">        System.out.println(box1.getElement());</span><br><span class="line"></span><br><span class="line">        Box&lt;Integer&gt; box2 = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">        box2.setElement(<span class="number">20</span>);</span><br><span class="line">        System.out.println(box2.getElement());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>泛型对应的类型均按照Object处理，但不等价于Object</code></p>
<h3 id="2-2-泛型接口"><a href="#2-2-泛型接口" class="headerlink" title="2.2 泛型接口"></a>2.2 泛型接口</h3><h4 id="1、核心类中的泛型接口"><a href="#1、核心类中的泛型接口" class="headerlink" title="1、核心类中的泛型接口"></a>1、核心类中的泛型接口</h4><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">java.util.List&lt;E&gt;</span><br><span class="line">实现类 java.util.ArrayList&lt;E&gt;</span><br><span class="line"></span><br><span class="line">泛型接口的使用方式</span><br><span class="line">	1&gt; 实现类没有确定具体的数据类型(ArrayList属于此类)</span><br><span class="line">	2&gt; 实现类确定了具体的数据类型</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-resources.this0.com/image/202403301624490.png?x-oss-process=style/this0-blog" alt="1662474662978"></p>
<h4 id="2、自定义泛型接口"><a href="#2、自定义泛型接口" class="headerlink" title="2、自定义泛型接口"></a>2、自定义泛型接口</h4><p>在创建对象时,确认泛型的数据类型</p>
<p>具体的实现类,不需要写泛型</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">格式: 修饰符 interface 接口名&lt;类型&gt; &#123;  &#125;</span><br><span class="line">示例: public interface Book&lt;T&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.stringdemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再创建对象时,确认泛型的数据类型</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BookImpl1</span>&lt;String&gt;().method(<span class="string">&quot;书中自有黄金屋&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BookImpl1</span>&lt;Boolean&gt;().method(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的实现类,不需要写泛型</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BookImpl2</span>().method(<span class="number">333</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Book</span>&lt;E&gt;&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(E e)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1&gt;实现类没有确定具体的数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookImpl1</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Book</span>&lt;E&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2&gt;实现类确定了具体的数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookImpl2</span> <span class="keyword">implements</span> <span class="title class_">Book</span>&lt;Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Integer integer)</span> &#123;</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-泛型方法"><a href="#2-3-泛型方法" class="headerlink" title="2.3 泛型方法"></a>2.3 泛型方法</h3><p><code>方法在调用时才能确认泛型类型</code></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">声明方法时，在【修饰符】与返回值类型之间声明类型变量，我们把声明了类型变量的方法称为泛型方法</span><br></pre></td></tr></table></figure>

<h4 id="1、使用核心类中的泛型方法"><a href="#1、使用核心类中的泛型方法" class="headerlink" title="1、使用核心类中的泛型方法"></a>1、使用核心类中的泛型方法</h4><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">在java.util.ArrayList中有个泛型方法</span><br><span class="line"></span><br><span class="line">&lt;T&gt; T[] toArray(T[] a)   按适当顺序（从第一个到最后一个元素）返回包含此列表中所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。</span><br><span class="line"></span><br><span class="line">Object[] toArray()  按适当顺序（从第一个到最后一个元素）返回包含此列表中所有元素的数组。 </span><br></pre></td></tr></table></figure>

<h5 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.stringdemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list =  <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        Object[] objects = list.toArray();</span><br><span class="line">        System.out.println(Arrays.toString(objects));</span><br><span class="line"></span><br><span class="line">        String[] strings = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()]);</span><br><span class="line">        System.out.println(Arrays.toString(strings));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2、自定义泛型方法"><a href="#2、自定义泛型方法" class="headerlink" title="2、自定义泛型方法"></a>2、自定义泛型方法</h4><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">格式:修饰符&lt;类型&gt; 返回值类型 方法名(类型 变量名)&#123;&#125;</span><br><span class="line"></span><br><span class="line">示例:public&lt;T&gt; void show(T t)&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">定义一个泛型方法,传递一个集合和四个元素,将元素添加到集合并返回</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.stringdemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list1 = addElement(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(), <span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list2 = addElement(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(), <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(list2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ArrayList&lt;T&gt; <span class="title function_">addElement</span><span class="params">(ArrayList&lt;T&gt; list,T t1, T t2,T t3, T t4)</span> &#123;</span><br><span class="line">        list.add(t1);</span><br><span class="line">        list.add(t2);</span><br><span class="line">        list.add(t3);</span><br><span class="line">        list.add(t4);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3、知识点扩展"><a href="#3、知识点扩展" class="headerlink" title="3、知识点扩展"></a>3、<code>知识点扩展</code></h4><h5 id="泛型方法的补充"><a href="#泛型方法的补充" class="headerlink" title="泛型方法的补充"></a>泛型方法的补充</h5><p>一个类中可以出现多个泛型</p>
<p>1.如果一个方法 ,声明上没有泛型,但是 使用到了泛型,默认 当方法的泛型和类的泛型是一致的(推荐方法的泛型与类 的泛型一致)</p>
<p>2.如果一个方法,使用泛型时,类型和类的泛型不一致 ,那么必须要在方法声明上标出</p>
<p>3.如果一个静态方法,使用泛型,必须要单独定义,而且要和类泛型不一致(即使是相同的字母,代表的也是不同的类型)</p>
<p>4.静态方法的加载时机是随着类的加载而加载,优先于对象,所以必须单独定义(在静态方法中不能使用类的泛型。)</p>
<h6 id="代码一"><a href="#代码一" class="headerlink" title="代码一"></a>代码一</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.generics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo12</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        泛型方法的定义</span></span><br><span class="line"><span class="comment">        格式</span></span><br><span class="line"><span class="comment">         修饰符 &lt;类型&gt; 返回值  方法(对应的类型  变量名)&#123;&#125;</span></span><br><span class="line"><span class="comment">         一个类中可以出现多个泛型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        1.如果一个方法 ,声明上没有泛型,但是 使用到了泛型,默认 当方法的泛型和类的泛型是一致的</span></span><br><span class="line"><span class="comment">            推荐 方法的泛型与类 的泛型一致</span></span><br><span class="line"><span class="comment">        2.如果一个方法,使用泛型时,类型和类的泛型不一致 ,那么必须要在方法声明上 标出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        3. 如果一个静态方法,使用泛型,必须要声明出来,必须和类泛型是不一样(即使是相同的字母,代表的也是不同的类型)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        一个类的泛型  ,数据类型 什么时候 确认   创建对象 时</span></span><br><span class="line"><span class="comment">        一个方法的泛型 ,数据类型 什么时候确认   调用方法时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Test2&lt;String&gt; test = <span class="keyword">new</span> <span class="title class_">Test2</span>&lt;&gt;();</span><br><span class="line">        test.method01(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="comment">// test.method01(111);   报错</span></span><br><span class="line">        test.method02(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">        test.method03(<span class="number">111</span>);<span class="comment">// 当前元素类型与类的泛型类型不一致</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span>&lt;K&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method01</span><span class="params">(K k)</span>&#123;</span><br><span class="line">        System.out.println(k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>&lt;W&gt; <span class="keyword">void</span> <span class="title function_">method02</span><span class="params">(W w)</span>&#123;</span><br><span class="line">        System.out.println(w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  &lt;S&gt; <span class="keyword">void</span> <span class="title function_">method03</span><span class="params">(S s)</span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="代码二"><a href="#代码二" class="headerlink" title="代码二"></a>代码二</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo10</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        泛型定义在方法上</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        格式</span></span><br><span class="line"><span class="comment">            修饰符 &lt;泛型类型&gt; 返回值类型  方法名(泛型类型 变量名)&#123;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            1&gt; 如果 一个实例方法的泛型和当前类的泛型是一致的,</span></span><br><span class="line"><span class="comment">                那么 &lt;泛型类型&gt; 是可以省略的(  修饰符 &lt;泛型类型&gt; 返回值类型)</span></span><br><span class="line"><span class="comment">            2&gt; 如果 一个实例方法的泛型和当前类的泛型是不一致的,</span></span><br><span class="line"><span class="comment">                那么 &lt;泛型类型&gt; 是不可以省略的</span></span><br><span class="line"><span class="comment">            3&gt; 如果一个静态方法,定义时 泛型的确认时机和类的泛型确认时机 不一样,推荐使用不同的泛型类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Test&lt;String&gt; test1 = <span class="keyword">new</span> <span class="title class_">Test</span>&lt;&gt;();</span><br><span class="line">        test1.method1(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Test&lt;Integer&gt; test2 = <span class="keyword">new</span> <span class="title class_">Test</span>&lt;&gt;();</span><br><span class="line">        test2.method2(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Test&lt;String&gt; test3 = <span class="keyword">new</span> <span class="title class_">Test</span>&lt;&gt;();</span><br><span class="line">        test3.method3(<span class="number">111</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&lt;Q&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认和当前的类的泛型是一致的  修饰符和返回值 之间&lt;类型&gt; 可以省略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(Q q)</span>&#123;</span><br><span class="line">        System.out.println(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果方法的声明中 出现了类不一致的泛型类型 那么 &lt;类型&gt; 不能省略</span></span><br><span class="line">    <span class="keyword">public</span>&lt;W&gt;  <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(W w)</span>&#123;</span><br><span class="line">        System.out.println(w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法  泛型的确认时机 和类的泛型的确认时机是不同的</span></span><br><span class="line">    <span class="comment">// 推荐 静态方法 泛型使用和类的泛型类型不一致</span></span><br><span class="line">    <span class="comment">// 如果 静态方法  泛型使用和类的泛型类型 书写一致时,运行时 也是会当做两个不同的类进行加载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;K&gt;  <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(K k)</span>&#123;</span><br><span class="line">        System.out.println(k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不推荐</span></span><br><span class="line">    <span class="comment">/*public static&lt;Q&gt;  void method3(Q q)&#123;</span></span><br><span class="line"><span class="comment">        System.out.println(q);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h5><p>不能使用new E[]。但是可以:E[] elements &#x3D; (E[]) new Object[capacity];</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span>&lt;T&gt; &#123;</span><br><span class="line">    String orderName;</span><br><span class="line">    <span class="type">int</span> orderId;</span><br><span class="line">    <span class="comment">//类的内部结构就可以使用类的泛型</span></span><br><span class="line">    T orderT;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//编译不通过，会被当成类</span></span><br><span class="line">        T[] arr = <span class="keyword">new</span> <span class="title class_">T</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        T[] arr = (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>


<p>参考: <code>ArrayList源码中声明: Object elementData,而非泛型参数类型数组。</code></p>
<h5 id="子类继承父类时泛型的不同情况："><a href="#子类继承父类时泛型的不同情况：" class="headerlink" title="子类继承父类时泛型的不同情况："></a>子类继承父类时泛型的不同情况：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javaCopy code<span class="comment">// 父类不保留泛型</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Parent</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">(T data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类按需实现泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child1</span> <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child1</span><span class="params">(Integer data)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类保留父类的泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child2</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child2</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类部分保留父类的泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child3</span>&lt;T, U&gt; <span class="keyword">extends</span> <span class="title class_">Parent</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> U additionalData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child3</span><span class="params">(T data, U additionalData)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(data);</span><br><span class="line">        <span class="built_in">this</span>.additionalData = additionalData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> U <span class="title function_">getAdditionalData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> additionalData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Child1</span> <span class="variable">child1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child1</span>(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Child1 data: &quot;</span> + child1.getData());</span><br><span class="line"></span><br><span class="line">        Child2&lt;String&gt; child2 = <span class="keyword">new</span> <span class="title class_">Child2</span>&lt;&gt;(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Child2 data: &quot;</span> + child2.getData());</span><br><span class="line"></span><br><span class="line">        Child3&lt;Integer, String&gt; child3 = <span class="keyword">new</span> <span class="title class_">Child3</span>&lt;&gt;(<span class="number">20</span>, <span class="string">&quot;World&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Child3 data: &quot;</span> + child3.getData());</span><br><span class="line">        System.out.println(<span class="string">&quot;Child3 additional data: &quot;</span> + child3.getAdditionalData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>Parent</code>类是一个泛型类，<code>Child1</code>、<code>Child2</code>和<code>Child3</code>是它的子类。</p>
<ul>
<li><code>Child1</code>类是按需实现泛型，它继承自<code>Parent&lt;Integer&gt;</code>，在实例化时指定了具体的类型为<code>Integer</code>。</li>
<li><code>Child2</code>类完全保留了父类的泛型，它继承自<code>Parent&lt;T&gt;</code>，在实例化时指定了具体的类型为<code>String</code>。</li>
<li><code>Child3</code>类部分保留了父类的泛型，它继承自<code>Parent&lt;T&gt;</code>，并添加了一个额外的泛型类型<code>U</code>，在实例化时指定了<code>T</code>为<code>Integer</code>，<code>U</code>为<code>String</code>。</li>
</ul>
<h3 id="2-4-类型通配符"><a href="#2-4-类型通配符" class="headerlink" title="2.4 类型通配符"></a>2.4 类型通配符</h3><h4 id="1-类型通配符"><a href="#1-类型通配符" class="headerlink" title="1.类型通配符"></a>1.类型通配符</h4><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">- 类型通配符: &lt;?&gt;</span><br><span class="line">  - ArrayList&lt;?&gt;: 表示元素类型未知的ArrayList,它的元素可以匹配任何的类型</span><br><span class="line">  - 但是并不能把元素添加到ArrayList中了,获取出来的也是父类类型</span><br><span class="line">  </span><br><span class="line">- 类型通配符上限: &lt;? extends 类型&gt;(规定了上边界)</span><br><span class="line">  - ArrayListList &lt;? extends Number&gt;: 它表示的类型是Number或者其子类型</span><br><span class="line">  </span><br><span class="line">- 类型通配符下限: &lt;? super 类型&gt;(规定了下边界)</span><br><span class="line">  - ArrayListList &lt;? super Number&gt;: 它表示的类型是Number或者其父类型</span><br></pre></td></tr></table></figure>

<h5 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.stringdemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Number&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Object&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        method1(list1);</span><br><span class="line">        method1(list2);</span><br><span class="line">        method1(list3);</span><br><span class="line">        method1(list4);</span><br><span class="line">        </span><br><span class="line">        method2(list1);</span><br><span class="line">        method2(list2);<span class="comment">//报错</span></span><br><span class="line">        method2(list3);</span><br><span class="line">        method2(list4);<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">        method3(list1);<span class="comment">//报错</span></span><br><span class="line">        method3(list2);<span class="comment">//报错</span></span><br><span class="line">        method3(list3);</span><br><span class="line">        method3(list4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 泛型通配符: 此时的泛型?,可以是任意类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(ArrayList&lt;?&gt; list)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 泛型的上限: 此时的泛型?,必须是Number类型或者Number类型的子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(ArrayList&lt;? extends Number&gt; list)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 泛型的下限: 此时的泛型?,必须是Number类型或者Number类型的父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(ArrayList&lt;? <span class="built_in">super</span> Number&gt; list)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-类型通配符上限、类型通配符下限"><a href="#2-类型通配符上限、类型通配符下限" class="headerlink" title="2.类型通配符上限、类型通配符下限"></a>2.类型通配符上限、类型通配符下限</h4><p><img src="https://blog-resources.this0.com/image/202403301624355.png?x-oss-process=style/this0-blog" alt="1662476004619"></p>
<h5 id="代码演示-5"><a href="#代码演示-5" class="headerlink" title="代码演示"></a>代码演示</h5><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">- Collection</span><br><span class="line"></span><br><span class="line">addAll(Collection&lt;? extends E&gt; other)：添加other集合中的所有元素对象到当前集合中</span><br><span class="line">boolean removeAll(Collection&lt;?&gt; coll)：从当前集合中删除所有与coll集合中相同的元素。</span><br><span class="line">boolean containsAll(Collection&lt;?&gt; c)：判断c集合中的元素是否在当前集合中都存在。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.stringdemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>));</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;BaseStudent&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list2.add(<span class="keyword">new</span> <span class="title class_">BaseStudent</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">        list2.add(<span class="keyword">new</span> <span class="title class_">BaseStudent</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">26</span>));</span><br><span class="line"></span><br><span class="line">        list1.addAll(list2);<span class="comment">//将list2中的每一个元素添加到list1中</span></span><br><span class="line">        <span class="comment">// list2.addAll(list1);//报错 ,参数的泛型类型只能是&lt;= 调用者泛型类型</span></span><br><span class="line">        System.out.println(list1);</span><br><span class="line">        System.out.println(list1.size());<span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">        list1.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list2.add(<span class="keyword">new</span> <span class="title class_">BaseStudent</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>));</span><br><span class="line">        list2.add(<span class="keyword">new</span> <span class="title class_">BaseStudent</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">26</span>));</span><br><span class="line"></span><br><span class="line">        list1.add(list2);<span class="comment">//将list2当做整体元素添加到list1中</span></span><br><span class="line">        System.out.println(list1);</span><br><span class="line">        System.out.println(list1.size());<span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list1.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;z&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> list1.removeAll(list2);					<span class="comment">//删除的是交集</span></span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list1.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list1.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="comment">// list2.add(&quot;z&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> list1.containsAll(list2);					<span class="comment">//判断调用的集合是否包含传入的集合</span></span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-通配符小结"><a href="#3-通配符小结" class="headerlink" title="3. 通配符小结"></a>3. 通配符小结</h4><p><code>? extends A:</code><br>G&lt;? extends A&gt; 可以作为G<A>和G<B>的子类，其中<code>B是A的子类 ? super A:</code></p>
<p>G&lt;? super A&gt; 可以作为G<A>和G<B>的父类，其中<code>B是A的父类</code></p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>常用类与基础API</title>
    <url>/articles/d4eacbb1.html</url>
    <content><![CDATA[<h3 id="1-常用类与基础-API-String-的理解与不可变性"><a href="#1-常用类与基础-API-String-的理解与不可变性" class="headerlink" title="1.常用类与基础 API-String 的理解与不可变性"></a>1.常用类与基础 API-String 的理解与不可变性</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p>String:字符串，使用一对””引起来表示。<br>    1.1String声明为final的，不可被继承<br>    1.2 String实现了Serializable接口：表示字符串是支持序列化的。<br>    1.3 实现了Comparable接口：表示String可以比较大小<br>    1.4 String内部定义了final char[] value用于存储字符串数据 <code>（jdk9开始变byte[]了）</code><br>    1.5 通过字面量的方式（区别于new给一个字符串赋值，此时的字符串值声明在字符串常量池中)。<br>    1.6 字符串常量池中是不会存储相同内容(使用String类的equals()比较，返回true)的字符串的。</p>
<h4 id="2-不可变性"><a href="#2-不可变性" class="headerlink" title="2.不可变性"></a>2.不可变性</h4><h5 id="2-1-说明"><a href="#2-1-说明" class="headerlink" title="2.1 说明"></a>2.1 说明</h5><p>​		2.2.1.当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。<br>​		2.2.2.当对现的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。<br>​		2.2.3.当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</p>
<h5 id="2-2-代码举例"><a href="#2-2-代码举例" class="headerlink" title="2.2 代码举例"></a>2.2 代码举例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//字面量的定义方式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//比较s1和s2的地址值</span></span><br><span class="line">System.out.println(s1);<span class="comment">//hello</span></span><br><span class="line">System.out.println(s2);<span class="comment">//abc</span></span><br><span class="line">System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">s3 += <span class="string">&quot;def&quot;</span>;</span><br><span class="line">System.out.println(s3);<span class="comment">//abcdef</span></span><br><span class="line">System.out.println(s2);</span><br><span class="line">System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s4.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">System.out.println(s4);<span class="comment">//abc</span></span><br><span class="line">System.out.println(s5);<span class="comment">//mbc</span></span><br></pre></td></tr></table></figure>

<h5 id="2-3-图示"><a href="#2-3-图示" class="headerlink" title="2.3 图示"></a>2.3 图示</h5><p><img src="https://blog-resources.this0.com/image/202403301621671.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h3 id="2-常用类与基础-API-String-的实例化与连接操作"><a href="#2-常用类与基础-API-String-的实例化与连接操作" class="headerlink" title="2.常用类与基础 API-String 的实例化与连接操作"></a>2.常用类与基础 API-String 的实例化与连接操作</h3><h4 id="1-String实例化的不同方式"><a href="#1-String实例化的不同方式" class="headerlink" title="1.String实例化的不同方式"></a>1.String实例化的不同方式</h4><h5 id="1-1-方式说明"><a href="#1-1-方式说明" class="headerlink" title="1.1 方式说明"></a>1.1 方式说明</h5><p>方式一：通过字面量定义的方式<br>方式二：通过new + 构造器的方式</p>
<h4 id="2-代码举例"><a href="#2-代码举例" class="headerlink" title="2.代码举例"></a>2.代码举例</h4><p>通过字面量定义的方式：此时的s1和s2的数据声明在方法区中的字符串常量池中。<br>String s1 &#x3D; “javaEE”;<br>String s2 &#x3D; “javaEE”;<br>通过new + 构造器的方式:此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。<br>String s3 &#x3D; new String(“javaEE”);<br>String s4 &#x3D; new String(“javaEE”);<br>System.out.println(s1 &#x3D;&#x3D; s2);&#x2F;&#x2F;true<br>System.out.println(s1 &#x3D;&#x3D; s3);&#x2F;&#x2F;false<br>System.out.println(s1 &#x3D;&#x3D; s4);&#x2F;&#x2F;false<br>System.out.println(s3 &#x3D;&#x3D; s4);&#x2F;&#x2F;false</p>
<h4 id="3-面试题"><a href="#3-面试题" class="headerlink" title="3.面试题"></a>3.面试题</h4><p>String s &#x3D; new String(“abc”);方式创建对象，在内存中<code>创建了几个对象？</code><br><code>两个:一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：&quot;abc&quot;</code></p>
<h4 id="4-图示"><a href="#4-图示" class="headerlink" title="4.图示"></a>4.图示</h4><p><img src="https://blog-resources.this0.com/image/202403301621659.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="5-字符串拼接方式赋值的对比"><a href="#5-字符串拼接方式赋值的对比" class="headerlink" title="5.字符串拼接方式赋值的对比"></a>5.字符串拼接方式赋值的对比</h4><h5 id="5-1-说明"><a href="#5-1-说明" class="headerlink" title="5.1 说明"></a>5.1 说明</h5><p>​		5.1.1.常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。<br>​		5.1.2.只要其中一个是变量，结果就在堆中。<br>​		5.1.3.<code>intern()方法作用是将字符串对象放入字符串池中</code></p>
<h5 id="5-2-代码举例"><a href="#5-2-代码举例" class="headerlink" title="5.2 代码举例"></a>5.2 代码举例</h5><p>String s1 &#x3D; “javaEE”;<br>String s2 &#x3D; “hadoop”;<br>String s3 &#x3D; “javaEEhadoop”;<br>String s4 &#x3D; “javaEE” + “hadoop”;<br>String s5 &#x3D; s1 + “hadoop”;<br>String s6 &#x3D; “javaEE” + s2;<br>String s7 &#x3D; s1 + s2;<br>System.out.println(s3 &#x3D;&#x3D; s4);&#x2F;&#x2F;true</p>
<p>System.out.println(s3 &#x3D;&#x3D; s5);&#x2F;&#x2F;false</p>
<p><code>当字符串是通过连接运算符连接时，会在堆内存中创建新的字符串对象，而当字符串是在编译期间已知的时候，会被优化成同一个对象。</code></p>
<p>这里<code>s5</code>是通过字符串连接运算符连接而成的，它在堆内存中创建了一个新的字符串对象，所以不等于<code>s3</code>指向的对象。<br>String s8 &#x3D; s6.intern();&#x2F;&#x2F;返回的s8是常量池中已经存在的“javaEEhadoop”<br>System.out.println(s3 &#x3D;&#x3D; s8);&#x2F;&#x2F;true</p>
<p>String s1 &#x3D; “javaEEhadoop”;<br>String s2 &#x3D; “javaEE”;<br>String s3 &#x3D; s2 + “hadoop”;<br>System.out.println(s1 &#x3D;&#x3D; s3);&#x2F;&#x2F;false<br>final String s4 &#x3D; “javaEE”;&#x2F;&#x2F;s4:常量<br>String s5 &#x3D; s4 + “hadoop”;<br>System.out.println(s1 &#x3D;&#x3D; s5);&#x2F;&#x2F;<code>true</code>，由于 <code>s5</code> 的值在运行时被计算为 <code>javaEEhadoop</code>，并且编译器已经将 <code>javaEEhadoop</code> 放入字符串池，因此 <code>s1</code> 和 <code>s5</code> 实际上指向了同一个字符串对象，所以 <code>==</code> 比较的结果为 <code>true</code>。</p>
<h3 id="3-常用类与基础-API-String-的构造器与常用方法"><a href="#3-常用类与基础-API-String-的构造器与常用方法" class="headerlink" title="3.常用类与基础 API-String 的构造器与常用方法"></a>3.常用类与基础 API-String 的构造器与常用方法</h3><h4 id="1-String与基本数据类型、包装类间的转换"><a href="#1-String与基本数据类型、包装类间的转换" class="headerlink" title="1 String与基本数据类型、包装类间的转换"></a>1 String与基本数据类型、包装类间的转换</h4><h4 id="2-与字符数组之间的转换"><a href="#2-与字符数组之间的转换" class="headerlink" title="2 与字符数组之间的转换"></a>2 与字符数组之间的转换</h4><p>String –&gt; char[]:调用String的toCharArray()<br>char[] –&gt; String:调用String的构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc123&quot;</span>;  <span class="comment">//题目： a21cb3</span></span><br><span class="line">    <span class="type">char</span>[] charArray = str1.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">        System.out.println(charArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>[] arr = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">    System.out.println(str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-与字节数组之间的转换"><a href="#3-与字节数组之间的转换" class="headerlink" title="3 与字节数组之间的转换"></a>3 与字节数组之间的转换</h4><p>编码：String –&gt; byte[]:调用String的getBytes()<br>解码：byte[] –&gt; String:调用String的构造器<br>编码：字符串 –&gt;字节  (看得懂 —&gt;看不懂的二进制数据)<br>解码：编码的逆过程，字节 –&gt; 字符串 （看不懂的二进制数据 —&gt; 看得懂<br>说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abc123中国&quot;</span>;</span><br><span class="line">    <span class="type">byte</span>[] bytes = str1.getBytes();<span class="comment">//使用默认的字符集，进行编码。</span></span><br><span class="line">    System.out.println(Arrays.toString(bytes));</span><br><span class="line">    <span class="type">byte</span>[] gbks = str1.getBytes(<span class="string">&quot;gbk&quot;</span>);<span class="comment">//使用gbk字符集进行编码。</span></span><br><span class="line">    System.out.println(Arrays.toString(gbks));</span><br><span class="line">    System.out.println(<span class="string">&quot;******************&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);<span class="comment">//使用默认的字符集，进行解码。</span></span><br><span class="line">    System.out.println(str2);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(gbks);</span><br><span class="line">    System.out.println(str3);<span class="comment">//出现乱码。原因：编码集和解码集不一致！</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(gbks, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">    System.out.println(str4);<span class="comment">//没出现乱码。原因：编码集和解码集一致！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-String中的常用方法："><a href="#4-String中的常用方法：" class="headerlink" title="4. String中的常用方法："></a>4. String中的常用方法：</h4><p>int length()：返回字符串的长度： return value.length<br>char charAt(int index)： 返回某索引处的字符return value[index]<br>boolean isEmpty()：判断是否是空字符串：return value.length &#x3D;&#x3D; 0<br>String toLowerCase()：使用默认语言环境，将 String 中的所字符转换为小写<br>String toUpperCase()：使用默认语言环境，将 String 中的所字符转换为大写<br><code>String trim()</code>：返回字符串的副本，忽略前导空白和尾部空白<br>boolean equals(Object obj)：比较字符串的内容是否相同<br>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写<br><code>String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</code><br><code>int compareTo(String anotherString)：比较两个字符串的大小</code><br>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。<br>String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。<br>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束<br>boolean <code>startsWith(String prefix)：测试此字符串是否以指定的前缀开始</code><br>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始<br>boolean <code>contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</code><br>int <code>indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</code><br>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始<br>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引<br>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索<br>注：indexOf和lastIndexOf方法如果未找到都是返回-1<br>替换：<br>String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所 oldChar 得到的。<br>String <code>replace(CharSequence target, CharSequence replacement)</code>：使用指定的字面值替换序列替换此字符串所匹配字面值目标序列的子字符串。<br>String <code>replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符</code>串所匹配给定的正则表达式的子字符串。<br>String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。<br>匹配:<br>boolean matches(String regex)：告知此字符串是否匹配给定的<code>正则表达式</code>。<br>切片：<br>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。<br>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</p>
<h3 id="4-常用类与基础-API-StringBuffer-与-StringBuilder-的源码分析、常用方法"><a href="#4-常用类与基础-API-StringBuffer-与-StringBuilder-的源码分析、常用方法" class="headerlink" title="4.常用类与基础 API-StringBuffer 与 StringBuilder 的源码分析、常用方法"></a>4.常用类与基础 API-StringBuffer 与 StringBuilder 的源码分析、常用方法</h3><h4 id="1-String、StringBuffer、StringBuilder三者的对比"><a href="#1-String、StringBuffer、StringBuilder三者的对比" class="headerlink" title="1.String、StringBuffer、StringBuilder三者的对比"></a>1.String、StringBuffer、StringBuilder三者的对比</h4><p>String:不可变的字符序列；底层使用char[]存储，<code>线程安全，因为是不可变的</code><br>StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储（jdk8之前,jdk8之后扩容策略更加灵活，可以根据实际情况选择合适的扩容大小，以减少内存浪费。）<br>StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储（jdk8之前）</p>
<h4 id="2-StringBuffer与StringBuilder的源码解析"><a href="#2-StringBuffer与StringBuilder的源码解析" class="headerlink" title="2.StringBuffer与StringBuilder的源码解析"></a>2.StringBuffer与StringBuilder的源码解析</h4><p>两者基本一样，这里以StringBuffer为例进行解析</p>
<h5 id="2-1-内部属性"><a href="#2-1-内部属性" class="headerlink" title="2.1 内部属性"></a>2.1 内部属性</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The value is used for character storage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">char</span>[] value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The count is the number of characters used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> count;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-初始化值"><a href="#2-2-初始化值" class="headerlink" title="2.2 初始化值"></a>2.2 初始化值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">StringBuffer</span><span class="params">(CharSequence seq)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(seq.length() + <span class="number">16</span>);</span><br><span class="line">    append(seq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>初始化时是16或者16+字符串长度</code></p>
<h5 id="2-3-自动扩容"><a href="#2-3-自动扩容" class="headerlink" title="2.3 自动扩容"></a>2.3 自动扩容</h5><p><code>默认扩容为原来的2倍+2，并将原有的元素复制到新的数组中</code></p>
<p>以StringBuffer为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();<span class="comment">//char[] value = new char[0];</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();<span class="comment">//char[] value = new char[16];底层创建了一个长度是16的数组。</span></span><br><span class="line">System.out.println(sb1.length());<span class="comment">//</span></span><br><span class="line">sb1.append(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//value[0] = &#x27;a&#x27;;</span></span><br><span class="line">sb1.append(<span class="string">&#x27;b&#x27;</span>);<span class="comment">//value[1] = &#x27;b&#x27;;</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;abc&quot;</span>);<span class="comment">//char[] value = new char[&quot;abc&quot;.length() + 16];</span></span><br></pre></td></tr></table></figure>

<p>问题1. System.out.println(sb2.length());&#x2F;&#x2F;3<br>问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。<br>        指导意义：<code>开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)</code></p>
<h4 id="3-对比String、StringBuffer、StringBuilder三者的执行效率"><a href="#3-对比String、StringBuffer、StringBuilder三者的执行效率" class="headerlink" title="3.对比String、StringBuffer、StringBuilder三者的执行效率"></a>3.对比String、StringBuffer、StringBuilder三者的执行效率</h4><p>从高到低排列：StringBuilder &gt; StringBuffer &gt; String</p>
<h4 id="4-StringBuffer、StringBuilder中的常用方法"><a href="#4-StringBuffer、StringBuilder中的常用方法" class="headerlink" title="4.StringBuffer、StringBuilder中的常用方法"></a>4.StringBuffer、StringBuilder中的常用方法</h4><p>增：append(xxx)<br><code>删：delete(int start,int end) 删：deleteCharAt(int start,int end)</code><br>改：setCharAt(int n ,char ch) &#x2F;<br>replace(int start, int end, String str)<br>查：charAt(int n )<br>插：insert(int offset, xxx)<br>长度：length();<br>遍历：for() + charAt() &#x2F; toString()</p>
<h4 id="5-与StringBuffer、StringBuilder之间的转换"><a href="#5-与StringBuffer、StringBuilder之间的转换" class="headerlink" title="5.与StringBuffer、StringBuilder之间的转换"></a>5.与StringBuffer、StringBuilder之间的转换</h4><p>String –&gt;StringBuffer、StringBuilder:调用StringBuffer、StringBuilder构造器<br><code>StringBuffer、StringBuilder --&gt;String:</code></p>
<p><code>①调用String构造器；</code></p>
<p><code>②StringBuffer、StringBuilder的toString()</code></p>
<h3 id="5-JDK8之前的日期时间API的使用-老旧"><a href="#5-JDK8之前的日期时间API的使用-老旧" class="headerlink" title="5.JDK8之前的日期时间API的使用:老旧"></a>5.JDK8之前的日期时间API的使用:老旧</h3><h4 id="1-获取系统当前时间：System类中的currentTimeMillis"><a href="#1-获取系统当前时间：System类中的currentTimeMillis" class="headerlink" title="1.获取系统当前时间：System类中的currentTimeMillis()"></a><code>1.获取系统当前时间：System类中的currentTimeMillis()</code></h4><p>long time &#x3D; System.currentTimeMillis();<br>返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。<br>称为时间戳<br>System.out.println(time);</p>
<h4 id="2-java-util-Date类与java-sql-Date类"><a href="#2-java-util-Date类与java-sql-Date类" class="headerlink" title="2.java.util.Date类与java.sql.Date类"></a>2.java.util.Date类与java.sql.Date类</h4><p><code>java.util.Date</code>类用于表示日期和时间，而<code>java.sql.Date</code>类用于在Java程序和数据库之间传递日期值。</p>
<p>在开发中，通常会使用<code>java.util.Date</code>来处理日期和时间，而在与数据库交互时，会使用<code>java.sql.Date</code>来表示日期。</p>
<h5 id="2-1-两个构造器的使用"><a href="#2-1-两个构造器的使用" class="headerlink" title="2.1.两个构造器的使用"></a>2.1.两个构造器的使用</h5><p>​    构造器一：Date()：创建一个对应当前时间的Date对象<br>​    构造器二：创建指定毫秒数的Date对象</p>
<h5 id="2-2-两个方法的使用"><a href="#2-2-两个方法的使用" class="headerlink" title="2.2.两个方法的使用"></a>2.2.两个方法的使用</h5><p>​    toString():显示当前的年、月、日、时、分、秒<br>​    getTime():获取当前Date对象对应的毫秒数。（时间戳）</p>
<h5 id="2-3-java-sql-Date对应着数据库中的日期类型的变量"><a href="#2-3-java-sql-Date对应着数据库中的日期类型的变量" class="headerlink" title="2.3. java.sql.Date对应着数据库中的日期类型的变量"></a>2.3. java.sql.Date对应着数据库中的日期类型的变量</h5><p>​    如何实例化<br>​    如何将java.util.Date对象转换为java.sql.Date对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    构造器一：Date()：创建一个对应当前时间的Date对象</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    System.out.println(date1.toString());<span class="comment">//Sat Feb 16 16:35:31 GMT+08:00 2019</span></span><br><span class="line">    System.out.println(date1.getTime());<span class="comment">//1550306204104</span></span><br><span class="line">    构造器二：创建指定毫秒数的Date对象</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">155030620410L</span>);</span><br><span class="line">    System.out.println(date2.toString());</span><br><span class="line">    创建java.sql.Date对象</span><br><span class="line">    java.sql.<span class="type">Date</span> <span class="variable">date3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="number">35235325345L</span>);</span><br><span class="line">    System.out.println(date3);<span class="comment">//1971-02-13</span></span><br><span class="line">    如何将java.util.Date对象转换为java.sql.Date对象</span><br><span class="line">    情况一：</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="number">2343243242323L</span>);</span><br><span class="line">    java.sql.<span class="type">Date</span> <span class="variable">date5</span> <span class="operator">=</span> (java.sql.Date) date4;</span><br><span class="line">    情况二：</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    java.sql.<span class="type">Date</span> <span class="variable">date7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(date6.getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-java-text-SimpleDataFormat类"><a href="#3-java-text-SimpleDataFormat类" class="headerlink" title="3.java.text.SimpleDataFormat类"></a>3.java.text.SimpleDataFormat类</h4><p>SimpleDateFormat对日期Date类的格式化和解析</p>
<h5 id="3-1-两个操作："><a href="#3-1-两个操作：" class="headerlink" title="3.1.两个操作："></a>3.1.两个操作：</h5><p>  3.1.1 格式化：日期 —&gt;字符串<br>  3.1.2 解析：格式化的逆过程，字符串 —&gt; 日期</p>
<h5 id="3-2-SimpleDateFormat的实例化-new-构造器"><a href="#3-2-SimpleDateFormat的实例化-new-构造器" class="headerlink" title="3.2.SimpleDateFormat的实例化:new + 构造器"></a>3.2.SimpleDateFormat的实例化:new + 构造器</h5><p>  照指定的方式格式化和解析：调用带参的构造器<br> SimpleDateFormat sdf1 &#x3D; new SimpleDateFormat(“yyyyy.MMMMM.dd GGG hh:mm aaa”);<br>  SimpleDateFormat sdf1 &#x3D; new SimpleDateFormat(“yyyy-MM-dd hh:mm:ss”);<br>  格式化<br>  String format1 &#x3D; sdf1.format(date);<br>  System.out.println(format1);&#x2F;&#x2F;2019-02-18 11:48:27<br>  解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),<br>  否则，抛异常<br>  Date date2 &#x3D; sdf1.parse(“2020-02-18 11:48:27”);<br>  System.out.println(date2);<br>  小练习：<br>练习一：字符串”2020-09-08”转换为java.sql.Date<br>练习二：”三天打渔两天晒网”   1990-01-01  xxxx-xx-xx 打渔？晒网？<br>举例：2020-09-08 ？ 总天数<br>总天数 % 5 &#x3D;&#x3D; 1,2,3 : 打渔<br>总天数 % 5 &#x3D;&#x3D; 4,0 : 晒网<br>总天数的计算？<br>方式一：( date2.getTime() - date1.getTime()) &#x2F; (1000 * 60 * 60 * 24) + 1<br>方式二：1990-01-01  –&gt; 2019-12-31  +  2020-01-01 –&gt;2020-09-08</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExer</span><span class="params">()</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">birth</span> <span class="operator">=</span> <span class="string">&quot;2020-09-08&quot;</span>;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf1.parse(birth);</span><br><span class="line">   System.out.println(date);</span><br><span class="line">    java.sql.<span class="type">Date</span> <span class="variable">birthDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(date.getTime());</span><br><span class="line">    System.out.println(birthDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-Calendar类：日历类、抽象类"><a href="#4-Calendar类：日历类、抽象类" class="headerlink" title="4.Calendar类：日历类、抽象类"></a>4.Calendar类：日历类、抽象类</h4><h5 id="4-1-实例化"><a href="#4-1-实例化" class="headerlink" title="4.1.实例化"></a>4.1.实例化</h5><p>​    方式一：创建其子类（GregorianCalendar的对象<br>​    方式二：调用其静态方法getInstance()<br>​    Calendar calendar &#x3D; Calendar.getInstance();<br>​    System.out.println(calendar.getClass());</p>
<h5 id="4-2-常用方法"><a href="#4-2-常用方法" class="headerlink" title="4.2.常用方法"></a>4.2.常用方法</h5><p>​    get()<br>​    int days &#x3D; calendar.get(Calendar.DAY_OF_MONTH);<br>​    System.out.println(days);<br>​    System.out.println(calendar.get(Calendar.DAY_OF_YEAR));<br>​    set()<br>​    calendar可变性<br>​     calendar.set(Calendar.DAY_OF_MONTH,22);<br>​    days &#x3D; calendar.get(Calendar.DAY_OF_MONTH);<br>​    System.out.println(days);<br>​    add()<br>​    calendar.add(Calendar.DAY_OF_MONTH,-3);<br>​    days &#x3D; calendar.get(Calendar.DAY_OF_MONTH);<br>​    System.out.println(days);<br>​    getTime():日历类—&gt; Date<br>​    Date date &#x3D; calendar.getTime();<br>​    System.out.println(date);<br>​    setTime():Date —&gt; 日历类<br>​    Date date1 &#x3D; new Date();<br>​    calendar.setTime(date1);<br>​    days &#x3D; calendar.get(Calendar.DAY_OF_MONTH);<br>​    System.out.println(days);</p>
<h3 id="6-常用类与基础-API-JDK8-中新的日期时间-API"><a href="#6-常用类与基础-API-JDK8-中新的日期时间-API" class="headerlink" title="6.常用类与基础 API-JDK8 中新的日期时间 API"></a>6.常用类与基础 API-JDK8 中新的日期时间 API</h3><h4 id="1-日期时间API的迭代："><a href="#1-日期时间API的迭代：" class="headerlink" title="1.日期时间API的迭代："></a>1.日期时间API的迭代：</h4><p> 第一代：jdk 1.0 Date类<br> 第二代：jdk 1.1 Calendar类，一定程度上替换Date类<br> 第三代：jdk 1.8 提出了新的一套API</p>
<h4 id="2-前两代存在的问题举例："><a href="#2-前两代存在的问题举例：" class="headerlink" title="2.前两代存在的问题举例："></a>2.前两代存在的问题举例：</h4><p> <code>可变性：像日期和时间这样的类应该是不可变的。</code><br> <code>偏移性：Date中的年份是从1900开始的，而月份都从0开始。</code><br> <code>格式化：格式化只对Date用，Calendar则不行。</code><br> <code>此外，它们也不是线程安全的；不能处理闰秒等。</code></p>
<h4 id="3-java-8-中新的日期时间API涉及到的包"><a href="#3-java-8-中新的日期时间API涉及到的包" class="headerlink" title="3.java 8 中新的日期时间API涉及到的包"></a>3.java 8 中新的日期时间API涉及到的包</h4><p> <img src="https://blog-resources.this0.com/image/202403301621794.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="4-本地日期、本地时间、本地日期时间的使用：LocalDate-LocalTime-LocalDateTime"><a href="#4-本地日期、本地时间、本地日期时间的使用：LocalDate-LocalTime-LocalDateTime" class="headerlink" title="4.本地日期、本地时间、本地日期时间的使用：LocalDate &#x2F; LocalTime &#x2F; LocalDateTime"></a>4.本地日期、本地时间、本地日期时间的使用：LocalDate &#x2F; LocalTime &#x2F; LocalDateTime</h4><h5 id="4-1-说明："><a href="#4-1-说明：" class="headerlink" title="4.1 说明："></a>4.1 说明：</h5><p> ① 分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。<br> ② LocalDateTime相较于LocalDate、LocalTime，使用频率要高<br> ③ 类似于Calendar</p>
<h5 id="4-2-常用方法："><a href="#4-2-常用方法：" class="headerlink" title="4.2 常用方法："></a>4.2 常用方法：</h5><p> <code>withXxx,plusXxx,minuXxx</code><br> <img src="https://blog-resources.this0.com/image/202403301621655.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="5-时间点：Instant-时间戳"><a href="#5-时间点：Instant-时间戳" class="headerlink" title="5.时间点：Instant(时间戳)"></a>5.时间点：Instant(时间戳)</h4><h5 id="5-1-说明："><a href="#5-1-说明：" class="headerlink" title="5.1 说明："></a>5.1 说明：</h5><p> ① 时间线上的一个瞬时点。 概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC开始的秒数。）<br> ② 类似于 java.util.Date类<br> 5.2 常用方法：<br> <img src="https://blog-resources.this0.com/image/202403301621642.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="6-日期时间格式化类：DateTimeFormatter"><a href="#6-日期时间格式化类：DateTimeFormatter" class="headerlink" title="6.日期时间格式化类：DateTimeFormatter"></a>6.日期时间格式化类：<code>DateTimeFormatter</code></h4><h5 id="6-1-说明："><a href="#6-1-说明：" class="headerlink" title="6.1 说明："></a>6.1 说明：</h5><p> ① 格式化或解析日期、时间<br> ② 类似于SimpleDateFormat</p>
<h5 id="6-2-常用方法："><a href="#6-2-常用方法：" class="headerlink" title="6.2 常用方法："></a>6.2 常用方法：</h5><p> ① 实例化方式：<br> 预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME<br> 本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG)<br> 自定义的格式。如：<code>ofPattern(“yyyy-MM-dd hh:mm:ss”)</code><br> ② 常用方法：<br> <img src="https://blog-resources.this0.com/image/202403301621702.png?x-oss-process=style/this0-blog" alt="image.png"><br>特别的：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)<br>重点：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p>
<h5 id="6-3-格式化日期时间实例"><a href="#6-3-格式化日期时间实例" class="headerlink" title="6.3 格式化日期时间实例"></a>6.3 <code>格式化日期时间实例</code></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">formatter3</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//        格式化成字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> formatter3.format(LocalDateTime.now());</span><br><span class="line"><span class="comment">//        格式化成对象</span></span><br><span class="line"><span class="type">TemporalAccessor</span> <span class="variable">accessor</span> <span class="operator">=</span> formatter3.parse(<span class="string">&quot;2024-02-24 05:41:00&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;str4 = &quot;</span> + str4);</span><br><span class="line">System.out.println(<span class="string">&quot;accessor = &quot;</span> + accessor);</span><br></pre></td></tr></table></figure>

<h4 id="7-其它API的使用"><a href="#7-其它API的使用" class="headerlink" title="7.其它API的使用"></a>7.其它API的使用</h4><h5 id="7-1-带时区的日期时间：ZonedDateTime-ZoneId"><a href="#7-1-带时区的日期时间：ZonedDateTime-ZoneId" class="headerlink" title="7.1 带时区的日期时间：ZonedDateTime &#x2F; ZoneId"></a>7.1 带时区的日期时间：ZonedDateTime &#x2F; ZoneId</h5><p> 举例：</p>
<p>   ZoneId:类中包含了所的时区信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getAvailableZoneIds():获取所的ZoneId</span></span><br><span class="line">    Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line">    <span class="keyword">for</span>(String s : zoneIds)&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>获取“Asia&#x2F;Tokyo”时区对应的时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Tokyo&quot;</span>));</span><br><span class="line">System.out.println(localDateTime);	</span><br></pre></td></tr></table></figure>

<p>ZonedDateTime:带时区的日期时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//now():获取本时区的ZonedDateTime对象</span></span><br><span class="line">    <span class="type">ZonedDateTime</span> <span class="variable">zonedDateTime</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">    System.out.println(zonedDateTime);</span><br><span class="line">    <span class="comment">//now(ZoneId id):获取指定时区的ZonedDateTime对象</span></span><br><span class="line">    <span class="type">ZonedDateTime</span> <span class="variable">zonedDateTime1</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="string">&quot;Asia/Tokyo&quot;</span>));</span><br><span class="line">    System.out.println(zonedDateTime1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-2-时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准"><a href="#7-2-时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准" class="headerlink" title="7.2 时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准"></a>7.2 时间间隔：Duration–用于计算两个“时间”间隔，以秒和纳秒为基准</h5><p>  <img src="https://blog-resources.this0.com/image/202403301622076.png?x-oss-process=style/this0-blog" alt="image.png"><br>  举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">LocalTime</span> <span class="variable">localTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">    <span class="type">LocalTime</span> <span class="variable">localTime1</span> <span class="operator">=</span> LocalTime.of(<span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">    <span class="comment">//between():静态方法，返回Duration对象，表示两个时间的间隔</span></span><br><span class="line">    <span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(localTime1, localTime);</span><br><span class="line">    System.out.println(duration);</span><br><span class="line"></span><br><span class="line">    System.out.println(duration.getSeconds());</span><br><span class="line">    System.out.println(duration.getNano());</span><br><span class="line"></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">localDateTime1</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Duration</span> <span class="variable">duration1</span> <span class="operator">=</span> Duration.between(localDateTime1, localDateTime);</span><br><span class="line">    System.out.println(duration1.toDays());		</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-3-日期间隔：Period-–用于计算两个“日期”间隔，以年、月、日衡量"><a href="#7-3-日期间隔：Period-–用于计算两个“日期”间隔，以年、月、日衡量" class="headerlink" title="7.3 日期间隔：Period –用于计算两个“日期”间隔，以年、月、日衡量"></a>7.3 日期间隔：Period –用于计算两个“日期”间隔，以年、月、日衡量</h5><p><img src="https://blog-resources.this0.com/image/202403301622075.png?x-oss-process=style/this0-blog" alt="image.png"><br>  举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">localDate1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2028</span>, <span class="number">3</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Period</span> <span class="variable">period</span> <span class="operator">=</span> Period.between(localDate, localDate1);</span><br><span class="line">    System.out.println(period);</span><br><span class="line"></span><br><span class="line">    System.out.println(period.getYears());</span><br><span class="line">    System.out.println(period.getMonths());</span><br><span class="line">    System.out.println(period.getDays());</span><br><span class="line"></span><br><span class="line">    <span class="type">Period</span> <span class="variable">period1</span> <span class="operator">=</span> period.withYears(<span class="number">2</span>);</span><br><span class="line">    System.out.println(period1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-4-日期时间校正器：TemporalAdjuster"><a href="#7-4-日期时间校正器：TemporalAdjuster" class="headerlink" title="7.4 日期时间校正器：TemporalAdjuster"></a>7.4 日期时间校正器：TemporalAdjuster</h5><p>  举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取当前日期的下一个周日是哪天？</span></span><br><span class="line">    <span class="type">TemporalAdjuster</span> <span class="variable">temporalAdjuster</span> <span class="operator">=</span> TemporalAdjusters.next(DayOfWeek.SUNDAY);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now().with(temporalAdjuster);</span><br><span class="line">    System.out.println(localDateTime);		</span><br><span class="line">    <span class="comment">//获取下一个工作日是哪天？</span></span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now().with(<span class="keyword">new</span> <span class="title class_">TemporalAdjuster</span>()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Temporal <span class="title function_">adjustInto</span><span class="params">(Temporal temporal)</span> &#123;</span><br><span class="line">            <span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> (LocalDate)temporal;</span><br><span class="line">            <span class="keyword">if</span>(date.getDayOfWeek().equals(DayOfWeek.FRIDAY))&#123;</span><br><span class="line">                <span class="keyword">return</span> date.plusDays(<span class="number">3</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(date.getDayOfWeek().equals(DayOfWeek.SATURDAY))&#123;</span><br><span class="line">                <span class="keyword">return</span> date.plusDays(<span class="number">2</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> date.plusDays(<span class="number">1</span>);</span><br><span class="line">            &#125;					</span><br><span class="line">        &#125;			</span><br><span class="line">    &#125;);		</span><br><span class="line">    System.out.println(<span class="string">&quot;下一个工作日是：&quot;</span> + localDate);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-使用-Comparable-接口实现自然排序"><a href="#7-使用-Comparable-接口实现自然排序" class="headerlink" title="7.使用 Comparable 接口实现自然排序"></a>7.使用 Comparable 接口实现自然排序</h3><h4 id="1-Java比较器的使用背景："><a href="#1-Java比较器的使用背景：" class="headerlink" title="1.Java比较器的使用背景："></a>1.Java比较器的使用背景：</h4><p>  Java中的对象，正常情况下，只能进行比较：&#x3D;&#x3D;  或  !&#x3D; 。不能使用 &gt; 或 &lt; 的<br>  但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。<br>  如何实现？使用两个接口中的任何一个：Comparable 或 Comparator</p>
<h4 id="2-自然排序：使用Comparable接口"><a href="#2-自然排序：使用Comparable接口" class="headerlink" title="2.自然排序：使用Comparable接口"></a>2.自然排序：使用Comparable接口</h4><h5 id="2-1-说明-1"><a href="#2-1-说明-1" class="headerlink" title="2.1 说明"></a>2.1 说明</h5><p>2.2.1.Java给所有引用数据类型的大小比较，指定了一个标准接口，就是java.lang.Comparable接口：<code>实现了Comparable接口，重写了compareTo(obj)方法</code>，给出了比较两个对象大小的方式。<br>2.2.2.像String、包装类重写compareTo()方法以后，进行了从小到大的排列<br>2.2.3. 一般重写compareTo(obj)的规则：<br>如果当前对象this大于形参对象obj，则返回正整数，<br>如果当前对象this小于形参对象obj，则返回负整数，<br>如果当前对象this等于形参对象obj，则返回零。</p>
<p>2.2.4. 对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。在compareTo(obj)方法中指明如何排序</p>
<h5 id="2-2-自定义类代码举例："><a href="#2-2-自定义类代码举例：" class="headerlink" title="2.2 自定义类代码举例："></a>2.2 自定义类代码举例：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    指明商品比较大小的方式:照价格从低到高排序,再照产品名称从高到低排序</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Goods) &#123;</span><br><span class="line">            <span class="type">Goods</span> <span class="variable">goods</span> <span class="operator">=</span> (Goods) o;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//重写价格怎么排序</span></span><br><span class="line">            <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//            if (this.price &gt; goods.price) &#123;</span></span><br><span class="line"><span class="comment">//                return 1;</span></span><br><span class="line"><span class="comment">//            &#125; else if (this.price &lt; goods.price) &#123;</span></span><br><span class="line"><span class="comment">//                return -1;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//价格相等时，名称怎么排序，String自己实现了Comparable接口</span></span><br><span class="line"><span class="comment">//            return -this.name.compareTo(goods.name);</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//方法二：确定price非空用compareTo</span></span><br><span class="line"><span class="comment">//            if (price != null) &#123;</span></span><br><span class="line"><span class="comment">//                int i = price.compareTo(goods.price);</span></span><br><span class="line"><span class="comment">//                if (i != 0) &#123;</span></span><br><span class="line"><span class="comment">//                    return i;</span></span><br><span class="line"><span class="comment">//                &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                    return this.name.compareTo(goods.name);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式三：推荐，使用Double `内部静态方法`：public static int compare(double d1, double d2)</span></span><br><span class="line">            <span class="comment">//避免了直接使用-运算符或者&gt;、&lt;等运算符可能带来的精度问题</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.compare(<span class="built_in">this</span>.price, goods.price);</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.name.compareTo(goods.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//传入数据不匹配</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;传入的数据类型不一致！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    getter、setter、toString()、构造器：省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>总结</code>：</p>
<p>1.使用包装类 <code>内部静态方法</code>：public static int compare()；能避免直接使用-运算符或者&gt;、&lt;等运算符可能带来的<code>精度问题</code>,例如，如果使用 <code>-</code> 运算符计算 <code>0.1 + 0.2 - 0.3</code> 的结果，理论上应该为 <code>0</code>，但由于精度问题，实际计算结果可能会非常接近 <code>0</code>，但不完全等于 <code>0</code>，从而导致比较结果错误。</p>
<p>如果price为null，使用Double.compare(this.price, goods.price)会有什么返回结果：</p>
<p>2.如果 <code>this.price</code> 为 <code>null</code>，使用 <code>Integer.compare(this.price, goods.price)</code> 会返回 <code>-1</code>，表示 <code>null</code> 小于任何非 <code>null</code> 的 <code>Double</code> 值。这是因为在 <code>Integer.compare</code> 方法中，如果参数中的任一值为 <code>null</code>，则会将其视为负无穷大。</p>
<p>3.compareTo方法也是一样</p>
<p>4.自己看下源代码，简单</p>
<h3 id="8-使用-Comparator-接口实现定制排序及对比"><a href="#8-使用-Comparator-接口实现定制排序及对比" class="headerlink" title="8.使用 Comparator 接口实现定制排序及对比"></a>8.使用 Comparator 接口实现定制排序及对比</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><h6 id="1-1-背景"><a href="#1-1-背景" class="headerlink" title="1.1 背景"></a>1.1 背景</h6><p>当元素的类型没实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑<code>使用 Comparator</code> 的对象来排序</p>
<h6 id="1-2-说明"><a href="#1-2-说明" class="headerlink" title="1.2 说明"></a>1.2 说明</h6><h6 id="使用-Comparator-的对象重写compare-Object-o1-Object-o2-方法，比较o1和o2的大小："><a href="#使用-Comparator-的对象重写compare-Object-o1-Object-o2-方法，比较o1和o2的大小：" class="headerlink" title="使用 Comparator 的对象重写compare(Object o1,Object o2)方法，比较o1和o2的大小："></a><code>使用 Comparator 的对象重写compare(Object o1,Object o2)</code>方法，比较o1和o2的大小：</h6><p>如果方法返回正整数，则表示o1大于o2；<br>如果返回0，表示相等；<br>返回负整数，表示o1小于o2。</p>
<h4 id="2-代码举例："><a href="#2-代码举例：" class="headerlink" title="2.代码举例："></a>2.代码举例：</h4><p>Comparator com &#x3D; new Comparator() {<br> 指明商品比较大小的方式:照产品名称从低到高排序,再照价格从高到低排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    Goods[] arr = <span class="keyword">new</span> <span class="title class_">Goods</span>[<span class="number">7</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;Huawei&quot;</span>, <span class="number">6999</span>);</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;pear&quot;</span>, <span class="number">3574</span>);</span><br><span class="line">    arr[<span class="number">5</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;Banana&quot;</span>, <span class="number">4587</span>);</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;Banana&quot;</span>, <span class="number">8565</span>);</span><br><span class="line">    arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;Apple&quot;</span>, <span class="number">8425</span>);</span><br><span class="line">    arr[<span class="number">6</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;Apple&quot;</span>, <span class="number">3425</span>);</span><br><span class="line">    arr[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;Xiaomi&quot;</span>, <span class="number">6999</span>);</span><br><span class="line"></span><br><span class="line">    Arrays.asList(arr);</span><br><span class="line"></span><br><span class="line">    <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> Goods &amp;&amp; o2 <span class="keyword">instanceof</span> Goods) &#123;</span><br><span class="line">                <span class="type">Goods</span> <span class="variable">g1</span> <span class="operator">=</span> (Goods) o1;</span><br><span class="line">                <span class="type">Goods</span> <span class="variable">g2</span> <span class="operator">=</span> (Goods) o2;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> g1.getName().compareTo(g2.getName());</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(g1.getPrice(), g2.getPrice());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入的数据类型不一致&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Arrays.sort(arr, comparator);</span><br><span class="line">    <span class="keyword">for</span> (Goods goods : arr) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;goods = &quot;</span> + goods);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-使用方式："><a href="#3-使用方式：" class="headerlink" title="3.使用方式："></a>3.使用方式：</h4><p>Arrays.sort(goods,com);<br>Collections.sort(coll,com);<br>new TreeSet(com);</p>
<h4 id="4-两种排序方式对比"><a href="#4-两种排序方式对比" class="headerlink" title="4.两种排序方式对比"></a>4.两种排序方式对比</h4><p>Comparable接口的方式一旦一定，保证Comparable接口实现类的对象在任何位置都可以比较大小。<br><code>Comparator</code>属于临时性的比较。</p>
<h3 id="9-常用类与基础-API-其它常用类的使用：BigInteger、BigDecimal、Random-等"><a href="#9-常用类与基础-API-其它常用类的使用：BigInteger、BigDecimal、Random-等" class="headerlink" title="9.常用类与基础 API-其它常用类的使用：BigInteger、BigDecimal、Random 等"></a>9.常用类与基础 API-其它常用类的使用：BigInteger、BigDecimal、Random 等</h3><h4 id="1-System类"><a href="#1-System类" class="headerlink" title="1.System类"></a>1.System类</h4><p>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包。<br>由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。<br>方法：<br>native long currentTimeMillis()<br>void exit(int status)<br>void gc()<br>String getProperty(String key)</p>
<h4 id="2-Math类"><a href="#2-Math类" class="headerlink" title="2.Math类"></a>2.Math类</h4><p>java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为double型。</p>
<h4 id="3-BigInteger类、BigDecimal类"><a href="#3-BigInteger类、BigDecimal类" class="headerlink" title="3.BigInteger类、BigDecimal类"></a>3.BigInteger类、BigDecimal类</h4><h5 id="1-说明："><a href="#1-说明：" class="headerlink" title="1 说明："></a>1 说明：</h5><p><code>① java.math包的BigInteger/BigDecimal可以表示不可变的任意精度的整数/十进制数。</code></p>
<p><code>② 要求数字精度比较高的浮点数，用到BigInteger/BigDecimal类</code><br>代码举例：<br><img src="https://blog-resources.this0.com/image/202403301622164.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h5 id="2-常用整数类型对比"><a href="#2-常用整数类型对比" class="headerlink" title="2 常用整数类型对比"></a>2 常用整数类型对比</h5><p>在与 <code>float</code> 类型进行比较时，<code>double</code> 和 <code>BigDecimal</code> 的特点如下：</p>
<ol>
<li><strong>精度和范围：</strong><ul>
<li><code>float</code> 是单精度浮点数，<code>double</code> 是双精度浮点数。<code>float</code> 的范围约为 3.40282347 x 10^38，精度约为 6-7 位有效数字；<code>double</code> 的范围约为 1.7976931348623157 x 10^308，精度约为 15-16 位有效数字。</li>
<li><code>BigDecimal</code> 可以表示任意精度的十进制数，没有固定的范围和精度限制。</li>
</ul>
</li>
<li><strong>精度损失：</strong><ul>
<li><code>float</code> 和 <code>double</code> 类型都存在精度损失的问题，特别是在进行浮点数运算时。</li>
<li><code>BigDecimal</code> 可以避免精度损失问题，因为它使用了任意精度的算术运算。</li>
</ul>
</li>
<li><strong>舍入误差：</strong><ul>
<li><code>float</code> 和 <code>double</code> 使用二进制浮点数表示法，可能会导致舍入误差。</li>
<li><code>BigDecimal</code> 可以控制舍入行为，避免了由于二进制浮点数表示法造成的舍入误差。</li>
</ul>
</li>
<li><strong>性能：</strong><ul>
<li><code>float</code> 类型的计算速度通常比 <code>double</code> 类型快，因为它是基本数据类型。</li>
<li><code>BigDecimal</code> 类型的计算速度较慢，因为它是一个对象类型，涉及到对象的创建和销毁，以及更复杂的算术运算。</li>
</ul>
</li>
<li><strong>适用场景：</strong><ul>
<li><code>float</code> 适用于存储较大范围的数值，并且对精度要求不高的情况。</li>
<li><code>double</code> 适用于一般的科学计算和工程计算，对精度要求较高但不需要极高精度的情况。</li>
<li><code>BigDecimal</code> 适用于对精度要求非常高的金融计算、货币计算等场景，以及需要避免精度损失的计算场景。</li>
</ul>
</li>
</ol>
<h5 id="3-常用浮点数类型比较"><a href="#3-常用浮点数类型比较" class="headerlink" title="3 常用浮点数类型比较"></a>3 常用浮点数类型比较</h5><p><code>Integer</code>、<code>Long</code> 和 <code>BigInteger</code> 是 Java 中用于表示整数的三种不同类型，它们的主要区别在于范围和精度：</p>
<ol>
<li><strong>范围：</strong><ul>
<li><code>Integer</code> 类型是 32 位有符号整数，范围为 -2^31 到 2^31-1。</li>
<li><code>Long</code> 类型是 64 位有符号整数，范围为 -2^63 到 2^63-1。</li>
<li><code>BigInteger</code> 类型是任意精度的整数，没有固定的范围限制，可以表示任意大的整数。</li>
</ul>
</li>
<li><strong>精度：</strong><ul>
<li><code>Integer</code> 和 <code>Long</code> 类型都是固定精度的整数类型，不会出现精度丢失问题。</li>
<li><code>BigInteger</code> 类型可以表示任意精度的整数，避免了由于固定精度而引起的精度问题。</li>
</ul>
</li>
<li><strong>性能：</strong><ul>
<li><code>Integer</code> 和 <code>Long</code> 类型是基本数据类型，直接由 JVM 支持，因此在性能上比较高效。</li>
<li><code>BigInteger</code> 类型是一个对象类型，涉及到对象的创建和销毁，以及更复杂的算术运算，因此在性能上比较低效。</li>
</ul>
</li>
<li><strong>适用场景：</strong><ul>
<li><code>Integer</code> 适用于表示整数，范围在 -2^31 到 2^31-1 之间的情况。</li>
<li><code>Long</code> 适用于表示整数，范围在 -2^63 到 2^63-1 之间的情况。</li>
<li><code>BigInteger</code> 适用于需要表示超出 <code>Integer</code> 和 <code>Long</code> 范围的整数，或者需要避免精度问题的情况。</li>
</ul>
</li>
</ol>
<p>综上所述，根据需求选择合适的整数类型：<code>Integer</code> 和 <code>Long</code> 适用于一般范围内的整数表示，而 <code>BigInteger</code> 则适用于需要任意精度整数表示的情况。</p>
<h5 id="4-开发使用总结"><a href="#4-开发使用总结" class="headerlink" title="4 开发使用总结"></a>4 开发使用总结</h5><p>在数据类型与运算符章节讲过了&#x2F;&#x2F;TODO</p>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/articles/7af799fd.html</url>
    <content><![CDATA[<h3 id="1-反射机制-反射的理解与使用举例"><a href="#1-反射机制-反射的理解与使用举例" class="headerlink" title="1.反射机制-反射的理解与使用举例"></a>1.反射机制-反射的理解与使用举例</h3><h4 id="1-反射-Reflection-的概念"><a href="#1-反射-Reflection-的概念" class="headerlink" title="1. 反射(Reflection)的概念"></a>1. 反射(Reflection)的概念</h4><h5 id="1-1-反射的出现背景"><a href="#1-1-反射的出现背景" class="headerlink" title="1.1 反射的出现背景"></a>1.1 反射的出现背景</h5><p>使用场景：编译时根本<code>无法预知该对象和类的真实信息</code></p>
<p>Java程序中，所有的对象都有两种类型：<code>编译时类型</code>和<code>运行时类型</code>，而很多时候对象的编译时类型和运行时类型<code>不一致</code>。 Object obj &#x3D; new String(“hello”);    obj.getClass()</p>
<p>例如：某些变量或形参的声明类型是Object类型，但是程序却需要调用该对象运行时类型的方法，该方法不是Object中的方法，那么如何解决呢？</p>
<p>解决这个问题，有两种方案：</p>
<p>方案1：<code>在编译和运行时都完全知道类型的具体信息</code>，在这种情况下，我们可以直接先使用运算符进行判断，再利用<code>强制类型转换符将其转换成运行时类型的变量即可</code>。instanceof</p>
<p>方案2：编译时根本<code>无法预知该对象和类的真实信息</code>，程序只能依靠<code>反射</code>来发现该对象和类的真实信息，这就必须使用反射。获取运行时信息</p>
<h5 id="1-2-反射概述"><a href="#1-2-反射概述" class="headerlink" title="1.2 反射概述"></a>1.2 反射概述</h5><p>Reflection（反射）是被视为<code>动态语言</code>的关键，反射机制允许程序在<code>运行期间</code>借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p>
<p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。<code>这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射。</code></p>
<p><strong><code>从内存加载上看反射：</code></strong></p>
<p><img src="https://blog-resources.this0.com/image/202403301627088.png?x-oss-process=style/this0-blog" alt="image-20220524101441695.png"></p>
<h5 id="1-3-Java反射机制研究及应用"><a href="#1-3-Java反射机制研究及应用" class="headerlink" title="1.3  Java反射机制研究及应用"></a>1.3  Java反射机制研究及应用</h5><p>Java反射机制提供的功能：</p>
<ul>
<li>在运行时判断任意一个对象所属的类</li>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时判断任意一个类所具有的成员变量和方法</li>
<li><code>在运行时获取泛型信息</code></li>
<li>在运行时调用任意一个对象的成员变量和方法</li>
<li><code>在运行时处理注解</code></li>
<li><code>生成动态代理</code></li>
</ul>
<h5 id="1-4-反射相关的主要API"><a href="#1-4-反射相关的主要API" class="headerlink" title="1.4 反射相关的主要API"></a>1.4 反射相关的主要API</h5><p>java.lang.Class：代表一个类<br>java.lang.reflect.Method：代表类的方法<br>java.lang.reflect.Field：代表类的成员变量<br>java.lang.reflect.Constructor：代表类的构造器<br>… …</p>
<h5 id="1-5-反射的优缺点"><a href="#1-5-反射的优缺点" class="headerlink" title="1.5 反射的优缺点"></a>1.5 反射的优缺点</h5><p><strong>优点：</strong></p>
<ul>
<li>提高了Java程序的灵活性和扩展性，<code>降低了耦合性</code>，提高<code>自适应</code>能力</li>
<li>允许程序创建和控制任何类的对象，无需提前<code>硬编码</code>目标类</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>反射的<code>性能较低</code>。 </li>
<li>反射机制主要应用在对灵活性和扩展性要求很高的系统框架上</li>
<li>反射会<code>模糊</code>程序内部逻辑，<code>可读性较差</code>。</li>
</ul>
<h3 id="2-反射机制-反射、Class-的理解与获取-Class-实例的方式"><a href="#2-反射机制-反射、Class-的理解与获取-Class-实例的方式" class="headerlink" title="2.反射机制-反射、Class 的理解与获取 Class 实例的方式"></a><code>2.反射机制-反射、Class 的理解与获取 Class 实例的方式</code></h3><h4 id="1-理解Class类并获取Class实例"><a href="#1-理解Class类并获取Class实例" class="headerlink" title="1.  理解Class类并获取Class实例"></a>1.  理解Class类并获取Class实例</h4><p>要想解剖一个类，必须先要获取到该类的Class对象。而剖析一个类或用反射解决具体的问题就是使用相关API:</p>
<ul>
<li>java.lang.Class</li>
<li>java.lang.reflect.*</li>
</ul>
<p>所以，Class对象是反射的根源。</p>
<h4 id="2-理解Class"><a href="#2-理解Class" class="headerlink" title="2. 理解Class"></a>2. 理解Class</h4><h5 id="2-1-理论上"><a href="#2-1-理论上" class="headerlink" title="2.1. 理论上"></a>2.1. 理论上</h5><p>在Object类中定义了以下的方法，此方法将被所有子类继承：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Class <span class="title function_">getClass</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上<code>所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。</code><br>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个结构(class&#x2F;interface&#x2F;enum&#x2F;annotation&#x2F;primitive type&#x2F;void&#x2F;[])的有关信息。</p>
<ul>
<li>Class本身也是一个类</li>
<li>Class 对象只能由系统建立对象</li>
<li>一个加载的类在 JVM 中只会有一个Class实例</li>
<li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li>
<li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li>
<li>通过Class可以完整地得到一个类中的所有被加载的结构</li>
<li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li>
</ul>
<h5 id="2-2-内存结构上"><a href="#2-2-内存结构上" class="headerlink" title="2.2 内存结构上"></a><code>2.2 内存结构上</code></h5><p><img src="https://blog-resources.this0.com/image/202403301627007.png?x-oss-process=style/this0-blog" alt="image-20220514180100176.png"><br>说明：上图中字符串常量池在JDK6中存储在方法区；JDK7及以后，存储在堆空间。</p>
<h4 id="3-获取Class类的实例-四种方法"><a href="#3-获取Class类的实例-四种方法" class="headerlink" title="3.获取Class类的实例(四种方法)"></a>3.获取Class类的实例(四种方法)</h4><p><code>方式1：编译期间已知类型</code><br>前提：若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高<br>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> String.class;</span><br></pre></td></tr></table></figure>

<p><code>方式2：已知某个类的实例</code></p>
<p>前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象</p>
<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="string">&quot;www.this0.com&quot;</span>.getClass();</span><br></pre></td></tr></table></figure>

<p><code>方式3：已知一个类的全类名</code></p>
<p>前提：<code>已知一个类的全类名</code>，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException</p>
<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><code>方式4：其他方式(不做要求)</code></p>
<p><code>前提：可以用系统类加载对象或自定义加载器对象加载指定路径下的类型</code></p>
<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz4</span> <span class="operator">=</span> cl.loadClass(<span class="string">&quot;类的全类名&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>再举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类加载器获取反射类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetClassObject</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> GetClassObject.class;</span><br><span class="line">        <span class="type">GetClassObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetClassObject</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.this0.classtype.GetClassObject&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;com.this0.classtype.GetClassObject&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;c1 = &quot;</span> + c1);</span><br><span class="line">        System.out.println(<span class="string">&quot;c2 = &quot;</span> + c2);</span><br><span class="line">        System.out.println(<span class="string">&quot;c3 = &quot;</span> + c3);</span><br><span class="line">        System.out.println(<span class="string">&quot;c4 = &quot;</span> + c4);</span><br><span class="line"></span><br><span class="line">        System.out.println(c1 == c2);</span><br><span class="line">        System.out.println(c1 == c3);</span><br><span class="line">        System.out.println(c1 == c4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-哪些类型可以有Class对象"><a href="#4-哪些类型可以有Class对象" class="headerlink" title="4. 哪些类型可以有Class对象"></a>4. 哪些类型可以有Class对象</h4><p>简言之，<code>所有Java类型！</code></p>
<p>（1）class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类<br>（2）interface：接口<br>（3）arr[]：数组<br>（4）enum：枚举<br>（5）annotation：注解<a href="/interface">@interface </a><br>（6）primitive type：基本数据类型<br>（7）void</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Comparable.class;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> String[].class;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="type">int</span>[][].class;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> ElementType.class;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c6</span> <span class="operator">=</span> Override.class;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c7</span> <span class="operator">=</span> <span class="type">int</span>.class;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c8</span> <span class="operator">=</span> <span class="keyword">void</span>.class;</span><br><span class="line"><span class="type">Class</span> <span class="variable">c9</span> <span class="operator">=</span> Class.class;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="type">Class</span> <span class="variable">c10</span> <span class="operator">=</span> a.getClass();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c11</span> <span class="operator">=</span> b.getClass();</span><br><span class="line"><span class="comment">// 只要元素类型与维度一样，就是同一个Class</span></span><br><span class="line">System.out.println(c10 == c11);</span><br></pre></td></tr></table></figure>

<h4 id="5-Class类的常用方法"><a href="#5-Class类的常用方法" class="headerlink" title="5.Class类的常用方法"></a>5.Class类的常用方法</h4><table>
<thead>
<tr>
<th><strong>方法名</strong></th>
<th><strong>功能说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>static  Class forName(String  name)</td>
<td>返回指定类名  name  的  Class  对象</td>
</tr>
<tr>
<td>Object  newInstance()</td>
<td>调用缺省构造函数，返回该Class对象的一个实例</td>
</tr>
<tr>
<td>getName()</td>
<td>返回此Class对象所表示的实体（类、接口、数组类、基本类型或void）名称</td>
</tr>
<tr>
<td>Class  getSuperClass()</td>
<td>返回当前Class对象的父类的Class对象</td>
</tr>
<tr>
<td>Class  [] getInterfaces()</td>
<td>获取当前Class对象的接口</td>
</tr>
<tr>
<td>ClassLoader  getClassLoader()</td>
<td>返回该类的类加载器</td>
</tr>
<tr>
<td>Class  getSuperclass()</td>
<td>返回表示此Class所表示的实体的超类的Class</td>
</tr>
<tr>
<td>Constructor[]  getConstructors()</td>
<td>返回一个包含某些Constructor对象的数组</td>
</tr>
<tr>
<td>Field[]  getDeclaredFields()</td>
<td>返回Field对象的一个数组</td>
</tr>
<tr>
<td>Method  getMethod(String  name,Class … paramTypes)</td>
<td>返回一个Method对象，此对象的形参类型为paramType</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;test4.Person&quot;</span>;</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(str);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">field.set(obj, <span class="string">&quot;Peter&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">System.out.println(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注：test4.Person是test4包下的Person类</span></span><br></pre></td></tr></table></figure>

<h3 id="3-反射机制-类的加载过程与类加载器的理解-TODO"><a href="#3-反射机制-类的加载过程与类加载器的理解-TODO" class="headerlink" title="3.反射机制-类的加载过程与类加载器的理解&#x2F;&#x2F;TODO"></a>3.反射机制-类的加载过程与类加载器的理解&#x2F;&#x2F;TODO</h3><h4 id="1-类的加载与ClassLoader的理解"><a href="#1-类的加载与ClassLoader的理解" class="headerlink" title="1. 类的加载与ClassLoader的理解"></a>1. 类的加载与ClassLoader的理解</h4><h5 id="1-1-类的生命周期"><a href="#1-1-类的生命周期" class="headerlink" title="1.1 类的生命周期"></a>1.1 <code>类的生命周期</code></h5><p>类在内存中完整的生命周期：<code>加载--&gt;链接--&gt;初始化--&gt;使用--&gt;卸载</code>。其中<code>链接过程又分为：验证、准备、解析三个阶段。</code></p>
<p><img src="https://blog-resources.this0.com/image/202403301627060.png?x-oss-process=style/this0-blog" alt="image-20220417173459849.png"></p>
<p><code>概要：</code></p>
<ol>
<li><strong>加载（Loading）：</strong> 将类的字节码文件加载到内存中。这通常由类加载器执行，并将字节码存储在方法区。</li>
<li><strong>验证（Verification）：</strong> 确保被加载的类的字节码符合Java虚拟机规范，以防止安全问题和运行时错误。</li>
<li><strong>准备（Preparation）：</strong> 为类的静态变量分配内存，并设置默认初始值。这一阶段发生在类加载后，但在初始化之前。</li>
<li><strong>解析（Resolution）：</strong> 将类、接口、字段和方法的符号引用解析为直接引用，使得各个类之间能够建立联系。</li>
<li><strong>初始化（Initialization）：</strong> 对类进行初始化，包括执行静态变量赋值和执行静态代码块。这是类加载的最后一个阶段。</li>
<li><strong>使用（Usage）：</strong> 类被应用程序使用，其实例被创建，方法被调用等。</li>
<li><strong>卸载（Unloading）：</strong> 在某些情况下，当一个类不再被引用，且没有任何活动的实例时，Java虚拟机可能会卸载该类，释放相应的内存。</li>
</ol>
<h4 id="2-类的加载过程"><a href="#2-类的加载过程" class="headerlink" title="2. 类的加载过程"></a>2. 类的加载过程</h4><p>当程序主动使用某个类时，如果该类还未被加载到内存中，系统会通过<code>装载、链接、初始化</code>三个步骤来对该类进行初始化。如果没有意外，JVM将会连续完成这三个步骤，所以有时也把<code>这三个步骤统称为类加载</code>。</p>
<p><img src="https://blog-resources.this0.com/image/202403301627048.png?x-oss-process=style/this0-blog" alt="image-20220417171411631.png"></p>
<p><code>类的加载又分为三个阶段：</code></p>
<p>（1）装载（Loading）</p>
<p>将类的class文件读入内存，并为之创建一个java.lang.Class对象。此过程由类加载器完成</p>
<p>（2）链接（Linking）</p>
<p><code>①验证Verify：</code>确保加载的类信息符合JVM规范，例如：以cafebabe开头，没有安全方面的问题。</p>
<p><code>②准备Prepare：正式为类变量（static）分配内存并</code>设置类变量默认初始值<code>的阶段，这些内存都将在方法区中进行分配。</code></p>
<p>③解析Resolve：<code>虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</code></p>
<p>（3）初始化（Initialization）</p>
<ul>
<li>执行<code>类构造器&lt;clinit&gt;()方法</code>的过程。<code>类构造器&lt;clinit&gt;()方法</code>是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。<code>（类构造器是构造类信息的，不是构造该类对象的构造器）。</code></li>
<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>
<li>虚拟机会保证一个<code>类的&lt;clinit&gt;()方法</code>在多线程环境中被正确加锁和同步。</li>
</ul>
<h4 id="3-类加载器（classloader"><a href="#3-类加载器（classloader" class="headerlink" title="3. 类加载器（classloader)"></a>3. 类加载器（classloader)</h4><p><img src="https://blog-resources.this0.com/image/202403301627018.png?x-oss-process=style/this0-blog" alt="image-20220417173647473.png"></p>
<h5 id="3-1-类加载器的作用"><a href="#3-1-类加载器的作用" class="headerlink" title="3.1 类加载器的作用"></a>3.1 类加载器的作用</h5><p><code>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</code></p>
<p><code>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</code><br><img src="https://blog-resources.this0.com/image/202403301627065.png?x-oss-process=style/this0-blog" alt="image-20220417173616344.png"></p>
<h5 id="3-2-类加载器的分类-JDK8为例"><a href="#3-2-类加载器的分类-JDK8为例" class="headerlink" title="3.2 类加载器的分类(JDK8为例)"></a>3.2 类加载器的分类(JDK8为例)</h5><p>JVM支持两种类型的类加载器，分别为<code>引导类加载器（Bootstrap ClassLoader）</code>和<code>自定义类加载器（User-Defined ClassLoader）。</code></p>
<p>从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器。无论类加载器的类型如何划分，在程序中我们最常见的类加载器结构主要是如下情况：</p>
<p><img src="https://blog-resources.this0.com/image/202403301627620.png?x-oss-process=style/this0-blog" alt="image-20220417173819953.png"></p>
<p><strong>（1）启动类加载器（引导类加载器，Bootstrap ClassLoader）</strong></p>
<ul>
<li>这个类加载使用<code>C/C++语言</code>实现的，嵌套在JVM内部。获取它的对象时往往返回null</li>
<li><code>它用来加载Java的核心库</code>（JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;rt.jar或sun.boot.class.path路径下的内容）。用于提供JVM自身需要的类。</li>
<li>并不继承自java.lang.ClassLoader，没有父加载器。</li>
<li>出于安全考虑，Bootstrap启动类加载器<code>只加载包名为java、javax、sun等开头的类</code></li>
<li><code>加载扩展类和应用程序类加载器，并指定为他们的父类加载器。</code></li>
</ul>
<p><strong>（2）扩展类加载器（Extension ClassLoader）</strong></p>
<ul>
<li>Java语言编写，由sun.misc.Launcher$ExtClassLoader实现。</li>
<li>继承于ClassLoader类</li>
<li>父类加载器为启动类加载器</li>
<li><code>从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/lib/ext子目录下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。</code></li>
</ul>
<p><img src="https://blog-resources.this0.com/image/202403301627993.png?x-oss-process=style/this0-blog" alt="image-20220417174032702.png"></p>
<p><strong>（3）应用程序类加载器（系统类加载器，AppClassLoader）</strong></p>
<ul>
<li>java语言编写，由sun.misc.Launcher$AppClassLoader实现</li>
<li>继承于ClassLoader类</li>
<li>父类加载器为扩展类加载器</li>
<li><code>它负责加载环境变量classpath或系统属性 java.class.path 指定路径下的类库</code></li>
<li>应用程序中的类加载器默认是系统类加载器。</li>
<li>它是用户自定义类加载器的默认父加载器</li>
<li>通过ClassLoader的getSystemClassLoader()方法可以获取到该类加载器</li>
</ul>
<p><strong><code>（4）用户自定义类加载器（了解）</code></strong></p>
<ul>
<li>在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的。在必要时，我们还可以自定义类加载器，来定制类的加载方式。</li>
<li>体现Java语言强大生命力和巨大魅力的关键因素之一便是，Java开发者可以自定义类加载器来实现类库的动态加载，加载源可以是本地的JAR包，也可以是网络上的远程资源。</li>
<li>同时，自定义加载器能够实现<code>应用隔离</code>，例如 Tomcat，Spring等中间件和组件框架都在内部实现了自定义的加载器，并通过自定义加载器隔离不同的组件模块。这种机制比C&#x2F;C程序要好太多，想不修改C&#x2F;C程序就能为其新增功能，几乎是不可能的，仅仅一个兼容性便能阻挡住所有美好的设想。</li>
<li>自定义类加载器通常需要继承于ClassLoader。</li>
</ul>
<h5 id="3-3-查看某个类的类加载器对象"><a href="#3-3-查看某个类的类加载器对象" class="headerlink" title="3.3 查看某个类的类加载器对象"></a>3.3 查看某个类的类加载器对象</h5><p>（1）获取默认的系统类加载器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">classloader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br></pre></td></tr></table></figure>

<p>（2）查看某个类是哪个类加载器加载的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">classloader</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;exer2.ClassloaderDemo&quot;</span>).getClassLoader();</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是根加载器加载的类，则会得到null</span></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classloader1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br></pre></td></tr></table></figure>

<p>（3）获取某个类加载器的父加载器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">parentClassloader</span> <span class="operator">=</span> classloader.getParent();</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.loader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;systemClassLoader = &quot;</span> + systemClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c1</span> <span class="operator">=</span> String.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;加载String类的类加载器：&quot;</span> + c1);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.util.resources.cldr.zh.TimeZoneNames_zh&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;加载sun.util.resources.cldr.zh.TimeZoneNames_zh类的类加载器：&quot;</span> + c2);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c3</span> <span class="operator">=</span> TestClassLoader.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;加载当前类的类加载器：&quot;</span> + c3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c1</span> <span class="operator">=</span> TestClassLoader.class.getClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;加载当前类的类加载器c1=&quot;</span> + c1);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c2</span> <span class="operator">=</span> c1.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;c1.parent = &quot;</span> + c2);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">c3</span> <span class="operator">=</span> c2.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;c2.parent = &quot;</span> + c3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-4-使用ClassLoader获取流"><a href="#3-4-使用ClassLoader获取流" class="headerlink" title="3.4 使用ClassLoader获取流"></a>3.4 使用ClassLoader获取流</h5><p>关于类加载器的一个主要方法：getResourceAsStream(String str):获取类路径下的指定文件的输入流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">in = <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;exer2\\test.properties&quot;</span>);</span><br><span class="line">System.out.println(in);</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要掌握如下的代码</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//方式1：此时默认的相对路径是当前的module</span></span><br><span class="line"><span class="comment">//        FileInputStream is = new FileInputStream(&quot;info.properties&quot;);</span></span><br><span class="line"><span class="comment">//        FileInputStream is = new FileInputStream(&quot;src//info1.properties&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：使用类的加载器</span></span><br><span class="line">        <span class="comment">//此时默认的相对路径是当前module的src目录</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;info1.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取配置文件中的信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, password = &quot;</span> + password);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-反射机制-反射的应用：创建运行时类的对象、获取运行时类的完整结构"><a href="#4-反射机制-反射的应用：创建运行时类的对象、获取运行时类的完整结构" class="headerlink" title="4.反射机制-反射的应用：创建运行时类的对象、获取运行时类的完整结构"></a>4.反射机制-反射的应用：创建运行时类的对象、获取运行时类的完整结构</h3><h4 id="1-反射的基本应用"><a href="#1-反射的基本应用" class="headerlink" title="1. 反射的基本应用"></a>1. 反射的基本应用</h4><p>有了Class对象，能做什么？</p>
<h5 id="1-1-应用1：创建运行时类的对象"><a href="#1-1-应用1：创建运行时类的对象" class="headerlink" title="1.1 应用1：创建运行时类的对象"></a>1.1 应用1：创建运行时类的对象</h5><p>这是反射机制应用最多的地方。创建运行时类的对象有两种方式：</p>
<p><strong>方式1：直接调用Class对象的newInstance()方法</strong></p>
<p>要 求： 1）类必须有一个无参数的构造器。2）类的构造器的访问权限需要足够。</p>
<p><strong>方式2：通过获取构造器对象来进行实例化</strong></p>
<p>方式一的步骤：</p>
<p>1）获取该类型的Class对象  2）调用Class对象的newInstance()方法创建对象</p>
<p>方式二的步骤：</p>
<p>1）通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类型的构造器<br>2）向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。<br>3）通过Constructor实例化对象。</p>
<blockquote>
<p>如果构造器的权限修饰符修饰的范围不可见，也可以调用setAccessible(true)</p>
</blockquote>
<p><code>setAccessible(true)</code>暴力破解</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCreateObject</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//        AtGuiguClass obj = new AtGuiguClass();//编译期间无法创建</span></span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.atguigu.ext.demo.AtGuiguClass&quot;</span>);</span><br><span class="line">        <span class="comment">//clazz代表com.atguigu.ext.demo.AtGuiguClass类型</span></span><br><span class="line">        <span class="comment">//clazz.newInstance()创建的就是AtGuiguClass的对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.atguigu.ext.demo.AtGuiguDemo&quot;</span>);</span><br><span class="line">        <span class="comment">//java.lang.InstantiationException: com.atguigu.ext.demo.AtGuiguDemo</span></span><br><span class="line">        <span class="comment">//Caused by: java.lang.NoSuchMethodException: com.atguigu.ext.demo.AtGuiguDemo.&lt;init&gt;()</span></span><br><span class="line">        <span class="comment">//即说明AtGuiguDemo没有无参构造，就没有无参实例初始化方法&lt;init&gt;</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">stu</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//(1)获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.atguigu.ext.demo.AtGuiguDemo&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 获取AtGuiguDemo类型中的有参构造</span></span><br><span class="line"><span class="comment">         * 如果构造器有多个，我们通常是根据形参【类型】列表来获取指定的一个构造器的</span></span><br><span class="line"><span class="comment">         * 例如：public AtGuiguDemo(String title, int num)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//(2)获取构造器对象</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(3)创建实例对象</span></span><br><span class="line">        <span class="comment">// T newInstance(Object... initargs)  这个Object...是在创建对象时，给有参构造的实参列表</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;尚硅谷&quot;</span>,<span class="number">2022</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-应用2：获取运行时类的完整结构"><a href="#1-2-应用2：获取运行时类的完整结构" class="headerlink" title="1.2 应用2：获取运行时类的完整结构"></a>1.2 应用2：获取运行时类的完整结构</h5><p>可以获取：包、修饰符、类型名、父类（包括泛型父类）、父接口（包括泛型父接口）、成员（属性、构造器、方法）、注解（类上的、方法上的、属性上的）。</p>
<h6 id="1-2-1-相关API"><a href="#1-2-1-相关API" class="headerlink" title="1.2.1 相关API"></a>1.2.1 相关API</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.实现的全部接口</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getInterfaces()   </span><br><span class="line"><span class="comment">//确定此对象所表示的类或接口实现的接口。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.所继承的父类</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;? Super T&gt; getSuperclass()</span><br><span class="line"><span class="comment">//返回表示此 Class 所表示的实体（类、接口、基本类型）的父类的 Class。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.全部的构造器</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;T&gt;[] getConstructors()</span><br><span class="line"><span class="comment">//返回此 Class 对象所表示的类的所有public构造方法。</span></span><br><span class="line"><span class="keyword">public</span> Constructor&lt;T&gt;[] getDeclaredConstructors()</span><br><span class="line"><span class="comment">//返回此 Class 对象表示的类声明的所有构造方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Constructor类中：</span></span><br><span class="line"><span class="comment">//取得修饰符: </span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getModifiers</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//取得方法名称: </span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//取得参数的类型：</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getParameterTypes();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.全部的方法</span></span><br><span class="line"><span class="keyword">public</span> Method[] getDeclaredMethods()</span><br><span class="line"><span class="comment">//返回此Class对象所表示的类或接口的全部方法</span></span><br><span class="line"><span class="keyword">public</span> Method[] getMethods()  </span><br><span class="line"><span class="comment">//返回此Class对象所表示的类或接口的public的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Method类中：</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getReturnType()</span><br><span class="line"><span class="comment">//取得全部的返回值</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getParameterTypes()</span><br><span class="line"><span class="comment">//取得全部的参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getModifiers</span><span class="params">()</span></span><br><span class="line"><span class="comment">//取得修饰符</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt;[] getExceptionTypes()</span><br><span class="line"><span class="comment">//取得异常信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.全部的Field</span></span><br><span class="line"><span class="keyword">public</span> Field[] getFields() </span><br><span class="line"><span class="comment">//返回此Class对象所表示的类或接口的public的Field。</span></span><br><span class="line"><span class="keyword">public</span> Field[] getDeclaredFields() </span><br><span class="line"><span class="comment">//返回此Class对象所表示的类或接口的全部Field。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Field方法中：</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getModifiers</span><span class="params">()</span></span><br><span class="line"><span class="comment">//以整数形式返回此Field的修饰符</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getType()  </span><br><span class="line"><span class="comment">//得到Field的属性类型</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>  </span><br><span class="line"><span class="comment">//返回Field的名称。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6. Annotation相关</span></span><br><span class="line">get <span class="title function_">Annotation</span><span class="params">(Class&lt;T&gt; annotationClass)</span> </span><br><span class="line">getDeclaredAnnotations() </span><br><span class="line"></span><br><span class="line"><span class="comment">//7.泛型相关</span></span><br><span class="line"><span class="comment">//获取父类泛型类型：</span></span><br><span class="line">Type <span class="title function_">getGenericSuperclass</span><span class="params">()</span></span><br><span class="line"><span class="comment">//泛型类型：ParameterizedType</span></span><br><span class="line"><span class="comment">//获取实际的泛型类型参数数组：</span></span><br><span class="line">getActualTypeArguments()</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.类所在的包</span></span><br><span class="line">Package <span class="title function_">getPackage</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<h6 id="1-2-2-获取所有的属性及相关细节"><a href="#1-2-2-获取所有的属性及相关细节" class="headerlink" title="1.2.2 获取所有的属性及相关细节"></a>1.2.2 获取所有的属性及相关细节</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.java1.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FieldTest</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">		<span class="comment">//getFields():获取到运行时类本身及其所有的父类中声明为public权限的属性</span></span><br><span class="line"><span class="comment">//		Field[] fields = clazz.getFields();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//		for(Field f : fields)&#123;</span></span><br><span class="line"><span class="comment">//			System.out.println(f);</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//getDeclaredFields():获取当前运行时类中声明的所有属性</span></span><br><span class="line">		Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">		<span class="keyword">for</span>(Field f : declaredFields)&#123;</span><br><span class="line">			System.out.println(f);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//权限修饰符  变量类型  变量名</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field f : declaredFields)&#123;</span><br><span class="line">            <span class="comment">//1.权限修饰符</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">         	* 0x是十六进制</span></span><br><span class="line"><span class="comment">         	* PUBLIC           = 0x00000001;  1    1</span></span><br><span class="line"><span class="comment">         	* PRIVATE          = 0x00000002;  2	10</span></span><br><span class="line"><span class="comment">         	* PROTECTED        = 0x00000004;  4	100</span></span><br><span class="line"><span class="comment">         	* STATIC           = 0x00000008;  8	1000</span></span><br><span class="line"><span class="comment">         	* FINAL            = 0x00000010;  16	10000</span></span><br><span class="line"><span class="comment">         	* ...</span></span><br><span class="line"><span class="comment">         	*</span></span><br><span class="line"><span class="comment">         	* 设计的理念，就是用二进制的某一位是1，来代表一种修饰符，整个二进制中只有一位是1，其余都是0</span></span><br><span class="line"><span class="comment">         	*</span></span><br><span class="line"><span class="comment">         	* mod = 17          0x00000011</span></span><br><span class="line"><span class="comment">         	* if ((mod &amp; PUBLIC) != 0)  说明修饰符中有public</span></span><br><span class="line"><span class="comment">         	* if ((mod &amp; FINAL) != 0)   说明修饰符中有final</span></span><br><span class="line"><span class="comment">         	*/</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">modifier</span> <span class="operator">=</span> f.getModifiers();</span><br><span class="line">            System.out.print(Modifier.toString(modifier) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            //2.数据类型</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">type</span> <span class="operator">=</span> f.getType();</span><br><span class="line">            System.out.print(type.getName() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            //3.变量名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fName</span> <span class="operator">=</span> f.getName();</span><br><span class="line">            System.out.print(fName);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="1-2-3-获取所有的方法及相关细节"><a href="#1-2-3-获取所有的方法及相关细节" class="headerlink" title="1.2.3 获取所有的方法及相关细节"></a>1.2.3 获取所有的方法及相关细节</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.java1.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">		<span class="comment">// getMethods():获取到运行时类本身及其所有的父类中声明为public权限的方法</span></span><br><span class="line">		<span class="comment">// Method[] methods = clazz.getMethods();</span></span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="comment">// for(Method m : methods)&#123;</span></span><br><span class="line">		<span class="comment">// System.out.println(m);</span></span><br><span class="line">		<span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// getDeclaredMethods():获取当前运行时类中声明的所有方法</span></span><br><span class="line">		Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line">		<span class="keyword">for</span> (Method m : declaredMethods) &#123;</span><br><span class="line">			System.out.println(m);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注解信息</span></span><br><span class="line">	<span class="comment">// 权限修饰符 返回值类型 方法名(形参类型1 参数1,形参类型2 参数2,...) throws 异常类型1,...&#123;&#125;</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">		Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line">		<span class="keyword">for</span> (Method m : declaredMethods) &#123;</span><br><span class="line">			<span class="comment">// 1.获取方法声明的注解</span></span><br><span class="line">			Annotation[] annos = m.getAnnotations();</span><br><span class="line">			<span class="keyword">for</span> (Annotation a : annos) &#123;</span><br><span class="line">				System.out.println(a);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 2.权限修饰符</span></span><br><span class="line">			System.out.print(Modifier.toString(m.getModifiers()) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 3.返回值类型</span></span><br><span class="line">			System.out.print(m.getReturnType().getName() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 4.方法名</span></span><br><span class="line">			System.out.print(m.getName());</span><br><span class="line">			System.out.print(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">			<span class="comment">// 5.形参列表</span></span><br><span class="line">			Class[] parameterTypes = m.getParameterTypes();</span><br><span class="line">			<span class="keyword">if</span> (!(parameterTypes == <span class="literal">null</span> &amp;&amp; parameterTypes.length == <span class="number">0</span>)) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> (i == parameterTypes.length - <span class="number">1</span>) &#123;</span><br><span class="line">						System.out.print(parameterTypes[i].getName() + <span class="string">&quot; args_&quot;</span> + i);</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					System.out.print(parameterTypes[i].getName() + <span class="string">&quot; args_&quot;</span> + i + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			System.out.print(<span class="string">&quot;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 6.抛出的异常</span></span><br><span class="line">			Class[] exceptionTypes = m.getExceptionTypes();</span><br><span class="line">			<span class="keyword">if</span> (exceptionTypes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				System.out.print(<span class="string">&quot;throws &quot;</span>);</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; exceptionTypes.length; i++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (i == exceptionTypes.length - <span class="number">1</span>) &#123;</span><br><span class="line">						System.out.print(exceptionTypes[i].getName());</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					System.out.print(exceptionTypes[i].getName() + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="1-2-4-获取其他结构-构造器、父类、接口、包、注解等"><a href="#1-2-4-获取其他结构-构造器、父类、接口、包、注解等" class="headerlink" title="1.2.4 获取其他结构(构造器、父类、接口、包、注解等)"></a>1.2.4 获取其他结构(构造器、父类、接口、包、注解等)</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.java1.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020 下午 2:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OtherTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	获取当前类中的所有的构造器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        Constructor[] cons = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor c :cons)&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	获取运行时类的父类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">superclass</span> <span class="operator">=</span> clazz.getSuperclass();</span><br><span class="line">        System.out.println(superclass);<span class="comment">//class com.atguigu.java1.Creature</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	获取运行时类的所在的包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        <span class="type">Package</span> <span class="variable">pack</span> <span class="operator">=</span> clazz.getPackage();</span><br><span class="line">        System.out.println(pack);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	获取运行时类的注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        Annotation[] annos = clazz.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation anno : annos) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(anno);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	获取运行时类所实现的接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        Class[] interfaces = clazz.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class anInterface : interfaces) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(anInterface);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	获取运行时类的带泛型的父类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericSuperclass</span> <span class="operator">=</span> clazz.getGenericSuperclass();</span><br><span class="line">        System.out.println(genericSuperclass);<span class="comment">//com.atguigu.java1.Creature&lt;java.lang.String&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="1-2-5-获取泛型父类信息（选讲）"><a href="#1-2-5-获取泛型父类信息（选讲）" class="headerlink" title="1.2.5 获取泛型父类信息（选讲）"></a><code>1.2.5 获取泛型父类信息（选讲）</code></h6><p>示例代码获取泛型父类信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Type：</span></span><br><span class="line"><span class="comment"> * （1）Class</span></span><br><span class="line"><span class="comment"> * （2）ParameterizedType   </span></span><br><span class="line"><span class="comment"> * 		例如：Father&lt;String,Integer&gt;</span></span><br><span class="line"><span class="comment"> * 			ArrayList&lt;String&gt;</span></span><br><span class="line"><span class="comment"> * （3）TypeVariable</span></span><br><span class="line"><span class="comment"> * 		例如：T，U,E,K,V</span></span><br><span class="line"><span class="comment"> * （4）WildcardType</span></span><br><span class="line"><span class="comment"> * 		例如：</span></span><br><span class="line"><span class="comment"> * 		ArrayList&lt;?&gt;</span></span><br><span class="line"><span class="comment"> * 		ArrayList&lt;? super 下限&gt;</span></span><br><span class="line"><span class="comment"> * 		ArrayList&lt;? extends 上限&gt;</span></span><br><span class="line"><span class="comment"> * （5）GenericArrayType</span></span><br><span class="line"><span class="comment"> * 		例如：T[]</span></span><br><span class="line"><span class="comment"> * 	</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//需求：在运行时，获取Son类型的泛型父类的泛型实参&lt;String,Integer&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//（1）还是先获取Class对象</span></span><br><span class="line">		<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Son.class;<span class="comment">//四种形式任意一种都可以</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//（2）获取泛型父类</span></span><br><span class="line"><span class="comment">//		Class sc = clazz.getSuperclass();</span></span><br><span class="line"><span class="comment">//		System.out.println(sc);</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * getSuperclass()只能得到父类名，无法得到父类的泛型实参列表</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> clazz.getGenericSuperclass();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// Father&lt;String,Integer&gt;属于ParameterizedType</span></span><br><span class="line">		<span class="type">ParameterizedType</span> <span class="variable">pt</span> <span class="operator">=</span> (ParameterizedType) type;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//（3）获取泛型父类的泛型实参列表</span></span><br><span class="line">		Type[] typeArray = pt.getActualTypeArguments();</span><br><span class="line">		<span class="keyword">for</span> (Type type2 : typeArray) &#123;</span><br><span class="line">			System.out.println(type2);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//泛型形参：&lt;T,U&gt;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&lt;T,U&gt;&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//泛型实参：&lt;String,Integer&gt;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&lt;String,Integer&gt;&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="1-2-6-获取内部类或外部类信息（选讲）"><a href="#1-2-6-获取内部类或外部类信息（选讲）" class="headerlink" title="1.2.6 获取内部类或外部类信息（选讲）"></a><code>1.2.6 获取内部类或外部类信息（选讲）</code></h6><p>public Class&lt;?&gt;[] getClasses()：返回所有公共内部类和内部接口。包括从超类继承的公共类和接口成员以及该类声明的公共类和接口成员。</p>
<p>public Class&lt;?&gt;[] getDeclaredClasses()：返回 Class 对象的一个数组，这些对象反映声明为此 Class 对象所表示的类的成员的所有类和接口。包括该类所声明的公共、保护、默认（包）访问及私有类和接口，但不包括继承的类和接口。</p>
<p>public Class&lt;?&gt; getDeclaringClass()：如果此 Class 对象所表示的类或接口是一个内部类或内部接口，则返回它的外部类或外部接口，否则返回null。</p>
<p>Class&lt;?&gt; getEnclosingClass() ：返回某个内部类的外部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">	Class&lt;?&gt; clazz = Map.class;</span><br><span class="line">	Class&lt;?&gt;[] inners = clazz.getDeclaredClasses();</span><br><span class="line">	<span class="keyword">for</span> (Class&lt;?&gt; inner : inners) &#123;</span><br><span class="line">		System.out.println(inner);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Class&lt;?&gt; ec = Map.Entry.class;</span><br><span class="line">	Class&lt;?&gt; outer = ec.getDeclaringClass();</span><br><span class="line">	System.out.println(outer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="1-2-7-小-结"><a href="#1-2-7-小-结" class="headerlink" title="1.2.7 小 结"></a>1.2.7 小 结</h6><ol>
<li>在实际的操作中，取得类的信息的操作代码，并不会经常开发。</li>
<li>一定要熟悉java.lang.reflect包的作用，反射机制。</li>
</ol>
<h3 id="5-反射机制-反射的应用：调用指定的属性、方法、构造器"><a href="#5-反射机制-反射的应用：调用指定的属性、方法、构造器" class="headerlink" title="5.反射机制-反射的应用：调用指定的属性、方法、构造器"></a>5.反射机制-反射的应用：调用指定的属性、方法、构造器</h3><h4 id="1-应用3：调用运行时类的指定结构"><a href="#1-应用3：调用运行时类的指定结构" class="headerlink" title="1. 应用3：调用运行时类的指定结构"></a>1. 应用3：调用运行时类的指定结构</h4><h5 id="1-1-调用指定的属性"><a href="#1-1-调用指定的属性" class="headerlink" title="1.1 调用指定的属性"></a>1.1 调用指定的属性</h5><p>在反射机制中，可以直接通过Field类操作类中的属性，通过Field类提供的set()和get()方法就可以完成设置和取得属性内容的操作。</p>
<p>（1）获取该类型的Class对象</p>
<p>Class clazz &#x3D; Class.forName(“包.类名”);</p>
<p>（2）获取属性对象</p>
<p>Field field &#x3D; clazz.getDeclaredField(“属性名”);</p>
<p>（3）如果属性的权限修饰符不是public，那么需要设置属性可访问</p>
<p>field.setAccessible(true);</p>
<p>（4）创建实例对象：如果操作的是非静态属性，需要创建实例对象</p>
<p>Object obj &#x3D; clazz.newInstance(); &#x2F;&#x2F;有公共的无参构造</p>
<p>Object obj &#x3D; 构造器对象.newInstance(实参…);&#x2F;&#x2F;通过特定构造器对象创建实例对象</p>
<p>（4）设置指定对象obj上此Field的属性内容</p>
<p>field.set(obj,”属性值”);</p>
<blockquote>
<p>如果操作静态变量，那么实例对象可以省略，用null表示</p>
</blockquote>
<p>（5）取得指定对象obj上此Field的属性内容</p>
<p>Object value &#x3D; field.get(obj);</p>
<blockquote>
<p>如果操作静态变量，那么实例对象可以省略，用null表示</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestField</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1、获取Student的Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.atguigu.reflect.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、获取属性对象，例如：id属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">idField</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、如果id是私有的等在当前类中不可访问access的，我们需要做如下操作</span></span><br><span class="line">        idField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、创建实例对象，即，创建Student对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">stu</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、获取属性值</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 以前：int 变量= 学生对象.getId()</span></span><br><span class="line"><span class="comment">         * 现在：Object id属性对象.get(学生对象)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> idField.get(stu);</span><br><span class="line">        System.out.println(<span class="string">&quot;id = &quot;</span>+ value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、设置属性值</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 以前：学生对象.setId(值)</span></span><br><span class="line"><span class="comment">         * 现在：id属性对象.set(学生对象,值)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        idField.set(stu, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        value = idField.get(stu);</span><br><span class="line">        System.out.println(<span class="string">&quot;id = &quot;</span>+ value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>关于setAccessible方法的使用：</strong></p>
<ul>
<li>Method和Field、Constructor对象都有setAccessible()方法。</li>
<li>setAccessible启动和禁用访问安全检查的开关。</li>
<li>参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。 <ul>
<li>提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。</li>
<li>使得原本无法访问的私有成员也可以访问</li>
</ul>
</li>
<li>参数值为false则指示反射的对象应该实施Java语言访问检查。</li>
</ul>
<h5 id="1-2-调用指定的方法"><a href="#1-2-调用指定的方法" class="headerlink" title="1.2 调用指定的方法"></a>1.2 调用指定的方法<img src="https://blog-resources.this0.com/image/202403301627666.png?x-oss-process=style/this0-blog" alt="image-20220417181700813.png"></h5><p>（1）获取该类型的Class对象</p>
<p>Class clazz &#x3D; Class.forName(“包.类名”);</p>
<p>（2）获取方法对象</p>
<p>Method method &#x3D; clazz.getDeclaredMethod(“方法名”,方法的形参类型列表);</p>
<p>（3）创建实例对象</p>
<p>Object obj &#x3D; clazz.newInstance();</p>
<p>（4）调用方法</p>
<p>Object result &#x3D; method.invoke(obj, 方法的实参值列表);</p>
<blockquote>
<p>如果方法的权限修饰符修饰的范围不可见，也可以调用setAccessible(true)</p>
<p>如果方法是静态方法，实例对象也可以省略，用null代替</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMethod</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、获取Student的Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.atguigu.reflect.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、获取方法对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 在一个类中，唯一定位到一个方法，需要：（1）方法名（2）形参列表，因为方法可能重载</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 例如：void setName(String name)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setNameMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、创建实例对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">stu</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、调用方法</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 以前：学生对象.setName(值)</span></span><br><span class="line"><span class="comment">         * 现在：方法对象.invoke(学生对象，值)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">setNameMethodReturnValue</span> <span class="operator">=</span> setNameMethod.invoke(stu, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;stu = &quot;</span> + stu);</span><br><span class="line">        <span class="comment">//setName方法返回值类型void，没有返回值，所以setNameMethodReturnValue为null</span></span><br><span class="line">        System.out.println(<span class="string">&quot;setNameMethodReturnValue = &quot;</span> + setNameMethodReturnValue);</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getNameMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">getNameMethodReturnValue</span> <span class="operator">=</span> getNameMethod.invoke(stu);</span><br><span class="line">        <span class="comment">//getName方法返回值类型String，有返回值，getNameMethod.invoke的返回值就是getName方法的返回值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getNameMethodReturnValue = &quot;</span> + getNameMethodReturnValue);<span class="comment">//张三</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.atguigu.ext.demo.AtGuiguClass&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">printInfoMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;printInfo&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//printInfo方法是静态方法</span></span><br><span class="line">        printInfoMethod.invoke(<span class="literal">null</span>,<span class="string">&quot;尚硅谷&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-练习"><a href="#1-3-练习" class="headerlink" title="1.3 练习"></a>1.3 练习</h5><p>读取user.properties文件中的数据，通过反射完成User类对象的创建及对应方法的调用。</p>
<p>配置文件：user.properties</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">className:</span><span class="keyword">com</span>.atguigu.bean.User</span><br><span class="line"><span class="symbol">methodName:</span>show</span><br></pre></td></tr></table></figure>

<p>User.java文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 18:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个脉脉平台的用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ReflectTest.java文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 18:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.创建Properties对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.加载配置文件，转换为一个集合</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> classLoader.getResourceAsStream(<span class="string">&quot;user.properties&quot;</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取配置文件中定义的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> pro.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.加载该类进内存</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.获取方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">showMethod</span> <span class="operator">=</span> clazz.getMethod(methodName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.执行方法</span></span><br><span class="line">        showMethod.invoke(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-应用4：读取注解信息"><a href="#2-应用4：读取注解信息" class="headerlink" title="2. 应用4：读取注解信息"></a>2. 应用4：读取注解信息</h4><p>一个完整的注解应该包含三个部分：<br>（1）声明<br>（2）使用<br>（3）读取</p>
<h5 id="2-1-声明自定义注解-TODO，自定义注解，以前出现过。第二次出现"><a href="#2-1-声明自定义注解-TODO，自定义注解，以前出现过。第二次出现" class="headerlink" title="2.1 声明自定义注解		&#x2F;&#x2F;TODO，自定义注解，以前出现过。第二次出现"></a>2.1 声明自定义注解		&#x2F;&#x2F;TODO，自定义注解，以前出现过。第二次出现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Table &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;</span><br><span class="line">    String <span class="title function_">columnName</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">columnType</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义注解可以通过四个元注解@Retention,@Target，@Inherited,@Documented，分别说明它的声明周期，使用位置，是否被继承，是否被生成到API文档中。</li>
<li>Annotation 的成员在 Annotation 定义中以无参数有返回值的抽象方法的形式来声明，我们又称为配置参数。返回值类型只能是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组</li>
<li>可以使用 default 关键字为抽象方法指定默认返回值</li>
<li>如果定义的注解含有抽象方法，那么使用时必须指定返回值，除非它有默认值。格式是“方法名 &#x3D; 返回值”，如果只有一个抽象方法需要赋值，且方法名为value，可以省略“value&#x3D;”，所以如果注解只有一个抽象方法成员，建议使用方法名value。</li>
</ul>
<h5 id="2-2-使用自定义注解"><a href="#2-2-使用自定义注解" class="headerlink" title="2.2 使用自定义注解"></a>2.2 使用自定义注解</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.annotation;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table(&quot;t_stu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@Column(columnName = &quot;sid&quot;,columnType = &quot;int&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@Column(columnName = &quot;sname&quot;,columnType = &quot;varchar(20)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-应用5-读取和处理自定义注解"><a href="#3-应用5-读取和处理自定义注解" class="headerlink" title="3.应用5: 读取和处理自定义注解"></a>3.应用5: 读取和处理自定义注解</h4><p>自定义注解必须配上注解的信息处理流程才有意义。</p>
<p>我们自己定义的注解，只能使用反射的代码读取。所以自定义注解的声明周期必须是RetentionPolicy.RUNTIME。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAnnotation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">tableAnnotation</span> <span class="operator">=</span> (Table) studentClass.getAnnotation(Table.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(tableAnnotation != <span class="literal">null</span>)&#123;</span><br><span class="line">            tableName = tableAnnotation.value();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field[] declaredFields = studentClass.getDeclaredFields();</span><br><span class="line">        String[] columns = <span class="keyword">new</span> <span class="title class_">String</span>[declaredFields.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            <span class="type">Column</span> <span class="variable">column</span> <span class="operator">=</span> declaredField.getAnnotation(Column.class);</span><br><span class="line">            <span class="keyword">if</span>(column!= <span class="literal">null</span>) &#123;</span><br><span class="line">                columns[index++] = column.columnName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;index; i++) &#123;</span><br><span class="line">            sql += columns[i];</span><br><span class="line">            <span class="keyword">if</span>(i&lt;index-<span class="number">1</span>)&#123;</span><br><span class="line">                sql += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sql += <span class="string">&quot; from &quot;</span> + tableName;</span><br><span class="line">        System.out.println(<span class="string">&quot;sql = &quot;</span> + sql);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-反射机制-反射的应用：获取指定的注解-反射的动态性举例"><a href="#6-反射机制-反射的应用：获取指定的注解-反射的动态性举例" class="headerlink" title="6.反射机制-反射的应用：获取指定的注解_反射的动态性举例"></a>6.反射机制-反射的应用：获取指定的注解_反射的动态性举例</h3><h4 id="1-体会反射的动态性"><a href="#1-体会反射的动态性" class="headerlink" title="1. 体会反射的动态性"></a>1. 体会反射的动态性</h4><p><strong>体会1：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//体会反射的动态性：动态的创建给定字符串对应的类的对象</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getInstance</span><span class="params">(String className)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) constructor.newInstance();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.atguigu.java1.Person&quot;</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> getInstance(className);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>体会2：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line">    <span class="comment">//体会反射的动态性：动态的创建指定字符串对应类的对象，并调用指定的方法</span></span><br><span class="line">    <span class="keyword">public</span> Object  <span class="title function_">invoke</span><span class="params">(String className,String methodName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//动态的创建指定字符串对应类的对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(methodName);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> (String) invoke(<span class="string">&quot;com.atguigu.java1.Person&quot;</span>, <span class="string">&quot;show&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;返回值为：&quot;</span> + info);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>体会3：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.加载配置文件，并获取指定的fruitName值</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;config.properties&quot;</span>);</span><br><span class="line">        pros.load(is);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fruitStr</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;fruitName&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建指定全类名对应类的实例</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(fruitStr);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> (Fruit) constructor.newInstance();</span><br><span class="line">        <span class="comment">//3. 调用相关方法，进行测试</span></span><br><span class="line">        <span class="type">Juicer</span> <span class="variable">juicer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Juicer</span>();</span><br><span class="line">        juicer.run(fruit);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">squeeze</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">squeeze</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;榨出一杯苹果汁儿&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Orange</span> <span class="keyword">implements</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">squeeze</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;榨出一杯桔子汁儿&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Juicer</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Fruit f)</span> &#123;</span><br><span class="line">		f.squeeze();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，配置文件【config.properties】存放在当前Module的src下</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.atguigu</span><span class="selector-class">.java1</span>.Orange</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与源码</title>
    <url>/articles/f21d5d66.html</url>
    <content><![CDATA[<h3 id="1-数据结构剖析"><a href="#1-数据结构剖析" class="headerlink" title="1. 数据结构剖析"></a>1. 数据结构剖析</h3><h4 id="1-数据的逻辑结构"><a href="#1-数据的逻辑结构" class="headerlink" title="1.数据的逻辑结构"></a>1.数据的逻辑结构</h4><p>数据的<code>逻辑结构指反映数据元素之间的逻辑关系</code>，而与数据的存储无关，是独立于计算机的。</p>
<ul>
<li><p><strong>集合结构</strong>：数据结构中的元素之间除了“<code>同属一个集合</code>” 的相互关系外，别无其他关系。集合元素之间没有逻辑关系。</p>
</li>
<li><p><strong>线性结构</strong>：数据结构中的元素存在<code>一对一</code>的相互关系。比如：排队。结构中必须存在唯一的首元素和唯一的尾元素。体现为：一维数组、链表、栈、队列</p>
</li>
<li><p><strong>树形结构</strong>：数据结构中的元素存在<code>一对多</code>的相互关系。比如：家谱、文件系统、组织架构</p>
</li>
<li><p><strong>图形结构</strong>：数据结构中的元素存在<code>多对多</code>的相互关系。比如：全国铁路网、地铁图</p>
</li>
</ul>
<h4 id="2-数据的存储结构（或物理结构）"><a href="#2-数据的存储结构（或物理结构）" class="headerlink" title="2 数据的存储结构（或物理结构）"></a>2 数据的存储结构（或物理结构）</h4><p>  数据的物理结构&#x2F;存储结构：包括<code>数据元素的表示</code>和<code>关系的表示</code>。数据的存储结构是逻辑结构用计算机语言的实现，它依赖于计算机语言。</p>
<p><strong>结构1：顺序结构</strong></p>
<ul>
<li><p>顺序结构就是<code>使用一组连续的存储单元依次存储逻辑上相邻的各个元素。</code> </p>
</li>
<li><p>优点： 只需要申请存放数据本身的内存空间即可，<code>支持下标访问，也可以实现随机访问。</code></p>
</li>
<li><p>缺点： 必须静态分配连续空间，内存空间的利用率比较低。插入或删除可能需要移动大量元素，效率比较低</p>
</li>
</ul>
<p><strong>结构2：链式结构</strong></p>
<ul>
<li><code>不使用连续的存储空间存放结构的元素，而是为每一个元素构造一个节点。节点中除了存放数据本身以外，还需要存放指向下一个节点的指针。一次申请一小块内存</code></li>
<li>优点：不采用连续的存储空间导致内存空间利用率比较高，克服顺序存储结构中预知元素个数的缺点。插入或删除元素时，不需要移动大量的元素。</li>
<li>缺点：<code>需要额外的空间来表达数据之间的逻辑关系，不支持下标访问和随机访问。</code></li>
</ul>
<p><strong>结构3：索引结构</strong></p>
<ul>
<li><code>除建立存储节点信息外，还建立附加的索引表来记录每个元素节点的地址。</code>索引表由若干索引项组成。索引项的一般形式是：（关键字，地址）。</li>
<li>优点：用节点的索引号来确定结点存储地址，检索速度快。</li>
<li>缺点： <code>增加了附加的索引表，会占用较多的存储空间。</code>在增加和删除数据时要修改索引表，因而会花费较多的时间。</li>
</ul>
<p><strong>结构4：散列结构</strong></p>
<ul>
<li><code>根据元素的关键字直接计算出该元素的存储地址，又称为Hash存储。</code></li>
<li>优点：检索、增加和删除结点的操作都很快。</li>
<li>缺点：<code>不支持排序，一般比用线性表存储需要更多的空间，并且记录的关键字不能重复。</code>&#x2F;&#x2F;TODO，线性表和索引表是什么</li>
</ul>
<h3 id="2-一维数组"><a href="#2-一维数组" class="headerlink" title="2. 一维数组"></a>2. 一维数组</h3><h4 id="1-一维数组的特点"><a href="#1-一维数组的特点" class="headerlink" title="1.一维数组的特点"></a>1.一维数组的特点</h4><ul>
<li><code>在Java中，数组是用来存放同一种数据类型的集合，注意只能存放同一种数据类型。</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只声明了类型和长度</span></span><br><span class="line">数据类型[]  数组名称 = <span class="keyword">new</span> 数据类型[数组长度];</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明了类型，初始化赋值，大小由元素个数决定</span></span><br><span class="line">数据类型[] 数组名称 = &#123;数组元素<span class="number">1</span>，数组元素<span class="number">2</span>，......&#125;</span><br></pre></td></tr></table></figure>

<p>例如：整型数组，对象数组</p>
<ul>
<li>物理结构特点： <ul>
<li>申请内存：一次申请一大段连续的空间，一旦申请到了，内存就固定了。</li>
<li>不能动态扩展(初始化给大了，浪费；给小了，不够用)，插入快，删除和查找慢。</li>
<li>存储特点：所有数据存储在这个连续的空间中，数组中的每一个元素都是一个具体的数据（或对象），所有数据都紧密排布，不能有间隔。</li>
</ul>
</li>
</ul>
<h4 id="2-自定义数组"><a href="#2-自定义数组" class="headerlink" title="2.自定义数组"></a>2.自定义数组</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Array</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Array</span><span class="params">(<span class="type">int</span> capacity)</span>&#123;</span><br><span class="line">        elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Object value)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size &gt;= elementData.length)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;数组已满，不可添加&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        elementData[size] = value;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询元素value在数组中的索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(Object value)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(elementData[i].equals(value))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从当前数组中移除首次出现的value元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Object value)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> find(value);</span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index;i &lt; size - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            elementData[i] = elementData[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        elementData[size - <span class="number">1</span>] = <span class="literal">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数组中首次出现的oldValue替换为newValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Object oldValue,Object newValue)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> find(oldValue);</span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        elementData[index] = newValue;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历数组中所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == size - <span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(elementData[i] + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(elementData[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Array</span> <span class="variable">arr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        arr.add(<span class="number">123</span>);</span><br><span class="line">        arr.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        arr.add(<span class="number">345</span>);</span><br><span class="line">        arr.add(<span class="number">345</span>);</span><br><span class="line">        arr.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        arr.delete(<span class="number">345</span>);</span><br><span class="line"></span><br><span class="line">        arr.update(<span class="number">345</span>,<span class="number">444</span>);</span><br><span class="line"></span><br><span class="line">        arr.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-链表"><a href="#3-链表" class="headerlink" title="3. 链表"></a>3. 链表</h3><h4 id="1-链表的特点"><a href="#1-链表的特点" class="headerlink" title="1.链表的特点"></a>1.链表的特点</h4><ul>
<li>逻辑结构：线性结构 </li>
<li>物理结构：不要求连续的存储空间 </li>
<li>存储特点：链表由一系列结点node（链表中每一个元素称为结点）组成，结点可以在代码执行过程中动态创建。每个结点包括两个部分：一个是存储数据元素的<code>数据域</code>，另一个是存储下一个结点地址的<code>指针域</code>。 </li>
<li>常见的链表结构有如下的形式：</li>
</ul>
<h4 id="2-自定义链表"><a href="#2-自定义链表" class="headerlink" title="2 .自定义链表"></a>2 .自定义链表</h4><h5 id="2-1-自定义单向链表"><a href="#2-1-自定义单向链表" class="headerlink" title="2.1 自定义单向链表"></a>2.1 自定义单向链表</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">单链表中的节点。</span></span><br><span class="line"><span class="comment">节点是单向链表中基本的单元。</span></span><br><span class="line"><span class="comment">每一个节点Node都有两个属性：</span></span><br><span class="line"><span class="comment">    一个属性：是存储的数据。</span></span><br><span class="line"><span class="comment">    另一个属性：是下一个节点的内存地址。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储的数据</span></span><br><span class="line">    Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一个节点的内存地址</span></span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object data, Node next)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">链表类(单向链表)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Link</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 头节点</span></span><br><span class="line">    Node header;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向链表中添加元素的方法（向末尾添加）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E data)</span>&#123;</span><br><span class="line">    <span class="comment">//public void add(Object data)&#123;</span></span><br><span class="line">        <span class="comment">// 创建一个新的节点对象</span></span><br><span class="line">        <span class="comment">// 让之前单链表的末尾节点next指向新节点对象。</span></span><br><span class="line">        <span class="comment">// 有可能这个元素是第一个，也可能是第二个，也可能是第三个。</span></span><br><span class="line">        <span class="keyword">if</span>(header == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 说明还没有节点。</span></span><br><span class="line">            <span class="comment">// new一个新的节点对象，作为头节点对象。</span></span><br><span class="line">            <span class="comment">// 这个时候的头节点既是一个头节点，又是一个末尾节点。</span></span><br><span class="line">            header = <span class="keyword">new</span> <span class="title class_">Node</span>(data, <span class="literal">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 说明头不是空！</span></span><br><span class="line">            <span class="comment">// 头节点已经存在了！</span></span><br><span class="line">            <span class="comment">// 找出当前末尾节点，让当前末尾节点的next是新节点。</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">currentLastNode</span> <span class="operator">=</span> findLast(header);</span><br><span class="line">            currentLastNode.next = <span class="keyword">new</span> <span class="title class_">Node</span>(data, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 专门查找末尾节点的方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">findLast</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(node.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果一个节点的next是null</span></span><br><span class="line">            <span class="comment">// 说明这个节点就是末尾节点。</span></span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 程序能够到这里说明：node不是末尾节点。</span></span><br><span class="line">        <span class="keyword">return</span> findLast(node.next); <span class="comment">// 递归算法！</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*// 删除链表中某个数据的方法</span></span><br><span class="line"><span class="comment">    public void remove(Object obj)&#123;</span></span><br><span class="line"><span class="comment">        //略</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 修改链表中某个数据的方法</span></span><br><span class="line"><span class="comment">    public void modify(Object newObj)&#123;</span></span><br><span class="line"><span class="comment">        //略</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 查找链表中某个元素的方法。</span></span><br><span class="line"><span class="comment">    public int find(Object obj)&#123;</span></span><br><span class="line"><span class="comment">        //略</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-自定义双向链表"><a href="#2-2-自定义双向链表" class="headerlink" title="2.2 自定义双向链表"></a>2.2 自定义双向链表</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">双向链表中的节点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    Node prev;</span><br><span class="line">    E data;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    Node(Node prev, E data, Node next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表类(双向链表)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 尚硅谷-宋红康</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 15:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLinkedList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;E&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Node first;  <span class="comment">//链表的首元素</span></span><br><span class="line">    <span class="keyword">private</span> Node last;   <span class="comment">//链表的尾元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(last, e, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(first == <span class="literal">null</span>)&#123;</span><br><span class="line">            first = newNode;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            last.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        last = newNode;</span><br><span class="line">        total++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">find</span> <span class="operator">=</span> findNode(obj);</span><br><span class="line">        <span class="keyword">if</span>(find != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(find.prev != <span class="literal">null</span>)&#123;</span><br><span class="line">                find.prev.next = find.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                first = find.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(find.next != <span class="literal">null</span>)&#123;</span><br><span class="line">                find.next.prev = find.prev;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                last = find.prev;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            find.prev = <span class="literal">null</span>;</span><br><span class="line">            find.next = <span class="literal">null</span>;</span><br><span class="line">            find.data = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            total--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">findNode</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> first;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">find</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(obj == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(node.data == <span class="literal">null</span>)&#123;</span><br><span class="line">                    find = node;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(obj.equals(node.data))&#123;</span><br><span class="line">                    find = node;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> find;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> findNode(obj) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(E old, E value)</span>&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">find</span> <span class="operator">=</span> findNode(old);</span><br><span class="line">        <span class="keyword">if</span>(find != <span class="literal">null</span>)&#123;</span><br><span class="line">            find.data = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;E&gt; node = first;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> node!=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">E</span> <span class="variable">value</span> <span class="operator">=</span> node.data;</span><br><span class="line">            node = node.next;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义双链表测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLinkedListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MyLinkedList&lt;String&gt; my = <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>&lt;&gt;();</span><br><span class="line">        my.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        my.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        my.add(<span class="literal">null</span>);</span><br><span class="line">        my.add(<span class="literal">null</span>);</span><br><span class="line">        my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        my.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        my.add(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;一共有：&quot;</span> + my.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;所有元素：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : my) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;查找java,null,haha的结果：&quot;</span>);</span><br><span class="line">        System.out.println(my.contains(<span class="string">&quot;java&quot;</span>));</span><br><span class="line">        System.out.println(my.contains(<span class="literal">null</span>));</span><br><span class="line">        System.out.println(my.contains(<span class="string">&quot;haha&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;替换java,null后：&quot;</span>);</span><br><span class="line">        my.update(<span class="string">&quot;java&quot;</span>,<span class="string">&quot;JAVA&quot;</span>);</span><br><span class="line">        my.update(<span class="literal">null</span>,<span class="string">&quot;songhk&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;所有元素：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : my) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除hello，JAVA,null，atguigu后：&quot;</span>);</span><br><span class="line">        my.delete(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        my.delete(<span class="string">&quot;JAVA&quot;</span>);</span><br><span class="line">        my.delete(<span class="literal">null</span>);</span><br><span class="line">        my.delete(<span class="string">&quot;atguigu&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;所有元素：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : my) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-栈"><a href="#4-栈" class="headerlink" title="4. 栈"></a>4. 栈</h3><h4 id="1-栈的特点"><a href="#1-栈的特点" class="headerlink" title="1 .栈的特点"></a>1 .栈的特点</h4><ul>
<li>栈<code>（Stack）又称为堆栈或堆叠，是限制仅在表的一端进行插入和删除运算的线性表。先进后出</code> </li>
<li>核心类库中的<code>栈结构有Stack和LinkedList。 </code></li>
<li>Stack就是顺序栈，它是Vector的子类。</li>
<li>LinkedList是链式栈。</li>
<li>体现栈结构的操作方法： </li>
<li>peek()方法：查看栈顶元素，不弹出</li>
<li>pop()方法：弹出栈</li>
<li>push(E e)方法：压入栈</li>
<li>图示：</li>
</ul>
<h4 id="2-Stack使用举例"><a href="#2-Stack使用举例" class="headerlink" title="2.Stack使用举例"></a>2.Stack使用举例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStack</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 测试Stack</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        list.push(<span class="number">1</span>);</span><br><span class="line">        list.push(<span class="number">2</span>);</span><br><span class="line">        list.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;list = &quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;list.peek()=&quot;</span> + list.peek());</span><br><span class="line">        System.out.println(<span class="string">&quot;list.peek()=&quot;</span> + list.peek());</span><br><span class="line">        System.out.println(<span class="string">&quot;list.peek()=&quot;</span> + list.peek());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		System.out.println(&quot;list.pop() =&quot; + list.pop());</span></span><br><span class="line"><span class="comment">		System.out.println(&quot;list.pop() =&quot; + list.pop());</span></span><br><span class="line"><span class="comment">		System.out.println(&quot;list.pop() =&quot; + list.pop());</span></span><br><span class="line"><span class="comment">		System.out.println(&quot;list.pop() =&quot; + list.pop());//java.util.NoSuchElementException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!list.empty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;list.pop() =&quot;</span> + list.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 测试LinkedList</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        list.push(<span class="number">1</span>);</span><br><span class="line">        list.push(<span class="number">2</span>);</span><br><span class="line">        list.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;list = &quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;list.peek()=&quot;</span> + list.peek());</span><br><span class="line">        System.out.println(<span class="string">&quot;list.peek()=&quot;</span> + list.peek());</span><br><span class="line">        System.out.println(<span class="string">&quot;list.peek()=&quot;</span> + list.peek());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		System.out.println(&quot;list.pop() =&quot; + list.pop());</span></span><br><span class="line"><span class="comment">		System.out.println(&quot;list.pop() =&quot; + list.pop());</span></span><br><span class="line"><span class="comment">		System.out.println(&quot;list.pop() =&quot; + list.pop());</span></span><br><span class="line"><span class="comment">		System.out.println(&quot;list.pop() =&quot; + list.pop());//java.util.NoSuchElementException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">while</span>(!list.isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;list.pop() =&quot;</span> + list.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-自定义栈"><a href="#3-自定义栈" class="headerlink" title="3 .自定义栈"></a>3 .自定义栈</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    <span class="comment">// 向栈当中存储元素，我们这里使用一维数组模拟。存到栈中，就表示存储到数组中。</span></span><br><span class="line">    <span class="comment">// 为什么选择Object类型数组？因为这个栈可以存储java中的任何引用类型的数据</span></span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 栈帧，永远指向栈顶部元素</span></span><br><span class="line">    <span class="comment">// 那么这个默认初始值应该是多少。注意：最初的栈是空的，一个元素都没有。</span></span><br><span class="line">    <span class="comment">//private int index = 0; // 如果index采用0，表示栈帧指向了顶部元素的上方。</span></span><br><span class="line">    <span class="comment">//private int index = -1; // 如果index采用-1，表示栈帧指向了顶部元素。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参数构造方法。默认初始化栈容量10.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 一维数组动态初始化</span></span><br><span class="line">        <span class="comment">// 默认初始化容量是10.</span></span><br><span class="line">        <span class="built_in">this</span>.elements = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">// 给index初始化</span></span><br><span class="line">        <span class="built_in">this</span>.index = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压栈的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 被压入的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= elements.length - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//方式1：</span></span><br><span class="line">            <span class="comment">//System.out.println(&quot;压栈失败，栈已满！&quot;);</span></span><br><span class="line">            <span class="comment">//return;</span></span><br><span class="line">            <span class="comment">//方式2：</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;压栈失败，栈已满！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 程序能够走到这里，说明栈没满</span></span><br><span class="line">        <span class="comment">// 向栈中加1个元素，栈帧向上移动一个位置。</span></span><br><span class="line">        index++;</span><br><span class="line">        elements[index] = obj;</span><br><span class="line">        System.out.println(<span class="string">&quot;压栈&quot;</span> + obj + <span class="string">&quot;元素成功，栈帧指向&quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 弹栈的方法，从数组中往外取元素。每取出一个元素，栈帧向下移动一位。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">pop</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//方式1：</span></span><br><span class="line">            <span class="comment">//System.out.println(&quot;弹栈失败，栈已空！&quot;);</span></span><br><span class="line">            <span class="comment">//return;</span></span><br><span class="line">            <span class="comment">//方式2：</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;弹栈失败，栈已空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 程序能够执行到此处说明栈没有空。</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> elements[index];</span><br><span class="line">        System.out.print(<span class="string">&quot;弹栈&quot;</span> + obj + <span class="string">&quot;元素成功，&quot;</span>);</span><br><span class="line">        elements[index] = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 栈帧向下移动一位。</span></span><br><span class="line">        index--;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set和get也许用不上，但是你必须写上，这是规矩。你使用IDEA生成就行了。</span></span><br><span class="line">    <span class="comment">// 封装：第一步：属性私有化，第二步：对外提供set和get方法。</span></span><br><span class="line">    <span class="keyword">public</span> Object[] getElements() &#123;</span><br><span class="line">        <span class="keyword">return</span> elements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setElements</span><span class="params">(Object[] elements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elements = elements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-队列"><a href="#5-队列" class="headerlink" title="5. 队列"></a>5. 队列</h3><ul>
<li>队列（Queue）是只允许在一端进行插入，而在另一端进行删除的运算受限的线性表。 </li>
<li>队列是逻辑结构，其物理结构可以是数组，也可以是链表。 </li>
<li>队列的修改原则：队列的修改是依<code>先进先出（FIFO）的原则</code>进行的。新来的成员总是加入队尾（即不允许”加塞”），每次离开的成员总是队列头上的（不允许中途离队），即当前”最老的”成员离队。 </li>
<li>图示：</li>
</ul>
<h3 id="6-树与二叉树"><a href="#6-树与二叉树" class="headerlink" title="6. 树与二叉树"></a>6. 树与二叉树</h3><h4 id="1-树的理解"><a href="#1-树的理解" class="headerlink" title="1 .树的理解"></a>1 .树的理解</h4><p><img src="https://blog-resources.this0.com/image/202403301625569.png?x-oss-process=style/this0-blog" alt="1662901435866"></p>
<p><img src="https://blog-resources.this0.com/image/202403301625470.png?x-oss-process=style/this0-blog" alt="1662901472157"></p>
<p><img src="https://blog-resources.this0.com/image/202403301625625.png?x-oss-process=style/this0-blog" alt="1662901600960"></p>
<p><strong>专有名词解释：</strong><br><code>结点</code>：树中的数据元素都称之为结点<br><code>根节点</code>：最上面的结点称之为根，一颗树只有一个根且由根发展而来，从另外一个角度来说，每个结点都可以认为是其子树的根<br><code>结点的度数</code>：<code>每个结点所拥有的子树的个数称之为结点的度</code></p>
<p><code>终端节点</code>:度数为0的结点<br><code>非终端节点</code>（或分支节点）：树叶以外的节点，或度数不为0的节点。<br><code>树的深度</code>（或高度）：树中结点的最大层次数，图中树的深度为4<br><code>结点的层数</code>：从根节点到树中某结点所经路径上的分支树称为该结点的层数，根节点的层数规定为1，其余结点的层数等于其父亲结点的层数+1<br><code>同代</code>：<code>在同一棵树中具有相同层数的节点</code></p>
<h4 id="2-二叉树的基本概念"><a href="#2-二叉树的基本概念" class="headerlink" title="2. 二叉树的基本概念"></a>2. 二叉树的基本概念</h4><p><code>二叉树</code>（Binary tree）:二叉树特点是<code>每个结点最多只能有两棵子树</code>，且有左右之分。许多实际问题抽象出来的数据结构往往是二叉树形式，二叉树的存储结构及其算法都较为简单，因此二叉树显得特别重要。</p>
<p>二叉树结构图</p>
<p><img src="https://blog-resources.this0.com/image/202403301625400.png?x-oss-process=style/this0-blog" alt="01_二叉树结构图"></p>
<h4 id="3-二叉树的遍历"><a href="#3-二叉树的遍历" class="headerlink" title="3. 二叉树的遍历"></a>3. 二叉树的遍历</h4><p><code>哪个序就是根节点放哪的遍历</code></p>
<ul>
<li><strong>前序遍历：中左右（根左右）</strong><br>即先访问根结点，再前序遍历左子树，最后再前序遍历右子 树。前序遍历运算访问二叉树各结点是以根、左、右的顺序进行访问的。 </li>
<li><strong>中序遍历：左中右（左根右）</strong><br>即先中前序遍历左子树，然后再访问根结点，最后再中序遍 历右子树。中序遍历运算访问二叉树各结点是以左、根、右的顺序进行访问的。 </li>
<li><strong>后序遍历：左右中（左右根）</strong><br>即先后序遍历左子树，然后再后序遍历右子树，最后访问根 结点。后序遍历运算访问二叉树各结点是以左、右、根的顺序进行访问的。</li>
</ul>
<p>前序遍历：ABDHIECFG<br>中序遍历：HDIBEAFCG<br>后序遍历：HIDEBFGCA</p>
<h4 id="4-经典二叉树"><a href="#4-经典二叉树" class="headerlink" title="4 .经典二叉树"></a>4 .经典二叉树</h4><p>&#x2F;&#x2F;TODO这记不住没关系，有专门的数据结构与算法章节学</p>
<p>4.1<code>满二叉树</code>： 除最后一层无任何子节点外，每一层上的所有结点都有两个子结点的二叉树。 第n层的结点数是2的n-1次方，总的结点个数是2的n次方-1<br>4.2<code>完全二叉树</code>： 叶结点只能出现在最底层的两层，且最底层叶结点均处于次底层叶结点的左侧。<br>4.3<code>二叉排序/查找/搜索树</code>：即为BST  (binary search&#x2F;sort tree)。满足如下性质：<br>    ①若它的左子树不为空，则左子树上所有结点的值均小于它的根节点的值；<br>    ②若它的右子树上所有结点的值均大于它的根节点的值；<br>    ③它的左、右子树也分别为二叉排序&#x2F;查找&#x2F;搜索树。</p>
<blockquote>
<p>对二叉查找树进行中序遍历，得到有序集合。便于检索。</p>
</blockquote>
<p>4.4<code>平衡二叉树</code>：（Self-balancing binary search tree，AVL）首先是二叉排序树，此外具有以下性质：<br>    ①它是一棵空树或它的左右两个子树的高度差的绝对值不超过1<br>    ②并且左右两个子树也都是一棵平衡二叉树<br>    ③不要求非叶节点都有两个子结点</p>
<blockquote>
<p>平衡二叉树的目的是为了减少二叉查找树的层次，提高查找速度。平衡二叉树的常用实现有红黑树、AVL、替罪羊树、Treap、伸展树等。</p>
</blockquote>
<p>4.5<code>红黑树</code>：即Red-Black Tree。红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。<br>红黑树是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，它是在 1972 年由 Rudolf Bayer 发明的。红黑树是复杂的，但它的操作有着<code>良好的最坏情况运行时间</code>，并且在<code>实践中是高效的</code>：它可以在 O(log n)时间内做查找，插入和删除， 这里的 n 是树中元素的数目。<br>红黑树的特性：</p>
<ul>
<li>每个节点是红色或者黑色 </li>
<li>根节点是黑色 </li>
<li>每个叶子节点（NIL）是黑色。（注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点） </li>
<li><code>每个红色节点的两个子节点都是黑色的。</code>(从每个叶子到根的所有路径上不能有两个连续的红色节点) </li>
<li>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点（确保没有一条路径会比其他路径长出2倍）</li>
</ul>
<p>当我们插入或删除节点时，可能会破坏已有的红黑树，使得它不满足以上5个要求，那么此时就需要进行处理，使得它继续满足以上的5个要求：<br>1）<code>recolor</code> ：将某个节点变红或变黑<br>2）<code>rotation</code> ：将红黑树某些结点分支进行旋转（左旋或右旋）</p>
<blockquote>
<p>红黑树可以通过红色节点和黑色节点尽可能的保证二叉树的平衡。主要是用它来存储有序的数据，它的时间复杂度是O(logN)，效率非常之高。</p>
</blockquote>
<h4 id="5-二叉树及其结点的表示"><a href="#5-二叉树及其结点的表示" class="headerlink" title="5. 二叉树及其结点的表示"></a>5. 二叉树及其结点的表示</h4><p>普通二叉树：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span>&lt;E&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> TreeNode root; <span class="comment">//二叉树的根结点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> total;<span class="comment">//结点总个数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">        <span class="comment">//至少有以下几个部分</span></span><br><span class="line">        TreeNode parent;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        E data;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(TreeNode parent, TreeNode left, E data, TreeNode right)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">            <span class="built_in">this</span>.left = left;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">            <span class="built_in">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TreeMap红黑树：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap</span>&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; left;</span><br><span class="line">        Entry&lt;K,V&gt; right;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">color</span> <span class="operator">=</span> BLACK;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Make a new cell with given key, value, and parent, and with</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@code</span> null&#125; child links, and BLACK color.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-ArrayList-在-JDK7-和-JDK8-中的源码剖析"><a href="#7-ArrayList-在-JDK7-和-JDK8-中的源码剖析" class="headerlink" title="7. ArrayList 在 JDK7 和 JDK8 中的源码剖析"></a>7. ArrayList 在 JDK7 和 JDK8 中的源码剖析</h3><h4 id="1-List接口特点"><a href="#1-List接口特点" class="headerlink" title="1.List接口特点"></a>1.List接口特点</h4><ul>
<li>List集合所有的元素是以一种<code>线性方式</code>进行存储的，例如，存元素的顺序是11、22、33。那么集合中，元素的存储就是按照11、22、33的顺序完成的）。</li>
<li>它是一个元素<code>存取有序</code>的集合。即元素的存入顺序和取出顺序有保证。</li>
<li>它是一个<code>带有索引</code>的集合，通过索引就可以精确的操作集合中的元素（与数组的索引是一个道理）。</li>
<li>集合中可以有<code>重复</code>的元素，通过元素的equals方法，来比较是否为重复的元素。</li>
</ul>
<blockquote>
<p>注意：<br>List集合关心元素是否有序，而不关心是否重复，请大家记住这个原则。例如“张三”可以领取两个号。</p>
</blockquote>
<ul>
<li>List接口的主要实现类 <ul>
<li>ArrayList：动态数组</li>
<li>Vector：动态数组</li>
<li>LinkedList：双向链表</li>
<li>Stack：栈</li>
</ul>
</li>
</ul>
<h4 id="2-动态数组ArrayList与Vector"><a href="#2-动态数组ArrayList与Vector" class="headerlink" title="2. 动态数组ArrayList与Vector"></a>2. 动态数组ArrayList与Vector</h4><p>Java的List接口的实现类中有两个动态数组的实现：ArrayList 和 Vector。</p>
<h5 id="2-1-ArrayList与Vector的区别"><a href="#2-1-ArrayList与Vector的区别" class="headerlink" title="2.1 ArrayList与Vector的区别"></a>2.1 ArrayList与Vector的区别</h5><p>它们的底层物理结构都是数组，我们称为动态数组。</p>
<ul>
<li><p>ArrayList是新版的动态数组，线程不安全，效率高，Vector是旧版的动态数组，线程安全，效率低。</p>
</li>
<li><p>动态数组的扩容机制不同，<code>ArrayList默认扩容为原来的1.5倍</code>，Vector默认扩容增加为原来的2倍。</p>
</li>
<li><p>数组的初始化容量，如果在构建ArrayList与Vector的集合对象时，没有显式指定初始化容量，那么<code>Vector的内部数组的初始容量默认为10，而ArrayList在JDK 7 及之前的版本也是10</code>，<code>JDK8 之后的版本ArrayList初始化为长度为0的空数组，之后在添加第一个元素时，再创建长度为10的数组。</code></p>
</li>
<li><p>原因： </p>
<p>用的时候，再创建数组，避免浪费。因为很多方法的返回值是ArrayList类型，需要返回一个ArrayList的对象，例如：后期从数据库查询对象的方法，返回值很多就是ArrayList。有可能你要查询的数据不存在，要么返回null，要么返回一个没有元素的ArrayList对象。</p>
</li>
</ul>
<h5 id="2-2-ArrayList部分源码分析"><a href="#2-2-ArrayList部分源码分析" class="headerlink" title="2.2 ArrayList部分源码分析"></a>2.2 ArrayList部分源码分析</h5><p><strong>JDK1.7.0_07中：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData; <span class="comment">//存储底层数组元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size; <span class="comment">//记录数组中存储的元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="number">10</span>); <span class="comment">//指定初始容量为10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="comment">//检查初始容量的合法性</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+ initialCapacity);</span><br><span class="line">    <span class="comment">//数组初始化为长度为initialCapacity的数组</span></span><br><span class="line">    <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：add()相关方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">//查看当前数组是否够多存一个元素</span></span><br><span class="line">    elementData[size++] = e; <span class="comment">//将元素e添加到elementData数组中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 如果if条件满足，则进行数组的扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length; <span class="comment">//当前数组容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">//新数组容量是旧数组容量的1.5倍</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)  <span class="comment">//判断旧数组的1.5倍是否够</span></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">//判断旧数组的1.5倍是否超过最大数组限制</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">//复制一个新数组</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：remove()相关方法</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeCheck(index); <span class="comment">//判断index是否在有效的范围内</span></span><br><span class="line"></span><br><span class="line">    modCount++; <span class="comment">//修改次数加1</span></span><br><span class="line">    <span class="comment">//取出[index]位置的元素，[index]位置的元素就是要被删除的元素，用于最后返回被删除的元素</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index); </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>; <span class="comment">//确定要移动的次数</span></span><br><span class="line">    <span class="comment">//如果需要移动元素，就用System.arraycopy移动元素</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    <span class="comment">//将elementData[size-1]位置置空，让GC回收空间，元素个数减少</span></span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rangeCheck</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size) <span class="comment">//index不合法的情况</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">E <span class="title function_">elementData</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="comment">//返回指定位置的元素</span></span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：set()方法相关</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeCheck(index); <span class="comment">//检验index是否合法</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">//取出[index]位置的元素，[index]位置的元素就是要被替换的元素，用于最后返回被替换的元素</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">    <span class="comment">//用element替换[index]位置的元素</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：get()相关方法</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    rangeCheck(index); <span class="comment">//检验index是否合法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index); <span class="comment">//返回[index]位置的元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：indexOf()</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="comment">//分为o是否为空两种情况</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从前往后找</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：lastIndexOf()</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="comment">//分为o是否为空两种情况</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//从后往前找</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>jdk1.8.0_271中：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;  <span class="comment">//初始化为空数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法:add()相关方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="comment">//查看当前数组是否够多存一个元素</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">//存入新元素到[size]位置，然后size自增1</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateCapacity</span><span class="params">(Object[] elementData, <span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">//如果当前数组还是空数组</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="comment">//那么minCapacity取DEFAULT_CAPACITY与minCapacity的最大值</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看是否需要扩容</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    modCount++;  <span class="comment">//修改次数加1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果需要的最小容量比当前数组的长度大，即当前数组不够存，就扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length; <span class="comment">//当前数组容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">//新数组容量是旧数组容量的1.5倍</span></span><br><span class="line">    <span class="comment">//看旧数组的1.5倍是否够</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">//看旧数组的1.5倍是否超过最大数组限制</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">//复制一个新数组</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-ArrayList相关方法图示"><a href="#2-3-ArrayList相关方法图示" class="headerlink" title="2.3 ArrayList相关方法图示"></a>2.3 ArrayList相关方法图示</h5><ul>
<li><strong>ArrayList采用数组作为底层实现</strong></li>
<li><strong>ArrayList自动扩容过程</strong></li>
<li><strong>ArrayList的add(E e)方法</strong></li>
<li><strong>ArrayList的add(int index,E e)方法</strong></li>
</ul>
<h3 id="8-Vector、LinkedList-在-JDK8-中的源码剖析"><a href="#8-Vector、LinkedList-在-JDK8-中的源码剖析" class="headerlink" title="8. Vector、LinkedList 在 JDK8 中的源码剖析"></a>8. Vector、LinkedList 在 JDK8 中的源码剖析</h3><h4 id="1-Vector部分源码分析"><a href="#1-Vector部分源码分析" class="headerlink" title="1.Vector部分源码分析"></a>1.Vector部分源码分析</h4><p><strong>jdk1.8.0_271中：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">protected</span> Object[] elementData;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> elementCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>(<span class="number">10</span>); <span class="comment">//指定初始容量initialCapacity为10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>(initialCapacity, <span class="number">0</span>); <span class="comment">//指定capacityIncrement增量为0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">int</span> capacityIncrement)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="comment">//判断了形参初始容量initialCapacity的合法性</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+ initialCapacity);</span><br><span class="line">    <span class="comment">//创建了一个Object[]类型的数组</span></span><br><span class="line">    <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    <span class="comment">//增量，默认是0，如果是0，后面就按照2倍增加，如果不是0，后面就按照你指定的增量进行增量</span></span><br><span class="line">    <span class="built_in">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：add()相关方法</span></span><br><span class="line"><span class="comment">//synchronized意味着线程安全的   </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//看是否需要扩容</span></span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//把新的元素存入[elementCount]，存入后，elementCount元素的个数增1</span></span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityHelper</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">     <span class="comment">//看是否超过了当前数组的容量</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity); <span class="comment">//扩容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length; <span class="comment">//获取目前数组的长度</span></span><br><span class="line">    <span class="comment">//如果capacityIncrement增量是0，新容量 = oldCapacity的2倍</span></span><br><span class="line">    <span class="comment">//如果capacityIncrement增量是不是0，新容量 = oldCapacity + capacityIncrement增量;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="comment">//如果按照上面计算的新容量还不够，就按照你指定的需要的最小容量来扩容minCapacity</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">//如果新容量超过了最大数组限制，那么单独处理</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">//把旧数组中的数据复制到新数组中，新数组的长度为newCapacity</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：remove()相关方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> removeElement(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">removeElement</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//查找obj在当前Vector中的下标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexOf(obj);</span><br><span class="line">    <span class="comment">//如果i&gt;=0，说明存在，删除[i]位置的元素</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        removeElementAt(i);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：indexOf()</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;<span class="comment">//要查找的元素是null值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index ; i &lt; elementCount ; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)<span class="comment">//如果是null值，用==null判断</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//要查找的元素是非null值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index ; i &lt; elementCount ; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))<span class="comment">//如果是非null值，用equals判断</span></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：removeElementAt()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">removeElementAt</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//判断下标的合法性</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= elementCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(index + <span class="string">&quot; &gt;= &quot;</span> +</span><br><span class="line">                                                 elementCount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//j是要移动的元素的个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> elementCount - index - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//如果需要移动元素，就调用System.arraycopy进行移动</span></span><br><span class="line">    <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//把index+1位置以及后面的元素往前移动</span></span><br><span class="line">        <span class="comment">//index+1的位置的元素移动到index位置，依次类推</span></span><br><span class="line">        <span class="comment">//一共移动j个</span></span><br><span class="line">        System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//元素的总个数减少</span></span><br><span class="line">    elementCount--;</span><br><span class="line">    <span class="comment">//将elementData[elementCount]这个位置置空，用来添加新元素，位置的元素等着被GC回收</span></span><br><span class="line">    elementData[elementCount] = <span class="literal">null</span>; <span class="comment">/* to let gc do its work */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-链表LinkedList"><a href="#2-链表LinkedList" class="headerlink" title="2.链表LinkedList"></a>2.链表LinkedList</h4><p>Java中有双链表的实现：LinkedList，它是List接口的实现类。<br>LinkedList是一个<code>双向链表</code>，如图所示：</p>
<h5 id="2-1-链表与动态数组的区别"><a href="#2-1-链表与动态数组的区别" class="headerlink" title="2.1 链表与动态数组的区别"></a>2.1 链表与动态数组的区别</h5><p>动态数组底层的物理结构是数组，因此根据索引访问的效率非常高。但是非末尾位置的插入和删除效率不高，因为涉及到移动元素。另外添加操作时涉及到扩容问题，就会增加时空消耗。<br>链表底层的物理结构是链表，<code>因此根据索引访问的效率不高，即查找元素慢。但是插入和删除不需要移动元素，只需要修改前后元素的指向关系即可</code>，所以插入、删除元素快。而且<code>链表的添加不会涉及到扩容问题。</code></p>
<h6 id="2-1-1-LinkedList源码分析"><a href="#2-1-1-LinkedList源码分析" class="headerlink" title="2.1.1 LinkedList源码分析"></a>2.1.1 LinkedList源码分析</h6><p><strong>jdk1.8.0_271中：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first; <span class="comment">//记录第一个结点的位置</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last; <span class="comment">//记录当前链表的尾元素</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//记录最后一个结点的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：add()相关方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    linkLast(e); <span class="comment">//默认把新元素链接到链表尾部</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last; <span class="comment">//用 l 记录原来的最后一个结点</span></span><br><span class="line">    <span class="comment">//创建新结点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//现在的新结点是最后一个结点了</span></span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="comment">//如果l==null，说明原来的链表是空的</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">//那么新结点同时也是第一个结点</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//否则把新结点链接到原来的最后一个结点的next中</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    <span class="comment">//元素个数增加</span></span><br><span class="line">    size++;</span><br><span class="line">    <span class="comment">//修改次数增加</span></span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中，Node类定义如下</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E item; <span class="comment">//元素数据</span></span><br><span class="line">    Node&lt;E&gt; next; <span class="comment">//下一个结点</span></span><br><span class="line">    Node&lt;E&gt; prev; <span class="comment">//前一个结点</span></span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法：获取get()相关方法</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：插入add()相关方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    checkPositionIndex(index);<span class="comment">//检查index范围</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)<span class="comment">//如果index==size，连接到当前链表的尾部</span></span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node&lt;E&gt; <span class="title function_">node</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	index &lt; (size &gt;&gt; 1)采用二分思想，先将index与长度size的一半比较，如果index&lt;size/2，就只从位置0</span></span><br><span class="line"><span class="comment">	往后遍历到位置index处，而如果index&gt;size/2，就只从位置size往前遍历到位置index处。这样可以减少一部</span></span><br><span class="line"><span class="comment">	分不必要的遍历。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="comment">//如果index&lt;size/2，就从前往后找目标结点</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//否则从后往前找目标结点</span></span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把新结点插入到[index]位置的结点succ前面</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> &#123;<span class="comment">//succ是[index]位置对应的结点</span></span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev; <span class="comment">//[index]位置的前一个结点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新结点的prev是原来[index]位置的前一个结点</span></span><br><span class="line">    <span class="comment">//新结点的next是原来[index]位置的结点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, succ);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[index]位置对应的结点的prev指向新结点</span></span><br><span class="line">    succ.prev = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果原来[index]位置对应的结点是第一个结点，那么现在新结点是第一个结点</span></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;<span class="comment">//原来[index]位置的前一个结点的next指向新结点</span></span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：remove()相关方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="comment">//分o是否为空两种情况</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//找到o对应的结点x</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="literal">null</span>) &#123;</span><br><span class="line">                unlink(x);<span class="comment">//删除x结点</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//找到o对应的结点x</span></span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);<span class="comment">//删除x结点</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">E <span class="title function_">unlink</span><span class="params">(Node&lt;E&gt; x)</span> &#123;<span class="comment">//x是要被删除的结点</span></span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> x.item;<span class="comment">//被删除结点的数据</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;<span class="comment">//被删除结点的下一个结点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;<span class="comment">//被删除结点的上一个结点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果被删除结点的前面没有结点，说明被删除结点是第一个结点</span></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//那么被删除结点的下一个结点变为第一个结点</span></span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//被删除结点不是第一个结点</span></span><br><span class="line">        <span class="comment">//被删除结点的上一个结点的next指向被删除结点的下一个结点</span></span><br><span class="line">        prev.next = next;</span><br><span class="line">        <span class="comment">//断开被删除结点与上一个结点的链接</span></span><br><span class="line">        x.prev = <span class="literal">null</span>;<span class="comment">//使得GC回收</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果被删除结点的后面没有结点，说明被删除结点是最后一个结点</span></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//那么被删除结点的上一个结点变为最后一个结点</span></span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//被删除结点不是最后一个结点</span></span><br><span class="line">        <span class="comment">//被删除结点的下一个结点的prev执行被删除结点的上一个结点</span></span><br><span class="line">        next.prev = prev;</span><br><span class="line">        <span class="comment">//断开被删除结点与下一个结点的连接</span></span><br><span class="line">        x.next = <span class="literal">null</span>;<span class="comment">//使得GC回收</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把被删除结点的数据也置空，使得GC回收</span></span><br><span class="line">    x.item = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//元素个数减少</span></span><br><span class="line">    size--;</span><br><span class="line">    <span class="comment">//修改次数增加</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//返回被删除结点的数据</span></span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123; <span class="comment">//index是要删除元素的索引位置</span></span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-1-2-LinkedList相关方法图示"><a href="#2-1-2-LinkedList相关方法图示" class="headerlink" title="2.1.2 LinkedList相关方法图示"></a>2.1.2 LinkedList相关方法图示</h6><ul>
<li><strong>只有1个元素的LinkedList</strong></li>
<li><strong>包含4个元素的LinkedList</strong></li>
<li><strong>add(E e)方法</strong></li>
<li><strong>add(int index,E e)方法</strong></li>
<li><strong>remove(Object obj)方法</strong></li>
<li><strong>remove(int index)方法</strong></li>
</ul>
<h3 id="9-HashMap-在-JDK7-中的源码剖析"><a href="#9-HashMap-在-JDK7-中的源码剖析" class="headerlink" title="9.HashMap 在 JDK7 中的源码剖析"></a>9.HashMap 在 JDK7 中的源码剖析</h3><h4 id="1-Map接口分析"><a href="#1-Map接口分析" class="headerlink" title="1.Map接口分析"></a>1.Map接口分析</h4><p>哈希表的物理结构:</p>
<p><code>//TODO，看不懂，放一下,HashMap和Hashtable底层都是哈希表（也称散列表），其中维护了一个长度为**2的幂次方**的Entry类型的数组table，数组的每一个索引位置被称为一个桶(bucket)，你添加的映射关系(key,value)最终都被封装为一个Map.Entry类型的对象，放到某个table[index]桶中。</code><br>使用数组的目的是查询和添加的效率高，可以根据索引直接定位到某个table[index]。<br>1.1 HashMap中数据添加过程&#x2F;&#x2F;TODO，忘了，记一下<br>1.1.1 JDK7中过程分析<br><code>//TODO为啥不直接用hash值？</code></p>
<p>&#x2F;&#x2F;TODO，后面太长，有用到再看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在底层创建了长度为16的Entry[] table的数组</span></span><br><span class="line"><span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(key1,value1);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析过程如下：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">将(key1,value1)添加到当前hashmap的对象中。首先会调用key1所在类的hashCode()方法，计算key1的哈希值1，</span></span><br><span class="line"><span class="comment">此哈希值1再经过某种运算(hash())，得到哈希值2。此哈希值2再经过某种运算(indexFor())，确定在底层table数组中的索引位置i。</span></span><br><span class="line"><span class="comment">   （1）如果数组索引为i上的数据为空，则(key1,value1)直接添加成功   ------位置1</span></span><br><span class="line"><span class="comment">   （2）如果数组索引为i上的数据不为空，有(key2,value2)，则需要进一步判断：</span></span><br><span class="line"><span class="comment">       判断key1的哈希值2与key2的哈希值是否相同：</span></span><br><span class="line"><span class="comment">         （3） 如果哈希值不同，则(key1,value1)直接添加成功   ------位置2</span></span><br><span class="line"><span class="comment">              如果哈希值相同，则需要继续调用key1所在类的equals()方法，将key2放入equals()形参进行判断</span></span><br><span class="line"><span class="comment">                （4） equals方法返回false : 则(key1,value1)直接添加成功   ------位置3</span></span><br><span class="line"><span class="comment">                      equals方法返回true : 默认情况下，value1会覆盖value2。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">位置1：直接将(key1,value1)以Entry对象的方式存放到table数组索引i的位置。</span></span><br><span class="line"><span class="comment">位置2、位置3：(key1,value1) 与现有的元素以链表的方式存储在table数组索引i的位置，新添加的元素指向旧添加的元素。//TODO为啥不也是覆盖？</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">在不断的添加的情况下，满足如下条件的情况下，会进行扩容:</span></span><br><span class="line"><span class="comment">if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) :</span></span><br><span class="line"><span class="comment">默认情况下，当要添加的元素个数超过12(即：数组的长度 * loadFactor得到的结果)时，就要考虑扩容。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">补充：jdk7源码中定义的：</span></span><br><span class="line"><span class="comment">static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.get(key1);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">① 计算key1的hash值，用这个方法hash(key1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">② 找index = table.length-1 &amp; hash;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">③ 如果table[index]不为空，那么就挨个比较哪个Entry的key与它相同，就返回它的value</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.remove(key1);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">① 计算key1的hash值，用这个方法hash(key1)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">② 找index = table.length-1 &amp; hash;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">③ 如果table[index]不为空，那么就挨个比较哪个Entry的key与它相同，就删除它，把它前面的Entry的next的值修改为被删除Entry的next</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="10-HashMap-在-JDK8-中的源码剖析"><a href="#10-HashMap-在-JDK8-中的源码剖析" class="headerlink" title="10.HashMap 在 JDK8 中的源码剖析"></a>10.HashMap 在 JDK8 中的源码剖析</h3><h4 id="1-JDK8中过程分析"><a href="#1-JDK8中过程分析" class="headerlink" title="1.JDK8中过程分析"></a>1.JDK8中过程分析</h4><p>下面说明是JDK8相较于JDK7的不同之处：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">①</span></span><br><span class="line"><span class="comment">使用HashMap()的构造器创建对象时，并没有在底层初始化长度为16的table数组。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">②</span></span><br><span class="line"><span class="comment">jdk8中添加的key,value封装到了HashMap.Node类的对象中。而非jdk7中的HashMap.Entry。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">③</span></span><br><span class="line"><span class="comment">jdk8中新增的元素所在的索引位置如果有其他元素。在经过一系列判断后，如果能添加，则是旧的元素指向新的元素。而非jdk7中的新的元素指向旧的元素。“七上八下”</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">④</span></span><br><span class="line"><span class="comment">jdk7时底层的数据结构是：数组+单向链表。 而jdk8时，底层的数据结构是：数组+单向链表+红黑树。</span></span><br><span class="line"><span class="comment">红黑树出现的时机：当某个索引位置i上的链表的长度达到8，且数组的长度超过64时，此索引位置上的元素要从单向链表改为红黑树。</span></span><br><span class="line"><span class="comment">如果索引i位置是红黑树的结构，当不断删除元素的情况下，当前索引i位置上的元素的个数低于6时，要从红黑树改为单向链表。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="2-HashMap源码剖析"><a href="#2-HashMap源码剖析" class="headerlink" title="2.HashMap源码剖析"></a>2.HashMap源码剖析</h4><h5 id="2-1-JDK1-7-0-07中源码"><a href="#2-1-JDK1-7-0-07中源码" class="headerlink" title="2.1 JDK1.7.0_07中源码"></a>2.1 JDK1.7.0_07中源码</h5><h6 id="2-1-1Entry"><a href="#2-1-1Entry" class="headerlink" title="2.1.1Entry"></a>2.1.1Entry</h6><p>key-value被封装为HashMap.Entry类型，而这个类型实现了Map.Entry接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt;&#123;</span><br><span class="line">    <span class="keyword">transient</span> Entry&lt;K,V&gt;[] table;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; next;</span><br><span class="line">        <span class="type">int</span> hash;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates new entry.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Entry(<span class="type">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">            value = v;</span><br><span class="line">            next = n;</span><br><span class="line">            key = k;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-1-2属性"><a href="#2-1-2属性" class="headerlink" title="2.1.2属性"></a>2.1.2属性</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//table数组的默认初始化长度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"><span class="comment">//哈希表</span></span><br><span class="line"><span class="keyword">transient</span> Entry&lt;K,V&gt;[] table;</span><br><span class="line"><span class="comment">//哈希表中key-value的个数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> size;</span><br><span class="line"><span class="comment">//临界值、阈值（扩容的临界值）</span></span><br><span class="line"><span class="type">int</span> threshold;</span><br><span class="line"><span class="comment">//加载因子</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">float</span> loadFactor;</span><br><span class="line"><span class="comment">//默认加载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure>

<h6 id="2-1-3构造器"><a href="#2-1-3构造器" class="headerlink" title="2.1.3构造器"></a>2.1.3构造器</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//DEFAULT_INITIAL_CAPACITY：默认初始容量16</span></span><br><span class="line">  	<span class="comment">//DEFAULT_LOAD_FACTOR：默认加载因子0.75</span></span><br><span class="line">    <span class="built_in">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="comment">//校验initialCapacity合法性</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> + initialCapacity);</span><br><span class="line">    <span class="comment">//校验initialCapacity合法性 </span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="comment">//校验loadFactor合法性</span></span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + loadFactor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算得到table数组的长度（保证capacity是2的整次幂）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (capacity &lt; initialCapacity)</span><br><span class="line">        capacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//加载因子，初始化为0.75</span></span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">// threshold 初始为默认容量</span></span><br><span class="line">    threshold = (<span class="type">int</span>)Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//初始化table数组</span></span><br><span class="line">    table = <span class="keyword">new</span> <span class="title class_">Entry</span>[capacity];</span><br><span class="line">    useAltHashing = sun.misc.VM.isBooted() &amp;&amp;</span><br><span class="line">                                       (capacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-1-4put-方法"><a href="#2-1-4put-方法" class="headerlink" title="2.1.4put()方法"></a>2.1.4put()方法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="comment">//如果key是null，单独处理，存储到table[0]中，如果有另一个key为null，value覆盖</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="comment">//对key的hashCode进行干扰，算出一个hash值</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      hashCode值        xxxxxxxxxx</span></span><br><span class="line"><span class="comment">      table.length-1    000001111</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">      hashCode值 xxxxxxxxxx  无符号右移几位和原来的hashCode值做^运算，使得hashCode高位二进制值参与计算，</span></span><br><span class="line"><span class="comment">                            也发挥作用，降低index冲突的概率。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="comment">//计算新的映射关系应该存到table[i]位置，</span></span><br><span class="line">    <span class="comment">//i = hash &amp; table.length-1，可以保证i在[0,table.length-1]范围内</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">//检查table[i]下面有没有key与我新的映射关系的key重复，如果重复替换value</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//添加新的映射关系</span></span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果key是null，直接存入[0]的位置</span></span><br><span class="line"><span class="keyword">private</span> V <span class="title function_">putForNullKey</span><span class="params">(V value)</span> &#123;</span><br><span class="line">    <span class="comment">//判断是否有重复的key，如果有重复的，就替换value</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//把新的映射关系存入[0]的位置，而且key的hash值用0表示</span></span><br><span class="line">    addEntry(<span class="number">0</span>, <span class="literal">null</span>, value, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (useAltHashing) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">        &#125;</span><br><span class="line">        h = hashSeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexFor</span><span class="params">(<span class="type">int</span> h, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    <span class="comment">//判断是否需要库容</span></span><br><span class="line">    <span class="comment">//扩容：（1）size达到阈值（2）table[i]正好非空</span></span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="literal">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        <span class="comment">//table扩容为原来的2倍，并且扩容后，会重新调整所有key-value的存储位置</span></span><br><span class="line">        resize(<span class="number">2</span> * table.length); </span><br><span class="line">        <span class="comment">//新的key-value的hash和index也会重新计算</span></span><br><span class="line">        hash = (<span class="literal">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//存入table中</span></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">createEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    <span class="comment">//原来table[i]下面的映射关系作为新的映射关系next</span></span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">//个数增加</span></span><br><span class="line">    size++; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-JDK1-8-0-271中源码"><a href="#3-JDK1-8-0-271中源码" class="headerlink" title="3.JDK1.8.0_271中源码"></a>3.JDK1.8.0_271中源码</h4><h5 id="3-1Node"><a href="#3-1Node" class="headerlink" title="3.1Node"></a>3.1Node</h5><p>key-value被封装为HashMap.Node类型或HashMap.TreeNode类型，它俩都直接或间接的实现了Map.Entry接口。<br>存储到table数组的可能是Node结点对象，也可能是TreeNode结点对象，它们也是Map.Entry接口的实现类。即table[index]下的映射关系可能串起来一个链表或一棵红黑树。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt;&#123;</span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Node类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其它结构：略</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//TreeNode类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;</span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;</span><br><span class="line">        <span class="type">boolean</span> red; <span class="comment">//是红结点还是黑结点</span></span><br><span class="line">        TreeNode(<span class="type">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">super</span>(hash, key, val, next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2属性"><a href="#3-2属性" class="headerlink" title="3.2属性"></a>3.2属性</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// 默认的初始容量 16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>; <span class="comment">//最大容量  1 &lt;&lt; 30</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;  <span class="comment">//默认加载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>; <span class="comment">//默认树化阈值8，当链表的长度达到这个值后，要考虑树化</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;<span class="comment">//默认反树化阈值6，当树中结点的个数达到此阈值后，要考虑变为链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当单个的链表的结点个数达到8，并且table的长度达到64，才会树化。</span></span><br><span class="line"><span class="comment">//当单个的链表的结点个数达到8，但是table的长度未达到64，会先扩容</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>; <span class="comment">//最小树化容量64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table; <span class="comment">//数组</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> size;  <span class="comment">//记录有效映射关系的对数，也是Entry对象的个数</span></span><br><span class="line"><span class="type">int</span> threshold; <span class="comment">//阈值，当size达到阈值时，考虑扩容</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">float</span> loadFactor; <span class="comment">//加载因子，影响扩容的频率</span></span><br></pre></td></tr></table></figure>

<h4 id="4-构造器"><a href="#4-构造器" class="headerlink" title="4.构造器"></a>4.构造器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted (其他字段都是默认值)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-put-方法"><a href="#5-put-方法" class="headerlink" title="5.put()方法"></a>5.put()方法</h4><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">public V <span class="built_in">put</span>(K <span class="built_in">key</span>, V value) &#123;</span><br><span class="line">    <span class="built_in">return</span> putVal(hash(<span class="built_in">key</span>), <span class="built_in">key</span>, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="comment">//如果key是null，hash是0</span></span><br><span class="line">	<span class="comment">//如果key非null，用key的hashCode值 与 key的hashCode值高16进行异或</span></span><br><span class="line">	<span class="comment">//		即就是用key的hashCode值高16位与低16位进行了异或的干扰运算</span></span><br><span class="line">		</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	index = hash &amp; table.length-1</span></span><br><span class="line"><span class="comment">	如果用key的原始的hashCode值  与 table.length-1 进行按位与，那么基本上高16没机会用上。</span></span><br><span class="line"><span class="comment">	这样就会增加冲突的概率，为了降低冲突的概率，把高16位加入到hash信息中。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,<span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="comment">//数组</span></span><br><span class="line">    Node&lt;K,V&gt; p;  <span class="comment">//一个结点</span></span><br><span class="line">    <span class="type">int</span> n, i; <span class="comment">//n是数组的长度   i是下标</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//tab和table等价</span></span><br><span class="line">	<span class="comment">//如果table是空的</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)&#123;</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">		tab = resize();</span></span><br><span class="line"><span class="comment">		n = tab.length;*/</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		如果table是空的，resize()完成了①创建了一个长度为16的数组②threshold = 12</span></span><br><span class="line"><span class="comment">		n = 16</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//i = (n - 1) &amp; hash ，下标 = 数组长度-1 &amp; hash</span></span><br><span class="line">	<span class="comment">//p = tab[i] 第1个结点</span></span><br><span class="line">	<span class="comment">//if(p==null) 条件满足的话说明 table[i]还没有元素</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//把新的映射关系直接放入table[i]</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//newNode（）方法就创建了一个Node类型的新结点，新结点的next是null</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">//p是table[i]中第一个结点</span></span><br><span class="line">		<span class="comment">//if(table[i]的第一个结点与新的映射关系的key重复)</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;<span class="comment">//用e记录这个table[i]的第一个结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)&#123; <span class="comment">//如果table[i]第一个结点是一个树结点</span></span><br><span class="line">            <span class="comment">//单独处理树结点</span></span><br><span class="line">            <span class="comment">//如果树结点中，有key重复的，就返回那个重复的结点用e接收，即e!=null</span></span><br><span class="line">            <span class="comment">//如果树结点中，没有key重复的，就把新结点放到树中，并且返回null，即e=null</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//table[i]的第一个结点不是树结点，也与新的映射关系的key不重复</span></span><br><span class="line">			<span class="comment">//binCount记录了table[i]下面的结点的个数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">//如果p的下一个结点是空的，说明当前的p是最后一个结点</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//把新的结点连接到table[i]的最后</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">//如果binCount&gt;=8-1，达到7个时</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">//要么扩容，要么树化</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果key重复了，就跳出for循环，此时e结点记录的就是那个key重复的结点</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;<span class="comment">//下一次循环，e=p.next，就类似于e=e.next，往链表下移动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果这个e不是null，说明有key重复，就考虑替换原来的value</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e); <span class="comment">//什么也没干</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//元素个数增加</span></span><br><span class="line">	<span class="comment">//size达到阈值</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize(); <span class="comment">//一旦扩容，重新调整所有映射关系的位置</span></span><br><span class="line">    afterNodeInsertion(evict); <span class="comment">//什么也没干</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table; <span class="comment">//oldTab原来的table</span></span><br><span class="line">    <span class="comment">//oldCap：原来数组的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">//oldThr：原来的阈值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;<span class="comment">//最开始threshold是0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//newCap，新容量</span></span><br><span class="line">	<span class="comment">//newThr：新阈值</span></span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123; <span class="comment">//说明原来不是空数组</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123; <span class="comment">//是否达到数组最大限制</span></span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            <span class="comment">//newCap = 旧的容量*2 ，新容量&lt;最大数组容量限制</span></span><br><span class="line">			<span class="comment">//新容量：32,64，...</span></span><br><span class="line">			<span class="comment">//oldCap &gt;= 初始容量16</span></span><br><span class="line">			<span class="comment">//新阈值重新算 = 24，48 ....</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY; <span class="comment">//新容量是默认初始化容量16</span></span><br><span class="line">        <span class="comment">//新阈值= 默认的加载因子 * 默认的初始化容量 = 0.75*16 = 12</span></span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr; <span class="comment">//阈值赋值为新阈值12，24.。。。</span></span><br><span class="line">    <span class="comment">//创建了一个新数组，长度为newCap，16，32,64.。。</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123; <span class="comment">//原来不是空数组</span></span><br><span class="line">        <span class="comment">//把原来的table中映射关系，倒腾到新的table中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;<span class="comment">//e是table下面的结点</span></span><br><span class="line">                oldTab[j] = <span class="literal">null</span>; <span class="comment">//把旧的table[j]位置清空</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>) <span class="comment">//如果是最后一个结点</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e; <span class="comment">//重新计算e的在新table中的存储位置，然后放入</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode) <span class="comment">//如果e是树结点</span></span><br><span class="line">                    <span class="comment">//把原来的树拆解，放到新的table</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">//把原来table[i]下面的整个链表，重新挪到了新的table中</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node&lt;K,V&gt; <span class="title function_">newNode</span><span class="params">(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个新结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(hash, key, value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, index; </span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">//MIN_TREEIFY_CAPACITY：最小树化容量64</span></span><br><span class="line">    <span class="comment">//如果table是空的，或者  table的长度没有达到64</span></span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();<span class="comment">//先扩容</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//用e记录table[index]的结点的地址</span></span><br><span class="line">        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">			do...while，把table[index]链表的Node结点变为TreeNode类型的结点</span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                hd = p;<span class="comment">//hd记录根结点</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果table[index]下面不是空</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">            hd.treeify(tab);<span class="comment">//将table[index]下面的链表进行树化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<h3 id="11-LinkedHashMap、HashSet、LinkedHashSet-的源码剖析"><a href="#11-LinkedHashMap、HashSet、LinkedHashSet-的源码剖析" class="headerlink" title="11.LinkedHashMap、HashSet、LinkedHashSet 的源码剖析"></a>11.LinkedHashMap、HashSet、LinkedHashSet 的源码剖析</h3><h4 id="1-LinkedHashMap源码剖析"><a href="#1-LinkedHashMap源码剖析" class="headerlink" title="1.LinkedHashMap源码剖析"></a>1.LinkedHashMap源码剖析</h4><h5 id="1-1-源码"><a href="#1-1-源码" class="headerlink" title="1.1 源码"></a>1.1 源码</h5><p>内部定义的Entry如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">HashMap</span>.Node&lt;K,V&gt; &#123;</span><br><span class="line">	Entry&lt;K,V&gt; before, after;</span><br><span class="line">	</span><br><span class="line">	Entry(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">		<span class="built_in">super</span>(hash, key, value, next);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LinkedHashMap重写了HashMap中的newNode()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node&lt;K,V&gt; <span class="title function_">newNode</span><span class="params">(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; e)</span> &#123;</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>.Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    linkNodeLast(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeNode&lt;K,V&gt; <span class="title function_">newTreeNode</span><span class="params">(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;(hash, key, value, next);</span><br><span class="line">    linkNodeLast(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-Set接口分析"><a href="#2-Set接口分析" class="headerlink" title="2.Set接口分析"></a>2.Set接口分析</h4><h5 id="2-1-Set集合与Map集合的关系"><a href="#2-1-Set集合与Map集合的关系" class="headerlink" title="2.1 Set集合与Map集合的关系"></a>2.1 Set集合与Map集合的关系</h5><p>Set的内部实现其实是一个Map，Set中的元素，存储在HashMap的key中。即HashSet的内部实现是一个HashMap，TreeSet的内部实现是一个TreeMap，LinkedHashSet的内部实现是一个LinkedHashMap。</p>
<h5 id="2-2-源码剖析"><a href="#2-2-源码剖析" class="headerlink" title="2.2 源码剖析"></a>2.2 源码剖析</h5><p><strong>HashSet源码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个构造器是给子类LinkedHashSet调用的</span></span><br><span class="line">HashSet(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> dummy) &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//add()方法：</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中，</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//iterator()方法：</span></span><br><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.keySet().iterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>LinkedHashSet源码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="number">16</span>, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, <span class="number">.75f</span>, <span class="literal">true</span>);<span class="comment">//调用HashSet的某个构造器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(initialCapacity, loadFactor, <span class="literal">true</span>);<span class="comment">//调用HashSet的某个构造器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>TreeSet源码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;E,Object&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class="line">    <span class="built_in">this</span>.m = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中，</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="comment">//add()方法：</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> m.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中，</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure>

<h4 id="3-【拓展】HashMap的相关问题"><a href="#3-【拓展】HashMap的相关问题" class="headerlink" title="3.【拓展】HashMap的相关问题"></a>3.【拓展】HashMap的相关问题</h4><h5 id="3-1说说你理解的哈希算法"><a href="#3-1说说你理解的哈希算法" class="headerlink" title="3.1说说你理解的哈希算法"></a>3.1说说你理解的哈希算法</h5><p>hash算法是一种可以从任何数据中提取出其“指纹”的数据摘要算法，它将任意大小的数据映射到一个固定大小的序列上，这个序列被称为hash code、数据摘要或者指纹。比较出名的hash算法有MD5、SHA。hash是具有唯一性且不可逆的，唯一性是指相同的“对象”产生的hash code永远是一样的。</p>
<h5 id="3-2Entry中的hash属性为什么不直接使用key的hashCode-返回值呢？"><a href="#3-2Entry中的hash属性为什么不直接使用key的hashCode-返回值呢？" class="headerlink" title="3.2Entry中的hash属性为什么不直接使用key的hashCode()返回值呢？"></a>3.2Entry中的hash属性为什么不直接使用key的hashCode()返回值呢？</h5><p>不管是JDK1.7还是JDK1.8中，都不是直接用key的hashCode值直接与table.length-1计算求下标的，而是先对key的hashCode值进行了一个运算，JDK1.7和JDK1.8关于hash()的实现代码不一样，但是不管怎么样<code>都是为了提高hash code值与 (table.length-1)的按位与完的结果，尽量的均匀分布。</code><br>JDK1.7：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JDK1.8：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">       <span class="type">int</span> h;</span><br><span class="line">       <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>虽然算法不同，但是思路都是将hashCode值的高位二进制与低位二进制值进行了异或，让高位二进制参与到index的计算中。<br>为什么要hashCode值的二进制的高位参与到index计算呢？<br>因为一个HashMap的table数组一般不会特别大，至少在不断扩容之前，那么table.length-1的大部分高位都是0，直接用hashCode和table.length-1进行&amp;运算的话，就会导致总是只有最低的几位是有效的，那么就算你的hashCode()实现的再好也难以避免发生碰撞，这时让高位参与进来的意义就体现出来了。它对hashcode的低位添加了随机性并且混合了高位的部分特征，显著减少了碰撞冲突的发生。</p>
<h5 id="3-3HashMap是如何决定某个key-value存在哪个桶的呢？"><a href="#3-3HashMap是如何决定某个key-value存在哪个桶的呢？" class="headerlink" title="3.3HashMap是如何决定某个key-value存在哪个桶的呢？"></a>3.3HashMap是如何决定某个key-value存在哪个桶的呢？</h5><p>因为hash值是一个整数，而数组的长度也是一个整数，有两种思路：<br><code>①hash 值 % table.length</code>会得到一个[0,table.length-1]范围的值，正好是下标范围，但是用%运算效率没有位运算符&amp;高。<br><code>②hash 值 &amp; (table.length-1)</code>，任何数 &amp; (table.length-1)的结果也一定在[0, table.length-1]范围。<br>JDK1.7：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexFor</span><span class="params">(<span class="type">int</span> h, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="comment">// assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>); <span class="comment">//此处h就是hash</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JDK1.8：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)  <span class="comment">// i = (n - 1) &amp; hash</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//....省略大量代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-4为什么要保持table数组一直是2的n次幂呢？"><a href="#3-4为什么要保持table数组一直是2的n次幂呢？" class="headerlink" title="3.4为什么要保持table数组一直是2的n次幂呢？"></a>3.4为什么要保持table数组一直是2的n次幂呢？</h5><p>因为如果数组的长度为2的n次幂，那么<code>table.length-1的二进制就是一个高位全是0，低位全是1的数字，这样才能保证每一个下标位置都有机会被用到。</code><br>举例1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashCode值是   ？</span><br><span class="line">table.length是<span class="number">10</span></span><br><span class="line">table.length-<span class="number">1</span>是<span class="number">9</span></span><br><span class="line"></span><br><span class="line">？   ????????</span><br><span class="line"><span class="number">9</span>	 <span class="number">00001001</span></span><br><span class="line">&amp;_____________</span><br><span class="line">	 <span class="number">00000000</span>	[<span class="number">0</span>]</span><br><span class="line">	 <span class="number">00000001</span>	[<span class="number">1</span>]</span><br><span class="line">	 <span class="number">00001000</span>	[<span class="number">8</span>]</span><br><span class="line">	 <span class="number">00001001</span>	[<span class="number">9</span>]</span><br><span class="line">	 一定[<span class="number">0</span>]~[<span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<p>举例2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashCode值是   ？</span><br><span class="line">table.length是<span class="number">16</span></span><br><span class="line">table.length-<span class="number">1</span>是<span class="number">15</span></span><br><span class="line"></span><br><span class="line">？   ????????</span><br><span class="line"><span class="number">15</span>	 <span class="number">00001111</span></span><br><span class="line">&amp;_____________</span><br><span class="line">	 <span class="number">00000000</span>	[<span class="number">0</span>]</span><br><span class="line">	 <span class="number">00000001</span>	[<span class="number">1</span>]</span><br><span class="line">	 <span class="number">00000010</span>	[<span class="number">2</span>]</span><br><span class="line">	 <span class="number">00000011</span>	[<span class="number">3</span>]</span><br><span class="line">	 ...</span><br><span class="line">	 <span class="number">00001111</span>    [<span class="number">15</span>]</span><br><span class="line">	 范围是[<span class="number">0</span>,<span class="number">15</span>]，一定在[<span class="number">0</span>,table.length-<span class="number">1</span>]范围内</span><br></pre></td></tr></table></figure>

<h5 id="3-5解决-index-冲突问题"><a href="#3-5解决-index-冲突问题" class="headerlink" title="3.5解决[index]冲突问题"></a>3.5解决[index]冲突问题</h5><p>虽然从设计hashCode()到上面HashMap的hash()函数，都尽量减少冲突，但是仍然存在两个不同的对象返回的hashCode值相同，或者hashCode值就算不同，通过hash()函数计算后，得到的index也会存在大量的相同，因此key分布完全均匀的情况是不存在的。那么发生碰撞冲突时怎么办？<br>JDK1.8之间使用：数组+链表的结构。<br>JDK1.8之后使用：数组+链表&#x2F;红黑树的结构。<br>即hash相同或hash&amp;(table.lengt-1)的值相同，那么就存入同一个“桶”table[index]中，使用链表或红黑树连接起来。</p>
<h5 id="3-6为什么JDK1-8会出现红黑树和链表共存呢？"><a href="#3-6为什么JDK1-8会出现红黑树和链表共存呢？" class="headerlink" title="3.6为什么JDK1.8会出现红黑树和链表共存呢？"></a>3.6为什么JDK1.8会出现红黑树和链表共存呢？</h5><p>因为当冲突比较严重时，table[index]下面的链表就会很长，那么会导致查找效率大大降低，而如果此时选用二叉树可以大大提高查询效率。<br>但是二叉树的结构又过于复杂，占用内存也较多，如果结点个数比较少的时候，那么选择链表反而更简单。所以会出现红黑树和链表共存。</p>
<h5 id="3-7加载因子的值大小有什么关系？"><a href="#3-7加载因子的值大小有什么关系？" class="headerlink" title="3.7加载因子的值大小有什么关系？"></a>3.7加载因子的值大小有什么关系？</h5><p>如果太大，threshold就会很大，那么如果冲突比较严重的话，就会导致table[index]下面的结点个数很多，影响效率。<br>如果太小，threshold就会很小，那么数组扩容的频率就会提高，数组的使用率也会降低，那么会造成空间的浪费。</p>
<h5 id="3-8什么时候树化？什么时候反树化？"><a href="#3-8什么时候树化？什么时候反树化？" class="headerlink" title="3.8什么时候树化？什么时候反树化？"></a>3.8什么时候树化？什么时候反树化？</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;<span class="comment">//树化阈值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;<span class="comment">//反树化阈值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;<span class="comment">//最小树化容量</span></span><br></pre></td></tr></table></figure>

<ul>
<li>当某table[index]下的链表的结点个数达到8，并且table.length&gt;&#x3D;64，那么如果新Entry对象还添加到该table[index]中，那么就会将table[index]的链表进行树化。 </li>
<li>当某table[index]下的<code>红黑树结点个数少于6个</code>，此时， </li>
<li>当继续删除table[index]下的树结点，最后这个根结点的左右结点有null，或根结点的左结点的左结点为null，会反树化</li>
<li>当重新添加新的映射关系到map中，导致了map重新扩容了，这个时候如果table[index]下面还是小于等于6的个数，那么会反树化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyKey</span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyKey</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            result = prime * result + num;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>![](https:<span class="comment">//blog-resources.this0.com/image/202403301625569.png?x-oss-process=style/this0-blog)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">MyKey</span> <span class="variable">other</span> <span class="operator">=</span> (MyKey) obj;</span><br><span class="line">        <span class="keyword">if</span> (num != other.num)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestHashMapMyKey</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//这里为了演示的效果，我们造一个特殊的类，这个类的hashCode（）方法返回固定值1</span></span><br><span class="line">        <span class="comment">//因为这样就可以造成冲突问题，使得它们都存到table[1]中</span></span><br><span class="line">        HashMap&lt;MyKey, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i), <span class="string">&quot;value&quot;</span>+i);<span class="comment">//树化演示</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;MyKey, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i), <span class="string">&quot;value&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">11</span>; i++) &#123;</span><br><span class="line">            map.remove(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i));<span class="comment">//反树化演示</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;MyKey, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i), <span class="string">&quot;value&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">            map.remove(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i));</span><br><span class="line">        &#125;<span class="comment">//table[1]下剩余6个结点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">21</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i), <span class="string">&quot;value&quot;</span>+i);<span class="comment">//添加到扩容时，反树化</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-9-key-value中的key是否可以修改？"><a href="#3-9-key-value中的key是否可以修改？" class="headerlink" title="3.9 key-value中的key是否可以修改？"></a>3.9 key-value中的key是否可以修改？</h5><p><code>key-value存储到HashMap中会存储key的hash值</code>，这样就不用在每次查找时重新计算每一个Entry或Node（TreeNode）的hash值了，因此如果已经put到Map中的key-value，再修改key的属性，而这个属性又参与hashcode值的计算，那么会导致匹配不上。<br>这个规则也同样适用于LinkedHashMap、HashSet、LinkedHashSet、Hashtable等所有散列存储结构的集合。</p>
<h5 id="3-10-JDK1-7中HashMap的循环链表是怎么回事？如何解决？"><a href="#3-10-JDK1-7中HashMap的循环链表是怎么回事？如何解决？" class="headerlink" title="3.10 JDK1.7中HashMap的循环链表是怎么回事？如何解决？"></a>3.10 JDK1.7中HashMap的循环链表是怎么回事？如何解决？</h5><p>避免HashMap发生死循环的常用解决方案：</p>
<ul>
<li>多线程环境下，使用线程安全的ConcurrentHashMap替代HashMap，推荐</li>
<li>多线程环境下，使用synchronized或Lock加锁，但会影响性能，不推荐</li>
<li>多线程环境下，使用线程安全的Hashtable替代，性能低，不推荐</li>
</ul>
<p>HashMap死循环只会发生在JDK1.7版本中，主要原因：头插法+链表+多线程并发+扩容。<br>在JDK1.8中，HashMap改用尾插法，解决了链表死循环的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestHashMapMyKey</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//这里为了演示的效果，我们造一个特殊的类，这个类的hashCode（）方法返回固定值1</span></span><br><span class="line">        <span class="comment">//因为这样就可以造成冲突问题，使得它们都存到table[1]中</span></span><br><span class="line">        HashMap&lt;MyKey, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i), <span class="string">&quot;value&quot;</span>+i);<span class="comment">//树化演示</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;MyKey, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i), <span class="string">&quot;value&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">11</span>; i++) &#123;</span><br><span class="line">            map.remove(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i));<span class="comment">//反树化演示</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;MyKey, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i), <span class="string">&quot;value&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">            map.remove(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i));</span><br><span class="line">        &#125;<span class="comment">//table[1]下剩余6个结点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">21</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            map.put(<span class="keyword">new</span> <span class="title class_">MyKey</span>(i), <span class="string">&quot;value&quot;</span>+i);<span class="comment">//添加到扩容时，反树化</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/articles/f6491cfb.html</url>
    <content><![CDATA[<h3 id="1-网络编程三要素与-InetAddress-类的使用"><a href="#1-网络编程三要素与-InetAddress-类的使用" class="headerlink" title="1.网络编程三要素与 InetAddress 类的使用"></a>1.网络编程三要素与 InetAddress 类的使用</h3><h4 id="1-软件架构"><a href="#1-软件架构" class="headerlink" title="1. 软件架构"></a>1. 软件架构</h4><p><strong>C&#x2F;S架构</strong> ：全称为Client&#x2F;Server结构，是指客户端和服务器结构。常见程序有QQ、美团app、360安全卫士等软件。</p>
<p><strong>B&#x2F;S架构</strong> ：全称为Browser&#x2F;Server结构，是指浏览器和服务器结构。常见浏览器有IE、谷歌、火狐等。</p>
<h5 id="1-1网络基础"><a href="#1-1网络基础" class="headerlink" title="1.1网络基础"></a>1.1网络基础</h5><ul>
<li><strong>网络编程中有三个主要的问题：</strong> <ul>
<li>问题1：如何准确地定位网络上一台或多台主机</li>
<li>问题2：如何定位主机上的特定的应用</li>
<li>问题3：找到主机后，如何可靠、高效地进行数据传输</li>
</ul>
</li>
</ul>
<h4 id="2-网络通信要素"><a href="#2-网络通信要素" class="headerlink" title="2. 网络通信要素"></a>2. 网络通信要素</h4><h5 id="2-1-如何实现网络中的主机互相通信"><a href="#2-1-如何实现网络中的主机互相通信" class="headerlink" title="2.1 如何实现网络中的主机互相通信"></a>2.1 如何实现网络中的主机互相通信</h5><ul>
<li>通信双方地址 <ul>
<li>IP</li>
<li>端口号</li>
</ul>
</li>
<li>一定的规则：不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议，即网络通信协议。</li>
</ul>
<h5 id="2-2-通信要素一：IP地址和域名"><a href="#2-2-通信要素一：IP地址和域名" class="headerlink" title="2.2 通信要素一：IP地址和域名"></a>2.2 通信要素一：IP地址和域名</h5><h6 id="2-2-1-IP地址"><a href="#2-2-1-IP地址" class="headerlink" title="2.2.1 IP地址"></a>2.2.1 IP地址</h6><p><strong>IP地址：指互联网协议地址（Internet Protocol Address）</strong>，俗称IP。<br><strong>IP地址分类方式一：</strong></p>
<ul>
<li><p><code>IPV4</code>:ipv4地址是一个32位的二进制数，通常被分为4个字节，表示成IPV4的形式，以点分表示，例如 <code>a.b.c.d</code>。其中a、b、c、d都是0~255之间的十进制整数。</p>
<ul>
<li>这种方式最多可以表示42亿个。其中，30亿都在北美，亚洲4亿，中国2.9亿。2011年初已经用尽。</li>
<li>IP地址 &#x3D; 网络地址 +主机地址 <ul>
<li>网络地址：标识计算机或网络设备所在的网段</li>
<li>主机地址：标识特定主机或网络设备</li>
</ul>
</li>
</ul>
</li>
<li><p><code>IPV6</code>：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。<code>IPv6</code><br>为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，共16个字节，写成8个无符号整数，每个整数用四个十六进制位表示，数之间用冒号（：）分开。比如：，按保守方法估算IPv6实际可分配的地址，整个地球的每平方米面积上仍可分配1000多个地址，这样就解决了网络地址资源数量不够的问题。2012年6月6日，国际互联网协会举行了世界IPv6启动纪念日，这一天，全球IPv6网络正式启动。多家知名网站，如Google、Facebook和Yahoo等，于当天全球标准时间0点（北京时间8点整）开始永久性支持IPv6访问。2018年6月，三大运营商联合阿里云宣布，将全面对外提供IPv6服务，并计划在2025年前助推中国互联网真正实现“IPv6 Only”。<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code><br>在IPv6的设计过程中除了一劳永逸地解决了地址短缺问题以外，还考虑了在IPv4中解决不好的其它问题，主要有端到端IP连接、服务质量（QoS）、安全性、多播、移动性、即插即用等。</p>
</li>
</ul>
<p><strong>IP地址分类方式二：</strong><br>公网地址( 万维网使用）和 私有地址( 局域网使用）。192.168.开头的就是私有地址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用。</p>
<p><strong>常用命令：</strong></p>
<ul>
<li>查看本机IP地址，在控制台输入：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure>

<ul>
<li>检查网络是否连通，在控制台输入：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 空格 IP地址</span><br></pre></td></tr></table></figure>

<p><strong>特殊的IP地址：</strong></p>
<ul>
<li>本地回环地址(hostAddress)：<code>127.0.0.1</code></li>
<li>主机名(hostName)：<code>localhost</code></li>
</ul>
<h6 id="2-2-2-域名"><a href="#2-2-2-域名" class="headerlink" title="2.2.2 域名"></a>2.2.2 域名</h6><p>Internet上的主机有两种方式表示地址：</p>
<ul>
<li>域名(hostName)：<a href="http://www.this0.com/">www.this0.com</a></li>
<li>IP 地址(hostAddress)：</li>
</ul>
<p><strong>域名解析：</strong>因为IP地址数字不便于记忆，因此出现了域名。域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS，Domain Name System，域名系统)负责将域名转化成IP地址，这样才能和主机建立连接。</p>
<h5 id="2-3-通信要素二：端口号"><a href="#2-3-通信要素二：端口号" class="headerlink" title="2.3 通信要素二：端口号"></a>2.3 通信要素二：端口号</h5><p>网络的通信，本质上是两个进程（应用程序）的通信。每台计算机都有很多的进程，那么在网络通信时，如何区分这些进程呢？</p>
<p>如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）。</p>
<p>不同的进程，设置不同的端口号。</p>
<ul>
<li><strong>端口号：用两个字节表示的整数，它的取值范围是0~65535</strong>。 <ul>
<li>公认端口：0~1023。被预先定义的服务通信占用，如：HTTP（80），FTP（21），Telnet（23）</li>
<li>注册端口：1024~49151。分配给用户进程或应用程序。如：Tomcat（8080），MySQL（3306），Oracle（1521）。</li>
<li>动态&#x2F; 私有端口：49152~65535。</li>
</ul>
</li>
</ul>
<p><code>如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</code></p>
<h5 id="2-4-通信要素三：网络通信协议"><a href="#2-4-通信要素三：网络通信协议" class="headerlink" title="2.4 通信要素三：网络通信协议"></a>2.4 <code>通信要素三：网络通信协议</code></h5><p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。</p>
<ul>
<li><code>网络通信协议</code>：在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤、出错控制等做了统一规定，通信双方必须同时遵守才能完成数据交换。</li>
</ul>
<p><strong>新的问题：网络协议涉及内容太多、太复杂。如何解决？</strong></p>
<p>计算机网络通信涉及内容很多，比如指定源地址和目标地址，加密解密，压缩解压缩，差错控制，流量控制，路由控制，如何实现如此复杂的网络协议呢？<code>通信协议分层思想</code>。<code>通信协议分层思想</code></p>
<p>在制定协议时，把复杂成份分解成一些简单的成份，再将它们复合起来。最常用的复合方式是层次方式，即<code>同层间可以通信、上一层可以调用下一层，而与再下一层不发生关系</code>。各层互不影响，利于系统的开发和扩展。<code>  同层间可以通信、上一层可以调用下一层，而与再下一层不发生关系。各层互不影响，利于系统的开发和扩展。</code></p>
<p>这里有两套参考模型</p>
<ul>
<li>OSI参考模型：模型过于理想化，未能在因特网上进行广泛推广</li>
<li><code>TCP/IP参考模型(或TCP/IP协议)：事实上的国际标准。</code></li>
<li><strong>TCP&#x2F;IP协议：</strong> 传输控制协议&#x2F;因特网互联协议( Transmission Control Protocol&#x2F;Internet Protocol)，TCP&#x2F;IP 以其两个主要协议：传输控制协议(TCP)和网络互联协议(IP)而得名，实际上是<code>一组协议</code>，包括多个具有不同功能且互为关联的协议。是Internet最基本、最广泛的协议。</li>
</ul>
<p><strong><code>TCP/IP协议中的四层介绍：</code></strong></p>
<ul>
<li><code>应用层</code>：应用层决定了向用户提供应用服务时通信的活动。主要协议有：HTTP协议、FTP协议、SNMP（简单网络管理协议）、SMTP（简单邮件传输协议）和POP3（Post Office Protocol 3的简称,即邮局协议的第3个版）等。 </li>
<li><code>传输层</code>：主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。TCP（Transmission Control Protocol）协议，即传输控制协议，是一种面向连接的、可靠的、基于字节流的传输层通信协议。UDP(User Datagram Protocol，用户数据报协议)：是一个无连接的传输层协议、提供面向事务的简单不可靠的信息传送服务。 </li>
<li><code>网络层</code>：网络层是整个TCP&#x2F;IP协议的核心，支持网间互连的数据通信。它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。而IP协议是一种非常重要的协议。IP（internet protocal）又称为互联网协议。IP的责任就是把数据从源传送到目的地。它在源地址和目的地址之间传送一种称之为数据包的东西，它还提供对数据大小的重新组装功能，以适应不同网络对包大小的要求。 </li>
<li><code>物理+数据链路层</code>：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。</li>
</ul>
<h3 id="2-网络编程-TCP-与-UDP-协议剖析与-TCP-编程案例"><a href="#2-网络编程-TCP-与-UDP-协议剖析与-TCP-编程案例" class="headerlink" title="2.网络编程-TCP 与 UDP 协议剖析与 TCP 编程案例"></a><code>2.网络编程-TCP 与 UDP 协议剖析与 TCP 编程案例</code></h3><h4 id="1-谈传输层协议：TCP与UDP协议"><a href="#1-谈传输层协议：TCP与UDP协议" class="headerlink" title="1. 谈传输层协议：TCP与UDP协议"></a>1. 谈传输层协议：TCP与UDP协议</h4><p>通信的协议还是比较复杂的，<code>java.net</code> 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。</p>
<p><code>java.net</code> 包中提供了两种常见的网络协议的支持：</p>
<ul>
<li><strong>UDP</strong>：用户数据报协议(User Datagram Protocol)。</li>
<li><strong>TCP</strong>：传输控制协议 (Transmission Control Protocol)。</li>
</ul>
<h5 id="1-1-TCP协议与UDP协议"><a href="#1-1-TCP协议与UDP协议" class="headerlink" title="1.1 TCP协议与UDP协议"></a>1.1 TCP协议与UDP协议</h5><p><strong>TCP协议：</strong></p>
<ul>
<li>TCP协议进行通信的两个应用进程：客户端、服务端。</li>
<li><code>使用TCP协议前，须先建立TCP连接</code>，形成基于字节流的传输数据通道</li>
<li>传输前，采用“三次握手”方式，点对点通信，是<code>可靠的</code> <ul>
<li>TCP协议使用<code>重发机制</code>，当一个通信实体发送一个消息给另一个通信实体后，需要收到另一个通信实体确认信息，如果没有收到另一个通信实体确认信息，则会再次重复刚才发送的消息。</li>
</ul>
</li>
<li>在连接中可进行<code>大数据量的传输</code></li>
<li>传输完毕，需<code>释放已建立的连接，效率低</code></li>
</ul>
<p><strong>UDP协议：</strong></p>
<ul>
<li>UDP协议进行通信的两个应用进程：发送端、接收端。</li>
<li>将数据、源、目的封装成数据包（传输的基本单位）<code>不需要建立连接</code></li>
<li>发送不管对方是否准备好，接收方收到也不确认，不能保证数据的完整性，故是<code>不可靠的</code></li>
<li>每个数据报的大小限制在<code>64K内</code></li>
<li>发送数据结束时<code>无需释放资源，开销小，通信效率高</code></li>
<li>适用场景：音频、视频和普通数据的传输。例如视频会议</li>
</ul>
<blockquote>
<p>TCP生活案例：打电话</p>
<p>UDP生活案例：发送短信、发电报</p>
</blockquote>
<h4 id="2-三次握手"><a href="#2-三次握手" class="headerlink" title="2. 三次握手"></a>2. 三次握手</h4><p>TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。</p>
<ul>
<li><code>第一次握手，客户端向服务器端发起TCP连接的请求</code></li>
<li><code>第二次握手，服务器端发送针对客户端TCP连接请求的确认</code></li>
<li><code>第三次握手，客户端发送确认的确认</code></li>
</ul>
<p>具体过程:</p>
<blockquote>
<p>1、客户端会随机一个初始序列号seq&#x3D;x，设置SYN&#x3D;1 ，表示这是SYN握手报文。然后就可以把这个 SYN 报文发送给服务端了，表示向服务端发起连接，之后客户端处于<code>同步已发送</code>状态。</p>
<p>2、服务端收到客户端的 SYN 报文后，也随机一个初始序列号(seq&#x3D;y)，设置ack&#x3D;x+1，表示收到了客户端的x之前的数据，希望客户端下次发送的数据从x+1开始。<br>设置 SYN&#x3D;1 和 ACK&#x3D;1。表示这是一个SYN握手和ACK确认应答报文。最后把该报文发给客户端，该报文也不包含应用层数据，之后服务端处于<code>同步已接收</code>状态。</p>
<p>3、客户端收到服务端报文后，还要向服务端回应最后一个应答报文，将ACK置为 1 ，表示这是一个应答报文<br>ack&#x3D;y+1 ，表示收到了服务器的y之前的数据，希望服务器下次发送的数据从y+1开始。<br>最后把报文发送给服务端，这次报文可以携带数据，之后客户端处于 连接已建立 状态。服务器收到客户端的应答报文后，也进入<code>连接已建立</code>状态。</p>
</blockquote>
<p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p>
<h4 id="3-四次挥手"><a href="#3-四次挥手" class="headerlink" title="3. 四次挥手"></a>3. <code>四次挥手</code></h4><p>TCP协议中，在发送数据结束后，释放连接时需要经过四次挥手。</p>
<ul>
<li>第一次挥手：客户端向服务器端提出结束连接，<code>让服务器做最后的准备工作</code>。此时，客户端处于半关闭状态，即表示不再向服务器发送数据了，但是还可以接受数据。</li>
<li>第二次挥手：服务器接收到客户端释放连接的请求后，<code>会将最后的数据发给客户端</code>。并告知上层的应用进程不再接收数据。</li>
<li>第三次挥手：服务器发送完数据后，会给客户<code>端发送一个释放连接的报文</code>。那么客户端接收后就知道可以正式释放连接了。</li>
<li>第四次挥手：客户端接收到服务器最后的释放连接报文后，<code>要回复一个彻底断开的报文</code>。这样服务器收到后才会彻底释放连接。这里客户端，发送完最后的报文后，会等待2MSL，因为有可能服务器没有收到最后的报文，那么服务器迟迟没收到，就会再次给客户端发送释放连接的报文，此时客户端在等待时间范围内接收到，会重新发送最后的报文，并重新计时。如果等待2MSL后，没有收到，那么彻底断开。</li>
</ul>
<blockquote>
<p>1、客户端打算断开连接，向服务器发送FIN报文(FIN标记位被设置为1，1表示为FIN，0表示不是)，FIN报文中会指定一个序列号，之后客户端进入FIN_WAIT_1状态。也就是客户端发出连接释放报文段(FIN报文)，指定序列号seq &#x3D; u，主动关闭TCP连接，等待服务器的确认。</p>
<p>2、服务器收到连接释放报文段(FIN报文)后，就向客户端发送ACK应答报文，以客户端的FIN报文的序列号 seq+1 作为ACK应答报文段的确认序列号ack &#x3D; seq+1 &#x3D; u + 1。接着服务器进入CLOSE_WAIT(等待关闭)状态，此时的TCP处于半关闭状态(下面会说什么是半关闭状态)，客户端到服务器的连接释放。客户端收到来自服务器的ACK应答报文段后，进入FIN_WAIT_2状态。</p>
<p>3、服务器也打算断开连接，向客户端发送连接释放(FIN)报文段，之后服务器进入LASK_ACK(最后确认)状态，等待客户端的确认。服务器的连接释放(FIN)报文段的FIN&#x3D;1，ACK&#x3D;1，序列号seq&#x3D;m，确认序列号ack&#x3D;u+1。</p>
<p>4、客户端收到来自服务器的连接释放(FIN)报文段后，会向服务器发送一个ACK应答报文段，以连接释放(FIN)报文段的确认序号 ack 作为ACK应答报文段的序列号 seq，以连接释放(FIN)报文段的序列号 seq+1作为确认序号ack。</p>
<p>之后客户端进入TIME_WAIT(时间等待)状态，服务器收到ACK应答报文段后，服务器就进入CLOSE(关闭)状态，到此服务器的连接已经完成关闭。客户端处于TIME_WAIT状态时，此时的TCP还未释放掉，需要等待2MSL后，客户端才进入CLOSE状态。</p>
</blockquote>
<h4 id="4-网络编程API"><a href="#4-网络编程API" class="headerlink" title="4. 网络编程API"></a>4. 网络编程API</h4><h5 id="4-1-InetAddress类"><a href="#4-1-InetAddress类" class="headerlink" title="4.1 InetAddress类"></a>4.1 InetAddress类</h5><p><code>InetAddress类主要表示IP地址</code>，两个子类：Inet4Address、Inet6Address。</p>
<p>InetAddress 类没有提供公共的构造器，而是提供了如下几个静态方法来<code>获取InetAddress</code> 实例</p>
<ul>
<li>public static InetAddress getLocalHost()</li>
<li>public static InetAddress getByName(String host)</li>
<li>public static InetAddress getByAddress(byte[] addr)</li>
</ul>
<p>InetAddress 提供了如下几个常用的方法</p>
<ul>
<li>public String getHostAddress() ：返回 IP 地址字符串（以文本表现形式）</li>
<li>public String getHostName() ：获取此 IP 地址的主机名</li>
<li>public boolean isReachable(int timeout)：测试是否可以达到该地址</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInetAddress</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException&#123;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(localHost);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span><span class="keyword">throws</span> UnknownHostException&#123;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">atguigu</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;www.atguigu.com&quot;</span>);</span><br><span class="line">        System.out.println(atguigu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span><span class="keyword">throws</span> UnknownHostException&#123;</span><br><span class="line">        <span class="comment">//		byte[] addr = &#123;112,54,108,98&#125;;</span></span><br><span class="line">        <span class="type">byte</span>[] addr = &#123;(<span class="type">byte</span>)<span class="number">192</span>,(<span class="type">byte</span>)<span class="number">168</span>,<span class="number">24</span>,<span class="number">56</span>&#125;;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">atguigu</span> <span class="operator">=</span> InetAddress.getByAddress(addr);</span><br><span class="line">        System.out.println(atguigu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-Socket类"><a href="#4-2-Socket类" class="headerlink" title="4.2 Socket类"></a>4.2 Socket类</h5><ul>
<li>网络上具有唯一标识的IP地址和端口号组合在一起构成唯一能识别的标识符套接字（Socket）。 </li>
<li>利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实上的标准。网络通信其实就是Socket间的通信。 </li>
<li>通信的两端都要有Socket，是两台机器间通信的端点。 </li>
<li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。 </li>
<li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。 </li>
<li>Socket分类： <ul>
<li><code>流套接字（stream socket）：使用TCP提供可依赖的字节流服务 </code><ul>
<li>ServerSocket：此类实现TCP服务器套接字。服务器套接字等待请求通过网络传入。</li>
<li>Socket：此类实现客户端套接字（也可以就叫“套接字”）。套接字是两台机器间通信的端点。</li>
</ul>
</li>
<li><code>数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务 </code><ul>
<li>DatagramSocket：此类表示用来发送和接收UDP数据报包的套接字。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="4-3-Socket相关类API"><a href="#4-3-Socket相关类API" class="headerlink" title="4.3 Socket相关类API"></a>4.3 Socket相关类API</h5><h6 id="4-3-1-ServerSocket类"><a href="#4-3-1-ServerSocket类" class="headerlink" title="4.3.1 ServerSocket类"></a>4.3.1 ServerSocket类</h6><p><strong>ServerSocket类的构造方法：</strong></p>
<ul>
<li>ServerSocket(int port) ：创建绑定到特定端口的服务器套接字。</li>
</ul>
<p><strong>ServerSocket类的常用方法：</strong></p>
<ul>
<li>Socket accept()：侦听并接受到此套接字的连接。</li>
</ul>
<h6 id="4-3-2-Socket类"><a href="#4-3-2-Socket类" class="headerlink" title="4.3.2 Socket类"></a>4.3.2 Socket类</h6><p><strong>Socket类的常用构造方法</strong>：</p>
<ul>
<li>public Socket(InetAddress address,int port)：创建一个流套接字并将其连接到指定 IP 地址的指定端口号。</li>
<li>public Socket(String host,int port)：创建一个流套接字并将其连接到指定主机上的指定端口号。</li>
</ul>
<p><strong>Socket类的常用方法</strong>：</p>
<ul>
<li>public InputStream getInputStream()：返回此套接字的输入流，可以用于接收消息</li>
<li>public OutputStream getOutputStream()：返回此套接字的输出流，可以用于发送消息</li>
<li>public InetAddress getInetAddress()：此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。</li>
<li>public InetAddress getLocalAddress()：获取套接字绑定的本地地址。</li>
<li>public int getPort()：此套接字连接到的远程端口号；如果尚未连接套接字，则返回 0。</li>
<li>public int getLocalPort()：返回此套接字绑定到的本地端口。如果尚未绑定套接字，则返回 -1。</li>
<li>public void close()：关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和 OutputStream。</li>
<li>public void shutdownInput()：如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。 即不能在从此套接字的输入流中接收任何数据。</li>
<li>public void shutdownOutput()：禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。</li>
</ul>
<p><strong>注意：</strong><code>先后调用Socket的shutdownInput()和shutdownOutput()方法，仅仅关闭了输入流和输出流，并不等于调用Socket的close()方法。在通信结束后，仍然要调用Scoket的close()方法，因为只有该方法才会释放Socket占用的资源，比如占用的本地端口号等。</code></p>
<h6 id="4-3-3-DatagramSocket类"><a href="#4-3-3-DatagramSocket类" class="headerlink" title="4.3.3 DatagramSocket类"></a>4.3.3 DatagramSocket类</h6><p><strong>DatagramSocket 类的常用方法：</strong></p>
<ul>
<li>public DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被绑定到通配符地址，IP 地址由内核来选择。</li>
<li>public DatagramSocket(int port,InetAddress laddr)创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。</li>
<li>public void close()关闭此数据报套接字。</li>
<li>public void send(DatagramPacket p)从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的 IP 地址和远程主机的端口号。</li>
<li>public void receive(DatagramPacket p)从此套接字接收数据报包。当此方法返回时，DatagramPacket 的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。</li>
<li>public InetAddress getLocalAddress()获取套接字绑定的本地地址。</li>
<li>public int getLocalPort()返回此套接字绑定的本地主机上的端口号。</li>
<li>public InetAddress getInetAddress()返回此套接字连接的地址。如果套接字未连接，则返回 null。</li>
<li>public int getPort()返回此套接字的端口。如果套接字未连接，则返回 -1。</li>
</ul>
<h6 id="4-3-4-DatagramPacket类"><a href="#4-3-4-DatagramPacket类" class="headerlink" title="4.3.4 DatagramPacket类"></a>4.3.4 DatagramPacket类</h6><p><strong>DatagramPacket类的常用方法：</strong></p>
<ul>
<li>public DatagramPacket(byte[] buf,int length)构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。</li>
<li>public DatagramPacket(byte[] buf,int length,InetAddress address,int port)构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length 参数必须小于等于 buf.length。</li>
<li>public InetAddress getAddress()返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。</li>
<li>public int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。</li>
<li><code>public byte[] getData()</code>返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。</li>
<li><code>public int getLength()</code>返回将要发送或接收到的数据的长度。</li>
</ul>
<h4 id="5-TCP网络编程"><a href="#5-TCP网络编程" class="headerlink" title="5. TCP网络编程"></a>5. TCP网络编程</h4><h5 id="5-1-通信模型"><a href="#5-1-通信模型" class="headerlink" title="5.1 通信模型"></a>5.1 通信模型</h5><p>Java语言的基于套接字TCP编程分为服务端编程和客户端编程</p>
<h5 id="5-2-开发步骤"><a href="#5-2-开发步骤" class="headerlink" title="5.2 开发步骤"></a>5.2 开发步骤</h5><p><strong>客户端程序包含以下四个基本的步骤 ：</strong></p>
<ul>
<li>创建 Socket ：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</li>
<li>打开连接到 Socket  的输入&#x2F; 出流： 使用 getInputStream()方法获得输入流，使用getOutputStream()方法获得输出流，进行数据传输</li>
<li>按照一定的协议对 Socket 进行读&#x2F; 写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线路。</li>
<li>关闭 Socket ：断开客户端到服务器的连接，释放线路</li>
</ul>
<p><strong>服务器端程序包含以下四个基本的 步骤：</strong></p>
<ul>
<li>调用 ServerSocket(int port)  ：创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求。</li>
<li>调用 accept() ：监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象。</li>
<li>调用  该Socket 类对象的 getOutputStream()  和 getInputStream () ：获取输出流和输入流，开始网络数据的发送和接收。</li>
<li>关闭Socket 对象：客户端访问结束，关闭通信套接字。</li>
</ul>
<h5 id="5-3-例题与练习"><a href="#5-3-例题与练习" class="headerlink" title="5.3 例题与练习"></a>5.3 例题与练习</h5><blockquote>
<p>例题1：客户端发送内容给服务端，服务端将内容打印到控制台上。</p>
<p>例题2：客户端发送文件给服务端，服务端将文件保存在本地。</p>
<p>例题3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。并关闭相应的连接。</p>
</blockquote>
<p>练习1：服务端读取图片并发送给客户端，客户端保存图片到本地</p>
<p>练习2：客户端给服务端发送文本，服务端会将文本转成大写在返回给客户端。</p>
<p><strong>演示单个客户端与服务器单次通信：</strong></p>
<p>需求：客户端连接服务器，连接成功后给服务发送“lalala”，服务器收到消息后，给客户端返回“欢迎登录”，客户端接收消息后，断开连接</p>
<p><strong>1、服务器端示例代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1、准备一个ServerSocket对象，并绑定8888端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待连接....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、在8888端口监听客户端的连接，该方法是个阻塞的方法，如果没有客户端连接，将一直等待</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">inetAddress</span> <span class="operator">=</span> socket.getInetAddress();</span><br><span class="line">        System.out.println(inetAddress.getHostAddress() + <span class="string">&quot;客户端连接成功！！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、获取输入流，用来接收该客户端发送给服务器的数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = input.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            s.append(<span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(inetAddress.getHostAddress() + <span class="string">&quot;客户端发送的消息是：&quot;</span> + s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、获取输出流，用来发送数据给该客户端</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        out.write(<span class="string">&quot;欢迎登录&quot;</span>.getBytes());</span><br><span class="line">        out.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、关闭socket，不再与该客户端通信</span></span><br><span class="line">        <span class="comment">//socket关闭，意味着InputStream和OutputStream也关闭了</span></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、如果不再接收任何客户端通信，可以关闭ServerSocket</span></span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、客户端示例代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、准备Socket，连接服务器，需要指定服务器的IP地址和端口号</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、获取输出流，用来发送数据给服务器</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">// 发送数据</span></span><br><span class="line">        out.write(<span class="string">&quot;lalala&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//会在流末尾写入一个“流的末尾”标记，对方才能读到-1，否则对方的读取方法会一致阻塞</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、获取输入流，用来接收服务器发送给该客户端的数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = input.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            s.append(<span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器返回的消息是：&quot;</span> + s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、关闭socket，不再与服务器通信，即断开与服务器的连接</span></span><br><span class="line">        <span class="comment">//socket关闭，意味着InputStream和OutputStream也关闭了</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>演示多个客户端与服务器之间的多次通信：</strong></p>
<p>通常情况下，服务器不应该只接受一个客户端请求，而应该不断地接受来自客户端的所有请求，所以Java程序通常会<code>通过循环，不断地调用ServerSocket的accept()方法。</code>&#x3D;&#x3D;</p>
<p>如果服务器端要“同时”处理多个客户端的请求，因此服务器端需要为<strong>每一个客户端单独分配一个线程</strong>来处理，否则无法实现“同时”。</p>
<p>咱们之前学习IO流的时候，提到过<code>装饰者设计模式</code>，该设计使得不管底层IO流是怎样的节点流：文件流也好，网络Socket产生的流也好，程序都可以将其包装成处理流，甚至可以多层包装，从而提供更多方便的处理。</p>
<p>案例需求：多个客户端连接服务器，并进行多次通信</p>
<ul>
<li>每一个客户端连接成功后，从键盘输入英文单词或中国成语，并发送给服务器</li>
<li>服务器收到客户端的消息后，把词语“反转”后返回给客户端</li>
<li>客户端接收服务器返回的“词语”，打印显示</li>
<li>当客户端输入“stop”时断开与服务器的连接</li>
<li>多个客户端可以同时给服务器发送“词语”，服务器可以“同时”处理多个客户端的请求</li>
</ul>
<p><strong>1、服务器端示例代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、准备一个ServerSocket</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待连接...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 2、监听一个客户端的连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + ++count + <span class="string">&quot;个客户端&quot;</span>+socket.getInetAddress().getHostAddress()+<span class="string">&quot;连接成功！！&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">ClientHandlerThread</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientHandlerThread</span>(socket);</span><br><span class="line">            ct.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里没有关闭server，永远监听</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ClientHandlerThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line">        <span class="keyword">private</span> String ip;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ClientHandlerThread</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">            <span class="built_in">this</span>.socket = socket;</span><br><span class="line">            ip = socket.getInetAddress().getHostAddress();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//（1）获取输入流，用来接收该客户端发送给服务器的数据</span></span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">                <span class="comment">//（2）获取输出流，用来发送数据给该客户端</span></span><br><span class="line">                <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(socket.getOutputStream());</span><br><span class="line">                String str;</span><br><span class="line">                <span class="comment">// （3）接收数据</span></span><br><span class="line">                <span class="keyword">while</span> ((str = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//（4）反转</span></span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">word</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str);</span><br><span class="line">                    word.reverse();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//（5）返回给客户端</span></span><br><span class="line">                    ps.println(word);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端&quot;</span> + ip+<span class="string">&quot;正常退出&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception  e)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端&quot;</span> + ip+<span class="string">&quot;意外退出&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//（6）断开连接</span></span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、客户端示例代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.tcp.many;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、准备Socket，连接服务器，需要指定服务器的IP地址和端口号</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、获取输出流，用来发送数据给服务器</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(out);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、获取输入流，用来接收服务器发送给该客户端的数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        BufferedReader br;</span><br><span class="line">        <span class="keyword">if</span>(args!= <span class="literal">null</span> &amp;&amp; args.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(input,encoding));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(input));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入发送给服务器的单词或成语：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(message.equals(<span class="string">&quot;stop&quot;</span>))&#123;</span><br><span class="line">                socket.shutdownOutput();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4、 发送数据</span></span><br><span class="line">            ps.println(message);</span><br><span class="line">            <span class="comment">// 接收数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">feedback</span>  <span class="operator">=</span> br.readLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;从服务器收到的反馈是：&quot;</span> + feedback);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、关闭socket，断开与服务器的连接</span></span><br><span class="line">        scanner.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-网络编程-聊天室代码实现的说明与演示"><a href="#3-网络编程-聊天室代码实现的说明与演示" class="headerlink" title="3.网络编程-聊天室代码实现的说明与演示"></a>3.网络编程-聊天室代码实现的说明与演示</h3><h4 id="1-案例：聊天室"><a href="#1-案例：聊天室" class="headerlink" title="1. 案例：聊天室"></a>1. 案例：聊天室</h4><p>服务端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestChatServer</span> &#123;</span><br><span class="line">	<span class="comment">//这个集合用来存储所有在线的客户端</span></span><br><span class="line">	<span class="keyword">static</span> ArrayList&lt;Socket&gt; online = <span class="keyword">new</span>  <span class="title class_">ArrayList</span>&lt;Socket&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">//1、启动服务器，绑定端口号</span></span><br><span class="line">		<span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8989</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2、接收n多的客户端同时连接</span></span><br><span class="line">		<span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">			<span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> server.accept();</span><br><span class="line">			</span><br><span class="line">			online.add(accept);<span class="comment">//把新连接的客户端添加到online列表中</span></span><br><span class="line">			</span><br><span class="line">			<span class="type">MessageHandler</span> <span class="variable">mh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageHandler</span>(accept);</span><br><span class="line">			mh.start();<span class="comment">//</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MessageHandler</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">		<span class="keyword">private</span> Socket socket;</span><br><span class="line">		<span class="keyword">private</span> String ip;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="title function_">MessageHandler</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">			<span class="built_in">super</span>();</span><br><span class="line">			<span class="built_in">this</span>.socket = socket;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				ip = socket.getInetAddress().getHostAddress();</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//插入：给其他客户端转发“我上线了”</span></span><br><span class="line">				sendToOther(ip+<span class="string">&quot;上线了&quot;</span>);</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//(1)接收该客户端的发送的消息</span></span><br><span class="line">				<span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">				<span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(input);</span><br><span class="line">				<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader);</span><br><span class="line">				</span><br><span class="line">				String str;</span><br><span class="line">				<span class="keyword">while</span>((str = br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">					<span class="comment">//(2)给其他在线客户端转发</span></span><br><span class="line">					sendToOther(ip+<span class="string">&quot;:&quot;</span>+str);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				sendToOther(ip+<span class="string">&quot;下线了&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					sendToOther(ip+<span class="string">&quot;掉线了&quot;</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">					e1.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">				<span class="comment">//从在线人员中移除我</span></span><br><span class="line">				online.remove(socket);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//封装一个方法：给其他客户端转发xxx消息</span></span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToOther</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">			<span class="comment">//遍历所有的在线客户端，一一转发</span></span><br><span class="line">			<span class="keyword">for</span> (Socket on : online) &#123;</span><br><span class="line">				<span class="type">OutputStream</span> <span class="variable">every</span> <span class="operator">=</span> on.getOutputStream();</span><br><span class="line">				<span class="comment">//为什么用PrintStream？目的用它的println方法，按行打印</span></span><br><span class="line">				<span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(every);</span><br><span class="line">				</span><br><span class="line">				ps.println(message);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestChatClient</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="comment">//1、连接服务器</span></span><br><span class="line">		<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8989</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2、开启两个线程</span></span><br><span class="line">		<span class="comment">//(1)一个线程负责看别人聊，即接收服务器转发的消息</span></span><br><span class="line">		<span class="type">Receive</span> <span class="variable">receive</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Receive</span>(socket);</span><br><span class="line">		receive.start();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//(2)一个线程负责发送自己的话</span></span><br><span class="line">		<span class="type">Send</span> <span class="variable">send</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Send</span>(socket);</span><br><span class="line">		send.start();</span><br><span class="line">		</span><br><span class="line">		send.join();<span class="comment">//等我发送线程结束了，才结束整个程序</span></span><br><span class="line">		</span><br><span class="line">		socket.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Send</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Socket socket;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Send</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.socket = socket;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">			<span class="comment">//按行打印</span></span><br><span class="line">			<span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(outputStream);</span><br><span class="line">			</span><br><span class="line">			<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//从键盘不断的输入自己的话，给服务器发送，由服务器给其他人转发</span></span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">				System.out.print(<span class="string">&quot;自己的话：&quot;</span>);</span><br><span class="line">				<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line">				<span class="keyword">if</span>(<span class="string">&quot;bye&quot;</span>.equals(str))&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				ps.println(str);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			input.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Receive</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Socket socket;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Receive</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>();</span><br><span class="line">		<span class="built_in">this</span>.socket = socket;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">			<span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">while</span>(input.hasNextLine())&#123;</span><br><span class="line">				<span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line">				System.out.println(line);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-理解客户端、服务端"><a href="#2-理解客户端、服务端" class="headerlink" title="2. 理解客户端、服务端"></a>2. 理解客户端、服务端</h4><ul>
<li>客户端： <ul>
<li>自定义</li>
<li>浏览器(browser — server)</li>
</ul>
</li>
<li>服务端： <ul>
<li>自定义</li>
<li>Tomcat服务器</li>
</ul>
</li>
</ul>
<h3 id="4-网络编程-UDP、URL-网络编程"><a href="#4-网络编程-UDP、URL-网络编程" class="headerlink" title="4.网络编程-UDP、URL 网络编程"></a>4.网络编程-UDP、URL 网络编程</h3><h4 id="1-UDP网络编程"><a href="#1-UDP网络编程" class="headerlink" title="1. UDP网络编程"></a>1. UDP网络编程</h4><p>UDP(User Datagram Protocol，用户数据报协议)：是一个无连接的传输层协议、提供面向事务的简单不可靠的信息传送服务，类似于短信。</p>
<h5 id="1-1通信模型"><a href="#1-1通信模型" class="headerlink" title="1.1通信模型"></a>1.1通信模型</h5><p>类 <code>DatagramSocket 和 DatagramPacket</code> 实现了基于 UDP 协议网络程序。<br>UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证  UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</p>
<p><code>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。</code></p>
<p><code>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。</code></p>
<h5 id="1-2-开发步骤"><a href="#1-2-开发步骤" class="headerlink" title="1.2.开发步骤"></a>1.2.开发步骤</h5><p><strong>发送端程序包含以下四个基本的步骤：</strong></p>
<ul>
<li>创建DatagramSocket ：默认使用系统随机分配端口号。</li>
<li>创建DatagramPacket：将要发送的数据用字节数组表示，并指定要发送的数据长度，接收方的IP地址和端口号。</li>
<li>调用  该DatagramSocket 类对象的 send方法 ：发送数据报DatagramPacket对象。</li>
<li>关闭DatagramSocket 对象：发送端程序结束，关闭通信套接字。</li>
</ul>
<p><strong>接收端程序包含以下四个基本的步骤 ：</strong></p>
<ul>
<li>创建DatagramSocket ：指定监听的端口号。</li>
<li>创建DatagramPacket：指定接收数据用的字节数组，起到临时数据缓冲区的效果，并指定最大可以接收的数据长度。</li>
<li>调用  该DatagramSocket 类对象的receive方法 ：接收数据报DatagramPacket对象。。</li>
<li>关闭DatagramSocket ：接收端程序结束，关闭通信套接字。</li>
</ul>
<h5 id="1-3演示发送和接收消息"><a href="#1-3演示发送和接收消息" class="headerlink" title="1.3演示发送和接收消息"></a>1.3演示发送和接收消息</h5><p>基于UDP协议的网络编程仍然需要在通信实例的两端各建立一个Socket，但这两个Socket之间并没有虚拟链路，这两个Socket只是发送、接收数据报的对象，Java提供了DatagramSocket对象作为基于UDP协议的Socket，使用DatagramPacket代表DatagramSocket发送、接收的数据报。</p>
<p>举例1：</p>
<p>发送端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ds = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">    <span class="type">byte</span>[] by = <span class="string">&quot;hello,this0.com&quot;</span>.getBytes();</span><br><span class="line">    <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(by, <span class="number">0</span>, by.length,     InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">10000</span>);</span><br><span class="line">    ds.send(dp);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ds != <span class="literal">null</span>)</span><br><span class="line">        ds.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接收端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ds = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10000</span>);</span><br><span class="line">    <span class="type">byte</span>[] by = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">64</span>];</span><br><span class="line">    <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(by, by.length);</span><br><span class="line">    ds.receive(dp);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(), <span class="number">0</span>, dp.getLength());</span><br><span class="line">    System.out.println(str + <span class="string">&quot;--&quot;</span> + dp.getAddress());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ds != <span class="literal">null</span>)</span><br><span class="line">        ds.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例2：</p>
<p><strong>发送端：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//		1、建立发送端的DatagramSocket</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要发送的数据</span></span><br><span class="line">        ArrayList&lt;String&gt; all = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        all.add(<span class="string">&quot;让天下没有难学的技术！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收方的IP地址</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">ip</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="comment">//接收方的监听端口号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line">        <span class="comment">//发送多个数据报</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; all.size(); i++) &#123;</span><br><span class="line"><span class="comment">//			2、建立数据包DatagramPacket</span></span><br><span class="line">            <span class="type">byte</span>[] data = all.get(i).getBytes();</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, <span class="number">0</span>, data.length, ip, port);</span><br><span class="line"><span class="comment">//			3、调用Socket的发送方法</span></span><br><span class="line">            ds.send(dp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//		4、关闭Socket</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>接收端：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receive</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//		1、建立接收端的DatagramSocket，需要指定本端的监听端口号</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一直监听数据</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//2、建立数据包DatagramPacket</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>*<span class="number">64</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer,buffer.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、调用Socket的接收方法</span></span><br><span class="line">            ds.receive(dp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4、拆封数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(),<span class="number">0</span>,dp.getLength());</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        ds.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-URL编程"><a href="#2-URL编程" class="headerlink" title="2. URL编程"></a>2. URL编程</h4><h5 id="2-1-URL类"><a href="#2-1-URL类" class="headerlink" title="2.1 URL类"></a>2.1 URL类</h5><ul>
<li>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上某一资源的地址。</li>
<li>通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp 站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。</li>
<li>URL的基本结构由5部分组成：</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">&lt;传输协议&gt;://&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名&gt;#片段名?参数列表</span><br></pre></td></tr></table></figure>

<ul>
<li>例如: <a href="http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&password=123">http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&password=123</a> <ul>
<li>片段名：即锚点，例如看小说，直接定位到章节</li>
<li>参数列表格式：参数名&#x3D;参数值&amp;参数名&#x3D;参数值….</li>
</ul>
</li>
<li>为了表示URL，java.net 中实现了类 URL。我们可以通过下面的构造器来初始化一个 URL 对象： <ul>
<li>public URL (String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。例如：</li>
</ul>
</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">URL url = new URL(&quot;http://www. atguigu.com/&quot;);</span><br></pre></td></tr></table></figure>


<ul>
<li>public URL(URL context, String spec)：通过基 URL 和相对 URL 构造一个 URL 对象。例如：</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">URL downloadUrl = new URL(url, “download.html&quot;)</span><br></pre></td></tr></table></figure>

<p>public URL(String protocol, String host, String file); 例如：  </p>
<ul>
<li>public URL(String protocol, String host, int port, String file); 例如:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URL</span> <span class="variable">gamelan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http&quot;</span>, <span class="string">&quot;www.this0.com&quot;</span>, <span class="number">80</span>, “download.html<span class="string">&quot;);</span></span><br></pre></td></tr></table></figure>


<ul>
<li>URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。</li>
</ul>
<h5 id="2-2-URL类常用方法"><a href="#2-2-URL类常用方法" class="headerlink" title="2.2 URL类常用方法"></a>2.2 URL类常用方法</h5><p>一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性：</p>
<ul>
<li>public String getProtocol( )   获取该URL的协议名</li>
<li>public String getHost( )      获取该URL的主机名</li>
<li>public String getPort( )      获取该URL的端口号</li>
<li>public String getPath( )      获取该URL的文件路径</li>
<li>public String getFile( )       获取该URL的文件名</li>
<li>public String getQuery(  )    获取该URL的查询名</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8080/examples/myTest.txt&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;getProtocol() :&quot;</span>+url.getProtocol());</span><br><span class="line">System.out.println(<span class="string">&quot;getHost() :&quot;</span>+url.getHost());</span><br><span class="line">System.out.println(<span class="string">&quot;getPort() :&quot;</span>+url.getPort());</span><br><span class="line">System.out.println(<span class="string">&quot;getPath() :&quot;</span>+url.getPath());</span><br><span class="line">System.out.println(<span class="string">&quot;getFile() :&quot;</span>+url.getFile());</span><br><span class="line">System.out.println(<span class="string">&quot;getQuery() :&quot;</span>+url.getQuery());</span><br></pre></td></tr></table></figure>

<h5 id="2-3-针对HTTP协议的URLConnection类"><a href="#2-3-针对HTTP协议的URLConnection类" class="headerlink" title="2.3 针对HTTP协议的URLConnection类"></a><code>2.3 针对HTTP协议的URLConnection类</code></h5><ul>
<li>URL的方法 openStream()：能从网络上读取数据</li>
<li>若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用 URLConnection 。</li>
<li>URLConnection：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection 对象。如果连接过程失败，将产生IOException. <ul>
<li>URL netchinaren &#x3D; new URL (“<a href="http://www.atguigu.com/index.shtml">http://www.atguigu.com/index.shtml</a>“);</li>
<li>URLConnectonn u &#x3D; netchinaren.openConnection( );</li>
</ul>
</li>
<li>通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI程序进行交互。 <ul>
<li>public Object getContent( ) throws IOException</li>
<li>public int getContentLength( )</li>
<li>public String getContentType( )</li>
<li>public long getDate( )</li>
<li>public long getLastModified( )</li>
<li><strong>public InputStream getInputStream ( ) throws IOException</strong></li>
<li>public OutputSteram getOutputStream( )throws IOException</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8-17新特性</title>
    <url>/articles/35d22ea2.html</url>
    <content><![CDATA[<h3 id="1-JDK8-21-Java版本迭代概述"><a href="#1-JDK8-21-Java版本迭代概述" class="headerlink" title="1.JDK8-21 Java版本迭代概述"></a>1.JDK8-21 Java版本迭代概述</h3><h4 id="1-名词解释"><a href="#1-名词解释" class="headerlink" title="1.名词解释"></a>1.名词解释</h4><h5 id="名词解释：JEP"><a href="#名词解释：JEP" class="headerlink" title="名词解释：JEP"></a>名词解释：JEP</h5><p>JEP(JDK Enhancement Proposals)：jdk 改进提案，每当需要有新的设想时候，JEP可以提出非正式的规范(specification)，被正式认可的JEP正式写进JDK的发展路线图并分配版本号。</p>
<h5 id="名词解释：LTS"><a href="#名词解释：LTS" class="headerlink" title="名词解释：LTS"></a>名词解释：LTS</h5><p>LTS（Long-term Support）即长期支持。Oracle官网提供了对Oracle JDK个别版本的长期支持，即使发发行了新版本，比如目前最新的JDK19，在结束日期前，LTS版本都会被长期支持。（出了bug，会被修复，非LTS则不会再有补丁发布）所以，一定要选一个LTS版本，不然出了漏洞没人修复了。</p>
<h4 id="2-各版本支持时间路线图"><a href="#2-各版本支持时间路线图" class="headerlink" title="2.各版本支持时间路线图"></a>2.各版本支持时间路线图</h4><table>
<thead>
<tr>
<th><strong>版本</strong></th>
<th><strong>开始日期</strong></th>
<th><strong>结束日期</strong></th>
<th><strong>延期结束日期</strong></th>
</tr>
</thead>
<tbody><tr>
<td>7（LTS）</td>
<td>2011年7月</td>
<td>2019年7月</td>
<td>2022年7月</td>
</tr>
<tr>
<td>8（LTS）</td>
<td>2014年3月</td>
<td>2022年3月</td>
<td>2030年12月</td>
</tr>
<tr>
<td>11（LTS）</td>
<td>2018年9月</td>
<td>2023年9月</td>
<td>2026年9月</td>
</tr>
<tr>
<td>17（LTS）</td>
<td>2021年9月</td>
<td>2026年9月</td>
<td>2029年9月</td>
</tr>
<tr>
<td>21（LTS）</td>
<td>2023年9月</td>
<td>2028年9月</td>
<td>2031年9月</td>
</tr>
</tbody></table>
<p>如果要选择Oracle JDK，目前可选的LTS版本为8、11、17三个。</p>
<h4 id="3-各版本介绍"><a href="#3-各版本介绍" class="headerlink" title="3.各版本介绍"></a>3.各版本介绍</h4><h6 id="jdk-9"><a href="#jdk-9" class="headerlink" title="jdk 9"></a>jdk 9</h6><p>Java 9 提供了超过150项新功能特性，包括备受期待的模块化系统、可交互的 REPL 工具：jshell，JDK 编译工具，Java 公共 API 和私有代码，以及安全增强、扩展提升、性能管理改善等。<br>特性太多，查看链接：<br><a href="https://openjdk.java.net/projects/jdk9/">https://openjdk.java.net/projects/jdk9/</a></p>
<h6 id="jdk-10"><a href="#jdk-10" class="headerlink" title="jdk 10"></a>jdk 10</h6><p><a href="https://openjdk.java.net/projects/jdk/10/">https://openjdk.java.net/projects/jdk/10/</a><br>286: <a href="http://openjdk.java.net/jeps/286">Local-Variable Type Inference</a> 局部变量类型推断296: <a href="http://openjdk.java.net/jeps/296">Consolidate the JDK Forest into a Single Repository</a> JDK库的合并304: <a href="http://openjdk.java.net/jeps/304">Garbage-Collector Interface</a> 统一的垃圾回收接口307: <a href="http://openjdk.java.net/jeps/307">Parallel Full GC for G1</a> 为G1提供并行的Full GC310: <a href="http://openjdk.java.net/jeps/310">Application Class-Data Sharing</a> 应用程序类数据（AppCDS）共享312: <a href="http://openjdk.java.net/jeps/312">Thread-Local Handshakes</a> ThreadLocal握手交互313: <a href="http://openjdk.java.net/jeps/313">Remove the Native-Header Generation Tool (javah)</a> 移除JDK中附带的javah工具314: <a href="http://openjdk.java.net/jeps/314">Additional Unicode Language-Tag Extensions</a> 使用附加的Unicode语言标记扩展316: <a href="http://openjdk.java.net/jeps/316">Heap Allocation on Alternative Memory Devices</a> 能将堆内存占用分配给用户指定的备用内存设备317: <a href="http://openjdk.java.net/jeps/317">Experimental Java-Based JIT Compiler</a> 使用Graal基于Java的编译器<br>319: <a href="http://openjdk.java.net/jeps/319">Root Certificates</a> 根证书322: <a href="http://openjdk.java.net/jeps/322">Time-Based Release Versioning</a> 基于时间定于的发布版本</p>
<h6 id="jdk-11"><a href="#jdk-11" class="headerlink" title="jdk 11"></a>jdk 11</h6><p><a href="https://openjdk.java.net/projects/jdk/11/">https://openjdk.java.net/projects/jdk/11/</a><br>181: <a href="https://openjdk.java.net/jeps/181">Nest-Based Access Control</a> 基于嵌套的访问控制309: <a href="https://openjdk.java.net/jeps/309">Dynamic Class-File Constants</a> 动态类文件常量315: <a href="https://openjdk.java.net/jeps/315">Improve Aarch64 Intrinsics</a> 改进 Aarch64 Intrinsics318: <a href="https://openjdk.java.net/jeps/318">Epsilon: A No-Op Garbage Collector</a> Epsilon — 一个No-Op（无操作）的垃圾收集器320: <a href="https://openjdk.java.net/jeps/320">Remove the Java EE and CORBA Modules</a> 删除 Java EE 和 CORBA 模块321: <a href="https://openjdk.java.net/jeps/321">HTTP Client (Standard)</a> HTTPClient API323: <a href="https://openjdk.java.net/jeps/323">Local-Variable Syntax for Lambda Parameters</a> 用于 Lambda 参数的局部变量语法324: <a href="https://openjdk.java.net/jeps/324">Key Agreement with Curve25519 and Curve448</a> Curve25519 和 Curve448 算法的密钥协议327: <a href="https://openjdk.java.net/jeps/327">Unicode 10</a>328: <a href="https://openjdk.java.net/jeps/328">Flight Recorder</a> 飞行记录仪329: <a href="https://openjdk.java.net/jeps/329">ChaCha20 and Poly1305 Cryptographic Algorithms</a> ChaCha20 和 Poly1305 加密算法330: <a href="https://openjdk.java.net/jeps/330">Launch Single-File Source-Code Programs</a> 启动单一文件的源代码程序331: <a href="https://openjdk.java.net/jeps/331">Low-Overhead Heap Profiling</a> 低开销的 Heap Profiling332: <a href="https://openjdk.java.net/jeps/332">Transport Layer Security (TLS) 1.3</a> 支持 TLS 1.3333: <a href="https://openjdk.java.net/jeps/333">ZGC: A Scalable Low-Latency Garbage Collector(Experimental)</a> 可伸缩低延迟垃圾收集器335: <a href="https://openjdk.java.net/jeps/335">Deprecate the Nashorn JavaScript Engine</a> 弃用 Nashorn JavaScript 引擎336: <a href="https://openjdk.java.net/jeps/336">Deprecate the Pack200 Tools and API</a> 弃用 Pack200 工具和 API</p>
<h6 id="jdk-12"><a href="#jdk-12" class="headerlink" title="jdk 12"></a>jdk 12</h6><p><a href="https://openjdk.java.net/projects/jdk/12/">https://openjdk.java.net/projects/jdk/12/</a><br>189：<a href="https://openjdk.java.net/jeps/189">Shenandoah: A Low-Pause-Time Garbage Collector (Experimental)</a> 低暂停时间的GC230: <a href="https://openjdk.java.net/jeps/230">Microbenchmark Suite</a> 微基准测试套件325: <a href="https://openjdk.java.net/jeps/325">Switch Expressions (Preview)</a> switch表达式334: <a href="https://openjdk.java.net/jeps/334">JVM Constants API</a> JVM常量API340: <a href="https://openjdk.java.net/jeps/340">One AArch64 Port, Not Two</a> 只保留一个AArch64实现341: <a href="https://openjdk.java.net/jeps/341">Default CDS Archives</a> 默认类数据共享归档文件344: <a href="https://openjdk.java.net/jeps/344">Abortable Mixed Collections for G1</a> 可中止的G1 Mixed GC346: <a href="https://openjdk.java.net/jeps/346">Promptly Return Unused Committed Memory from G1</a> G1及时返回未使用的已分配内存</p>
<h6 id="jdk-13"><a href="#jdk-13" class="headerlink" title="jdk 13"></a>jdk 13</h6><p><a href="https://openjdk.java.net/projects/jdk/13/">https://openjdk.java.net/projects/jdk/13/</a><br>350: <a href="https://openjdk.java.net/jeps/350">Dynamic CDS Archives</a> 动态CDS档案351: <a href="https://openjdk.java.net/jeps/351">ZGC: Uncommit Unused Memory</a> ZGC:取消使用未使用的内存353: <a href="https://openjdk.java.net/jeps/353">Reimplement the Legacy Socket API</a> 重新实现旧版套接字API354: <a href="https://openjdk.java.net/jeps/354">Switch Expressions (Preview)</a> switch表达式（预览）355: <a href="https://openjdk.java.net/jeps/355">Text Blocks (Preview)</a> 文本块（预览）</p>
<h6 id="jdk-14"><a href="#jdk-14" class="headerlink" title="jdk 14"></a>jdk 14</h6><p><a href="https://openjdk.java.net/projects/jdk/14/">https://openjdk.java.net/projects/jdk/14/</a><br>305: <a href="https://openjdk.java.net/jeps/305">Pattern Matching for instanceof (Preview)</a> instanceof的模式匹配343: <a href="https://openjdk.java.net/jeps/343">Packaging Tool (Incubator)</a> 打包工具345: <a href="https://openjdk.java.net/jeps/345">NUMA-Aware Memory Allocation for G1</a> G1的NUMA-Aware内存分配349: <a href="https://openjdk.java.net/jeps/349">JFR Event Streaming</a> JFR事件流352: <a href="https://openjdk.java.net/jeps/352">Non-Volatile Mapped Byte Buffers</a> 非易失性映射字节缓冲区358: <a href="https://openjdk.java.net/jeps/358">Helpful NullPointerExceptions</a> 实用的NullPointerExceptions359: <a href="https://openjdk.java.net/jeps/359">Records (Preview)</a>361: <a href="https://openjdk.java.net/jeps/361">Switch Expressions (Standard)</a> Switch表达式362: <a href="https://openjdk.java.net/jeps/362">Deprecate the Solaris and SPARC Ports</a> 弃用Solaris和SPARC端口363: <a href="https://openjdk.java.net/jeps/363">Remove the Concurrent Mark Sweep (CMS) Garbage Collector</a> 删除并发标记扫描（CMS）垃圾回收器364: <a href="https://openjdk.java.net/jeps/364">ZGC on macOS</a>365: <a href="https://openjdk.java.net/jeps/365">ZGC on Windows</a>366: <a href="https://openjdk.java.net/jeps/366">Deprecate the ParallelScavenge + SerialOld GC Combination</a> 弃用ParallelScavenge + SerialOld GC组合367: <a href="https://openjdk.java.net/jeps/367">Remove the Pack200 Tools and API</a> 删除Pack200工具和API368: <a href="https://openjdk.java.net/jeps/368">Text Blocks (Second Preview)</a> 文本块370: <a href="https://openjdk.java.net/jeps/370">Foreign-Memory Access API (Incubator)</a> 外部存储器访问API</p>
<h6 id="jdk-15"><a href="#jdk-15" class="headerlink" title="jdk 15"></a>jdk 15</h6><p><a href="https://openjdk.java.net/projects/jdk/15/">https://openjdk.java.net/projects/jdk/15/</a><br>339: <a href="https://openjdk.java.net/jeps/339">Edwards-Curve Digital Signature Algorithm (EdDSA)</a> EdDSA 数字签名算法360: <a href="https://openjdk.java.net/jeps/360">Sealed Classes (Preview)</a> 密封类（预览）371: <a href="https://openjdk.java.net/jeps/371">Hidden Classes</a> 隐藏类372: <a href="https://openjdk.java.net/jeps/372">Remove the Nashorn JavaScript Engine</a> 移除 Nashorn JavaScript 引擎373: <a href="https://openjdk.java.net/jeps/373">Reimplement the Legacy DatagramSocket API</a> 重新实现 Legacy DatagramSocket API374: <a href="https://openjdk.java.net/jeps/374">Disable and Deprecate Biased Locking</a> 禁用偏向锁定375: <a href="https://openjdk.java.net/jeps/375">Pattern Matching for instanceof (Second Preview)</a> instanceof 模式匹配（第二次预览）377: <a href="https://openjdk.java.net/jeps/377">ZGC: A Scalable Low-Latency Garbage Collector</a> ZGC：一个可扩展的低延迟垃圾收集器378: <a href="https://openjdk.java.net/jeps/378">Text Blocks</a> 文本块379: <a href="https://openjdk.java.net/jeps/379">Shenandoah: A Low-Pause-Time Garbage Collector</a> Shenandoah:低暂停时间垃圾收集器381: <a href="https://openjdk.java.net/jeps/381">Remove the Solaris and SPARC Ports</a> 移除 Solaris 和 SPARC 端口383: <a href="https://openjdk.java.net/jeps/383">Foreign-Memory Access API (Second Incubator)</a> 外部存储器访问 API（第二次孵化版）384: <a href="https://openjdk.java.net/jeps/384">Records (Second Preview)</a> Records（第二次预览）385: <a href="https://openjdk.java.net/jeps/385">Deprecate RMI Activation for Removal</a> 废弃 RMI 激活机制</p>
<h6 id="jdk-16"><a href="#jdk-16" class="headerlink" title="jdk 16"></a>jdk 16</h6><p><a href="https://openjdk.java.net/projects/jdk/16/">https://openjdk.java.net/projects/jdk/16/</a><br>338: <a href="https://openjdk.java.net/jeps/338">Vector API (Incubator)</a> Vector API（孵化器）347: <a href="https://openjdk.java.net/jeps/347">Enable C++14 Language Features</a> JDK C++的源码中允许使用C++14的语言特性357: <a href="https://openjdk.java.net/jeps/357">Migrate from Mercurial to Git</a> OpenJDK源码的版本控制从Mercurial (hg) 迁移到git369: <a href="https://openjdk.java.net/jeps/369">Migrate to GitHub</a> OpenJDK源码的版本控制迁移到github上376: <a href="https://openjdk.java.net/jeps/376">ZGC: Concurrent Thread-Stack Processing</a> ZGC：并发线程处理380: <a href="https://openjdk.java.net/jeps/380">Unix-Domain Socket Channels</a> Unix域套接字通道386: <a href="https://openjdk.java.net/jeps/386">Alpine Linux Port</a> 将glibc的jdk移植到使用musl的alpine linux上387: <a href="https://openjdk.java.net/jeps/387">Elastic Metaspace</a> 弹性元空间388: <a href="https://openjdk.java.net/jeps/388">Windows&#x2F;AArch64 Port</a> 移植JDK到Windows&#x2F;AArch64389: <a href="https://openjdk.java.net/jeps/389">Foreign Linker API (Incubator)</a> 提供jdk.incubator.foreign来简化native code的调用390: <a href="https://openjdk.java.net/jeps/390">Warnings for Value-Based Classes</a> 提供基于值的类的警告392: <a href="https://openjdk.java.net/jeps/392">Packaging Tool</a> jpackage打包工具转正393: <a href="https://openjdk.java.net/jeps/393">Foreign-Memory Access API (Third Incubator)</a>394: <a href="https://openjdk.java.net/jeps/394">Pattern Matching for instanceof</a> Instanceof的模式匹配转正395: <a href="https://openjdk.java.net/jeps/395">Records</a> Records转正396: <a href="https://openjdk.java.net/jeps/396">Strongly Encapsulate JDK Internals by Default</a> 默认情况下，封装了JDK内部构件397: <a href="https://openjdk.java.net/jeps/397">Sealed Classes (Second Preview)</a> 密封类</p>
<h6 id="jdk-17"><a href="#jdk-17" class="headerlink" title="jdk 17"></a>jdk 17</h6><p><a href="https://openjdk.java.net/projects/jdk/17/">https://openjdk.java.net/projects/jdk/17/</a><br>306: <a href="https://openjdk.java.net/jeps/306">Restore Always-Strict Floating-Point Semantics</a> 恢复始终严格的浮点语义<br>356: <a href="https://openjdk.java.net/jeps/356">Enhanced Pseudo-Random Number Generators</a> 增强型伪随机数生成器<br>382: <a href="https://openjdk.java.net/jeps/382">New macOS Rendering Pipeline</a> 新的macOS渲染管道<br>391: <a href="https://openjdk.java.net/jeps/391">macOS&#x2F;AArch64 Port</a> macOS&#x2F;AArch64端口<br>398: <a href="https://openjdk.java.net/jeps/398">Deprecate the Applet API for Removal</a> 弃用Applet API后续将进行删除<br>403: <a href="https://openjdk.java.net/jeps/403">Strongly Encapsulate JDK Internals</a> 强封装JDK的内部API<br>406: <a href="https://openjdk.java.net/jeps/406">Pattern Matching for switch (Preview)</a> switch模式匹配（预览）<br>407: <a href="https://openjdk.java.net/jeps/407">Remove RMI Activation</a> 删除RMI激活机制<br>409: <a href="https://openjdk.java.net/jeps/409">Sealed Classes</a> 密封类转正<br>410: <a href="https://openjdk.java.net/jeps/410">Remove the Experimental AOT and JIT Compiler</a> 删除实验性的AOT和JIT编译器<br>411: <a href="https://openjdk.java.net/jeps/411">Deprecate the Security Manager for Removal</a> 弃用即将删除的安全管理器<br>412: <a href="https://openjdk.java.net/jeps/412">Foreign Function &amp; Memory API (Incubator)</a> 外部函数和内存API（孵化特性）<br>414: <a href="https://openjdk.java.net/jeps/414">Vector API (Second Incubator)</a> Vector API（第二次孵化特性）<br>415: <a href="https://openjdk.java.net/jeps/415">Context-Specific Deserialization Filters</a> 上下文特定的反序列化过滤器</p>
<h5 id="1-JDK各版本下载链接"><a href="#1-JDK各版本下载链接" class="headerlink" title="1 JDK各版本下载链接"></a>1 JDK各版本下载链接</h5><p><a href="https://www.oracle.com/java/technologies/downloads/archive/">https://www.oracle.com/java/technologies/downloads/archive/</a></p>
<h5 id="2-如何学习新特性"><a href="#2-如何学习新特性" class="headerlink" title="2 如何学习新特性"></a>2 如何学习新特性</h5><p>对于新特性，我们应该从哪几个角度学习新特性呢？</p>
<ul>
<li>语法层面：<ul>
<li>比如JDK5中的自动拆箱、自动装箱、enum、泛型</li>
<li>比如<code>JDK8中的lambda表达式</code>、接口中的默认方法、静态方法</li>
<li>比如JDK10中局部变量的类型推断</li>
<li>比如JDK12中的switch</li>
<li>比如JDK13中的文本块</li>
</ul>
</li>
<li>API层面：<ul>
<li>比如JDK8中的Stream、Optional、新的日期时间、HashMap的底层结构</li>
<li>比如JDK9中String的底层结构</li>
<li>新的 &#x2F; 过时的 API</li>
</ul>
</li>
<li>底层优化<ul>
<li>比如JDK8中<code>永久代被元空间</code>替代、新的JS执行引擎</li>
<li>比如新的垃圾回收器、GC参数、JVM的优化</li>
</ul>
</li>
</ul>
<h3 id="2-lambda-表达式的使用与函数式接口的理解"><a href="#2-lambda-表达式的使用与函数式接口的理解" class="headerlink" title="2.lambda 表达式的使用与函数式接口的理解"></a><code>2.lambda 表达式的使用与函数式接口的理解</code></h3><h4 id="1-Java8新特性：Lambda表达式"><a href="#1-Java8新特性：Lambda表达式" class="headerlink" title="1. Java8新特性：Lambda表达式"></a>1. Java8新特性：Lambda表达式</h4><h5 id="1-1-关于Java8新特性简介"><a href="#1-1-关于Java8新特性简介" class="headerlink" title="1.1 关于Java8新特性简介"></a>1.1 关于Java8新特性简介</h5><p>Java 8 (又称为 JDK 8或JDK1.8) 是 Java 语言开发的一个主要版本。 Java 8 是oracle公司于2014年3月发布，可以看成是自Java 5 以来最具革命性的版本。Java 8为Java语言、编译器、类库、开发工具与JVM带来了大量新特性。</p>
<ul>
<li>速度更快</li>
<li>代码更少(增加了新的语法：<code>Lambda表达式</code></li>
<li>强大的 <code>Stream API</code></li>
<li>便于并行<ul>
<li><strong>并行流</strong>就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流。相比较串行的流，并行的流可以很大程度上提高程序的执行效率。</li>
<li>Java 8 中将并行进行了优化，我们可以很容易的对数据进行并行操作。Stream API 可以声明性地通过 parallel() 与 sequential() 在并行流与顺序流之间进行切换。</li>
</ul>
</li>
<li>最大化减少空指针异常：Optional</li>
<li>Nashorn引擎，允许在JVM上运行JS应用<ul>
<li>发音“nass-horn”，是德国二战时一个坦克的命名</li>
<li>javascript运行在jvm已经不是新鲜事了，Rhino早在jdk6的时候已经存在。现在替代Rhino，官方的解释是Rhino相比其他JavaScript引擎（比如google的V8）实在太慢了，改造Rhino还不如重写。所以Nashorn的性能也是其一个亮点。</li>
<li>Nashorn 项目在 JDK 9 中得到改进；在JDK11 中Deprecated，后续JDK15版本中remove。在JDK11中取以代之的是GraalVM。（GraalVM是一个运行时平台，它支持Java和其他基于Java字节码的语言，但也支持其他语言，如JavaScript，Ruby，Python或LLVM。性能是Nashorn的2倍以上。）</li>
</ul>
</li>
</ul>
<h5 id="1-2-冗余的匿名内部类"><a href="#1-2-冗余的匿名内部类" class="headerlink" title="1.2 冗余的匿名内部类"></a>1.2 冗余的匿名内部类</h5><p>当需要启动一个线程去完成任务时，通常会通过java.lang.Runnable接口来定义任务内容，并使用java.lang.Thread类来启动该线程。代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package com.<span class="property">this0</span>.<span class="property">fp</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UseFunctionalProgramming</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;多线程任务执行！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">start</span>(); <span class="comment">// 启动线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本着“一切皆对象”的思想，这种做法是无可厚非的：首先创建一个Runnable接口的匿名内部类对象来指定任务内容，再将其交给一个线程来启动。<br><strong>代码分析：</strong><br>对于Runnable的匿名内部类用法，可以分析出几点内容：</p>
<ul>
<li>Thread类需要Runnable接口作为参数，其中的抽象run方法是用来指定线程任务内容的核心；</li>
<li>为了指定run的方法体，<strong>不得不</strong>需要Runnable接口的实现类；</li>
<li>为了省去定义一个RunnableImpl实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</li>
<li>必须覆盖重写抽象run方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；</li>
<li>而实际上，<strong>似乎只有方法体才是关键所在</strong>。</li>
</ul>
<h5 id="1-3-好用的lambda表达式"><a href="#1-3-好用的lambda表达式" class="headerlink" title="1.3 好用的lambda表达式"></a>1.3 好用的lambda表达式</h5><p>用lambda表达式就写成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;多线程任务执行！&quot;</span>)).start(); <span class="comment">// 启动线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-4-Lambda简述"><a href="#1-4-Lambda简述" class="headerlink" title="1.4 Lambda简述"></a>1.4 Lambda简述</h5><p>Lambda 是一个<strong>匿名函数</strong>，我们可以把 Lambda 表达式理解为是<strong>一段可以传递的代码</strong>（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p>
<h5 id="1-5-语法"><a href="#1-5-语法" class="headerlink" title="1.5 语法"></a>1.5 语法</h5><p>Lambda 表达式：在Java 8 语言中引入的一种新的语法元素和操作符。这个操作符为 “-&gt;” ， 该操作符被称为 Lambda 操作符或箭头操作符。它将 Lambda 分为两个部分：</p>
<ul>
<li>左侧：指定了 Lambda 表达式需要的参数列表</li>
<li>右侧：指定了 Lambda 体，是抽象方法的实现逻辑，也即 Lambda 表达式要执行的功能。</li>
</ul>
<p><strong>语法格式一：</strong>无参，无返回值</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span>()</span>&#123;</span><br><span class="line">    <span class="comment">//未使用Lambda表达式</span></span><br><span class="line">    Runnable r1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;我爱北京天安门&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    r1.run();</span><br><span class="line"></span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">&quot;***********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Lambda表达式</span></span><br><span class="line">    Runnable r2 = () -&gt; &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;我爱北京故宫&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    r2.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>语法格式二：</strong>Lambda 需要一个参数，但是没有返回值。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//未使用Lambda表达式</span></span><br><span class="line">    <span class="title class_">Consumer</span>&lt;<span class="title class_">String</span>&gt; con = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;<span class="title class_">String</span>&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">accept</span>(<span class="params"><span class="built_in">String</span> s</span>) &#123;</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    con.<span class="title function_">accept</span>(<span class="string">&quot;谎言和誓言的区别是什么？&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Lambda表达式</span></span><br><span class="line">    <span class="title class_">Consumer</span>&lt;<span class="title class_">String</span>&gt; con1 = (<span class="title class_">String</span> s) -&gt; &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.<span class="title function_">accept</span>(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>语法格式三：</strong>数据类型可以省略，因为可由编译器推断得出，称为“类型推断”</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public <span class="keyword">void</span> test3()&#123;</span><br><span class="line">    <span class="regexp">//</span>语法格式三使用前</span><br><span class="line">    Consumer&lt;<span class="built_in">String</span>&gt; con1 = <span class="function"><span class="params">(<span class="built_in">String</span> s)</span> -&gt;</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    <span class="regexp">//</span>语法格式三使用后</span><br><span class="line">    Consumer&lt;<span class="built_in">String</span>&gt; con2 = <span class="function"><span class="params">(s)</span> -&gt;</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con2.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>语法格式四：</strong>Lambda 若只需要一个参数时，参数的小括号可以省略</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span>()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式四使用前</span></span><br><span class="line">    Consumer&lt;String&gt; con1 = (s) -&gt; &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式四使用后</span></span><br><span class="line">    Consumer&lt;String&gt; con2 = s -&gt; &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con2.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>语法格式五：</strong>Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> test5()&#123;</span><br><span class="line">    //语法格式五使用前</span><br><span class="line">    Comparator&lt;<span class="type">Integer</span>&gt; com1 = <span class="built_in">new</span> Comparator&lt;<span class="type">Integer</span>&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="built_in">public</span> <span class="type">int</span> compare(<span class="type">Integer</span> o1, <span class="type">Integer</span> o2) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(o1);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(o2);</span><br><span class="line">            <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(com1.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;*****************************&quot;);</span><br><span class="line">    //语法格式五使用后</span><br><span class="line">    Comparator&lt;<span class="type">Integer</span>&gt; com2 = (o1,o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(o1);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(o2);</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(com2.compare(<span class="number">12</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>语法格式六：</strong><code>当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span>()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式六使用前</span></span><br><span class="line">    Comparator&lt;Integer&gt; com1 = (o1,o2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    System.<span class="keyword">out</span>.println(com1.compare(<span class="number">12</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式六使用后</span></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; o1.compareTo(o2);</span><br><span class="line"></span><br><span class="line">    System.<span class="keyword">out</span>.println(com2.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span>()</span>&#123;</span><br><span class="line">    <span class="comment">//语法格式六使用前</span></span><br><span class="line">    Consumer&lt;String&gt; con1 = s -&gt; &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">&quot;*****************************&quot;</span>);</span><br><span class="line">    <span class="comment">//语法格式六使用后</span></span><br><span class="line">    Consumer&lt;String&gt; con2 = s -&gt; System.<span class="keyword">out</span>.println(s);</span><br><span class="line"></span><br><span class="line">    con2.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-6-关于类型推断"><a href="#1-6-关于类型推断" class="headerlink" title="1.6 关于类型推断"></a>1.6 关于类型推断</h5><p>在语法格式三 Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda 表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”。<br>举例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//类型推断1</span></span><br><span class="line">    <span class="title class_">ArrayList</span>&lt;<span class="title class_">String</span>&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//类型推断2</span></span><br><span class="line">    int[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-Java8新特性：函数式-Functional-接口"><a href="#2-Java8新特性：函数式-Functional-接口" class="headerlink" title="2. Java8新特性：函数式(Functional)接口"></a>2. Java8新特性：函数式(Functional)接口</h4><h5 id="2-1-什么是函数式接口"><a href="#2-1-什么是函数式接口" class="headerlink" title="2.1 什么是函数式接口"></a>2.1 什么是函数式接口</h5><ul>
<li><code>只包含一个抽象方法（Single Abstract Method，简称SAM）的接口，称为函数式接口</code>。当然该接口可以包含其他非抽象方法。</li>
<li>你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。</li>
<li>我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</li>
<li>在java.util.function包下定义了Java 8 的丰富的函数式接口</li>
</ul>
<h5 id="2-2-如何理解函数式接口"><a href="#2-2-如何理解函数式接口" class="headerlink" title="2.2 如何理解函数式接口"></a>2.2 如何理解函数式接口</h5><ul>
<li>Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP)编程是一切。但是随着python、scala等语言的兴起和新技术的挑战，Java不得不做出调整以便支持更加广泛的技术要求，即Java不但可以支持OOP还可以支持OOF（面向函数编程）<ul>
<li>Java8引入了Lambda表达式之后，Java也开始支持函数式编程。</li>
<li>Lambda表达式不是Java最早使用的。目前C++，C#，Python，Scala等均支持Lambda表达式。</li>
</ul>
</li>
<li>面向对象的思想：<ul>
<li>做一件事情，找一个能解决这个事情的对象，调用对象的方法，完成事情。</li>
</ul>
</li>
<li>函数式编程思想：<ul>
<li>只要能获取到结果，谁去做的，怎么做的都不重要，重视的是结果，不重视过程。</li>
</ul>
</li>
<li>在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型——函数式接口。</li>
<li>简单的说，在Java8中，Lambda表达式就是一个函数式接口的实例。这就是Lambda表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口的实例，那么该对象就可以用Lambda表达式来表示。</li>
</ul>
<h5 id="2-3-举例"><a href="#2-3-举例" class="headerlink" title="2.3 举例"></a>2.3 举例</h5><p>举例1：<br>举例2：<br><code>作为参数传递 Lambda 表达式：</code><br>作为参数传递 Lambda 表达式：为了将 Lambda 表达式作为参数传递，接收Lambda 表达式的参数类型必须是与该 Lambda 表达式兼容的函数式接口的类型。</p>
<h5 id="2-4-Java-内置函数式接口"><a href="#2-4-Java-内置函数式接口" class="headerlink" title="2.4 Java 内置函数式接口"></a>2.4 Java 内置函数式接口</h5><h6 id="2-4-1-之前的函数式接口-TODO"><a href="#2-4-1-之前的函数式接口-TODO" class="headerlink" title="2.4.1 之前的函数式接口&#x2F;&#x2F;TODO"></a>2.4.1 之前的函数式接口&#x2F;&#x2F;TODO</h6><p>之前学过的接口，有些就是函数式接口，比如：</p>
<ul>
<li>java.lang.Runnable<ul>
<li>public void run()</li>
</ul>
</li>
<li>java.lang.Iterable<T><ul>
<li>public Iterator<T> iterate()</li>
</ul>
</li>
<li>java.lang.Comparable<T><ul>
<li>public int compareTo(T t)</li>
</ul>
</li>
<li>java.util.Comparator<T><ul>
<li>public int compare(T t1, T t2)</li>
</ul>
</li>
</ul>
<h6 id="2-4-2-四大核心函数式接口-TODO"><a href="#2-4-2-四大核心函数式接口-TODO" class="headerlink" title="2.4.2 四大核心函数式接口&#x2F;&#x2F;TODO"></a>2.4.2 四大核心函数式接口&#x2F;&#x2F;TODO</h6><table>
<thead>
<tr>
<th><strong>函数式接口</strong></th>
<th><strong>称谓</strong></th>
<th><strong>参数类型</strong></th>
<th><strong>用途</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Consumer<T></td>
<td>消费型接口</td>
<td>T</td>
<td>对类型为T的对象应用操作，包含方法： void accept(T t)</td>
</tr>
<tr>
<td>Supplier<T></td>
<td>供给型接口</td>
<td>无</td>
<td>返回类型为T的对象，包含方法：T get()</td>
</tr>
<tr>
<td>Function&lt;T, R&gt;</td>
<td>函数型接口</td>
<td>T</td>
<td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t)</td>
</tr>
<tr>
<td>Predicate<T></td>
<td>判断型接口</td>
<td>T</td>
<td>确定类型为T的对象是否满足某约束，并返回 boolean 值。包含方法：boolean test(T t)</td>
</tr>
</tbody></table>
<h6 id="2-4-3-其它接口"><a href="#2-4-3-其它接口" class="headerlink" title="2.4.3 其它接口"></a>2.4.3 其它接口</h6><p><strong>类型1：消费型接口</strong><br>消费型接口的抽象方法特点：有形参，但是返回值类型是void</p>
<table>
<thead>
<tr>
<th><strong>接口名</strong></th>
<th><strong>抽象方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>BiConsumer&lt;T,U&gt;</td>
<td>void accept(T t, U u)</td>
<td>接收两个对象用于完成功能</td>
</tr>
<tr>
<td>DoubleConsumer</td>
<td>void accept(double value)</td>
<td>接收一个double值</td>
</tr>
<tr>
<td>IntConsumer</td>
<td>void accept(int value)</td>
<td>接收一个int值</td>
</tr>
<tr>
<td>LongConsumer</td>
<td>void accept(long value)</td>
<td>接收一个long值</td>
</tr>
<tr>
<td>ObjDoubleConsumer<T></td>
<td>void accept(T t, double value)</td>
<td>接收一个对象和一个double值</td>
</tr>
<tr>
<td>ObjIntConsumer<T></td>
<td>void accept(T t, int value)</td>
<td>接收一个对象和一个int值</td>
</tr>
<tr>
<td>ObjLongConsumer<T></td>
<td>void accept(T t, long value)</td>
<td>接收一个对象和一个long值</td>
</tr>
</tbody></table>
<p><strong>类型2：供给型接口</strong><br>这类接口的抽象方法特点：无参，但是有返回值</p>
<table>
<thead>
<tr>
<th><strong>接口名</strong></th>
<th><strong>抽象方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>BooleanSupplier</td>
<td>boolean getAsBoolean()</td>
<td>返回一个boolean值</td>
</tr>
<tr>
<td>DoubleSupplier</td>
<td>double getAsDouble()</td>
<td>返回一个double值</td>
</tr>
<tr>
<td>IntSupplier</td>
<td>int getAsInt()</td>
<td>返回一个int值</td>
</tr>
<tr>
<td>LongSupplier</td>
<td>long getAsLong()</td>
<td>返回一个long值</td>
</tr>
</tbody></table>
<p><strong>类型3：函数型接口</strong><br>这类接口的抽象方法特点：既有参数又有返回值</p>
<table>
<thead>
<tr>
<th><strong>接口名</strong></th>
<th><strong>抽象方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>UnaryOperator<T></td>
<td>T apply(T t)</td>
<td>接收一个T类型对象，返回一个T类型对象结果</td>
</tr>
<tr>
<td>DoubleFunction<R></td>
<td>R apply(double value)</td>
<td>接收一个double值，返回一个R类型对象</td>
</tr>
<tr>
<td>IntFunction<R></td>
<td>R apply(int value)</td>
<td>接收一个int值，返回一个R类型对象</td>
</tr>
<tr>
<td>LongFunction<R></td>
<td>R apply(long value)</td>
<td>接收一个long值，返回一个R类型对象</td>
</tr>
<tr>
<td>ToDoubleFunction<T></td>
<td>double applyAsDouble(T value)</td>
<td>接收一个T类型对象，返回一个double</td>
</tr>
<tr>
<td>ToIntFunction<T></td>
<td>int applyAsInt(T value)</td>
<td>接收一个T类型对象，返回一个int</td>
</tr>
<tr>
<td>ToLongFunction<T></td>
<td>long applyAsLong(T value)</td>
<td>接收一个T类型对象，返回一个long</td>
</tr>
<tr>
<td>DoubleToIntFunction</td>
<td>int applyAsInt(double value)</td>
<td>接收一个double值，返回一个int结果</td>
</tr>
<tr>
<td>DoubleToLongFunction</td>
<td>long applyAsLong(double value)</td>
<td>接收一个double值，返回一个long结果</td>
</tr>
<tr>
<td>IntToDoubleFunction</td>
<td>double applyAsDouble(int value)</td>
<td>接收一个int值，返回一个double结果</td>
</tr>
<tr>
<td>IntToLongFunction</td>
<td>long applyAsLong(int value)</td>
<td>接收一个int值，返回一个long结果</td>
</tr>
<tr>
<td>LongToDoubleFunction</td>
<td>double applyAsDouble(long value)</td>
<td>接收一个long值，返回一个double结果</td>
</tr>
<tr>
<td>LongToIntFunction</td>
<td>int applyAsInt(long value)</td>
<td>接收一个long值，返回一个int结果</td>
</tr>
<tr>
<td>DoubleUnaryOperator</td>
<td>double applyAsDouble(double operand)</td>
<td>接收一个double值，返回一个double</td>
</tr>
<tr>
<td>IntUnaryOperator</td>
<td>int applyAsInt(int operand)</td>
<td>接收一个int值，返回一个int结果</td>
</tr>
<tr>
<td>LongUnaryOperator</td>
<td>long applyAsLong(long operand)</td>
<td>接收一个long值，返回一个long结果</td>
</tr>
<tr>
<td>BiFunction&lt;T,U,R&gt;</td>
<td>R apply(T t, U u)</td>
<td>接收一个T类型和一个U类型对象，返回一个R类型对象结果</td>
</tr>
<tr>
<td>BinaryOperator<T></td>
<td>T apply(T t, T u)</td>
<td>接收两个T类型对象，返回一个T类型对象结果</td>
</tr>
<tr>
<td>ToDoubleBiFunction&lt;T,U&gt;</td>
<td>double applyAsDouble(T t, U u)</td>
<td>接收一个T类型和一个U类型对象，返回一个double</td>
</tr>
<tr>
<td>ToIntBiFunction&lt;T,U&gt;</td>
<td>int applyAsInt(T t, U u)</td>
<td>接收一个T类型和一个U类型对象，返回一个int</td>
</tr>
<tr>
<td>ToLongBiFunction&lt;T,U&gt;</td>
<td>long applyAsLong(T t, U u)</td>
<td>接收一个T类型和一个U类型对象，返回一个long</td>
</tr>
<tr>
<td>DoubleBinaryOperator</td>
<td>double applyAsDouble(double left, double right)</td>
<td>接收两个double值，返回一个double结果</td>
</tr>
<tr>
<td>IntBinaryOperator</td>
<td>int applyAsInt(int left, int right)</td>
<td>接收两个int值，返回一个int结果</td>
</tr>
<tr>
<td>LongBinaryOperator</td>
<td>long applyAsLong(long left, long right)</td>
<td>接收两个long值，返回一个long结果</td>
</tr>
</tbody></table>
<p><strong>类型4：判断型接口</strong><br>这类接口的抽象方法特点：有参，但是返回值类型是boolean结果。</p>
<table>
<thead>
<tr>
<th><strong>接口名</strong></th>
<th><strong>抽象方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>BiPredicate&lt;T,U&gt;</td>
<td>boolean test(T t, U u)</td>
<td>接收两个对象</td>
</tr>
<tr>
<td>DoublePredicate</td>
<td>boolean test(double value)</td>
<td>接收一个double值</td>
</tr>
<tr>
<td>IntPredicate</td>
<td>boolean test(int value)</td>
<td>接收一个int值</td>
</tr>
<tr>
<td>LongPredicate</td>
<td>boolean test(long value)</td>
<td>接收一个long值</td>
</tr>
</tbody></table>
<h6 id="2-4-4-内置接口代码演示"><a href="#2-4-4-内置接口代码演示" class="headerlink" title="2.4.4 内置接口代码演示"></a>2.4.4 内置接口代码演示</h6><p>举例1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.four;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConsumer</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;java&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;python&quot;</span>,<span class="string">&quot;c++&quot;</span>,<span class="string">&quot;VB&quot;</span>,<span class="string">&quot;C#&quot;</span>);                                                                                                                                         </span><br><span class="line">        <span class="comment">//遍历Collection集合，并将传递给action参数的操作代码应用在每一个元素上。        </span></span><br><span class="line">        list.forEach(s -&gt; System.out.println(s)); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><code>举例2：</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.four; </span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSupplier</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;   </span><br><span class="line">        Supplier&lt;String&gt; supplier = () -&gt; <span class="string">&quot;尚硅谷&quot;</span>;      </span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>举例3：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package com.this0.four;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestPredicate &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.<span class="keyword">add</span>(&quot;hello&quot;);</span><br><span class="line">        list.<span class="keyword">add</span>(&quot;java&quot;);</span><br><span class="line">        list.<span class="keyword">add</span>(&quot;this0&quot;);</span><br><span class="line">        list.<span class="keyword">add</span>(&quot;ok&quot;);</span><br><span class="line">        list.<span class="keyword">add</span>(&quot;yes&quot;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;删除之前：&quot;);</span><br><span class="line">        list.<span class="keyword">forEach</span>(t-&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(t));</span><br><span class="line">        </span><br><span class="line">        //用于删除集合中满足<span class="keyword">filter</span>指定的条件判断的。</span><br><span class="line">        //删除包含o字母的元素</span><br><span class="line">        list.removeIf(s -&gt; s.contains(&quot;o&quot;));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;删除包含o字母的元素之后：&quot;);</span><br><span class="line">        list.<span class="keyword">forEach</span>(t-&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(t));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>举例4：</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.four;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFunction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//使用Lambda表达式实现Function&lt;T,R&gt;接口，可以实现将一个字符串首字母转为大写的功能。</span></span><br><span class="line">        Function&lt;String,String&gt; <span class="function"><span class="keyword">fun</span> = s -&gt; s.<span class="title">substring</span><span class="params">(<span class="number">0</span>,<span class="number">1</span>)</span></span>.toUpperCase() + s.substring(<span class="number">1</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="keyword">fun</span>.apply(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-4-5-练习"><a href="#2-4-5-练习" class="headerlink" title="2.4.5 练习"></a>2.4.5 练习</h6><p><strong>练习1：无参无返回值形式</strong><br>假如有自定义函数式接口Call如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Call</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在测试类中声明一个如下方法：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> callSomething(<span class="keyword">Call</span> <span class="keyword">call</span>)&#123;</span><br><span class="line">        <span class="keyword">call</span>.shout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在测试类的main方法中调用callSomething方法，并用Lambda表达式为形参call赋值，可以喊出任意你想说的话。</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="literal">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        callSomething<span class="function"><span class="params">(() -&gt; System.out.println(<span class="string">&quot;回家吃饭&quot;</span>))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">callSomething</span><span class="params">(() -&gt; System.out.println(<span class="string">&quot;我爱你&quot;</span>))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">callSomething</span><span class="params">(() -&gt; System.out.println(<span class="string">&quot;滚蛋&quot;</span>))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">callSomething</span><span class="params">(() -&gt; System.out.println(<span class="string">&quot;回来&quot;</span>))</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">static</span> <span class="title">void</span> <span class="title">callSomething</span><span class="params">(Call call)</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">call</span>.<span class="title">shout</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">interface</span> <span class="title">Call</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">void</span> <span class="title">shout</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>练习2：消费型接口</strong><br>代码示例：Consumer<T>接口<br>在JDK1.8中Collection集合接口的父接口Iterable接口中增加了一个默认方法：<br><code>public default void forEach(Consumer&lt;? super T&gt; action) </code>遍历Collection集合的每个元素，执行“xxx消费型”操作。<code> </code>在JDK1.8中Map集合接口中增加了一个默认方法：<code> public default void forEach(BiConsumer&lt;? super K,? super V&gt; action)</code>遍历Map集合的每对映射关系，执行“xxx消费型”操作。&#96;<br>案例：<br>（1）创建一个Collection系列的集合，添加一些字符串，调用forEach方法遍历查看<br>（2）创建一个Map系列的集合，添加一些(key,value)键值对，调用forEach方法遍历查看<br>示例代码：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public <span class="literal">void</span> test1()&#123;</span><br><span class="line">        List&lt;<span class="built_in">String</span>&gt; <span class="keyword">list</span> = Arrays.asList(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;lambda&quot;</span>,<span class="string">&quot;this0&quot;</span>);</span><br><span class="line">        <span class="keyword">list</span>.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public <span class="literal">void</span> test2()&#123;</span><br><span class="line">        HashMap&lt;Integer,<span class="built_in">String</span>&gt; <span class="keyword">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">map</span>.put(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">map</span>.put(<span class="number">2</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="keyword">map</span>.put(<span class="number">3</span>, <span class="string">&quot;lambda&quot;</span>);</span><br><span class="line">        <span class="keyword">map</span>.put(<span class="number">4</span>, <span class="string">&quot;this0&quot;</span>);</span><br><span class="line">        <span class="keyword">map</span>.forEach<span class="function"><span class="params">((k,v) -&gt; System.out.println(k+<span class="string">&quot;-&gt;&quot;</span>+v))</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>练习3：供给型接口</strong><br>代码示例：Supplier<T>接口<br>在JDK1.8中增加了StreamAPI，java.util.stream.Stream<T>是一个数据流。这个类型有一个静态方法：<br><code>public static &lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)可以创建Stream的对象。</code>而又包含一个forEach方法可以遍历流中的元素：public void forEach(Consumer&lt;? super T&gt; action)。<br>案例：<br>现在请调用<code>Stream的generate方法，来产生一个流对象</code>，并调用Math.random()方法来产生数据，为Supplier函数式接口的形参赋值。最后调用forEach方法遍历流中的数据查看结果。</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public <span class="literal">void</span> test2()&#123;</span><br><span class="line">        Stream.generate<span class="function"><span class="params">(() -&gt; <span class="built_in">Math</span>.random())</span>.<span class="title">forEach</span><span class="params">(num -&gt; System.out.println(num))</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>练习4：功能型接口</strong><br>代码示例：Function&lt;T,R&gt;接口<br>在JDK1.8时Map接口增加了很多方法，例如：<br>public default void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)按照function指定的操作替换map中的value。<br>public default void forEach(BiConsumer&lt;? super K,? super V&gt; action)遍历Map集合的每对映射关系，执行“xxx消费型”操作。<br>案例：<br>（1）声明一个Employee员工类型，包含编号、姓名、薪资。<br>（2）添加n个员工对象到一个HashMap&lt;Integer,Employee&gt;集合中，其中员工编号为key，员工对象为value。<br>（3）调用Map的forEach遍历集合<br>（4）调用Map的replaceAll方法，将其中薪资低于10000元的，薪资设置为10000。<br>（5）再次调用Map的forEach遍历集合查看结果<br>Employee类：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="type">int</span> id, <span class="type">String</span> name, <span class="type">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">setId</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">setName</span><span class="params">(<span class="type">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="type">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, salary=&quot;</span> + salary + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="literal">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        HashMap&lt;Integer,Employee&gt; <span class="keyword">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Employee e1 = <span class="keyword">new</span> Employee(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">8000</span>);</span><br><span class="line">        Employee e2 = <span class="keyword">new</span> Employee(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">9000</span>);</span><br><span class="line">        Employee e3 = <span class="keyword">new</span> Employee(<span class="number">3</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">        Employee e4 = <span class="keyword">new</span> Employee(<span class="number">4</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">11000</span>);</span><br><span class="line">        Employee e5 = <span class="keyword">new</span> Employee(<span class="number">5</span>, <span class="string">&quot;钱七&quot;</span>, <span class="number">12000</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">map</span>.put(e1.getId(), e1);</span><br><span class="line">        <span class="keyword">map</span>.put(e2.getId(), e2);</span><br><span class="line">        <span class="keyword">map</span>.put(e3.getId(), e3);</span><br><span class="line">        <span class="keyword">map</span>.put(e4.getId(), e4);</span><br><span class="line">        <span class="keyword">map</span>.put(e5.getId(), e5);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">map</span>.forEach<span class="function"><span class="params">((k,v) -&gt; System.out.println(k+<span class="string">&quot;=&quot;</span>+v))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">        <span class="title">map</span>.<span class="title">replaceAll</span><span class="params">((k,v)-&gt;&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">if</span>(v.getSalary()&lt;<span class="number">10000</span>)&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">                v.setSalary(<span class="number">10000</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">            &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">return</span> v;</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">map</span>.<span class="title">forEach</span><span class="params">((k,v) -&gt; System.out.println(k+<span class="string">&quot;=&quot;</span>+v))</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>练习5：判断型接口</strong><br>代码示例：Predicate<T>接口<br>JDK1.8时，Collecton<E>接口增加了一下方法，其中一个如下：<br>public default boolean removeIf(Predicate&lt;? super E&gt; filter) 用于删除集合中满足filter指定的条件判断的。<br>public default void forEach(Consumer&lt;? super T&gt; action)遍历Collection集合的每个元素，执行“xxx消费型”操作。<br>案例：<br>（1）添加一些字符串到一个Collection集合中<br>（2）调用forEach遍历集合<br>（3）调用removeIf方法，删除其中字符串的长度&lt;5的<br>（4）再次调用forEach遍历集合</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestLambda &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.<span class="keyword">add</span>(&quot;hello&quot;);</span><br><span class="line">        list.<span class="keyword">add</span>(&quot;java&quot;);</span><br><span class="line">        list.<span class="keyword">add</span>(&quot;this0&quot;);</span><br><span class="line">        list.<span class="keyword">add</span>(&quot;ok&quot;);</span><br><span class="line">        list.<span class="keyword">add</span>(&quot;yes&quot;);</span><br><span class="line">        </span><br><span class="line">        list.<span class="keyword">forEach</span>(str-&gt;<span class="keyword">System</span>.<span class="keyword">out</span>.println(str));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        </span><br><span class="line">        list.removeIf(str-&gt;str.length()&lt;<span class="number">5</span>);</span><br><span class="line">        list.<span class="keyword">forEach</span>(str-&gt;<span class="keyword">System</span>.<span class="keyword">out</span>.println(str));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>练习6：判断型接口</strong><br>案例：<br>（1）声明一个Employee员工类型，包含编号、姓名、性别，年龄，薪资。<br>（2）声明一个EmployeeSerice员工管理类，包含一个ArrayList<Employee>集合的属性all，在EmployeeSerice的构造器中，创建一些员工对象，为all集合初始化。<br>（3）在EmployeeSerice员工管理类中，声明一个方法：ArrayList<Employee> get(Predicate<Employee> p)，即将满足p指定的条件的员工，添加到一个新的ArrayList<Employee> 集合中返回。<br>（4）在测试类中创建EmployeeSerice员工管理类的对象，并调用get方法，分别获取：</p>
<ul>
<li>所有员工对象</li>
<li>所有年龄超过35的员工</li>
<li>所有薪资高于15000的女员工</li>
<li>所有编号是偶数的员工</li>
<li>名字是“张三”的员工</li>
<li>年龄超过25，薪资低于10000的男员工</li>
</ul>
<p>示例代码：<br>Employee类：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="type">int</span> id, <span class="type">String</span> name, <span class="type">char</span> gender, <span class="type">int</span> age, <span class="type">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">setId</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">setName</span><span class="params">(<span class="type">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="function">Override</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="type">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, gender=&quot;</span> + gender + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, salary=&quot;</span> + salary</span><br><span class="line">                + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>员工管理类：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> EmployeeService &#123;</span><br><span class="line">    private ArrayList&lt;Employee&gt; <span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> EmployeeService() &#123;</span><br><span class="line">        <span class="keyword">all</span> = <span class="built_in">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">        <span class="keyword">all</span>.<span class="keyword">add</span>(<span class="built_in">new</span> Employee(<span class="number">1</span>, &quot;张三&quot;, <span class="string">&#x27;男&#x27;</span>, <span class="number">33</span>, <span class="number">8000</span>));</span><br><span class="line">        <span class="keyword">all</span>.<span class="keyword">add</span>(<span class="built_in">new</span> Employee(<span class="number">2</span>, &quot;翠花&quot;, <span class="string">&#x27;女&#x27;</span>, <span class="number">23</span>, <span class="number">18000</span>));</span><br><span class="line">        <span class="keyword">all</span>.<span class="keyword">add</span>(<span class="built_in">new</span> Employee(<span class="number">3</span>, &quot;无能&quot;, <span class="string">&#x27;男&#x27;</span>, <span class="number">46</span>, <span class="number">8000</span>));</span><br><span class="line">        <span class="keyword">all</span>.<span class="keyword">add</span>(<span class="built_in">new</span> Employee(<span class="number">4</span>, &quot;李四&quot;, <span class="string">&#x27;女&#x27;</span>, <span class="number">23</span>, <span class="number">9000</span>));</span><br><span class="line">        <span class="keyword">all</span>.<span class="keyword">add</span>(<span class="built_in">new</span> Employee(<span class="number">5</span>, &quot;老王&quot;, <span class="string">&#x27;男&#x27;</span>, <span class="number">23</span>, <span class="number">15000</span>));</span><br><span class="line">        <span class="keyword">all</span>.<span class="keyword">add</span>(<span class="built_in">new</span> Employee(<span class="number">6</span>, &quot;大嘴&quot;, <span class="string">&#x27;男&#x27;</span>, <span class="number">23</span>, <span class="number">11000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> ArrayList&lt;Employee&gt; <span class="keyword">get</span>(Predicate&lt;Employee&gt; p) &#123;</span><br><span class="line">        ArrayList&lt;Employee&gt; result = <span class="built_in">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Employee emp : result) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.test(emp)) &#123;</span><br><span class="line">                result.<span class="keyword">add</span>(emp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestLambda &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        EmployeeService es = <span class="built_in">new</span> EmployeeService();</span><br><span class="line">        es.<span class="keyword">get</span>(e -&gt; <span class="keyword">true</span>).<span class="keyword">forEach</span>(e -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(e));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        es.<span class="keyword">get</span>(e -&gt; e.getAge() &gt; <span class="number">35</span>).<span class="keyword">forEach</span>(e -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(e));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        es.<span class="keyword">get</span>(e -&gt; e.getSalary() &gt; <span class="number">15000</span> &amp;&amp; e.getGender() == <span class="string">&#x27;女&#x27;</span>).<span class="keyword">forEach</span>(e -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(e));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        es.<span class="keyword">get</span>(e -&gt; e.getId() % <span class="number">2</span> == <span class="number">0</span>).<span class="keyword">forEach</span>(e -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(e));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        es.<span class="keyword">get</span>(e -&gt; &quot;张三&quot;.equals(e.getName())).<span class="keyword">forEach</span>(e -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(e));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        es.<span class="keyword">get</span>(e -&gt; e.getAge() &gt; <span class="number">25</span> &amp;&amp; e.getSalary() &lt; <span class="number">10000</span> &amp;&amp; e.getGender() == <span class="string">&#x27;男&#x27;</span>).<span class="keyword">forEach</span>(e -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-JDK8-17-新特性-方法引用与构造器引用"><a href="#3-JDK8-17-新特性-方法引用与构造器引用" class="headerlink" title="3.JDK8-17 新特性-方法引用与构造器引用"></a>3.JDK8-17 新特性-方法引用与构造器引用</h3><h4 id="1-Java8新特性：方法引用与构造器引用"><a href="#1-Java8新特性：方法引用与构造器引用" class="headerlink" title="1. Java8新特性：方法引用与构造器引用"></a>1. Java8新特性：方法引用与构造器引用</h4><p>Lambda表达式是可以简化函数式接口的变量或形参赋值的语法。而方法引用和构造器引用是为了简化Lambda表达式的。</p>
<h5 id="1-1-方法引用"><a href="#1-1-方法引用" class="headerlink" title="1.1 方法引用"></a>1.1 方法引用</h5><p>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！<br>方法引用可以看做是Lambda表达式深层次的表达。换句话说，<code>方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖。</code><br>语法糖（Syntactic sugar），也译为糖衣语法，是由英国计算机科学家彼得·约翰·兰达（Peter J. Landin）发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。</p>
<h6 id="1-1-1-方法引用格式"><a href="#1-1-1-方法引用格式" class="headerlink" title="1.1.1 方法引用格式"></a>1.1.1 方法引用格式</h6><ul>
<li>格式：使用方法引用操作符 “::” 将类(或对象) 与 方法名分隔开来。<ul>
<li>两个:中间不能有空格，而且必须英文状态下半角输入</li>
</ul>
</li>
<li>如下三种主要使用情况：<ul>
<li>情况1：对象 :: 实例方法名</li>
<li>情况2：类 :: 静态方法名</li>
<li>情况3：类 :: 实例方法名</li>
</ul>
</li>
</ul>
<h6 id="1-1-2-方法引用使用前提"><a href="#1-1-2-方法引用使用前提" class="headerlink" title="1.1.2 方法引用使用前提"></a>1.1.2 方法引用使用前提</h6><p><strong>要求1：</strong>Lambda体只有一句语句，并且是通过调用一个对象的&#x2F;类现有的方法来完成的<br>例如：System.out对象，调用println()方法来完成Lambda体<br>Math类，调用random()静态方法来完成Lambda体<br><strong><code>要求2：（没例子想不出来了）</code></strong><br><code>针对情况1：函数式接口中的抽象方法a在被重写时使用了某一个对象的方法b。如果方法a的形参列表、返回值类型与方法b的形参列表、返回值类型都相同，则我们可以使用方法b实现对方法a的重写、替换。</code><br><code>针对情况2：函数式接口中的抽象方法a在被重写时使用了某一个类的静态方法b。如果方法a的形参列表、返回值类型与方法b的形参列表、返回值类型都相同，则我们可以使用方法b实现对方法a的重写、替换。</code><br><code>针对情况3：函数式接口中的抽象方法a在被重写时使用了某一个对象的方法b。如果方法a的返回值类型与方法b的返回值类型相同，同时方法a的形参列表中有n个参数，方法b的形参列表有n-1个参数，且方法a的第1个参数作为方法b的调用者，且方法a的后n-1参数与方法b的n-1参数匹配（类型相同或满足多态场景也可以）</code><br>例如：t-&gt;System.out.println(t)<br>() -&gt; Math.random() 都是无参</p>
<h6 id="1-1-3-举例"><a href="#1-1-3-举例" class="headerlink" title="1.1.3 举例"></a>1.1.3 举例</h6><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodRefTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况一：对象 :: 实例方法</span></span><br><span class="line">    <span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line">    <span class="comment">//PrintStream中的void println(T t)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Consumer</span>&lt;<span class="title class_">String</span>&gt; con1 = str -&gt; <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(str);</span><br><span class="line">        con1.<span class="title function_">accept</span>(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">        <span class="title class_">PrintStream</span> ps = <span class="title class_">System</span>.<span class="property">out</span>;</span><br><span class="line">        <span class="title class_">Consumer</span>&lt;<span class="title class_">String</span>&gt; con2 = <span class="attr">ps</span>::println;</span><br><span class="line">        con2.<span class="title function_">accept</span>(<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Supplier中的T get()</span></span><br><span class="line">    <span class="comment">//Employee中的String getName()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Employee</span> emp = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>,<span class="number">5600</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Supplier</span>&lt;<span class="title class_">String</span>&gt; sup1 = () -&gt; emp.<span class="title function_">getName</span>();</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(sup1.<span class="title function_">get</span>());</span><br><span class="line"></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">        <span class="title class_">Supplier</span>&lt;<span class="title class_">String</span>&gt; sup2 = <span class="attr">emp</span>::getName;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(sup2.<span class="title function_">get</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况二：类 :: 静态方法</span></span><br><span class="line">    <span class="comment">//Comparator中的int compare(T t1,T t2)</span></span><br><span class="line">    <span class="comment">//Integer中的int compare(T t1,T t2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test3</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Comparator</span>&lt;<span class="title class_">Integer</span>&gt; com1 = (t1,t2) -&gt; <span class="title class_">Integer</span>.<span class="title function_">compare</span>(t1,t2);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(com1.<span class="title function_">compare</span>(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Comparator</span>&lt;<span class="title class_">Integer</span>&gt; com2 = <span class="title class_">Integer</span>::compare;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(com2.<span class="title function_">compare</span>(<span class="number">12</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    <span class="comment">//Math中的Long round(Double d)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test4</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Function</span>&lt;<span class="title class_">Double</span>,<span class="title class_">Long</span>&gt; func = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;<span class="title class_">Double</span>, <span class="title class_">Long</span>&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="title class_">Long</span> <span class="title function_">apply</span>(<span class="params">Double d</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Function</span>&lt;<span class="title class_">Double</span>,<span class="title class_">Long</span>&gt; func1 = d -&gt; <span class="title class_">Math</span>.<span class="title function_">round</span>(d);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(func1.<span class="title function_">apply</span>(<span class="number">12.3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Function</span>&lt;<span class="title class_">Double</span>,<span class="title class_">Long</span>&gt; func2 = <span class="title class_">Math</span>::round;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(func2.<span class="title function_">apply</span>(<span class="number">12.6</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况三：类 :: 实例方法  (有难度)</span></span><br><span class="line">    <span class="comment">// Comparator中的int comapre(T t1,T t2)</span></span><br><span class="line">    <span class="comment">// String中的int t1.compareTo(t2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test5</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Comparator</span>&lt;<span class="title class_">String</span>&gt; com1 = (s1,s2) -&gt; s1.<span class="title function_">compareTo</span>(s2);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(com1.<span class="title function_">compare</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Comparator</span>&lt;<span class="title class_">String</span>&gt; com2 = <span class="title class_">String</span> :: compareTo;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(com2.<span class="title function_">compare</span>(<span class="string">&quot;abd&quot;</span>,<span class="string">&quot;abm&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line">    <span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test6</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">BiPredicate</span>&lt;<span class="title class_">String</span>,<span class="title class_">String</span>&gt; pre1 = (s1,s2) -&gt; s1.<span class="title function_">equals</span>(s2);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(pre1.<span class="title function_">test</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">        <span class="title class_">BiPredicate</span>&lt;<span class="title class_">String</span>,<span class="title class_">String</span>&gt; pre2 = <span class="title class_">String</span> :: equals;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(pre2.<span class="title function_">test</span>(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Function中的R apply(T t)</span></span><br><span class="line">    <span class="comment">// Employee中的String getName();</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test7</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Employee</span> employee = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">23</span>, <span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="title class_">Function</span>&lt;<span class="title class_">Employee</span>,<span class="title class_">String</span>&gt; func1 = e -&gt; e.<span class="title function_">getName</span>();</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(func1.<span class="title function_">apply</span>(employee));</span><br><span class="line"></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">        <span class="title class_">Function</span>&lt;<span class="title class_">Employee</span>,<span class="title class_">String</span>&gt; func2 = <span class="title class_">Employee</span>::getName;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(func2.<span class="title function_">apply</span>(employee));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-构造器引用"><a href="#1-2-构造器引用" class="headerlink" title="1.2 构造器引用"></a>1.2 构造器引用</h4><p><code>当Lambda表达式是创建一个对象，并且满足Lambda表达式形参，正好是给创建这个对象的构造器的实参列表，就可以使用构造器引用。</code><br>格式：类名::new<br>举例：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ConstructorRefTest &#123;</span><br><span class="line">    //构造器引用</span><br><span class="line">    //Supplier中的T <span class="keyword">get</span>()</span><br><span class="line">    //Employee的空参构造器：Employee()</span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> test1()&#123;</span><br><span class="line"></span><br><span class="line">        Supplier&lt;Employee&gt; sup = <span class="built_in">new</span> Supplier&lt;Employee&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="built_in">public</span> Employee <span class="keyword">get</span>() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">new</span> Employee();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;*******************&quot;);</span><br><span class="line"></span><br><span class="line">        Supplier&lt;Employee&gt;  sup1 = () -&gt; <span class="built_in">new</span> Employee();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sup1.<span class="keyword">get</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;*******************&quot;);</span><br><span class="line"></span><br><span class="line">        Supplier&lt;Employee&gt;  sup2 = Employee :: <span class="built_in">new</span>;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sup2.<span class="keyword">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //<span class="keyword">Function</span>中的R apply(T t)</span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> test2()&#123;</span><br><span class="line">        <span class="keyword">Function</span>&lt;<span class="type">Integer</span>,Employee&gt; func1 = id -&gt; <span class="built_in">new</span> Employee(id);</span><br><span class="line">        Employee employee = func1.apply(<span class="number">1001</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(employee);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;*******************&quot;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Function</span>&lt;<span class="type">Integer</span>,Employee&gt; func2 = Employee :: <span class="built_in">new</span>;</span><br><span class="line">        Employee employee1 = func2.apply(<span class="number">1002</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(employee1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //BiFunction中的R apply(T t,U u)</span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> test3()&#123;</span><br><span class="line">        BiFunction&lt;<span class="type">Integer</span>,String,Employee&gt; func1 = (id,<span class="type">name</span>) -&gt; <span class="built_in">new</span> Employee(id,<span class="type">name</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(func1.apply(<span class="number">1001</span>,&quot;Tom&quot;));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;*******************&quot;);</span><br><span class="line"></span><br><span class="line">        BiFunction&lt;<span class="type">Integer</span>,String,Employee&gt; func2 = Employee :: <span class="built_in">new</span>;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(func2.apply(<span class="number">1002</span>,&quot;Tom&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package com.this0.java2; <span class="comment">/**  * @author 尚硅谷-宋红康 邮箱：shkstart@126.com  */</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Employee</span> &#123;</span><br><span class="line">         <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">         <span class="keyword">private</span> String name;</span><br><span class="line">         <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">         <span class="keyword">private</span> <span class="built_in">double</span> salary;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getId</span>()</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> id;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span>(<span class="params"><span class="built_in">int</span> id</span>)</span> &#123;</span><br><span class="line">             <span class="keyword">this</span>.id = id;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">getName</span>()</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> name;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>)</span> &#123;</span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getAge</span>()</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> age;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span>(<span class="params"><span class="built_in">int</span> age</span>)</span> &#123;</span><br><span class="line">             <span class="keyword">this</span>.age = age;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getSalary</span>()</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> salary;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span>(<span class="params"><span class="built_in">double</span> salary</span>)</span> &#123;</span><br><span class="line">             <span class="keyword">this</span>.salary = salary;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="title">Employee</span>()</span> &#123;</span><br><span class="line">             System.<span class="keyword">out</span>.println(<span class="string">&quot;Employee().....&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="title">Employee</span>(<span class="params"><span class="built_in">int</span> id</span>)</span> &#123;</span><br><span class="line">             <span class="keyword">this</span>.id = id;</span><br><span class="line">             System.<span class="keyword">out</span>.println(<span class="string">&quot;Employee(int id).....&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="title">Employee</span>(<span class="params"><span class="built_in">int</span> id, String name</span>)</span> &#123;</span><br><span class="line">             <span class="keyword">this</span>.id = id;</span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="title">Employee</span>(<span class="params"><span class="built_in">int</span> id, String name, <span class="built_in">int</span> age, <span class="built_in">double</span> salary</span>)</span> &#123;</span><br><span class="line">             <span class="keyword">this</span>.id = id;</span><br><span class="line">             <span class="keyword">this</span>.name = name;</span><br><span class="line">             <span class="keyword">this</span>.age = age;</span><br><span class="line">             <span class="keyword">this</span>.salary = salary;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         @Override</span><br><span class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">toString</span>()</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> + <span class="string">&quot;id=&quot;</span> + id + <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, salary=&quot;</span> + salary + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-数组构造引用"><a href="#1-3-数组构造引用" class="headerlink" title="1.3 数组构造引用"></a>1.3 数组构造引用</h4><p><code>当Lambda表达式是创建一个数组对象，并且满足Lambda表达式形参，正好是给创建这个数组对象的长度，就可以数组构造引用。</code><br>格式：数组类型名::new<br>举例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组引用</span></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test4</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Function</span>&lt;<span class="title class_">Integer</span>,<span class="title class_">String</span>[]&gt; func1 = length -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">    <span class="title class_">String</span>[] arr1 = func1.<span class="title function_">apply</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="title class_">Arrays</span>.<span class="title function_">toString</span>(arr1));</span><br><span class="line"></span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Function</span>&lt;<span class="title class_">Integer</span>,<span class="title class_">String</span>[]&gt; func2 = <span class="title class_">String</span>[] :: <span class="keyword">new</span>;</span><br><span class="line">    <span class="title class_">String</span>[] arr2 = func2.<span class="title function_">apply</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="title class_">Arrays</span>.<span class="title function_">toString</span>(arr2));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-JDK8-17-新特性-StreamAPI-使用三环节：实例化、中间操作、终止操作"><a href="#4-JDK8-17-新特性-StreamAPI-使用三环节：实例化、中间操作、终止操作" class="headerlink" title="4.JDK8-17 新特性-StreamAPI 使用三环节：实例化、中间操作、终止操作"></a><code>4.JDK8-17 新特性-StreamAPI 使用三环节：实例化、中间操作、终止操作</code></h3><h4 id="1-Java8新特性：强大的Stream-API"><a href="#1-Java8新特性：强大的Stream-API" class="headerlink" title="1. Java8新特性：强大的Stream API"></a>1. Java8新特性：强大的Stream API</h4><h5 id="1-1-说明"><a href="#1-1-说明" class="headerlink" title="1.1 说明"></a>1.1 说明</h5><ul>
<li>Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则是 Stream API。</li>
<li>Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</li>
<li>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 <strong>使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。</strong>也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</li>
</ul>
<h4 id="2-为什么要使用Stream-API"><a href="#2-为什么要使用Stream-API" class="headerlink" title="2 .为什么要使用Stream API"></a>2 .为什么要使用Stream API</h4><p>实际开发中，项目中多数数据源都来自于MySQL、Oracle等。但现在数据源可以更多了，有MongDB，Radis等，而这些NoSQL的数据就需要Java层面去处理。</p>
<h4 id="3-什么是Stream"><a href="#3-什么是Stream" class="headerlink" title="3. 什么是Stream"></a>3. 什么是Stream</h4><p>Stream 是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。<br>Stream 和 Collection 集合的区别：<strong>Collection 是一种静态的内存数据结构，讲的是数据，而 Stream 是有关计算的，讲的是计算。</strong>前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。<br>注意：<br>①Stream 自己不会存储元素。<br>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。<br>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。即一旦执行终止操作，就执行中间操作链，并产生结果。<br>④ Stream一旦执行了终止操作，就不能再调用其它中间操作或终止操作了。</p>
<h4 id="4-Stream的操作三个步骤"><a href="#4-Stream的操作三个步骤" class="headerlink" title="4 .Stream的操作三个步骤"></a>4 .Stream的操作三个步骤</h4><p><strong>1- 创建 Stream</strong>一个数据源（如：集合、数组），获取一个流<br><strong>2- 中间操作</strong>每次处理都会返回一个持有结果的新Stream，即中间操作的方法返回值仍然是Stream类型的对象。因此中间操作可以是个操作链，可对数据源的数据进行n次处理，但是在终结操作前，并不会真正执行。<br>**3- 终止操作(终端操作)**终止操作的方法返回值类型就不再是Stream了，因此一旦执行终止操作，就结束整个Stream操作了。一旦执行终止操作，就执行中间操作链，最终产生结果并结束Stream。</p>
<h4 id="5-创建Stream实例"><a href="#5-创建Stream实例" class="headerlink" title="5.创建Stream实例"></a>5.创建Stream实例</h4><p><strong>方式一：通过集合</strong></p>
<p>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：</p>
<ul>
<li>default Stream<E> stream() : 返回一个顺序流</li>
<li>default Stream<E> parallelStream() : 返回一个并行流</li>
</ul>
<p>@Test public void test01(){     List<Integer> list &#x3D; Arrays.asList(1,2,3,4,5);     &#x2F;&#x2F;JDK1.8中，Collection系列集合增加了方法     Stream<Integer> stream &#x3D; list.stream(); }<br><strong>方式二：通过数组</strong><br>Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：</p>
<ul>
<li>static <T> Stream<T> stream(T[] array): 返回一个流</li>
<li>public static IntStream stream(int[] array)</li>
<li>public static LongStream stream(long[] array)</li>
<li>public static DoubleStream stream(double[] array)</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test02</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">String</span>[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line">    <span class="title class_">Stream</span>&lt;<span class="title class_">String</span>&gt; stream = <span class="title class_">Arrays</span>.<span class="title function_">stream</span>(arr); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test03</span>(<span class="params"></span>)&#123;</span><br><span class="line">    int[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="title class_">IntStream</span> stream = <span class="title class_">Arrays</span>.<span class="title function_">stream</span>(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方式三：通过Stream的of()</strong><br>可以调用Stream类静态方法 of(), 通过显示值创建一个流。它可以接收任意数量的参数。</p>
<ul>
<li>public static<T> Stream<T> of(T… values) : 返回一个流</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">Stream</span>&lt;Integer&gt; stream = <span class="built_in">Stream</span>.<span class="built_in">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>方式四：创建无限流(了解)</code></strong><br>可以使用静态方法 Stream.iterate() 和 Stream.generate(), 创建无限流。</p>
<ul>
<li>迭代public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f) </li>
<li>生成public static<T> Stream<T> generate(Supplier<T> s)</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式四：创建无限流</span></span><br><span class="line">@<span class="function">Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 迭代</span></span><br><span class="line">    <span class="comment">// public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final</span></span><br><span class="line">    <span class="comment">// UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">    <span class="built_in">Stream</span>&lt;Integer&gt; stream = <span class="built_in">Stream</span>.<span class="built_in">iterate</span>(<span class="number">0</span>, x -&gt; x + <span class="number">2</span>);</span><br><span class="line">    stream.<span class="built_in">limit</span>(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成</span></span><br><span class="line">    <span class="comment">// public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">    <span class="built_in">Stream</span>&lt;Double&gt; stream1 = <span class="built_in">Stream</span>.<span class="built_in">generate</span>(Math::random);</span><br><span class="line">    stream1.<span class="built_in">limit</span>(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-1一系列中间操作"><a href="#5-1一系列中间操作" class="headerlink" title="5.1一系列中间操作"></a>5.1一系列中间操作</h5><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。<br>1-筛选与切片</p>
<table>
<thead>
<tr>
<th><strong>方 法</strong></th>
<th><strong>描 述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>filter(Predicatep)</strong></td>
<td>接收 Lambda ， 从流中排除某些元素</td>
</tr>
<tr>
<td><strong>distinct()</strong></td>
<td>筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</td>
</tr>
<tr>
<td><strong>limit(long maxSize)</strong></td>
<td>截断流，使其元素不超过给定数量</td>
</tr>
<tr>
<td><strong>skip(long n)</strong></td>
<td>跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</td>
</tr>
</tbody></table>
<p>2-映 射</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>map(Function f)</strong></td>
<td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td>
</tr>
<tr>
<td><strong>mapToDouble(ToDoubleFunction f)</strong></td>
<td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。</td>
</tr>
<tr>
<td><strong>mapToInt(ToIntFunction f)</strong></td>
<td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream。</td>
</tr>
<tr>
<td><strong>mapToLong(ToLongFunction f)</strong></td>
<td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream。</td>
</tr>
<tr>
<td><strong>flatMap(Function f)</strong></td>
<td>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td>
</tr>
</tbody></table>
<p>3-排序</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>sorted()</strong></td>
<td>产生一个新流，其中按自然顺序排序</td>
</tr>
<tr>
<td><strong>sorted(Comparatorcom)</strong></td>
<td>产生一个新流，其中按比较器顺序排序</td>
</tr>
</tbody></table>
<p>代码举例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package com.<span class="property">this0</span>.<span class="property">stream</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.<span class="property">junit</span>.<span class="property">Test</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">Arrays</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">stream</span>.<span class="property">Stream</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamMiddleOperate</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test01</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//1、创建Stream</span></span><br><span class="line">        <span class="title class_">Stream</span>&lt;<span class="title class_">Integer</span>&gt; stream = <span class="title class_">Stream</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、加工处理</span></span><br><span class="line">        <span class="comment">//过滤：filter(Predicate p)</span></span><br><span class="line">        <span class="comment">//把里面的偶数拿出来</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * filter(Predicate p)</span></span><br><span class="line"><span class="comment">         * Predicate是函数式接口，抽象方法：boolean test(T t)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        stream = stream.<span class="title function_">filter</span>(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、终结操作：例如：遍历</span></span><br><span class="line">        stream.<span class="title function_">forEach</span>(<span class="title class_">System</span>.<span class="property">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test02</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Stream</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">                .<span class="title function_">filter</span>(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                .<span class="title function_">forEach</span>(<span class="title class_">System</span>.<span class="property">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test03</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Stream</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .<span class="title function_">distinct</span>()</span><br><span class="line">                .<span class="title function_">forEach</span>(<span class="title class_">System</span>.<span class="property">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test04</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Stream</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .<span class="title function_">limit</span>(<span class="number">3</span>)</span><br><span class="line">                .<span class="title function_">forEach</span>(<span class="title class_">System</span>.<span class="property">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test05</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Stream</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">                .<span class="title function_">distinct</span>()  <span class="comment">//(1,2,3,4,5,6,7)</span></span><br><span class="line">                .<span class="title function_">filter</span>(t -&gt; t%<span class="number">2</span>!=<span class="number">0</span>) <span class="comment">//(1,3,5,7)</span></span><br><span class="line">                .<span class="title function_">limit</span>(<span class="number">3</span>)</span><br><span class="line">                .<span class="title function_">forEach</span>(<span class="title class_">System</span>.<span class="property">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test06</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Stream</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .<span class="title function_">skip</span>(<span class="number">5</span>)</span><br><span class="line">                .<span class="title function_">forEach</span>(<span class="title class_">System</span>.<span class="property">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test07</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Stream</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .<span class="title function_">skip</span>(<span class="number">5</span>)</span><br><span class="line">                .<span class="title function_">distinct</span>()</span><br><span class="line">                .<span class="title function_">filter</span>(t -&gt; t%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">                .<span class="title function_">forEach</span>(<span class="title class_">System</span>.<span class="property">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test08</span>(<span class="params"></span>)&#123;</span><br><span class="line">        long count = <span class="title class_">Stream</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .<span class="title function_">distinct</span>()</span><br><span class="line">                .<span class="title function_">peek</span>(<span class="title class_">System</span>.<span class="property">out</span>::println)  <span class="comment">//Consumer接口的抽象方法  void accept(T t)</span></span><br><span class="line">                .<span class="title function_">count</span>();</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;count=&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test09</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//希望能够找出前三个最大值，前三名最大的，不重复</span></span><br><span class="line">        <span class="title class_">Stream</span>.<span class="title function_">of</span>(<span class="number">11</span>,<span class="number">2</span>,<span class="number">39</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">54</span>)</span><br><span class="line">                .<span class="title function_">distinct</span>()</span><br><span class="line">                .<span class="title function_">sorted</span>((t1,t2) -&gt; -<span class="title class_">Integer</span>.<span class="title function_">compare</span>(t1, t2))<span class="comment">//Comparator接口  int compare(T t1, T t2)</span></span><br><span class="line">                .<span class="title function_">limit</span>(<span class="number">3</span>)</span><br><span class="line">                .<span class="title function_">forEach</span>(<span class="title class_">System</span>.<span class="property">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test10</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Stream</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .<span class="title function_">map</span>(t -&gt; t+=<span class="number">1</span>)<span class="comment">//Function&lt;T,R&gt;接口抽象方法 R apply(T t)</span></span><br><span class="line">                .<span class="title function_">forEach</span>(<span class="title class_">System</span>.<span class="property">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test11</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">String</span>[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Arrays</span>.<span class="title function_">stream</span>(arr)</span><br><span class="line">                .<span class="title function_">map</span>(t-&gt;t.<span class="title function_">toUpperCase</span>())</span><br><span class="line">                .<span class="title function_">forEach</span>(<span class="title class_">System</span>.<span class="property">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test12</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">String</span>[] arr = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line">        <span class="title class_">Arrays</span>.<span class="title function_">stream</span>(arr)</span><br><span class="line">                .<span class="title function_">flatMap</span>(t -&gt; <span class="title class_">Stream</span>.<span class="title function_">of</span>(t.<span class="title function_">split</span>(<span class="string">&quot;|&quot;</span>)))<span class="comment">//Function&lt;T,R&gt;接口抽象方法 R apply(T t)  现在的R是一个Stream</span></span><br><span class="line">                .<span class="title function_">forEach</span>(<span class="title class_">System</span>.<span class="property">out</span>::println);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-终止操作"><a href="#5-2-终止操作" class="headerlink" title="5.2 终止操作"></a>5.2 终止操作</h5><ul>
<li>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。</li>
<li>流进行了终止操作后，不能再次使用。</li>
</ul>
<p>1-匹配与查找</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>allMatch(Predicate p)</strong></td>
<td>检查是否匹配所有元素</td>
</tr>
<tr>
<td>**anyMatch(Predicate p) **</td>
<td>检查是否至少匹配一个元素</td>
</tr>
<tr>
<td><strong>noneMatch(Predicatep)</strong></td>
<td>检查是否没有匹配所有元素</td>
</tr>
<tr>
<td><strong>findFirst()</strong></td>
<td>返回第一个元素</td>
</tr>
<tr>
<td><strong>findAny()</strong></td>
<td>返回当前流中的任意元素</td>
</tr>
<tr>
<td><strong>count()</strong></td>
<td>返回流中元素总数</td>
</tr>
<tr>
<td><strong>max(Comparator c)</strong></td>
<td>返回流中最大值</td>
</tr>
<tr>
<td><strong>min(Comparator c)</strong></td>
<td>返回流中最小值</td>
</tr>
<tr>
<td><strong>forEach(Consumer c)</strong></td>
<td>内部迭代(使用 Collection 接口需要用户去做迭代，称为外部迭代。相反，Stream API 使用内部迭代——它帮你把迭代做了)</td>
</tr>
</tbody></table>
<p><code>2-归约</code></p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>reduce(T identity, BinaryOperator b)</strong></td>
<td>&#x3D;&#x3D;可以将流中元素反复结合起来，得到一个值。返回 T&#x3D;&#x3D;</td>
</tr>
<tr>
<td><strong>reduce(BinaryOperator b)</strong></td>
<td>可以将流中元素反复结合起来，得到一个值。返回 &#x3D;&#x3D;Optional<T>&#x3D;&#x3D;</td>
</tr>
</tbody></table>
<p>备注：map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它来进行网络搜索而出名。<br>3-收集</p>
<table>
<thead>
<tr>
<th><strong>方 法</strong></th>
<th><strong>描 述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>collect(Collector c)</strong></td>
<td>将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</td>
</tr>
</tbody></table>
<p>Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、Map)。<br>另外， Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>toList</strong></td>
<td>Collector&lt;T, ?, List<T>&gt;</td>
<td>把流中元素收集到List</td>
</tr>
</tbody></table>
<p>List<Employee> emps&#x3D; list.stream().collect(Collectors.toList());</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>toSet</strong></td>
<td>Collector&lt;T, ?, Set<T>&gt;</td>
<td>把流中元素收集到Set</td>
</tr>
</tbody></table>
<p>Set<Employee> emps&#x3D; list.stream().collect(Collectors.toSet());</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>toCollection</strong></td>
<td>Collector&lt;T, ?, C&gt;</td>
<td>把流中元素收集到创建的集合</td>
</tr>
</tbody></table>
<p>Collection<Employee> emps &#x3D;list.stream().collect(Collectors.toCollection(ArrayList::new));</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>counting</strong></td>
<td>Collector&lt;T, ?, Long&gt;</td>
<td>计算流中元素的个数</td>
</tr>
</tbody></table>
<p>long count &#x3D; list.stream().collect(Collectors.counting());</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>summingInt</strong></td>
<td>Collector&lt;T, ?, Integer&gt;</td>
<td>对流中元素的整数属性求和</td>
</tr>
</tbody></table>
<p>int total&#x3D;list.stream().collect(Collectors.summingInt(Employee::getSalary));</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>averagingInt</strong></td>
<td>Collector&lt;T, ?, Double&gt;</td>
<td>计算流中元素Integer属性的平均值</td>
</tr>
</tbody></table>
<p>double avg &#x3D; list.stream().collect(Collectors.averagingInt(Employee::getSalary));</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>summarizingInt</strong></td>
<td>Collector&lt;T, ?, IntSummaryStatistics&gt;</td>
<td>收集流中Integer属性的统计值。如：平均值</td>
</tr>
</tbody></table>
<p>int SummaryStatisticsiss&#x3D; list.stream().collect(Collectors.summarizingInt(Employee::getSalary));</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>joining</strong></td>
<td>Collector&lt;CharSequence, ?, String&gt;</td>
<td>连接流中每个字符串</td>
</tr>
</tbody></table>
<p>String str&#x3D; list.stream().map(Employee::getName).collect(Collectors.joining());</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>maxBy</strong></td>
<td>Collector&lt;T, ?, Optional<T>&gt;</td>
<td>根据比较器选择最大值</td>
</tr>
</tbody></table>
<p>Optional<Emp>max&#x3D; list.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary))); </p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>minBy</strong></td>
<td>Collector&lt;T, ?, Optional<T>&gt;</td>
<td>根据比较器选择最小值</td>
</tr>
</tbody></table>
<p>Optional<Emp> min &#x3D; list.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary))); </p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>reducing</strong></td>
<td>Collector&lt;T, ?, Optional<T>&gt;</td>
<td>从一个作为累加器的初始值开始，利用BinaryOperator与流中元素逐个结合，从而归约成单个值</td>
</tr>
</tbody></table>
<p>int total&#x3D;list.stream().collect(Collectors.reducing(0, Employee::getSalar, Integer::sum));</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>collectingAndThen</strong></td>
<td>Collector&lt;T,A,RR&gt;</td>
<td>包裹另一个收集器，对其结果转换函数</td>
</tr>
</tbody></table>
<p>int how&#x3D; list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>groupingBy</strong></td>
<td>Collector&lt;T, ?, Map&lt;K, List<T>&gt;&gt;</td>
<td>根据某属性值对流分组，属性为K，结果为V</td>
</tr>
</tbody></table>
<p>Map&lt;Emp.Status, List<Emp>&gt; map&#x3D; list.stream().collect(Collectors.groupingBy(Employee::getStatus));</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>返回类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>partitioningBy</strong></td>
<td>Collector&lt;T, ?, Map&lt;Boolean, List<T>&gt;&gt;</td>
<td>根据true或false进行分区</td>
</tr>
</tbody></table>
<p>Map&lt;Boolean,List<Emp>&gt; vd &#x3D; list.stream().collect(Collectors.partitioningBy(Employee::getManage));<br>举例：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">package com.this0.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">StreamEndding</span> &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public <span class="literal">void</span> test01()&#123;</span><br><span class="line">        Stream.<span class="keyword">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public <span class="literal">void</span> test02()&#123;</span><br><span class="line">        long count = Stream.<span class="keyword">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">                .count();</span><br><span class="line">        System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public <span class="literal">void</span> test03()&#123;</span><br><span class="line">        boolean result = Stream.<span class="keyword">of</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">                .allMatch(t -&gt; t%<span class="number">2</span>!=<span class="number">0</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public <span class="literal">void</span> test04()&#123;</span><br><span class="line">        boolean result = Stream.<span class="keyword">of</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">                .anyMatch(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public <span class="literal">void</span> test05()&#123;</span><br><span class="line">        Optional&lt;Integer&gt; opt = Stream.<span class="keyword">of</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>).findFirst();</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public <span class="literal">void</span> test06()&#123;</span><br><span class="line">        Optional&lt;Integer&gt; opt = Stream.<span class="keyword">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br><span class="line">                .filter(t -&gt; t%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">                .findFirst();</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public <span class="literal">void</span> test07()&#123;</span><br><span class="line">        Optional&lt;Integer&gt; opt = Stream.<span class="keyword">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">                .filter(t -&gt; t%<span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line">                .findFirst();</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public <span class="literal">void</span> test08()&#123;</span><br><span class="line">        Optional&lt;Integer&gt; max = Stream.<span class="keyword">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">                .max<span class="function"><span class="params">((t1,t2) -&gt; Integer.compare(t1, t2))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(max)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">test09</span><span class="params">()</span>&#123;</span></span><br><span class="line"><span class="function">        <span class="title">Integer</span> <span class="title">reduce</span> = <span class="title">Stream</span>.<span class="title">of</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span></span></span><br><span class="line"><span class="function">                .<span class="title">reduce</span><span class="params">(<span class="number">0</span>, (t1,t2) -&gt; t1+t2)</span>;//<span class="title">BinaryOperator</span>接口   <span class="title">T</span> <span class="title">apply</span><span class="params">(T t1, T t2)</span></span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(reduce)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">test10</span><span class="params">()</span>&#123;</span></span><br><span class="line"><span class="function">        <span class="title">Optional</span>&lt;<span class="title">Integer</span>&gt; <span class="title">max</span> = <span class="title">Stream</span>.<span class="title">of</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span></span></span><br><span class="line"><span class="function">                .<span class="title">reduce</span><span class="params">((t1,t2) -&gt; t1&gt;t2?t1:t2)</span>;//<span class="title">BinaryOperator</span>接口   <span class="title">T</span> <span class="title">apply</span><span class="params">(T t1, T t2)</span></span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(max)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">test11</span><span class="params">()</span>&#123;</span></span><br><span class="line"><span class="function">        <span class="title">List</span>&lt;<span class="title">Integer</span>&gt; <span class="title">list</span> = <span class="title">Stream</span>.<span class="title">of</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>)</span></span></span><br><span class="line"><span class="function">                .<span class="title">filter</span><span class="params">(t -&gt; t%<span class="number">2</span>==<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">                .<span class="title">collect</span><span class="params">(Collectors.toList())</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>)</span>;</span></span><br><span class="line"><span class="function">    &#125;   </span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-JDK8-17-新特性-JDK8-之后的语法新特性汇总-1"><a href="#5-JDK8-17-新特性-JDK8-之后的语法新特性汇总-1" class="headerlink" title="5.JDK8-17 新特性-JDK8 之后的语法新特性汇总 1"></a><code>5.JDK8-17 新特性-JDK8 之后的语法新特性汇总 1</code></h3><h4 id="1-Java9新增API"><a href="#1-Java9新增API" class="headerlink" title="1. Java9新增API"></a>1. Java9新增API</h4><p><strong>新增1：Stream实例化方法</strong><br>ofNullable()的使用：<br>Java 8 中 Stream 不能完全为null，否则会报空指针异常。而 Java 9 中的 ofNullable 方法允许我们创建一个单元素 Stream，可以包含一个非空元素，也可以创建一个空 Stream。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">//报NullPointerException</span><br><span class="line">//Stream&lt;<span class="keyword">Object</span>&gt; stream1 = Stream.<span class="keyword">of</span>(<span class="keyword">null</span>);</span><br><span class="line">//<span class="keyword">System</span>.<span class="keyword">out</span>.println(stream1.count());</span><br><span class="line"></span><br><span class="line">//不报异常，允许通过</span><br><span class="line">Stream&lt;String&gt; stringStream = Stream.<span class="keyword">of</span>(&quot;AA&quot;, &quot;BB&quot;, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(stringStream.count());//<span class="number">3</span></span><br><span class="line"></span><br><span class="line">//不报异常，允许通过</span><br><span class="line">List&lt;String&gt; list = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.<span class="keyword">add</span>(&quot;AA&quot;);</span><br><span class="line">list.<span class="keyword">add</span>(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(list.stream().count());//<span class="number">2</span></span><br><span class="line">//ofNullable()：允许值为<span class="keyword">null</span></span><br><span class="line">Stream&lt;<span class="keyword">Object</span>&gt; stream1 = Stream.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(stream1.count());//<span class="number">0</span></span><br><span class="line"></span><br><span class="line">Stream&lt;String&gt; stream = Stream.ofNullable(&quot;hello world&quot;);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(stream.count());//<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>iterator()重载的使用：<br>&#x2F;&#x2F;原来的控制终止方式： Stream.iterate(1,i -&gt; i + 1).limit(10).forEach(System.out::println); &#x2F;&#x2F;现在的终止方式： Stream.iterate(1,i -&gt; i &lt; 100,i -&gt; i + 1).forEach(System.out::println); </p>
<h4 id="2-练习"><a href="#2-练习" class="headerlink" title="2.练习"></a>2.练习</h4><p>现在有两个 ArrayList 集合存储队伍当中的多个成员姓名，要求使用传统的for循环（或增强for循环）依次进行以下若干操作步骤：</p>
<ol>
<li>第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。</li>
<li>第一个队伍筛选之后只要前3个人；存储到一个新集合中。</li>
<li>第二个队伍只要姓张的成员姓名；存储到一个新集合中。</li>
<li>第二个队伍筛选之后不要前2个人；存储到一个新集合中。</li>
<li>将两个队伍合并为一个队伍；存储到一个新集合中。</li>
<li>根据姓名创建 Person 对象；存储到一个新集合中。</li>
<li>打印整个队伍的Person对象信息。</li>
</ol>
<p>Person 类的代码为：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Person</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Person</span>(<span class="title class_">String</span> name) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setName</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个队伍（集合）的代码如下：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">       //第一支队伍</span><br><span class="line">        ArrayList&lt;String&gt; one <span class="operator">=</span> new ArrayList&lt;&gt;()<span class="comment">;</span></span><br><span class="line">        one.add(<span class="string">&quot;迪丽热巴&quot;</span>)<span class="comment">;</span></span><br><span class="line">        one.add(<span class="string">&quot;宋远桥&quot;</span>)<span class="comment">;</span></span><br><span class="line">        one.add(<span class="string">&quot;苏星河&quot;</span>)<span class="comment">;</span></span><br><span class="line">        one.add(<span class="string">&quot;石破天&quot;</span>)<span class="comment">;</span></span><br><span class="line">        one.add(<span class="string">&quot;石中玉&quot;</span>)<span class="comment">;</span></span><br><span class="line">        one.add(<span class="string">&quot;老子&quot;</span>)<span class="comment">;</span></span><br><span class="line">        one.add(<span class="string">&quot;庄子&quot;</span>)<span class="comment">;</span></span><br><span class="line">        one.add(<span class="string">&quot;洪七公&quot;</span>)<span class="comment">;</span></span><br><span class="line">        //第二支队伍</span><br><span class="line">        ArrayList&lt;String&gt; two <span class="operator">=</span> new ArrayList&lt;&gt;()<span class="comment">;</span></span><br><span class="line">        two.add(<span class="string">&quot;古力娜扎&quot;</span>)<span class="comment">;</span></span><br><span class="line">        two.add(<span class="string">&quot;张无忌&quot;</span>)<span class="comment">;</span></span><br><span class="line">        two.add(<span class="string">&quot;赵丽颖&quot;</span>)<span class="comment">;</span></span><br><span class="line">        two.add(<span class="string">&quot;张三丰&quot;</span>)<span class="comment">;</span></span><br><span class="line">        two.add(<span class="string">&quot;尼古拉斯赵四&quot;</span>)<span class="comment">;</span></span><br><span class="line">        two.add(<span class="string">&quot;张天爱&quot;</span>)<span class="comment">;</span></span><br><span class="line">        two.add(<span class="string">&quot;张二狗&quot;</span>)<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">        // ....编写代码完成题目要求 </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>参考答案：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">public static void main(String[] <span class="keyword">args</span>) &#123;</span><br><span class="line">       <span class="comment">//第一支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; <span class="keyword">one</span> = new ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">one</span>.add(<span class="string">&quot;迪丽热巴&quot;</span>);</span><br><span class="line">        <span class="keyword">one</span>.add(<span class="string">&quot;宋远桥&quot;</span>);</span><br><span class="line">        <span class="keyword">one</span>.add(<span class="string">&quot;苏星河&quot;</span>);</span><br><span class="line">        <span class="keyword">one</span>.add(<span class="string">&quot;石破天&quot;</span>);</span><br><span class="line">        <span class="keyword">one</span>.add(<span class="string">&quot;石中玉&quot;</span>);</span><br><span class="line">        <span class="keyword">one</span>.add(<span class="string">&quot;老子&quot;</span>);</span><br><span class="line">        <span class="keyword">one</span>.add(<span class="string">&quot;庄子&quot;</span>);</span><br><span class="line">        <span class="keyword">one</span>.add(<span class="string">&quot;洪七公&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//第二支队伍</span></span><br><span class="line">        ArrayList&lt;String&gt; <span class="keyword">two</span> = new ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">two</span>.add(<span class="string">&quot;古力娜扎&quot;</span>);</span><br><span class="line">        <span class="keyword">two</span>.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        <span class="keyword">two</span>.add(<span class="string">&quot;赵丽颖&quot;</span>);</span><br><span class="line">        <span class="keyword">two</span>.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        <span class="keyword">two</span>.add(<span class="string">&quot;尼古拉斯赵四&quot;</span>);</span><br><span class="line">        <span class="keyword">two</span>.add(<span class="string">&quot;张天爱&quot;</span>);</span><br><span class="line">        <span class="keyword">two</span>.add(<span class="string">&quot;张二狗&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line">        <span class="comment">// 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line">        Stream&lt;String&gt; streamOne = <span class="keyword">one</span>.stream().filter(s ‐&gt; s.<span class="built_in">length</span>() == 3).limit(3);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line">        <span class="comment">// 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line">        Stream&lt;String&gt; streamTwo = <span class="keyword">two</span>.stream().filter(s ‐&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).skip(2);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 将两个队伍合并为一个队伍；</span></span><br><span class="line">        <span class="comment">// 根据姓名创建Person对象；</span></span><br><span class="line">        <span class="comment">// 打印整个队伍的Person对象信息。</span></span><br><span class="line">        Stream.concat(streamOne, streamTwo).map(Person::new).<span class="keyword">forEach</span>(System.<span class="keyword">out</span>::println);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-JDK8-17-新特性-JDK8-之后的语法新特性汇总-2-及-API-层面变化"><a href="#6-JDK8-17-新特性-JDK8-之后的语法新特性汇总-2-及-API-层面变化" class="headerlink" title="6.JDK8-17 新特性-JDK8 之后的语法新特性汇总 2 及 API 层面变化"></a><code>6.JDK8-17 新特性-JDK8 之后的语法新特性汇总 2 及 API 层面变化</code></h3><h4 id="1-新语法结构"><a href="#1-新语法结构" class="headerlink" title="1. 新语法结构"></a>1. 新语法结构</h4><p>新的语法结构，为我们勾勒出了 Java 语法进化的一个趋势，将开发者从<code>复杂、繁琐</code>的低层次抽象中逐渐解放出来，以更高层次、更优雅的抽象，既<code>降低代码量</code>，又避免意外编程错误的出现，进而提高代码质量和开发效率。</p>
<h5 id="1-1-Java的REPL工具：-jShell命令"><a href="#1-1-Java的REPL工具：-jShell命令" class="headerlink" title="1.1 Java的REPL工具： jShell命令"></a>1.1 Java的REPL工具： jShell命令</h5><p><strong>JDK9的新特性</strong></p>
<p>Java 终于拥有了像Python 和 Scala 之类语言的REPL工具（交互式编程环境，read - evaluate - print - loop）：<code>jShell</code>。以交互式的方式对语句和表达式进行求值。<code>即写即得</code>、<code>快速运行</code>。</p>
<p>利用jShell在没有创建类的情况下，在命令行里直接声明变量，计算表达式，执行语句。无需跟人解释”public static void main(String[] args)”这句”废话”。</p>
<p><strong>使用举例</strong></p>
<ul>
<li><p>调出jShell</p>
</li>
<li><p>获取帮助</p>
</li>
<li><p>基本使用</p>
</li>
<li><p>导入指定的包</p>
</li>
<li><p>默认已经导入如下的所有包：（包含java.lang包）</p>
</li>
<li><p>只需按下 Tab 键，就能自动补全代码</p>
</li>
<li><p>列出当前 session 里所有有效的代码片段</p>
</li>
<li><p>查看当前 session 下所有创建过的变量</p>
</li>
<li><p>查看当前 session 下所有创建过的方法</p>
</li>
</ul>
<blockquote>
<p>Tips：我们还可以重新定义相同方法名和参数列表的方法，即对现有方法的修改（或覆盖）。</p>
</blockquote>
<ul>
<li>使用外部代码编辑器来编写 Java 代码</li>
</ul>
<p>从外部文件加载源代码【HelloWorld.java】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by songhongkang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printHello</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;马上2023年了，尚硅谷祝所有的谷粉元旦快乐！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">printHello();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用&#x2F;open命令调用</p>
</li>
<li><p>退出jShell</p>
</li>
</ul>
<h5 id="1-2-异常处理之try-catch资源关闭"><a href="#1-2-异常处理之try-catch资源关闭" class="headerlink" title="1.2 异常处理之try-catch资源关闭"></a>1.2 异常处理之try-catch资源关闭</h5><p>在JDK7 之前，我们这样处理资源的关闭：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d:/1.txt&quot;</span>);</span><br><span class="line">        bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line"></span><br><span class="line">        bw.write(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bw != <span class="literal">null</span>) &#123;</span><br><span class="line">                bw.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fw != <span class="literal">null</span>) &#123;</span><br><span class="line">                fw.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JDK7的新特性</strong></p>
<p>在try的后面可以增加一个()，在括号中可以声明流对象并初始化。try中的代码执行完毕，会自动把流对象释放，就不用写finally了。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(资源对象的声明和初始化)&#123;</span><br><span class="line">    业务逻辑代码,可能会产生异常</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> e)&#123;</span><br><span class="line">    处理异常代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> e)&#123;</span><br><span class="line">    处理异常代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>1、在try()中声明的资源，无论是否发生异常，无论是否处理异常，都会自动关闭资源对象，不用手动关闭了。</p>
<p>2、这些资源实现类必须实现AutoCloseable或Closeable接口，实现其中的close()方法。Closeable是AutoCloseable的子接口。Java7几乎把所有的“资源类”（包括文件IO的各种类、JDBC编程的Connection、Statement等接口…）都进行了改写，改写后资源类都实现了AutoCloseable或Closeable接口，并实现了close()方法。</p>
<p>3、写到try()中的资源类的变量默认是final声明的，不能修改。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//举例1</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d:/1.txt&quot;</span>);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line">    ) &#123;</span><br><span class="line">        bw.write(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//举例2</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//从d:/1.txt(utf-8)文件中，读取内容，写到项目根目录下1.txt(gbk)文件中</span></span><br><span class="line">    <span class="keyword">try</span> (</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:/1.txt&quot;</span>);</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>);</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(osw);</span><br><span class="line">    ) &#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">while</span> ((str = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            bw.write(str);</span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JDK9的新特性</strong></p>
<p>try的前面可以定义流对象，try后面的()中可以直接引用流对象的名称。在try代码执行完毕后，流对象也可以释放掉，也不用写finally了。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line"><span class="keyword">try</span>(a;b)&#123;</span><br><span class="line">    可能产生的异常代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类名 变量名)&#123;</span><br><span class="line">    异常处理的逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in);</span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out);</span><br><span class="line">    <span class="keyword">try</span> (reader; writer) &#123;</span><br><span class="line">        <span class="comment">//reader是final的，不可再被赋值</span></span><br><span class="line">        <span class="comment">//   reader = null;</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-局部变量类型推断"><a href="#1-3-局部变量类型推断" class="headerlink" title="1.3 局部变量类型推断"></a>1.3 局部变量类型推断</h5><p><strong>JDK 10的新特性</strong></p>
<p>局部变量的显示类型声明，常常被认为是不必须的，给一个好听的名字反而可以很清楚的表达出下面应该怎样继续。本新特性允许开发人员省略通常不必要的局部变量类型声明，以增强Java语言的体验性、可读性。</p>
<ul>
<li>使用举例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.局部变量的实例化</span></span><br><span class="line"><span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.增强for循环中的索引</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v : list) &#123;</span><br><span class="line">    System.out.println(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.传统for循环中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 返回值类型含复杂泛型结构</span></span><br><span class="line"><span class="type">var</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line"><span class="comment">//Iterator&lt;Map.Entry&lt;Integer, Student&gt;&gt; iterator = set.iterator();</span></span><br></pre></td></tr></table></figure>

<ul>
<li>不适用场景 <ul>
<li>声明一个成员变量</li>
<li>声明一个数组变量，并为数组静态初始化（省略new的情况下）</li>
<li>方法的返回值类型</li>
<li>方法的参数类型</li>
<li>没有初始化的方法内的局部变量声明</li>
<li>作为catch块中异常类型</li>
<li>Lambda表达式中函数式接口的类型</li>
<li>方法引用中函数式接口的类型</li>
</ul>
</li>
</ul>
<p>代码举例：</p>
<p>声明一个成员变量，并初始化值为null</p>
<p>声明一个数组变量，并为数组静态初始化（省略new的情况下）</p>
<p>没有初始化的方法内的局部变量声明</p>
<p>方法的返回值类型</p>
<p>方法的参数类型</p>
<p>构造器的参数类型</p>
<p>作为catch块中异常类型</p>
<p>Lambda表达式中函数式接口的类型</p>
<p>方法引用中函数式接口的类型</p>
<p><strong>注意：</strong></p>
<ul>
<li>var不是一个关键字，而是一个类型名，将它作为变量的类型。不能使用var作为类名。</li>
<li>这不是JavaScript。var并不会改变 Java是一门静态类型语言的事实。编译器负责推断出类型，并把结果写入字节码文件，就好像是开发人员自己敲入类型一样。</li>
</ul>
<h5 id="1-4-instanceof的模式匹配"><a href="#1-4-instanceof的模式匹配" class="headerlink" title="1.4 instanceof的模式匹配"></a>1.4 instanceof的模式匹配</h5><p><strong>JDK14中预览特性：</strong></p>
<p>instanceof 模式匹配通过提供更为简便的语法，来提高生产力。有了该功能，可以减少Java程序中显式强制转换的数量，实现更精确、简洁的类型安全的代码。</p>
<p>Java 14之前旧写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String)obj; <span class="comment">//需要强转</span></span><br><span class="line">    .. str.contains(..)..</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java 14新特性写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String str)&#123;</span><br><span class="line">    .. str.contains(..)..</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * instanceof的模式匹配（预览）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 上午 11:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Feature01</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello,Java14&quot;</span>);</span><br><span class="line">        obj = <span class="literal">null</span>;<span class="comment">//在使用null 匹配instanceof 时，返回都是false.</span></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) obj;</span><br><span class="line">            System.out.println(str.contains(<span class="string">&quot;Java&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;非String类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例1：</span></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String str)&#123; <span class="comment">//新特性：省去了强制类型转换的过程</span></span><br><span class="line">            System.out.println(str.contains(<span class="string">&quot;Java&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;非String类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 举例2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InstanceOf</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String str)&#123;<span class="comment">//此时的str的作用域仅限于if结构内。</span></span><br><span class="line">            System.out.println(str.toUpperCase());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(str.toLowerCase());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//举例3：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monitor</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public boolean equals(Object o)&#123;</span></span><br><span class="line"><span class="comment">//        if(o instanceof Monitor other)&#123;</span></span><br><span class="line"><span class="comment">//            if(model.equals(other.model) &amp;&amp; price == other.price)&#123;</span></span><br><span class="line"><span class="comment">//                return true;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return false;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o <span class="keyword">instanceof</span> Monitor other &amp;&amp; model.equals(other.model) &amp;&amp; price == other.price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JDK15中第二次预览：</strong></p>
<p>没有任何更改。</p>
<p><strong>JDK16中转正特性：</strong></p>
<p>在Java16中转正。</p>
<h5 id="1-5-switch表达式"><a href="#1-5-switch表达式" class="headerlink" title="1.5 switch表达式"></a>1.5 switch表达式</h5><p>传统switch声明语句的弊端：</p>
<ul>
<li>匹配是自上而下的，如果忘记写break，后面的case语句不论匹配与否都会执行； —&gt;case穿透</li>
<li>所有的case语句共用一个块范围，在不同的case语句定义的变量名不能重复；</li>
<li>不能在一个case里写多个执行结果一致的条件；</li>
<li>整个switch不能作为表达式返回值；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常见错误实现</span></span><br><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>:<span class="comment">//3|4|5 用了位运算符，11 | 100 | 101结果是 111是7</span></span><br><span class="line">        System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>:<span class="comment">//6|7|8用了位运算符，110 | 111 | 1000结果是1111是15</span></span><br><span class="line">        System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>|<span class="number">10</span>|<span class="number">11</span>:<span class="comment">//9|10|11用了位运算符，1001 | 1010 | 1011结果是1011是11</span></span><br><span class="line">        System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>|<span class="number">1</span>|<span class="number">2</span>:<span class="comment">//12|1|2 用了位运算符，1100 | 1 | 10 结果是1111，是15</span></span><br><span class="line">        System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;输入有误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JDK12中预览特性：</strong></p>
<ul>
<li>Java 12将会对switch声明语句进行扩展，使用<code>case L -&gt;</code>来替代以前的<code>break;</code>，省去了 break 语句，避免了因少写 break 而出错。</li>
<li>同时将多个 case 合并到一行，显得简洁、清晰，也更加优雅的表达逻辑分支。</li>
<li>为了保持兼容性，case 条件语句中依然可以使用字符<code>:</code> ，但是同一个 switch 结构里不能混用<code>-&gt;</code> 和<code>:</code> ，否则编译错误。</li>
</ul>
<p>举例：</p>
<p>Java 12之前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 下午 4:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> numberOfLetters;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> Fruit.APPLE;</span><br><span class="line">        <span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">            <span class="keyword">case</span> PEAR:</span><br><span class="line">                numberOfLetters = <span class="number">4</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> APPLE:</span><br><span class="line">            <span class="keyword">case</span> GRAPE:</span><br><span class="line">            <span class="keyword">case</span> MANGO:</span><br><span class="line">                numberOfLetters = <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ORANGE:</span><br><span class="line">            <span class="keyword">case</span> PAPAYA:</span><br><span class="line">                numberOfLetters = <span class="number">6</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No Such Fruit:&quot;</span> + fruit);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(numberOfLetters);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    PEAR, APPLE, GRAPE, MANGO, ORANGE, PAPAYA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>switch 语句如果漏写了一个 break，那么逻辑往往就跑偏了，这种方式既繁琐，又容易出错。</p>
<p>Java 12中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 下午 10:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> Fruit.GRAPE;</span><br><span class="line">        <span class="keyword">switch</span>(fruit)&#123;</span><br><span class="line">            <span class="keyword">case</span> PEAR -&gt; System.out.println(<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">case</span> APPLE,MANGO,GRAPE -&gt; System.out.println(<span class="number">5</span>);</span><br><span class="line">            <span class="keyword">case</span> ORANGE,PAPAYA -&gt; System.out.println(<span class="number">6</span>);</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No Such Fruit:&quot;</span> + fruit);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更进一步：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 下午 10:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> Fruit.GRAPE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numberOfLetters</span> <span class="operator">=</span> <span class="keyword">switch</span>(fruit)&#123;</span><br><span class="line">            <span class="keyword">case</span> PEAR -&gt; <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">case</span> APPLE,MANGO,GRAPE -&gt; <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">case</span> ORANGE,PAPAYA -&gt; <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No Such Fruit:&quot;</span> + fruit);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(numberOfLetters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JDK13中二次预览特性：</strong></p>
<p>JDK13中引入了yield语句，用于返回值。这意味着，switch表达式(返回值)应该使用yield，switch语句(不返回值)应该使用break。</p>
<p>yield和return的区别在于：return会直接跳出当前循环或者方法，而yield只会跳出当前switch块。</p>
<p>在以前：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSwitch1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            i=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            i=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            i = x.length();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在JDK13中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSwitch2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span> -&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span> -&gt; <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSwitch3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JDK14中转正特性：</strong></p>
<p>这是JDK 12和JDK 13中的预览特性，现在是正式特性了。</p>
<p><strong>JDK17的预览特性：switch的模式匹配</strong></p>
<p>旧写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> String <span class="title function_">formatter</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">formatted</span> <span class="operator">=</span> <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Integer i) &#123;</span><br><span class="line">        formatted = String.format(<span class="string">&quot;int %d&quot;</span>, i);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Long l) &#123;</span><br><span class="line">        formatted = String.format(<span class="string">&quot;long %d&quot;</span>, l);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Double d) &#123;</span><br><span class="line">        formatted = String.format(<span class="string">&quot;double %f&quot;</span>, d);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> String s) &#123;</span><br><span class="line">        formatted = String.format(<span class="string">&quot;String %s&quot;</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> formatted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模式匹配新写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> String <span class="title function_">formatterPatternSwitch</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">switch</span> (o) &#123;</span><br><span class="line">        <span class="keyword">case</span> Integer i -&gt; String.format(<span class="string">&quot;int %d&quot;</span>, i);</span><br><span class="line">        <span class="keyword">case</span> Long l    -&gt; String.format(<span class="string">&quot;long %d&quot;</span>, l);</span><br><span class="line">        <span class="keyword">case</span> Double d  -&gt; String.format(<span class="string">&quot;double %f&quot;</span>, d);</span><br><span class="line">        <span class="keyword">case</span> String s  -&gt; String.format(<span class="string">&quot;String %s&quot;</span>, s);</span><br><span class="line">        <span class="keyword">default</span>        -&gt; o.toString();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接在 switch 上支持 Object 类型，这就等于同时支持多种类型，使用模式匹配得到具体类型，大大简化了语法量，这个功能很实用。</p>
<h5 id="1-6-文本块"><a href="#1-6-文本块" class="headerlink" title="1.6 文本块"></a>1.6 文本块</h5><p>现实问题：</p>
<p>在Java中，通常需要使用String类型表达HTML，XML，SQL或JSON等格式的字符串，在进行字符串赋值时需要进行转义和连接操作，然后才能编译该代码，这种表达方式难以阅读并且难以维护。</p>
<p><strong>JDK13的新特性</strong></p>
<p>使用”””作为文本块的开始符和结束符，在其中就可以放置多行的字符串，不需要进行任何转义。因此，文本块将提高Java程序的可读性和可写性。</p>
<p>基本使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>相当于：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;line1\nline2\nline3\n&quot;</span></span><br></pre></td></tr></table></figure>

<p>或者一个连接的字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;line1\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;line2\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;line3\n&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果字符串末尾不需要行终止符，则结束分隔符可以放在最后一行内容上。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;line1\nline2\nline3&quot;</span></span><br></pre></td></tr></table></figure>

<p>文本块可以表示空字符串，但不建议这样做，因为它需要两行源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">empty</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>举例1：普通文本</p>
<p>原有写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">String</span> <span class="variable">text1</span> <span class="operator">=</span> <span class="string">&quot;The Sound of silence\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Hello darkness, my old friend\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;I&#x27;ve come to talk with you again\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Because a vision softly creeping\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Left its seeds while I was sleeping\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;And the vision that was planted in my brain\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Still remains\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Within the sound of silence&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(text1);</span><br></pre></td></tr></table></figure>

<p>使用新特性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text2</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                The Sound of silence</span></span><br><span class="line"><span class="string">                Hello darkness, my old friend</span></span><br><span class="line"><span class="string">                I&#x27;ve come to talk with you again</span></span><br><span class="line"><span class="string">                Because a vision softly creeping</span></span><br><span class="line"><span class="string">                Left its seeds while I was sleeping</span></span><br><span class="line"><span class="string">                And the vision that was planted in my brain</span></span><br><span class="line"><span class="string">                Still remains</span></span><br><span class="line"><span class="string">                Within the sound of silence</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line">System.out.println(text2);</span><br></pre></td></tr></table></figure>

<p>举例2：HTML语句</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, 尚硅谷<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将其复制到Java的字符串中，会展示成以下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&lt;html&gt;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;    &lt;body&gt;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;        &lt;p&gt;Hello, 尚硅谷&lt;/p&gt;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;    &lt;/body&gt;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;/html&gt;\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>即被自动进行了转义，这样的字符串看起来不是很直观，在JDK 13中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;Hello, world&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>举例3：SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,last_name,salary,department_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> department_id <span class="keyword">in</span> (<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> department_id <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>

<p>原有方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id,NAME,email\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;FROM customers\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;WHERE id &gt; 4\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ORDER BY email DESC&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>使用新特性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                SELECT id,NAME,email</span></span><br><span class="line"><span class="string">                FROM customers</span></span><br><span class="line"><span class="string">                WHERE id &gt; 4</span></span><br><span class="line"><span class="string">                ORDER BY email DESC</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>举例4：JSON字符串</p>
<p>原有方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">myJson</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;name\&quot;:\&quot;Song Hongkang\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;     \&quot;address\&quot;:\&quot;www.this0.com\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;email\&quot;:\&quot;shkstart@126.com\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">System.out.println(myJson);</span><br></pre></td></tr></table></figure>

<p>使用新特性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">myJson1</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    &quot;name&quot;:&quot;Song Hongkang&quot;,</span></span><br><span class="line"><span class="string">                     &quot;address&quot;:&quot;www.this0.com&quot;,</span></span><br><span class="line"><span class="string">                    &quot;email&quot;:&quot;shkstart@126.com&quot;</span></span><br><span class="line"><span class="string">                &#125;&quot;&quot;&quot;</span>;</span><br><span class="line">System.out.println(myJson1);</span><br></pre></td></tr></table></figure>

<p><strong>JDK14中二次预览特性</strong></p>
<p>JDK14的版本主要增加了两个escape sequences，分别是<code>\ &lt;line-terminator&gt;</code>与<code>\s escape sequence</code>。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 下午 7:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Feature05</span> &#123;</span><br><span class="line">    <span class="comment">//jdk14新特性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                SELECT id,NAME,email</span></span><br><span class="line"><span class="string">                FROM customers</span></span><br><span class="line"><span class="string">                WHERE id &gt; 4</span></span><br><span class="line"><span class="string">                ORDER BY email DESC</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line">        System.out.println(sql1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// \:取消换行操作</span></span><br><span class="line">        <span class="comment">// \s:表示一个空格</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                SELECT id,NAME,email \</span></span><br><span class="line"><span class="string">                FROM customers\s\</span></span><br><span class="line"><span class="string">                WHERE id &gt; 4 \</span></span><br><span class="line"><span class="string">                ORDER BY email DESC</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span>;</span><br><span class="line">        System.out.println(sql2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JDK15中功能转正</strong></p>
<h5 id="1-7-Record"><a href="#1-7-Record" class="headerlink" title="1.7 Record"></a>1.7 Record</h5><p><code>背景</code></p>
<p>早在2019年2月份，Java 语言架构师 Brian Goetz，曾写文抱怨“<code>Java太啰嗦</code>”或有太多的“繁文缛节”。他提到：开发人员想要创建纯数据载体类（plain data carriers）通常都必须编写大量低价值、重复的、容易出错的代码。如：构造函数、getter&#x2F;setter、equals()、hashCode()以及toString()等。</p>
<p>以至于很多人选择使用IDE的功能来自动生成这些代码。还有一些开发会选择使用一些第三方类库，如Lombok等来生成这些方法。</p>
<p><strong>JDK14中预览特性：神说要用record，于是就有了。</strong>实现一个简单的数据载体类，为了避免编写：构造函数，访问器，equals()，hashCode () ，toString ()等，Java 14推出record。</p>
<p><code>record</code> 是一种全新的类型，它本质上是一个 <code>final</code> 类，同时所有的属性都是 <code>final</code> 修饰，它会自动编译出 <code>public get</code> 、<code>hashcode</code> 、<code>equals</code>、<code>toString</code>、构造器等结构，减少了代码编写量。</p>
<p>具体来说：当你用<code>record</code> 声明一个类时，该类将自动拥有以下功能：</p>
<ul>
<li>获取成员变量的简单方法，比如例题中的 name() 和 partner() 。注意区别于我们平常getter()的写法。</li>
<li>一个 equals 方法的实现，执行比较时会比较该类的所有成员属性。</li>
<li>重写 hashCode() 方法。</li>
<li>一个可以打印该类所有成员属性的 toString() 方法。</li>
<li>只有一个构造方法。</li>
</ul>
<p>此外：</p>
<ul>
<li>还可以在record声明的类中定义静态字段、静态方法、构造器或实例方法。</li>
<li>不能在record声明的类中定义实例字段；类不能声明为abstract；不能声明显式的父类等。</li>
</ul>
<p>举例1（旧写法）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    Point(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">x</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">y</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Point)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">other</span> <span class="operator">=</span> (Point) o;</span><br><span class="line">        <span class="keyword">return</span> other.x == x &amp;&amp; other.y == y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Point&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;x=&quot;</span> + x +</span><br><span class="line">                <span class="string">&quot;, y=&quot;</span> + y +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例1（新写法）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">record</span> <span class="title class_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>举例1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Dog</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java14Record</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;牧羊犬&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;田园犬&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;哈士奇&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(dog1);</span><br><span class="line">        System.out.println(dog2);</span><br><span class="line">        System.out.println(dog3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Record类型的演示</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 下午 6:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Feature07</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//测试构造器</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;罗密欧&quot;</span>,<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhuliye&quot;</span>,<span class="literal">null</span>));</span><br><span class="line">        <span class="comment">//测试toString()</span></span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        <span class="comment">//测试equals():</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;罗密欧&quot;</span>,<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhuliye&quot;</span>,<span class="literal">null</span>));</span><br><span class="line">        System.out.println(p1.equals(p2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试hashCode()和equals()</span></span><br><span class="line">        HashSet&lt;Person&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : set) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试name()和partner():类似于getName()和getPartner()</span></span><br><span class="line">        System.out.println(p1.name());</span><br><span class="line">        System.out.println(p1.partner());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhuyingtai&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(p1.getNameInUpperCase());</span><br><span class="line"></span><br><span class="line">        Person.nation = <span class="string">&quot;CHN&quot;</span>;</span><br><span class="line">        System.out.println(Person.showNation());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 下午 6:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">Person</span><span class="params">(String name,Person partner)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//还可以声明静态的属性、静态的方法、构造器、实例方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String nation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">showNation</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(name,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNameInUpperCase</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不可以声明非静态的属性</span></span><br><span class="line"><span class="comment">//    private int id;//报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不可以将record定义的类声明为abstract的</span></span><br><span class="line"><span class="comment">//abstract record Order()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不可以给record定义的类声明显式的父类（非Record类）</span></span><br><span class="line"><span class="comment">//record Order() extends Thread&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>JDK15中第二次预览特性</strong></p>
<p><strong>JDK16中转正特性</strong></p>
<p>最终到JDK16中转正。</p>
<p><code>记录不适合哪些场景</code></p>
<p>record的设计目标是提供一种将数据建模为数据的好方法。它也不是 JavaBeans 的直接替代品，因为record的方法不符合 JavaBeans 的 get 标准。另外 JavaBeans 通常是可变的，而记录是不可变的。尽管它们的用途有点像，但记录并不会以某种方式取代 JavaBean。</p>
<h5 id="1-8-密封类"><a href="#1-8-密封类" class="headerlink" title="1.8 密封类"></a>1.8 密封类</h5><p>背景：</p>
<p>在 Java 中如果想让一个类不能被继承和修改，这时我们应该使用 <code>final</code> 关键字对类进行修饰。不过这种要么可以继承，要么不能继承的机制不够灵活，有些时候我们可能想让某个类可以被某些类型继承，但是又不能随意继承，是做不到的。Java 15 尝试解决这个问题，引入了 <code>sealed</code> 类，被 <code>sealed</code> 修饰的类可以指定子类。这样这个类就只能被指定的类继承。</p>
<p><strong>JDK15的预览特性：</strong></p>
<p>通过密封的类和接口来限制超类的使用，密封的类和接口限制其它可能继承或实现它们的其它类或接口。</p>
<p>具体使用：</p>
<ul>
<li>使用修饰符<code>sealed</code>，可以将一个类声明为密封类。密封的类使用保留关键字<code>permits</code>列出可以直接扩展（即extends）它的类。 </li>
<li><code>sealed</code> 修饰的类的机制具有传递性，它的子类必须使用指定的关键字进行修饰，且只能是 <code>final</code>、<code>sealed</code>、<code>non-sealed</code> 三者之一。</li>
</ul>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.java;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Shape</span> <span class="keyword">permits</span> Circle, Rectangle, Square &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;...&#125; <span class="comment">//final表示Circle不能再被继承了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> <span class="keyword">permits</span> TransparentRectangle, FilledRectangle &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransparentRectangle</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FilledRectangle</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">non-sealed</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;...&#125; <span class="comment">//non-sealed表示可以允许任何类继承</span></span><br></pre></td></tr></table></figure>

<p><strong>JDK16二次预览特性</strong></p>
<p><strong>JDK17中转正特性</strong></p>
<h4 id="2-API的变化"><a href="#2-API的变化" class="headerlink" title="2. API的变化"></a>2. API的变化</h4><h5 id="2-1-Optional类"><a href="#2-1-Optional类" class="headerlink" title="2.1 Optional类"></a>2.1 Optional类</h5><p><strong>JDK8的新特性</strong></p>
<p>到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google在著名的Guava项目引入了Optional类，通过检查空值的方式避免空指针异常。受到Google的启发，Optional类已经成为Java 8类库的一部分。</p>
<p><code>Optional&lt;T&gt;</code> 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。如果值存在，则isPresent()方法会返回true，调用get()方法会返回该对象。</p>
<p>Optional提供很多有用的方法，这样我们就不用显式进行空值检测。</p>
<ul>
<li><code>创建Optional类对象的方法：</code></li>
<li>static  Optional empty() ：用来创建一个空的Optional实例 <ul>
<li>static  Optional of(T value) ：用来创建一个Optional实例，value必须非空</li>
<li><code>static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value)</code> ：用来创建一个Optional实例，value可能是空，也可能非空</li>
</ul>
</li>
<li><code>判断Optional容器中是否包含对象：</code> <ul>
<li>boolean isPresent() : 判断Optional容器中的值是否存在</li>
<li>void ifPresent(Consumer&lt;? super T&gt; consumer) ：判断Optional容器中的值是否存在，如果存在，就对它进行Consumer指定的操作，如果不存在就不做</li>
</ul>
</li>
<li><code>获取Optional容器的对象：</code></li>
<li>T get(): 如果调用对象包含值，返回该值。否则抛异常。T get()与of(T value)配合使用</li>
<li><code>T orElse(T other)</code>：orElse(T other) 与ofNullable(T value)配合使用，如果Optional容器中非空，就返回所包装值，如果为空，就用orElse(T other)other指定的默认值（备胎）代替</li>
<li>T orElseGet(Supplier&lt;? extends T&gt; other) ：如果Optional容器中非空，就返回所包装值，如果为空，就用Supplier接口的Lambda表达式提供的值代替</li>
<li>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) ：如果Optional容器中非空，就返回所包装值，如果为空，就抛出你指定的异常类型代替原来的NoSuchElementException</li>
</ul>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.this0.optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOptional</span> &#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.of(str);</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.empty();</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        System.out.println(opt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.of(str);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.get();</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line"><span class="comment">//		System.out.println(opt.get());//java.util.NoSuchElementException: No value present</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.orElse(<span class="string">&quot;this0&quot;</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.orElseGet(String::<span class="keyword">new</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> opt.orElseThrow(()-&gt;<span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;值不存在&quot;</span>));</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test9</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello1&quot;</span>;</span><br><span class="line">        Optional&lt;String&gt; opt = Optional.ofNullable(str);</span><br><span class="line">        <span class="comment">//判断是否是纯字母单词，如果是，转为大写，否则保持不变</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> opt.filter(s-&gt;s.matches(<span class="string">&quot;[a-zA-Z]+&quot;</span>))</span><br><span class="line">                .map(s -&gt; s.toUpperCase()).orElse(str);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这是JDK9-11的新特性</strong></p>
<table>
<thead>
<tr>
<th><strong>新增方法</strong></th>
<th><strong>描述</strong></th>
<th><strong>新增的版本</strong></th>
</tr>
</thead>
<tbody><tr>
<td>boolean isEmpty()</td>
<td>判断value是否为空</td>
<td>JDK  11</td>
</tr>
<tr>
<td>ifPresentOrElse(Consumer&lt;? super T&gt; action, Runnable emptyAction)</td>
<td>value非空，执行参数1功能；如果value为空，执行参数2功能</td>
<td>JDK  9</td>
</tr>
<tr>
<td>Optional or(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier)</td>
<td>value非空，返回对应的Optional；value为空，返回形参封装的Optional</td>
<td>JDK  9</td>
</tr>
<tr>
<td>Stream stream()</td>
<td>value非空，返回仅包含此value的Stream；否则，返回一个空的Stream</td>
<td>JDK  9</td>
</tr>
<tr>
<td>T orElseThrow()</td>
<td>value非空，返回value；否则抛异常NoSuchElementException</td>
<td>JDK  10</td>
</tr>
</tbody></table>
<h5 id="2-2-String存储结构和API变更"><a href="#2-2-String存储结构和API变更" class="headerlink" title="2.2 String存储结构和API变更"></a>2.2 String存储结构和API变更</h5><p><strong>这是JDK9的新特性。</strong></p>
<p>产生背景：</p>
<blockquote>
<p>Motivation<br>The current implementation of the String class stores characters in a char array, using two bytes (sixteen bits) for each character. Data gathered from many different applications indicates that strings are a major component of heap usage and, moreover, that most String objects contain only Latin-1 characters. Such characters require only one byte of storage, hence half of the space in the internal char arrays of such String objects is going unused.</p>
</blockquote>
<p>使用说明：</p>
<blockquote>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We propose to change the internal representation of the String class from a UTF-16 char array to a byte array plus an encoding-flag field. The new String class will store characters encoded either as ISO-8859-1&#x2F;Latin-1 (one byte per character), or as UTF-16 (two bytes per character), based upon the contents of the string. The encoding flag will indicate which encoding is used.</p>
</blockquote>
<p>结论：String 再也不用 char[] 来存储啦，改成了 byte[] 加上编码标记，节约了一些空间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    <span class="meta">@Stable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] value;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拓展：StringBuffer 与 StringBuilder</p>
<p>那StringBuffer 和 StringBuilder 是否仍无动于衷呢？</p>
<blockquote>
<p>String-related classes such as AbstractStringBuilder, StringBuilder, and StringBuffer will be updated to use the same representation, as will the HotSpot VM’s intrinsic string operations.</p>
</blockquote>
<p><strong>JDK11新特性：新增了一系列字符串处理方法</strong></p>
<table>
<thead>
<tr>
<th><strong>描述</strong></th>
<th><strong>举例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>判断字符串是否为空白</td>
<td>“  “.isBlank(); &#x2F;&#x2F; true</td>
</tr>
<tr>
<td>去除首尾空白</td>
<td>“  Javastack “.strip(); &#x2F;&#x2F; “Javastack”</td>
</tr>
<tr>
<td>去除尾部空格</td>
<td>“  Javastack “.stripTrailing(); &#x2F;&#x2F; “ Javastack”</td>
</tr>
<tr>
<td>去除首部空格</td>
<td>“  Javastack “.stripLeading(); &#x2F;&#x2F; “Javastack “</td>
</tr>
<tr>
<td>复制字符串</td>
<td>“Java”.repeat(3);&#x2F;&#x2F;  “JavaJavaJava”</td>
</tr>
<tr>
<td>行数统计</td>
<td>“A\nB\nC”.lines().count();  &#x2F;&#x2F; 3</td>
</tr>
</tbody></table>
<p><strong>JDK12新特性：String 实现了 Constable 接口</strong></p>
<p>String源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence,Constable, ConstantDesc &#123;</span><br></pre></td></tr></table></figure>

<p>java.lang.constant.Constable接口定义了抽象方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Constable</span> &#123;</span><br><span class="line">	Optional&lt;? <span class="keyword">extends</span> <span class="title class_">ConstantDesc</span>&gt; describeConstable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java 12 String 的实现源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an &#123;<span class="doctag">@link</span> Optional&#125; containing the nominal descriptor for this</span></span><br><span class="line"><span class="comment"> * instance, which is the instance itself.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@link</span> Optional&#125; describing the &#123;<span class="doctag">@linkplain</span> String&#125; instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title function_">describeConstable</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> Optional.of(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很简单，其实就是调用 Optional.of 方法返回一个 Optional 类型。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDescribeConstable</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;尚硅谷Java高级工程师&quot;</span>;</span><br><span class="line">	Optional&lt;String&gt; optional = name.describeConstable();</span><br><span class="line">	System.out.println(optional.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果输出：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">尚硅谷Java高级工程师</span><br></pre></td></tr></table></figure>

<p><strong>JDK12新特性：String新增方法</strong></p>
<p>String的transform(Function)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;foo&quot;</span>.transform(input -&gt; input + <span class="string">&quot; bar&quot;</span>);</span><br><span class="line">System.out.println(result); <span class="comment">//foo bar</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;foo&quot;</span>.transform(input -&gt; input + <span class="string">&quot; bar&quot;</span>).transform(String::toUpperCase)</span><br><span class="line">System.out.println(result); <span class="comment">//FOO BAR</span></span><br></pre></td></tr></table></figure>

<p>对应的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* This method allows the application of a function to &#123;<span class="doctag">@code</span> this&#125;</span></span><br><span class="line"><span class="comment">* string. The function should expect a single String argument</span></span><br><span class="line"><span class="comment">* and produce an &#123;<span class="doctag">@code</span> R&#125; result.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 12</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;R&gt; R <span class="title function_">transform</span><span class="params">(Function&lt;? <span class="built_in">super</span> String, ? extends R&gt; f)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> f.apply(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在某种情况下，该方法应该被称为map()。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testTransform</span><span class="params">()</span> &#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;======test java 12 transform======&quot;</span>);</span><br><span class="line">	List&lt;String&gt; list1 = List.of(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot; Python&quot;</span>, <span class="string">&quot; C++ &quot;</span>);</span><br><span class="line">	List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	list1.forEach(element -&gt; list2.add(element.transform(String::strip)</span><br><span class="line">								  .transform(String::toUpperCase)</span><br><span class="line">								  .transform((e) -&gt; <span class="string">&quot;Hi,&quot;</span> + e))</span><br><span class="line">				 );</span><br><span class="line">	list2.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">======test java <span class="number">12</span> transform======</span><br><span class="line">Hi,JAVA</span><br><span class="line">Hi,PYTHON</span><br><span class="line">Hi,C++</span><br></pre></td></tr></table></figure>

<p>如果使用Java 8的Stream特性，可以如下实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testTransform1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;======test before java 12 ======&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list1 = List.of(<span class="string">&quot;Java  &quot;</span>, <span class="string">&quot; Python&quot;</span>, <span class="string">&quot; C++ &quot;</span>);</span><br><span class="line"></span><br><span class="line">        Stream&lt;String&gt; stringStream = list1.stream().map(element -&gt; element.strip()).map(String::toUpperCase).map(element -&gt; <span class="string">&quot;Hello,&quot;</span> + element);</span><br><span class="line">        List&lt;String&gt; list2 = stringStream.collect(Collectors.toList());</span><br><span class="line">        list2.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-JDK17：标记删除Applet-API"><a href="#2-3-JDK17：标记删除Applet-API" class="headerlink" title="2.3 JDK17：标记删除Applet API"></a>2.3 JDK17：标记删除Applet API</h5><p>Applet API 提供了一种将 Java AWT&#x2F;Swing 控件嵌入到浏览器网页中的方法。不过，目前 Applet 已经被淘汰。大部分人可能压根就没有用过 Applet。</p>
<p>Applet API 实际上是无用的，因为所有 Web 浏览器供应商都已删除或透露计划放弃对 Java 浏览器插件的支持。Java 9 的时候，Applet API 已经被标记为过时，Java 17 的时候终于标记为删除了。</p>
<p>具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.applet.Applet</span><br><span class="line">java.applet.AppletStub</span><br><span class="line">java.applet.AppletContext</span><br><span class="line">java.applet.AudioClip</span><br><span class="line">javax.swing.JApplet</span><br><span class="line">java.beans.AppletInitializer</span><br></pre></td></tr></table></figure>

<h4 id="3-其它结构变化"><a href="#3-其它结构变化" class="headerlink" title="3.  其它结构变化"></a>3.  其它结构变化</h4><h5 id="3-1-JDK9：UnderScore-下划线-使用的限制"><a href="#3-1-JDK9：UnderScore-下划线-使用的限制" class="headerlink" title="3.1 JDK9：UnderScore(下划线)使用的限制"></a>3.1 JDK9：UnderScore(下划线)使用的限制</h5><p>在java 8 中，标识符可以独立使用“_”来命名：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">_</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(_);</span><br></pre></td></tr></table></figure>

<p>但是，在java 9 中规定“_”不再可以单独命名标识符了，如果使用，会报错：</p>
<h5 id="3-2-JDK11：更简化的编译运行程序"><a href="#3-2-JDK11：更简化的编译运行程序" class="headerlink" title="3.2 JDK11：更简化的编译运行程序"></a>3.2 JDK11：更简化的编译运行程序</h5><p>看下面的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译</span></span><br><span class="line">javac JavaStack.java</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行</span></span><br><span class="line">java JavaStack</span><br></pre></td></tr></table></figure>

<p>我们的认知里，要运行一个 Java 源代码必须先编译，再运行。而在 Java 11 版本中，通过一个 java 命令就直接搞定了，如下所示：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">java </span><span class="keyword">JavaStack.java</span></span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>执行源文件中的第一个类，第一个类必须包含主方法。</li>
</ul>
<h5 id="3-3-GC方面新特性"><a href="#3-3-GC方面新特性" class="headerlink" title="3.3 GC方面新特性"></a>3.3 GC方面新特性</h5><p>GC是Java主要优势之一。 然而，当GC停顿太长，就会开始影响应用的响应时间。随着现代系统中内存不断增长，用户和程序员希望JVM能够以高效的方式充分利用这些内存， 并且无需长时间的GC暂停时间。</p>
<h6 id="3-3-1-G1-GC"><a href="#3-3-1-G1-GC" class="headerlink" title="3.3.1 G1 GC"></a>3.3.1 G1 GC</h6><p>JDK9以后默认的垃圾回收器是G1GC。</p>
<p><strong>JDK10 : 为G1提供并行的Full GC</strong></p>
<p>G1最大的亮点就是可以尽量的避免full gc。但毕竟是“尽量”，在有些情况下，G1就要进行full gc了，比如如果它无法足够快的回收内存的时候，它就会强制停止所有的应用线程然后清理。</p>
<p>在Java10之前，一个单线程版的标记-清除-压缩算法被用于full gc。为了尽量减少full gc带来的影响，在Java10中，就把之前的那个单线程版的标记-清除-压缩的full gc算法改成了支持多个线程同时full gc。这样也算是减少了full gc所带来的停顿，从而提高性能。</p>
<p>你可以通过<code>-XX:ParallelGCThreads</code>参数来指定用于并行GC的线程数。</p>
<p><strong>JDK12：可中断的 G1 Mixed GC</strong></p>
<p><strong>JDK12：增强G1，自动返回未用堆内存给操作系统</strong></p>
<h6 id="3-3-2-Shenandoah-GC"><a href="#3-3-2-Shenandoah-GC" class="headerlink" title="3.3.2 Shenandoah GC"></a>3.3.2 Shenandoah GC</h6><p><strong>JDK12：Shenandoah GC：低停顿时间的GC</strong></p>
<p>Shenandoah 垃圾回收器是 Red Hat 在 2014 年宣布进行的一项垃圾收集器研究项目 Pauseless GC 的实现，旨在<strong>针对 JVM 上的内存收回实现低停顿的需求</strong>。</p>
<p>据 Red Hat 研发 Shenandoah 团队对外宣称，Shenandoah 垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置为 200 MB 还是 200 GB，都将拥有一致的系统暂停时间，不过实际使用性能将取决于实际工作堆的大小和工作负载。</p>
<p>Shenandoah GC 主要目标是 99.9% 的暂停小于 10ms，暂停与堆大小无关等。</p>
<p>这是一个实验性功能，不包含在默认（Oracle）的OpenJDK版本中。</p>
<p>Shenandoah开发团队在实际应用中的测试数据：</p>
<p><strong>JDK15：Shenandoah垃圾回收算法转正</strong></p>
<p>Shenandoah垃圾回收算法终于从实验特性转变为产品特性，这是一个从 JDK 12 引入的回收算法，该算法通过与正在运行的 Java 线程同时进行疏散工作来减少 GC 暂停时间。Shenandoah 的暂停时间与堆大小无关，无论堆栈是 200 MB 还是 200 GB，都具有相同的一致暂停时间。</p>
<p>Shenandoah在JDK12被作为experimental引入，在JDK15变为Production；之前需要通过<code>-XX:+UnlockExperimentalVMOptions</code> <code>-XX:+UseShenandoahGC</code>来启用，现在只需要<code>-XX:+UseShenandoahGC</code>即可启用</p>
<h6 id="3-3-3-革命性的-ZGC"><a href="#3-3-3-革命性的-ZGC" class="headerlink" title="3.3.3 革命性的 ZGC"></a>3.3.3 革命性的 ZGC</h6><p><strong>JDK11：引入革命性的 ZGC</strong></p>
<p>ZGC，这应该是JDK11最为瞩目的特性，没有之一。</p>
<p>ZGC是一个并发、基于region、压缩型的垃圾收集器。</p>
<p>ZGC的设计目标是：支持TB级内存容量，暂停时间低（&lt;10ms），对整个程序吞吐量的影响小于15%。 将来还可以扩展实现机制，以支持不少令人兴奋的功能，例如多层堆（即热对象置于DRAM和冷对象置于NVMe闪存），或压缩堆。</p>
<p><strong>JDK13：ZGC:将未使用的堆内存归还给操作系统</strong></p>
<p><strong>JDK14：ZGC on macOS和windows</strong></p>
<ul>
<li>JDK14之前，ZGC仅Linux才支持。现在mac或Windows上也能使用ZGC了，示例如下：</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">-<span class="variable constant_">XX</span><span class="symbol">:+UnlockExperimentalVMOptions</span> -<span class="variable constant_">XX</span><span class="symbol">:+UseZGC</span></span><br></pre></td></tr></table></figure>


<ul>
<li>ZGC与Shenandoah目标高度相似，在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停顿时间限制在<code>十毫秒以内</code>的低延迟。</li>
</ul>
<p><strong>JDK15：ZGC 功能转正</strong></p>
<p>ZGC是Java 11引入的新的垃圾收集器，经过了多个实验阶段，自此终于成为正式特性。</p>
<p>但是这并不是替换默认的GC，默认的GC仍然还是G1；之前需要通过<code>-XX:+UnlockExperimentalVMOptions</code>、<code>-XX:+UseZGC</code>来启用ZGC，现在只需要<code>-XX:+UseZGC</code>就可以。相信不久的将来它必将成为默认的垃圾回收器。</p>
<blockquote>
<p>ZGC的性能已经相当亮眼，用“令人震惊、革命性”来形容，不为过。未来将成为服务端、大内存、低延迟应用的首选垃圾收集器。</p>
</blockquote>
<p>怎么形容Shenandoah和ZGC的关系呢？异同点大概如下：</p>
<ul>
<li>相同点：性能几乎可认为是相同的</li>
<li>不同点：ZGC是Oracle JDK的，根正苗红。而Shenandoah只存在于OpenJDK中，因此使用时需注意你的JDK版本</li>
</ul>
<p><strong>JDK16：ZGC 并发线程处理</strong></p>
<p>在线程的堆栈处理过程中，总有一个制约因素就是safepoints。在safepoints这个点，Java的线程是要暂停执行的，从而限制了GC的效率。</p>
<blockquote>
<p>回顾：</p>
<p>我们都知道，在之前，需要 GC 的时候，为了进行垃圾回收，需要所有的线程都暂停下来，这个暂停的时间我们称为 <strong>Stop The World</strong>。</p>
<p>而为了实现 STW 这个操作， JVM 需要为每个线程选择一个点停止运行，这个点就叫做<strong>安全点（Safepoints）</strong>。</p>
</blockquote>
<p>而ZGC的并发线程堆栈处理可以保证Java线程可以在GC safepoints的同时可以并发执行。它有助于提高所开发的Java软件应用程序的性能和效率。</p>
<h3 id="7-JDK8-17-新特性-第-18-章复习与企业真题-最后寄语"><a href="#7-JDK8-17-新特性-第-18-章复习与企业真题-最后寄语" class="headerlink" title="7.JDK8-17 新特性-第 18 章复习与企业真题_最后寄语"></a><code>7.JDK8-17 新特性-第 18 章复习与企业真题_最后寄语</code></h3><h4 id="1-小结与展望"><a href="#1-小结与展望" class="headerlink" title="1. 小结与展望"></a>1. 小结与展望</h4><p>随着云计算和 AI 等技术浪潮，当前的计算模式和场景正在发生翻天覆地的变化，不仅对 Java 的发展速度提出了更高要求，也深刻影响着 Java 技术的发展方向。<strong>传统的大型企业或互联网应用，正在被云端、容器化应用、模块化的微服务甚至是函数(FaaS， Function-as-a-Service)所替代。</strong></p>
<p><strong>Java 需要在新的计算场景下，改进开发效率。</strong>比如，Java 代码虽然进行了一些类型推断等改进，更易用的集合 API 等，但仍然给开发者留下了过于刻板、形式主义的印象，这是一个长期的改进方向。</p>
<p>Java虽然标榜面向对象编程，却毫不顾忌的加入<code>面向接口编程思想</code>，又扯出<code>匿名对象</code>的概念，每增加一个新的东西，对Java的根本（面向对象思想）的一次冲击。</p>
<blockquote>
<p>士，不可不弘毅，任重而道远。</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
  <entry>
    <title>File类与IO流</title>
    <url>/articles/1b110778.html</url>
    <content><![CDATA[<h3 id="1-File-类与-IO-流-File-类的实例化与常用方法-File"><a href="#1-File-类与-IO-流-File-类的实例化与常用方法-File" class="headerlink" title="1.File 类与 IO 流-File 类的实例化与常用方法_File"></a>1.File 类与 IO 流-File 类的实例化与常用方法_File</h3><h4 id="1-File类的理解"><a href="#1-File类的理解" class="headerlink" title="1.File类的理解"></a>1.File类的理解</h4><p>​	1.1. File类的一个对象，代表一个文件或一个文件目录(俗称：文件夹)<br>​	1.2. File类声明在java.io包下<br>​	1.3. File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、文件大小等方法，并未涉及到写入或读取文件内容的操作。<code>如果需要读取或写入文件内容，必须使用IO流来完成。</code><br>​	1.4. 后续File类的对象常会作为参数传递到流的构造器中，指明读取或写入的”终点”.</p>
<h4 id="2-File的实例化"><a href="#2-File的实例化" class="headerlink" title="2.File的实例化"></a>2.File的实例化</h4><h5 id="2-1-常用构造器"><a href="#2-1-常用构造器" class="headerlink" title="2.1 常用构造器"></a>2.1 常用构造器</h5><p>File(String filePath)<br>File(String parentPath,String childPath)<br>File(File parentFile,String childPath)</p>
<h5 id="2-2-路径的分类"><a href="#2-2-路径的分类" class="headerlink" title="2.2 路径的分类"></a>2.2 路径的分类</h5><p>相对路径：相较于某个路径下，指明的路径。<br>绝对路径：包含盘符在内的文件或文件目录的路径<br>说明：<br>IDEA中：<br><code>如果大家开发使用JUnit中的单元测试方法测试，相对路径即为当前Module下。 如果大家使用main()测试，相对路径即为当前的Project下。</code><br>Eclipse中：<br>不管使用单元测试方法还是使用main()测试，相对路径都是当前的Project下。</p>
<h5 id="2-3-路径分隔符"><a href="#2-3-路径分隔符" class="headerlink" title="2.3 路径分隔符"></a>2.3 路径分隔符</h5><p>windows和DOS系统默认使用“\”来表示<br>UNIX和URL使用“&#x2F;”来表示</p>
<h4 id="3-File类的常用方法"><a href="#3-File类的常用方法" class="headerlink" title="3.File类的常用方法"></a>3.File类的常用方法</h4><p><img src="https://blog-resources.this0.com/image/202403301626249.png?x-oss-process=style/this0-blog" alt="image.png"><br><img src="https://blog-resources.this0.com/image/202403301626301.png?x-oss-process=style/this0-blog" alt="image.png"><br><img src="https://blog-resources.this0.com/image/202403301626424.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h3 id="2-File-类与-IO-流-IO-流概述与流的分类"><a href="#2-File-类与-IO-流-IO-流概述与流的分类" class="headerlink" title="2.File 类与 IO 流-IO 流概述与流的分类"></a>2.File 类与 IO 流-IO 流概述与流的分类</h3><h4 id="1-流的分类"><a href="#1-流的分类" class="headerlink" title="1.流的分类"></a>1.流的分类</h4><p>​	1.1.操作数据单位：字节流、字符流<br>​	1.2.数据的流向：输入流、输出流<br>​	1.3.流的角色：节点流、处理流<br>图示：<br><img src="https://blog-resources.this0.com/image/202403301626187.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="2-流的体系结构"><a href="#2-流的体系结构" class="headerlink" title="2.流的体系结构"></a>2.流的体系结构</h4><p><img src="https://blog-resources.this0.com/image/202403301626266.png?x-oss-process=style/this0-blog" alt="image.png"><br>说明：红框对应的是IO流中的<code>4个抽象基类。</code><br><code>蓝框的流需要大家重点关注。</code></p>
<h4 id="3-重点说明的几个流结构"><a href="#3-重点说明的几个流结构" class="headerlink" title="3.重点说明的几个流结构"></a>3.重点说明的几个流结构</h4><p><img src="https://blog-resources.this0.com/image/202403301626261.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="4-输入、输出的标准化过程"><a href="#4-输入、输出的标准化过程" class="headerlink" title="4.输入、输出的标准化过程"></a>4.输入、输出的标准化过程</h4><h5 id="4-1-输入过程"><a href="#4-1-输入过程" class="headerlink" title="4.1 输入过程"></a>4.1 输入过程</h5><p>① 创建File类的对象，指明读取的数据的来源。（要求此文件一定要存在）<br>② 创建相应的输入流，将File类的对象作为参数，传入流的构造器中<br>③ 具体的读入过程：<br>    创建相应的byte[] 或 char[]。<br>④ 关闭流资源<br>说明：程序中出现的异常需要使用try-catch-finally处理。</p>
<h5 id="4-2-输出过程"><a href="#4-2-输出过程" class="headerlink" title="4.2 输出过程"></a>4.2 输出过程</h5><p>① 创建File类的对象，指明写出的数据的位置。（不要求此文件一定要存在）<br>② 创建相应的输出流，将File类的对象作为参数，传入流的构造器中<br>③ 具体的写出过程：<br>        write(char[]&#x2F;byte[] buffer,0,len)<br>④ 关闭流资源<br>说明：程序中出现的异常需要使用try-catch-finally处理。</p>
<p>try-with-resources 结构可以更简洁地处理资源的关闭，而且无需显式判断资源是否为 null,这章后面会讲。</p>
<h3 id="3-File-类与-IO-流-使用-FileReader-和-FileWriter-读取、写出文本数据"><a href="#3-File-类与-IO-流-使用-FileReader-和-FileWriter-读取、写出文本数据" class="headerlink" title="3.File 类与 IO 流-使用 FileReader 和 FileWriter 读取、写出文本数据"></a>3.File 类与 IO 流-使用 FileReader 和 FileWriter 读取、写出文本数据</h3><h4 id="1-FileReader-FileWriter的使用："><a href="#1-FileReader-FileWriter的使用：" class="headerlink" title="1.FileReader&#x2F;FileWriter的使用："></a>1.FileReader&#x2F;FileWriter的使用：</h4><h5 id="1-1-FileReader的使用"><a href="#1-1-FileReader的使用" class="headerlink" title="1.1 FileReader的使用"></a>1.1 FileReader的使用</h5><p>将一个文件的内容读入程序中，并输出到控制台<br>说明点：<br>①read()的理解：<code>返回读入的一个字符。如果达到文件末尾，返回-1</code><br>②异常的处理：<code>为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理</code><br>③ 读入的文件一定要存在，否则就会报FileNotFoundException。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileReader1</span><span class="params">()</span>  &#123;</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="number">1.</span>File类的实例化</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        <span class="number">2.</span>FileReader流的实例化</span><br><span class="line">            fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">        <span class="number">3.</span>读入的操作</span><br><span class="line">            read(<span class="type">char</span>[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-<span class="number">1</span></span><br><span class="line">            <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            方式一：</span><br><span class="line">                错误的写法</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; cbuf.length;i++)&#123;</span><br><span class="line">                    <span class="comment">//因为cbuf.length并不是实际长度</span></span><br><span class="line">                    System.out.print(cbuf[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            正确的写法</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">                    System.out.print(cbuf[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            方式二：</span><br><span class="line">                <span class="comment">//错误的写法,会将整个字符数组转换为字符串，导致编码错误</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(cbuf);</span><br><span class="line">            System.out.print(str);</span><br><span class="line">            正确的写法</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            System.out.print(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fr != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="number">4.</span>资源的关闭</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>④<code>使用 try-with-resources 简化资源管理</code></p>
<p>要求：实现了 <code>AutoCloseable</code> 接口</p>
<p>功能：</p>
<p>自动关闭资源</p>
<p>同时管理多个资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;example.txt&quot;</span>); <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(reader)) &#123;</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-FileWriter的使用"><a href="#1-2-FileWriter的使用" class="headerlink" title="1.2 FileWriter的使用"></a>1.2 FileWriter的使用</h5><p>从内存中写出数据到硬盘的文件里。<br>说明：<br>①输出操作，对应的File可以不存在的。并不会报异常<br>②File对应的硬盘中的文件如果不存在，<code>在输出的过程中，会自动创建此文件。</code><br>    File对应的硬盘中的文件如果存在：<br>           如果流使用的构造器是：<code>FileWriter(file,false) / FileWriter(file):对原文件的覆盖</code><br>           如果流使用的构造器是：<code>FileWriter(file,true):不会对原文件覆盖</code>，而是在原文件基础上追加内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileWriter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="number">1.</span>提供File类的对象，指明写出到的文件</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello1.txt&quot;</span>);</span><br><span class="line">        <span class="number">2.</span>提供FileWriter的对象，用于数据的写出</span><br><span class="line">            fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file,<span class="literal">false</span>);</span><br><span class="line">        <span class="number">3.</span>写出的操作</span><br><span class="line">            fw.write(<span class="string">&quot;I have a dream!\n&quot;</span>);</span><br><span class="line">        fw.write(<span class="string">&quot;you need to have a dream!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="number">4.</span>流资源的关闭</span><br><span class="line">            <span class="keyword">if</span>(fw != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-文本文件的复制："><a href="#1-3-文本文件的复制：" class="headerlink" title="1.3 文本文件的复制："></a>1.3 文本文件的复制：</h5><p><code>判断fw和fr是否为null，可以保证在资源初始化或关闭的过程中，不会因为空指针而导致程序异常</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileReaderFileWriter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="number">1.</span>创建File类的对象，指明读入和写出的文件</span><br><span class="line">            <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello2.txt&quot;</span>);</span><br><span class="line">        不能使用字符流来处理图片等字节数据</span><br><span class="line">            <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;爱情与友情1.jpg&quot;</span>);</span><br><span class="line">        <span class="number">2.</span>创建输入流和输出流的对象</span><br><span class="line">            fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(srcFile);</span><br><span class="line">        fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(destFile);</span><br><span class="line">        <span class="number">3.</span>数据的读入和写出操作</span><br><span class="line">            <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> len;<span class="comment">//记录每次读入到cbuf数组中的字符的个数</span></span><br><span class="line">        <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            每次写出len个字符</span><br><span class="line">                fw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="number">4.</span>关闭流资源,可以先关闭FileReader（fr），再关闭FileWriter（fw）</span><br><span class="line">            方式一：</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fw != <span class="literal">null</span>)</span><br><span class="line">                    fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(fr != <span class="literal">null</span>)</span><br><span class="line">                        fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        方式二：</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(fw != <span class="literal">null</span>)</span><br><span class="line">                    fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fr != <span class="literal">null</span>)</span><br><span class="line">                fr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-File-类与-IO-流-FileInputStream-和-FileOutputStream-的使用"><a href="#4-File-类与-IO-流-FileInputStream-和-FileOutputStream-的使用" class="headerlink" title="4.File 类与 IO 流-FileInputStream 和 FileOutputStream 的使用"></a>4.File 类与 IO 流-FileInputStream 和 FileOutputStream 的使用</h3><h4 id="FileInputStream-FileOutputStream的使用："><a href="#FileInputStream-FileOutputStream的使用：" class="headerlink" title="FileInputStream &#x2F; FileOutputStream的使用："></a>FileInputStream &#x2F; FileOutputStream的使用：</h4><p>1 对于文本文件(.txt,.java,.c,.cpp)，使用字符流处理<br>​2 对于非文本文件(.jpg,.mp3,.mp4,.avi,.doc,.ppt,…)，使用字节流处理<code>（字节流可以处理一切文件）</code><br>实现对图片的复制操作，与上一段代码高度相似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileInputOutputStream</span><span class="params">()</span>  &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="number">1.</span>造文件</span><br><span class="line">            <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;爱情与友情.jpg&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;爱情与友情2.jpg&quot;</span>);</span><br><span class="line">        <span class="number">2.</span>造流</span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">        fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile);</span><br><span class="line">        <span class="number">3.</span>复制的过程</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fos != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="number">4.</span>关闭流</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fis != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-File-类与-IO-流-处理流之-1：缓冲流的使用"><a href="#5-File-类与-IO-流-处理流之-1：缓冲流的使用" class="headerlink" title="5.File 类与 IO 流-处理流之 1：缓冲流的使用"></a>5.File 类与 IO 流-处理流之 1：缓冲流的使用</h3><h4 id="1-缓冲流涉及到的类："><a href="#1-缓冲流涉及到的类：" class="headerlink" title="1.缓冲流涉及到的类："></a>1.缓冲流涉及到的类：</h4><p>BufferedInputStream<br>BufferedOutputStream<br>BufferedReader	<br>BufferedWriter</p>
<h4 id="2-作用："><a href="#2-作用：" class="headerlink" title="2.作用："></a>2.作用：</h4><p>作用：提高流的读取、写入的速度<br>提高读写速度的原因：内部提供了一个缓冲区。<code>默认情况下是8kb</code><br><img src="https://blog-resources.this0.com/image/202403301626425.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="3-典型代码"><a href="#3-典型代码" class="headerlink" title="3.典型代码"></a>3.典型代码</h4><p>3.1 使用BufferedInputStream和BufferedOutputStream:处理非文本文件<br>实现文件复制的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyFileWithBuffered</span><span class="params">(String srcPath,String destPath)</span>&#123;</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="number">1.</span>造文件</span><br><span class="line">            <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(srcPath);</span><br><span class="line">        <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destPath);</span><br><span class="line">        <span class="number">2.</span>造流</span><br><span class="line">            <span class="number">2.1</span> 造节点流</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>((srcFile));</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile);</span><br><span class="line">        <span class="number">2.2</span> 造缓冲流</span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">        bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line">        <span class="number">3.</span>复制的细节：读取、写入</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = bis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="number">4.</span>资源关闭</span><br><span class="line">            说明<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(bos != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(bis != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        说明<span class="number">2</span></span><br><span class="line">            fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>资源关闭的说明</p>
<p><code>说明1：先关闭外层的流，再关闭内层的流</code></p>
<p><code>说明2：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</code></p>
<p>3.2 使用BufferedReader和BufferedWriter：处理文本文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBufferedReaderBufferedWriter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        创建文件和相应的流</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;dbcp.txt&quot;</span>)));</span><br><span class="line">        bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;dbcp1.txt&quot;</span>)));</span><br><span class="line">        读写操作</span><br><span class="line">            方式一：使用<span class="type">char</span>[]数组</span><br><span class="line">            <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = br.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            bw.flush();</span><br><span class="line">            <span class="comment">//flush()方法的作用是强制将缓冲区中的数据写入输出流中，但不关闭输出流。</span></span><br><span class="line">        &#125;</span><br><span class="line">        方式二：使用String</span><br><span class="line">            String data;</span><br><span class="line">        <span class="comment">//readLine() 方法是用于从输入流中读取一行文本的方法。</span></span><br><span class="line">        <span class="keyword">while</span>((data = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">            方法一：</span><br><span class="line">                bw.write(data + <span class="string">&quot;\n&quot;</span>);<span class="comment">//data中不包含换行符</span></span><br><span class="line">            方法二：</span><br><span class="line">                bw.write(data);<span class="comment">//data中不包含换行符</span></span><br><span class="line">            bw.newLine();<span class="comment">//提供换行的操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        关闭资源</span><br><span class="line">            <span class="keyword">if</span>(bw != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(br != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-File-类与-IO-流-处理流之-2：转换流的使用及各种字符集的讲解"><a href="#6-File-类与-IO-流-处理流之-2：转换流的使用及各种字符集的讲解" class="headerlink" title="6.File 类与 IO 流-处理流之 2：转换流的使用及各种字符集的讲解"></a>6.File 类与 IO 流-处理流之 2：转换流的使用及各种字符集的讲解</h3><h4 id="1-转换流涉及到的类：属于字符流"><a href="#1-转换流涉及到的类：属于字符流" class="headerlink" title="1.转换流涉及到的类：属于字符流"></a><code>1.转换流涉及到的类：属于字符流</code></h4><p><code>InputStreamReader：将一个字节的输入流转换为字符的输入流</code><br>解码：字节、字节数组  —&gt;字符数组、字符串<br><code>OutputStreamWriter：将一个字符的输出流转换为字节的输出流</code><br>编码：字符数组、字符串 —&gt; 字节、字节数组<br>说明：编码决定了解码的方式</p>
<h4 id="2-作用：提供字节流与字符流之间的转换"><a href="#2-作用：提供字节流与字符流之间的转换" class="headerlink" title="2.作用：提供字节流与字符流之间的转换"></a>2.作用：提供字节流与字符流之间的转换</h4><h4 id="3-图示："><a href="#3-图示：" class="headerlink" title="3.图示："></a>3.图示：</h4><p><img src="https://blog-resources.this0.com/image/202403301626639.png?x-oss-process=style/this0-blog" alt="image.png"></p>
<h4 id="4-典型实现："><a href="#4-典型实现：" class="headerlink" title="4.典型实现："></a>4.典型实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis);<span class="comment">//使用系统默认的字符集</span></span><br><span class="line">    参数<span class="number">2</span>指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis,<span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//使用系统默认的字符集</span></span><br><span class="line">    <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        System.out.print(str);</span><br><span class="line">    &#125;</span><br><span class="line">    isr.close();</span><br><span class="line">&#125;![](https:<span class="comment">//blog-resources.this0.com/image/202403301626424.png?x-oss-process=style/this0-blog)</span></span><br></pre></td></tr></table></figure>

<p>此时处理异常的话，仍然应该使用try-catch-finally<br>综合使用InputStreamReader和OutputStreamWriter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="number">1</span>）造文件、造流</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;dbcp.txt&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;dbcp_gbk.txt&quot;</span>);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file1);</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file2);</span><br><span class="line">    <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fis,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fos,<span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">    <span class="number">2</span>）读写过程</span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">3.</span>关闭资源</span><br><span class="line">        isr.close();</span><br><span class="line">    osw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-说明："><a href="#5-说明：" class="headerlink" title="5.说明："></a>5.说明：</h4><p>文件编码的方式（比如：GBK），决定了解析时使用的字符集（也只能是GBK）。</p>
<h5 id="5-1-常见的编码表"><a href="#5-1-常见的编码表" class="headerlink" title="5.1.常见的编码表"></a>5.1.常见的编码表</h5><p>ASCII：美国标准信息交换码。<br>用<code>一个字节</code>的7位可以表示。<br>ISO8859-1：拉丁码表。欧洲码表<br>用一个字节的8位表示。<br>GB2312：中国的中文编码表。最多两个字节编码所有字符<br>GBK：中国的中文编码表升级，融合了更多的中文文字符号。<code>最多两个字节</code>编码<br>Unicode：国际标准码，融合了目前人类使用的所字符。为每个字符分配唯一的字符码。所有的文字都用<code>两个字节</code>来表示。<br>UTF-8：变长的编码方式，可用<code>1-4个字节</code>来表示一个字符。</p>
<h5 id="5-2-对后面学习的启示"><a href="#5-2-对后面学习的启示" class="headerlink" title="5.2.对后面学习的启示"></a>5.2.对后面学习的启示</h5><p>客户端&#x2F;浏览器端    &lt;—-&gt;  后台(java,GO,Python,Node.js,php)   &lt;—-&gt; 数据库<br>要求前前后后使用的字符集都要统一：UTF-8.</p>
<h3 id="7-File-类与-IO-流-处理流之-3：对象流的使用及对象的序列化机制"><a href="#7-File-类与-IO-流-处理流之-3：对象流的使用及对象的序列化机制" class="headerlink" title="7.File 类与 IO 流-处理流之 3：对象流的使用及对象的序列化机制"></a>7.File 类与 IO 流-处理流之 3：对象流的使用及对象的序列化机制</h3><h4 id="1-对象流："><a href="#1-对象流：" class="headerlink" title="1.对象流："></a>1.对象流：</h4><p>ObjectInputStream 和 ObjectOutputStream</p>
<h4 id="2-作用：-1"><a href="#2-作用：-1" class="headerlink" title="2.作用："></a>2.作用：</h4><p><code>ObjectOutputStream:内存中的对象---&gt;存储中的文件、通过网络传输出去：序列化过程</code><br><code>ObjectInputStream:存储中的文件、通过网络接收过来 ---&gt;内存中的对象：反序列化过程</code></p>
<h4 id="3-对象的序列化机制："><a href="#3-对象的序列化机制：" class="headerlink" title="3.对象的序列化机制："></a>3.对象的序列化机制：</h4><p>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。&#x2F;&#x2F;当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</p>
<h4 id="4-序列化代码实现："><a href="#4-序列化代码实现：" class="headerlink" title="4.序列化代码实现："></a>4.序列化代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testObjectOutputStream</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;我爱北京天安门&quot;</span>));</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;王铭&quot;</span>,<span class="number">23</span>));</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张学良&quot;</span>,<span class="number">23</span>,<span class="number">1001</span>,<span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">5000</span>)));</span><br><span class="line">        oos.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(oos != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                oos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-反序列化代码实现："><a href="#5-反序列化代码实现：" class="headerlink" title="5.反序列化代码实现："></a>5.反序列化代码实现：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testObjectInputStream</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) obj;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) ois.readObject();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> (Person) ois.readObject();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        <span class="comment">//如果有2个对象，输出结果就不一定一样，因为ois.readObject()方法每次都会读取一个对象</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ois != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ois.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-实现序列化的对象所属的类需要满足："><a href="#6-实现序列化的对象所属的类需要满足：" class="headerlink" title="6.实现序列化的对象所属的类需要满足："></a>6.实现序列化的对象所属的类需要满足：</h4><p>6.1.需要实现接口：Serializable<br>6.2.当前类提供一个全局常量：serialVersionUID<br>6.3.除了当前Person类需要实现Serializable接口之外，还必须保证其内部所有属性也必须是可序列化的。（默认情况下，基本数据类型可序列化）<br><code>补充：ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</code></p>
<h3 id="8-File-类与-IO-流-其它流的使用"><a href="#8-File-类与-IO-流-其它流的使用" class="headerlink" title="8.File 类与 IO 流-其它流的使用"></a>8.File 类与 IO 流-其它流的使用</h3><h4 id="1-标准的输入输出流："><a href="#1-标准的输入输出流：" class="headerlink" title="1.标准的输入输出流："></a>1.标准的输入输出流：</h4><p>  System.in:标准的输入流，默认从键盘输入<br>  System.out:标准的输出流，默认从控制台输出<br>  修改默认的输入和输出行为：<br>  System类的setIn(InputStream is) &#x2F; setOut(PrintStream ps)方式重新指定输入和输出的流。</p>
<h4 id="2-打印流："><a href="#2-打印流：" class="headerlink" title="2.打印流："></a>2.打印流：</h4><p>PrintStream 和PrintWriter<br>  说明：<br>  提供了一系列重载的print()和println()方法，用于多种数据类型的输出<br>  System.out返回的是PrintStream的实例</p>
<h4 id="3-数据流："><a href="#3-数据流：" class="headerlink" title="3.数据流："></a>3.<code>数据流：</code></h4><p><code>DataInputStream 和 DataOutputStream</code><br>  作用：<br>  <code>用于读取或写出基本数据类型的变量或字符串</code><br>  示例代码：<br>  练习：将内存中的字符串、基本数据类型的变量写出到文件中。<br>  注意：处理异常的话，仍然应该使用try-catch-finally.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line">    dos.writeUTF(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    dos.flush();</span><br><span class="line">    dos.writeInt(<span class="number">23</span>);</span><br><span class="line">    dos.flush();</span><br><span class="line">    dos.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">    dos.flush();</span><br><span class="line">    dos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。<br>  注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> dis.readInt();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isMale</span> <span class="operator">=</span> dis.readBoolean();</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br><span class="line">    System.out.println(<span class="string">&quot;isMale = &quot;</span> + isMale);</span><br><span class="line">        dis.close();![](https:<span class="comment">//blog-resources.this0.com/image/202403301626266.png?x-oss-process=style/this0-blog)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-随机存取文件流：RandomAccessFile"><a href="#4-随机存取文件流：RandomAccessFile" class="headerlink" title="4.随机存取文件流：RandomAccessFile"></a><code>4.随机存取文件流：RandomAccessFile</code></h4><h5 id="4-1使用说明："><a href="#4-1使用说明：" class="headerlink" title="4.1使用说明："></a>4.1使用说明：</h5><p>​             4.1.1.RandomAccessFile直接继承于java.lang.Object类，实现了DataInput和DataOutput接口<br>​             4.1.2.RandomAccessFile既可以作为一个输入流，又可以作为一个输出流<br>​             4.1.3.如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。如果写出到的文件存在，则会对原文件内容进行覆盖。（默认情况下，从头覆盖）<br>​             4.1.4. <code>可以通过相关的操作，实现RandomAccessFile“插入”数据的效果。seek(int pos)</code></p>
<h4 id="5-访问模式"><a href="#5-访问模式" class="headerlink" title="5.访问模式"></a>5.访问模式</h4><p>访问模式有四种：”r”、”rw”、”rws” 和 “rwd”。</p>
<ol>
<li>“r” 表示只读（read-only）模式，即你只能从文件中读取数据，不能向文件中写入或修改数据。</li>
<li>“rw” 表示读写（read-write）模式，即你可以对文件进行读取和写入操作。这是你在代码中使用的模式，允许读取和写入文件。</li>
<li>“rws” 表示读取、写入和同步文件内容的模式。当你写入数据时，同时也会同步更新文件的元数据（metadata）。</li>
<li>“rwd” 表示读取、写入和同步文件内容以及文件的元数据。</li>
</ol>
<p>  典型代码1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">raf1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">raf2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        raf1 = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;爱情与友情.jpg&quot;</span>),<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        raf2 = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;爱情与友情1.jpg&quot;</span>),<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = raf1.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            raf2.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(raf1 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                raf1.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(raf2 != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                raf2.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>典型代码2：<br>  使用RandomAccessFile实现数据的插入效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">raf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    raf1.seek(<span class="number">3</span>);<span class="comment">//将指针调到角标为3的位置</span></span><br><span class="line">    保存指针第<span class="number">3</span>个字节后面的所有数据到StringBuilder中</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>((<span class="type">int</span>) <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>).length());</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = raf1.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        builder.append(<span class="keyword">new</span> <span class="title class_">String</span>(buffer,<span class="number">0</span>,len)) ;</span><br><span class="line">    &#125;</span><br><span class="line">    调回指针，写入“xyz”</span><br><span class="line">        raf1.seek(<span class="number">3</span>);</span><br><span class="line">    raf1.write(<span class="string">&quot;xyz&quot;</span>.getBytes());</span><br><span class="line">    将StringBuilder中的数据写入到文件中</span><br><span class="line">        raf1.write(builder.toString().getBytes());</span><br><span class="line">    raf1.close();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>JavaSE</tag>
      </tags>
  </entry>
</search>
